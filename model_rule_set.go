/*
Delphix DCT API

Delphix DCT API

API version: 3.17.0
Contact: support@delphix.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package delphix_dct_api

import (
	"encoding/json"
)

// checks if the RuleSet type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RuleSet{}

// RuleSet A masking rule set.
type RuleSet struct {
	// The rule set ID.
	Id *string `json:"id,omitempty"`
	// The name of this rule set.
	Name *string `json:"name,omitempty"`
	Type *ConnectorTypeEnum `json:"type,omitempty"`
	// The rule set connector platform.
	Platform NullableString `json:"platform,omitempty"`
	// The ID of the connector this rule set uses.
	ConnectorId NullableString `json:"connector_id,omitempty"`
	// The name of the connector this rule set uses.
	ConnectorName NullableString `json:"connector_name,omitempty"`
	// The ID of the engine this rule set originated from.
	EngineId NullableString `json:"engine_id,omitempty"`
	// The name of the engine this rule set originated from.
	EngineName NullableString `json:"engine_name,omitempty"`
	// The total number of data elements in this rule set.
	DataElementsTotal NullableInt32 `json:"data_elements_total,omitempty"`
	// The number of sensitive data elements in this rule set.
	DataElementsSensitive NullableInt32 `json:"data_elements_sensitive,omitempty"`
	// The total number of records in this rule set.
	RecordsTotal NullableInt32 `json:"records_total,omitempty"`
	// The number of sensitive records in this rule set.
	RecordsSensitive NullableInt32 `json:"records_sensitive,omitempty"`
	// The tags of this rule set.
	Tags []Tag `json:"tags,omitempty"`
}

// NewRuleSet instantiates a new RuleSet object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRuleSet() *RuleSet {
	this := RuleSet{}
	return &this
}

// NewRuleSetWithDefaults instantiates a new RuleSet object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRuleSetWithDefaults() *RuleSet {
	this := RuleSet{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *RuleSet) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RuleSet) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *RuleSet) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *RuleSet) SetId(v string) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *RuleSet) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RuleSet) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *RuleSet) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *RuleSet) SetName(v string) {
	o.Name = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *RuleSet) GetType() ConnectorTypeEnum {
	if o == nil || IsNil(o.Type) {
		var ret ConnectorTypeEnum
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RuleSet) GetTypeOk() (*ConnectorTypeEnum, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *RuleSet) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given ConnectorTypeEnum and assigns it to the Type field.
func (o *RuleSet) SetType(v ConnectorTypeEnum) {
	o.Type = &v
}

// GetPlatform returns the Platform field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RuleSet) GetPlatform() string {
	if o == nil || IsNil(o.Platform.Get()) {
		var ret string
		return ret
	}
	return *o.Platform.Get()
}

// GetPlatformOk returns a tuple with the Platform field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RuleSet) GetPlatformOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Platform.Get(), o.Platform.IsSet()
}

// HasPlatform returns a boolean if a field has been set.
func (o *RuleSet) HasPlatform() bool {
	if o != nil && o.Platform.IsSet() {
		return true
	}

	return false
}

// SetPlatform gets a reference to the given NullableString and assigns it to the Platform field.
func (o *RuleSet) SetPlatform(v string) {
	o.Platform.Set(&v)
}
// SetPlatformNil sets the value for Platform to be an explicit nil
func (o *RuleSet) SetPlatformNil() {
	o.Platform.Set(nil)
}

// UnsetPlatform ensures that no value is present for Platform, not even an explicit nil
func (o *RuleSet) UnsetPlatform() {
	o.Platform.Unset()
}

// GetConnectorId returns the ConnectorId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RuleSet) GetConnectorId() string {
	if o == nil || IsNil(o.ConnectorId.Get()) {
		var ret string
		return ret
	}
	return *o.ConnectorId.Get()
}

// GetConnectorIdOk returns a tuple with the ConnectorId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RuleSet) GetConnectorIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ConnectorId.Get(), o.ConnectorId.IsSet()
}

// HasConnectorId returns a boolean if a field has been set.
func (o *RuleSet) HasConnectorId() bool {
	if o != nil && o.ConnectorId.IsSet() {
		return true
	}

	return false
}

// SetConnectorId gets a reference to the given NullableString and assigns it to the ConnectorId field.
func (o *RuleSet) SetConnectorId(v string) {
	o.ConnectorId.Set(&v)
}
// SetConnectorIdNil sets the value for ConnectorId to be an explicit nil
func (o *RuleSet) SetConnectorIdNil() {
	o.ConnectorId.Set(nil)
}

// UnsetConnectorId ensures that no value is present for ConnectorId, not even an explicit nil
func (o *RuleSet) UnsetConnectorId() {
	o.ConnectorId.Unset()
}

// GetConnectorName returns the ConnectorName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RuleSet) GetConnectorName() string {
	if o == nil || IsNil(o.ConnectorName.Get()) {
		var ret string
		return ret
	}
	return *o.ConnectorName.Get()
}

// GetConnectorNameOk returns a tuple with the ConnectorName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RuleSet) GetConnectorNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ConnectorName.Get(), o.ConnectorName.IsSet()
}

// HasConnectorName returns a boolean if a field has been set.
func (o *RuleSet) HasConnectorName() bool {
	if o != nil && o.ConnectorName.IsSet() {
		return true
	}

	return false
}

// SetConnectorName gets a reference to the given NullableString and assigns it to the ConnectorName field.
func (o *RuleSet) SetConnectorName(v string) {
	o.ConnectorName.Set(&v)
}
// SetConnectorNameNil sets the value for ConnectorName to be an explicit nil
func (o *RuleSet) SetConnectorNameNil() {
	o.ConnectorName.Set(nil)
}

// UnsetConnectorName ensures that no value is present for ConnectorName, not even an explicit nil
func (o *RuleSet) UnsetConnectorName() {
	o.ConnectorName.Unset()
}

// GetEngineId returns the EngineId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RuleSet) GetEngineId() string {
	if o == nil || IsNil(o.EngineId.Get()) {
		var ret string
		return ret
	}
	return *o.EngineId.Get()
}

// GetEngineIdOk returns a tuple with the EngineId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RuleSet) GetEngineIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.EngineId.Get(), o.EngineId.IsSet()
}

// HasEngineId returns a boolean if a field has been set.
func (o *RuleSet) HasEngineId() bool {
	if o != nil && o.EngineId.IsSet() {
		return true
	}

	return false
}

// SetEngineId gets a reference to the given NullableString and assigns it to the EngineId field.
func (o *RuleSet) SetEngineId(v string) {
	o.EngineId.Set(&v)
}
// SetEngineIdNil sets the value for EngineId to be an explicit nil
func (o *RuleSet) SetEngineIdNil() {
	o.EngineId.Set(nil)
}

// UnsetEngineId ensures that no value is present for EngineId, not even an explicit nil
func (o *RuleSet) UnsetEngineId() {
	o.EngineId.Unset()
}

// GetEngineName returns the EngineName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RuleSet) GetEngineName() string {
	if o == nil || IsNil(o.EngineName.Get()) {
		var ret string
		return ret
	}
	return *o.EngineName.Get()
}

// GetEngineNameOk returns a tuple with the EngineName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RuleSet) GetEngineNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.EngineName.Get(), o.EngineName.IsSet()
}

// HasEngineName returns a boolean if a field has been set.
func (o *RuleSet) HasEngineName() bool {
	if o != nil && o.EngineName.IsSet() {
		return true
	}

	return false
}

// SetEngineName gets a reference to the given NullableString and assigns it to the EngineName field.
func (o *RuleSet) SetEngineName(v string) {
	o.EngineName.Set(&v)
}
// SetEngineNameNil sets the value for EngineName to be an explicit nil
func (o *RuleSet) SetEngineNameNil() {
	o.EngineName.Set(nil)
}

// UnsetEngineName ensures that no value is present for EngineName, not even an explicit nil
func (o *RuleSet) UnsetEngineName() {
	o.EngineName.Unset()
}

// GetDataElementsTotal returns the DataElementsTotal field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RuleSet) GetDataElementsTotal() int32 {
	if o == nil || IsNil(o.DataElementsTotal.Get()) {
		var ret int32
		return ret
	}
	return *o.DataElementsTotal.Get()
}

// GetDataElementsTotalOk returns a tuple with the DataElementsTotal field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RuleSet) GetDataElementsTotalOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.DataElementsTotal.Get(), o.DataElementsTotal.IsSet()
}

// HasDataElementsTotal returns a boolean if a field has been set.
func (o *RuleSet) HasDataElementsTotal() bool {
	if o != nil && o.DataElementsTotal.IsSet() {
		return true
	}

	return false
}

// SetDataElementsTotal gets a reference to the given NullableInt32 and assigns it to the DataElementsTotal field.
func (o *RuleSet) SetDataElementsTotal(v int32) {
	o.DataElementsTotal.Set(&v)
}
// SetDataElementsTotalNil sets the value for DataElementsTotal to be an explicit nil
func (o *RuleSet) SetDataElementsTotalNil() {
	o.DataElementsTotal.Set(nil)
}

// UnsetDataElementsTotal ensures that no value is present for DataElementsTotal, not even an explicit nil
func (o *RuleSet) UnsetDataElementsTotal() {
	o.DataElementsTotal.Unset()
}

// GetDataElementsSensitive returns the DataElementsSensitive field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RuleSet) GetDataElementsSensitive() int32 {
	if o == nil || IsNil(o.DataElementsSensitive.Get()) {
		var ret int32
		return ret
	}
	return *o.DataElementsSensitive.Get()
}

// GetDataElementsSensitiveOk returns a tuple with the DataElementsSensitive field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RuleSet) GetDataElementsSensitiveOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.DataElementsSensitive.Get(), o.DataElementsSensitive.IsSet()
}

// HasDataElementsSensitive returns a boolean if a field has been set.
func (o *RuleSet) HasDataElementsSensitive() bool {
	if o != nil && o.DataElementsSensitive.IsSet() {
		return true
	}

	return false
}

// SetDataElementsSensitive gets a reference to the given NullableInt32 and assigns it to the DataElementsSensitive field.
func (o *RuleSet) SetDataElementsSensitive(v int32) {
	o.DataElementsSensitive.Set(&v)
}
// SetDataElementsSensitiveNil sets the value for DataElementsSensitive to be an explicit nil
func (o *RuleSet) SetDataElementsSensitiveNil() {
	o.DataElementsSensitive.Set(nil)
}

// UnsetDataElementsSensitive ensures that no value is present for DataElementsSensitive, not even an explicit nil
func (o *RuleSet) UnsetDataElementsSensitive() {
	o.DataElementsSensitive.Unset()
}

// GetRecordsTotal returns the RecordsTotal field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RuleSet) GetRecordsTotal() int32 {
	if o == nil || IsNil(o.RecordsTotal.Get()) {
		var ret int32
		return ret
	}
	return *o.RecordsTotal.Get()
}

// GetRecordsTotalOk returns a tuple with the RecordsTotal field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RuleSet) GetRecordsTotalOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.RecordsTotal.Get(), o.RecordsTotal.IsSet()
}

// HasRecordsTotal returns a boolean if a field has been set.
func (o *RuleSet) HasRecordsTotal() bool {
	if o != nil && o.RecordsTotal.IsSet() {
		return true
	}

	return false
}

// SetRecordsTotal gets a reference to the given NullableInt32 and assigns it to the RecordsTotal field.
func (o *RuleSet) SetRecordsTotal(v int32) {
	o.RecordsTotal.Set(&v)
}
// SetRecordsTotalNil sets the value for RecordsTotal to be an explicit nil
func (o *RuleSet) SetRecordsTotalNil() {
	o.RecordsTotal.Set(nil)
}

// UnsetRecordsTotal ensures that no value is present for RecordsTotal, not even an explicit nil
func (o *RuleSet) UnsetRecordsTotal() {
	o.RecordsTotal.Unset()
}

// GetRecordsSensitive returns the RecordsSensitive field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RuleSet) GetRecordsSensitive() int32 {
	if o == nil || IsNil(o.RecordsSensitive.Get()) {
		var ret int32
		return ret
	}
	return *o.RecordsSensitive.Get()
}

// GetRecordsSensitiveOk returns a tuple with the RecordsSensitive field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RuleSet) GetRecordsSensitiveOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.RecordsSensitive.Get(), o.RecordsSensitive.IsSet()
}

// HasRecordsSensitive returns a boolean if a field has been set.
func (o *RuleSet) HasRecordsSensitive() bool {
	if o != nil && o.RecordsSensitive.IsSet() {
		return true
	}

	return false
}

// SetRecordsSensitive gets a reference to the given NullableInt32 and assigns it to the RecordsSensitive field.
func (o *RuleSet) SetRecordsSensitive(v int32) {
	o.RecordsSensitive.Set(&v)
}
// SetRecordsSensitiveNil sets the value for RecordsSensitive to be an explicit nil
func (o *RuleSet) SetRecordsSensitiveNil() {
	o.RecordsSensitive.Set(nil)
}

// UnsetRecordsSensitive ensures that no value is present for RecordsSensitive, not even an explicit nil
func (o *RuleSet) UnsetRecordsSensitive() {
	o.RecordsSensitive.Unset()
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *RuleSet) GetTags() []Tag {
	if o == nil || IsNil(o.Tags) {
		var ret []Tag
		return ret
	}
	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RuleSet) GetTagsOk() ([]Tag, bool) {
	if o == nil || IsNil(o.Tags) {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *RuleSet) HasTags() bool {
	if o != nil && !IsNil(o.Tags) {
		return true
	}

	return false
}

// SetTags gets a reference to the given []Tag and assigns it to the Tags field.
func (o *RuleSet) SetTags(v []Tag) {
	o.Tags = v
}

func (o RuleSet) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RuleSet) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if o.Platform.IsSet() {
		toSerialize["platform"] = o.Platform.Get()
	}
	if o.ConnectorId.IsSet() {
		toSerialize["connector_id"] = o.ConnectorId.Get()
	}
	if o.ConnectorName.IsSet() {
		toSerialize["connector_name"] = o.ConnectorName.Get()
	}
	if o.EngineId.IsSet() {
		toSerialize["engine_id"] = o.EngineId.Get()
	}
	if o.EngineName.IsSet() {
		toSerialize["engine_name"] = o.EngineName.Get()
	}
	if o.DataElementsTotal.IsSet() {
		toSerialize["data_elements_total"] = o.DataElementsTotal.Get()
	}
	if o.DataElementsSensitive.IsSet() {
		toSerialize["data_elements_sensitive"] = o.DataElementsSensitive.Get()
	}
	if o.RecordsTotal.IsSet() {
		toSerialize["records_total"] = o.RecordsTotal.Get()
	}
	if o.RecordsSensitive.IsSet() {
		toSerialize["records_sensitive"] = o.RecordsSensitive.Get()
	}
	if !IsNil(o.Tags) {
		toSerialize["tags"] = o.Tags
	}
	return toSerialize, nil
}

type NullableRuleSet struct {
	value *RuleSet
	isSet bool
}

func (v NullableRuleSet) Get() *RuleSet {
	return v.value
}

func (v *NullableRuleSet) Set(val *RuleSet) {
	v.value = val
	v.isSet = true
}

func (v NullableRuleSet) IsSet() bool {
	return v.isSet
}

func (v *NullableRuleSet) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRuleSet(val *RuleSet) *NullableRuleSet {
	return &NullableRuleSet{value: val, isSet: true}
}

func (v NullableRuleSet) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRuleSet) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


