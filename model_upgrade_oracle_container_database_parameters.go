/*
Delphix DCT API

Delphix DCT API

API version: 3.18.0
Contact: support@delphix.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package delphix_dct_api

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the UpgradeOracleContainerDatabaseParameters type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpgradeOracleContainerDatabaseParameters{}

// UpgradeOracleContainerDatabaseParameters Parameters to upgrade CDB/vCDB.
type UpgradeOracleContainerDatabaseParameters struct {
	// The id of the CDB/vCDB repository to upgrade to.
	RepositoryId string `json:"repository_id"`
	// Reference of the environment user to use for CDB/vCDB upgrade.
	EnvironmentUserId string `json:"environment_user_id"`
}

type _UpgradeOracleContainerDatabaseParameters UpgradeOracleContainerDatabaseParameters

// NewUpgradeOracleContainerDatabaseParameters instantiates a new UpgradeOracleContainerDatabaseParameters object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpgradeOracleContainerDatabaseParameters(repositoryId string, environmentUserId string) *UpgradeOracleContainerDatabaseParameters {
	this := UpgradeOracleContainerDatabaseParameters{}
	this.RepositoryId = repositoryId
	this.EnvironmentUserId = environmentUserId
	return &this
}

// NewUpgradeOracleContainerDatabaseParametersWithDefaults instantiates a new UpgradeOracleContainerDatabaseParameters object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpgradeOracleContainerDatabaseParametersWithDefaults() *UpgradeOracleContainerDatabaseParameters {
	this := UpgradeOracleContainerDatabaseParameters{}
	return &this
}

// GetRepositoryId returns the RepositoryId field value
func (o *UpgradeOracleContainerDatabaseParameters) GetRepositoryId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RepositoryId
}

// GetRepositoryIdOk returns a tuple with the RepositoryId field value
// and a boolean to check if the value has been set.
func (o *UpgradeOracleContainerDatabaseParameters) GetRepositoryIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RepositoryId, true
}

// SetRepositoryId sets field value
func (o *UpgradeOracleContainerDatabaseParameters) SetRepositoryId(v string) {
	o.RepositoryId = v
}

// GetEnvironmentUserId returns the EnvironmentUserId field value
func (o *UpgradeOracleContainerDatabaseParameters) GetEnvironmentUserId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EnvironmentUserId
}

// GetEnvironmentUserIdOk returns a tuple with the EnvironmentUserId field value
// and a boolean to check if the value has been set.
func (o *UpgradeOracleContainerDatabaseParameters) GetEnvironmentUserIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EnvironmentUserId, true
}

// SetEnvironmentUserId sets field value
func (o *UpgradeOracleContainerDatabaseParameters) SetEnvironmentUserId(v string) {
	o.EnvironmentUserId = v
}

func (o UpgradeOracleContainerDatabaseParameters) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpgradeOracleContainerDatabaseParameters) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["repository_id"] = o.RepositoryId
	toSerialize["environment_user_id"] = o.EnvironmentUserId
	return toSerialize, nil
}

func (o *UpgradeOracleContainerDatabaseParameters) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"repository_id",
		"environment_user_id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUpgradeOracleContainerDatabaseParameters := _UpgradeOracleContainerDatabaseParameters{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varUpgradeOracleContainerDatabaseParameters)

	if err != nil {
		return err
	}

	*o = UpgradeOracleContainerDatabaseParameters(varUpgradeOracleContainerDatabaseParameters)

	return err
}

type NullableUpgradeOracleContainerDatabaseParameters struct {
	value *UpgradeOracleContainerDatabaseParameters
	isSet bool
}

func (v NullableUpgradeOracleContainerDatabaseParameters) Get() *UpgradeOracleContainerDatabaseParameters {
	return v.value
}

func (v *NullableUpgradeOracleContainerDatabaseParameters) Set(val *UpgradeOracleContainerDatabaseParameters) {
	v.value = val
	v.isSet = true
}

func (v NullableUpgradeOracleContainerDatabaseParameters) IsSet() bool {
	return v.isSet
}

func (v *NullableUpgradeOracleContainerDatabaseParameters) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpgradeOracleContainerDatabaseParameters(val *UpgradeOracleContainerDatabaseParameters) *NullableUpgradeOracleContainerDatabaseParameters {
	return &NullableUpgradeOracleContainerDatabaseParameters{value: val, isSet: true}
}

func (v NullableUpgradeOracleContainerDatabaseParameters) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpgradeOracleContainerDatabaseParameters) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


