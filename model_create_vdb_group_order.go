/*
Delphix DCT API

Delphix DCT API

API version: 3.17.0
Contact: support@delphix.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package delphix_dct_api

import (
	"encoding/json"
)

// checks if the CreateVDBGroupOrder type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateVDBGroupOrder{}

// CreateVDBGroupOrder struct for CreateVDBGroupOrder
type CreateVDBGroupOrder struct {
	// Vdb id
	VdbId *string `json:"vdb_id,omitempty"`
	// Dictates order of operations on VDBs. Operations can be performed in parallel <br> for all VDBs or sequentially. Below are possible valid and invalid orderings given an example <br> VDB group with 3 vdbs (A, B, and C).<br> Valid:<br> {\"vdb_id\":\"vdb-1\", \"order\":\"1\"} {\"vdb_id\":\"vdb-2\", order:\"1\"} {vdb_id:\"vdb-3\", order:\"1\"} (parallel)<br> {vdb_id:\"vdb-1\", order:\"1\"} {vdb_id:\"vdb-2\", order:\"2\"} {vdb_id:\"vdb-3\", order:\"3\"} (sequential)<br> Invalid:<br> {vdb_id:\"vdb-1\", order:\"A\"} {vdb_id:\"vdb-2\", order:\"B\"} {vdb_id:\"vdb-3\", order:\"C\"} (sequential)<br><br> In the sequential case the vdbs with priority 1 is the first to be started and the last to<br> be stopped. This value is set on creation of VDB groups.
	Order *int32 `json:"order,omitempty"`
}

// NewCreateVDBGroupOrder instantiates a new CreateVDBGroupOrder object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateVDBGroupOrder() *CreateVDBGroupOrder {
	this := CreateVDBGroupOrder{}
	var order int32 = 0
	this.Order = &order
	return &this
}

// NewCreateVDBGroupOrderWithDefaults instantiates a new CreateVDBGroupOrder object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateVDBGroupOrderWithDefaults() *CreateVDBGroupOrder {
	this := CreateVDBGroupOrder{}
	var order int32 = 0
	this.Order = &order
	return &this
}

// GetVdbId returns the VdbId field value if set, zero value otherwise.
func (o *CreateVDBGroupOrder) GetVdbId() string {
	if o == nil || IsNil(o.VdbId) {
		var ret string
		return ret
	}
	return *o.VdbId
}

// GetVdbIdOk returns a tuple with the VdbId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateVDBGroupOrder) GetVdbIdOk() (*string, bool) {
	if o == nil || IsNil(o.VdbId) {
		return nil, false
	}
	return o.VdbId, true
}

// HasVdbId returns a boolean if a field has been set.
func (o *CreateVDBGroupOrder) HasVdbId() bool {
	if o != nil && !IsNil(o.VdbId) {
		return true
	}

	return false
}

// SetVdbId gets a reference to the given string and assigns it to the VdbId field.
func (o *CreateVDBGroupOrder) SetVdbId(v string) {
	o.VdbId = &v
}

// GetOrder returns the Order field value if set, zero value otherwise.
func (o *CreateVDBGroupOrder) GetOrder() int32 {
	if o == nil || IsNil(o.Order) {
		var ret int32
		return ret
	}
	return *o.Order
}

// GetOrderOk returns a tuple with the Order field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateVDBGroupOrder) GetOrderOk() (*int32, bool) {
	if o == nil || IsNil(o.Order) {
		return nil, false
	}
	return o.Order, true
}

// HasOrder returns a boolean if a field has been set.
func (o *CreateVDBGroupOrder) HasOrder() bool {
	if o != nil && !IsNil(o.Order) {
		return true
	}

	return false
}

// SetOrder gets a reference to the given int32 and assigns it to the Order field.
func (o *CreateVDBGroupOrder) SetOrder(v int32) {
	o.Order = &v
}

func (o CreateVDBGroupOrder) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateVDBGroupOrder) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.VdbId) {
		toSerialize["vdb_id"] = o.VdbId
	}
	if !IsNil(o.Order) {
		toSerialize["order"] = o.Order
	}
	return toSerialize, nil
}

type NullableCreateVDBGroupOrder struct {
	value *CreateVDBGroupOrder
	isSet bool
}

func (v NullableCreateVDBGroupOrder) Get() *CreateVDBGroupOrder {
	return v.value
}

func (v *NullableCreateVDBGroupOrder) Set(val *CreateVDBGroupOrder) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateVDBGroupOrder) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateVDBGroupOrder) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateVDBGroupOrder(val *CreateVDBGroupOrder) *NullableCreateVDBGroupOrder {
	return &NullableCreateVDBGroupOrder{value: val, isSet: true}
}

func (v NullableCreateVDBGroupOrder) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateVDBGroupOrder) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


