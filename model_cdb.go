/*
Delphix DCT API

Delphix DCT API

API version: 3.18.0
Contact: support@delphix.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package delphix_dct_api

import (
	"encoding/json"
)

// checks if the CDB type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CDB{}

// CDB The Delphix representation of an Oracle Container Database.
type CDB struct {
	// The CDB object entity ID.
	Id *string `json:"id,omitempty"`
	// The name of this CDB.
	Name NullableString `json:"name,omitempty"`
	// The namespace id of this CDB.
	NamespaceId *string `json:"namespace_id,omitempty"`
	// The namespace name of this CDB.
	NamespaceName *string `json:"namespace_name,omitempty"`
	// Is this a replicated object.
	IsReplica *bool `json:"is_replica,omitempty"`
	// The version of this CDB.
	DatabaseVersion NullableString `json:"database_version,omitempty"`
	// A reference to the Environment that hosts this CDB.
	EnvironmentId NullableString `json:"environment_id,omitempty"`
	// The total size of the data files used by this CDB, in bytes.
	Size NullableInt64 `json:"size,omitempty"`
	// The JDBC connection URL for this CDB.
	// Deprecated
	JdbcConnectionString NullableString `json:"jdbc_connection_string,omitempty"`
	// A reference to the Engine that this CDB belongs to.
	EngineId *string `json:"engine_id,omitempty"`
	// Whether this CDB is linked or not.
	IsLinked *bool `json:"is_linked,omitempty"`
	Tags []Tag `json:"tags,omitempty"`
	// The name of the group containing this CDB.
	GroupName NullableString `json:"group_name,omitempty"`
	// The runtime status of the vCDB.
	Status NullableString `json:"status,omitempty"`
	// Whether the CDB is enabled or not.
	Enabled *bool `json:"enabled,omitempty"`
	// The instance name of this single instance CDB.
	InstanceName *string `json:"instance_name,omitempty"`
	// The instance number of this single instance CDB.
	InstanceNumber *int32 `json:"instance_number,omitempty"`
	Instances []OracleRACDatabaseInstance `json:"instances,omitempty"`
	OracleServices []OracleService `json:"oracle_services,omitempty"`
	// The repository id of this CDB.
	RepositoryId *string `json:"repository_id,omitempty"`
}

// NewCDB instantiates a new CDB object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCDB() *CDB {
	this := CDB{}
	return &this
}

// NewCDBWithDefaults instantiates a new CDB object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCDBWithDefaults() *CDB {
	this := CDB{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *CDB) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CDB) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *CDB) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *CDB) SetId(v string) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CDB) GetName() string {
	if o == nil || IsNil(o.Name.Get()) {
		var ret string
		return ret
	}
	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CDB) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// HasName returns a boolean if a field has been set.
func (o *CDB) HasName() bool {
	if o != nil && o.Name.IsSet() {
		return true
	}

	return false
}

// SetName gets a reference to the given NullableString and assigns it to the Name field.
func (o *CDB) SetName(v string) {
	o.Name.Set(&v)
}
// SetNameNil sets the value for Name to be an explicit nil
func (o *CDB) SetNameNil() {
	o.Name.Set(nil)
}

// UnsetName ensures that no value is present for Name, not even an explicit nil
func (o *CDB) UnsetName() {
	o.Name.Unset()
}

// GetNamespaceId returns the NamespaceId field value if set, zero value otherwise.
func (o *CDB) GetNamespaceId() string {
	if o == nil || IsNil(o.NamespaceId) {
		var ret string
		return ret
	}
	return *o.NamespaceId
}

// GetNamespaceIdOk returns a tuple with the NamespaceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CDB) GetNamespaceIdOk() (*string, bool) {
	if o == nil || IsNil(o.NamespaceId) {
		return nil, false
	}
	return o.NamespaceId, true
}

// HasNamespaceId returns a boolean if a field has been set.
func (o *CDB) HasNamespaceId() bool {
	if o != nil && !IsNil(o.NamespaceId) {
		return true
	}

	return false
}

// SetNamespaceId gets a reference to the given string and assigns it to the NamespaceId field.
func (o *CDB) SetNamespaceId(v string) {
	o.NamespaceId = &v
}

// GetNamespaceName returns the NamespaceName field value if set, zero value otherwise.
func (o *CDB) GetNamespaceName() string {
	if o == nil || IsNil(o.NamespaceName) {
		var ret string
		return ret
	}
	return *o.NamespaceName
}

// GetNamespaceNameOk returns a tuple with the NamespaceName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CDB) GetNamespaceNameOk() (*string, bool) {
	if o == nil || IsNil(o.NamespaceName) {
		return nil, false
	}
	return o.NamespaceName, true
}

// HasNamespaceName returns a boolean if a field has been set.
func (o *CDB) HasNamespaceName() bool {
	if o != nil && !IsNil(o.NamespaceName) {
		return true
	}

	return false
}

// SetNamespaceName gets a reference to the given string and assigns it to the NamespaceName field.
func (o *CDB) SetNamespaceName(v string) {
	o.NamespaceName = &v
}

// GetIsReplica returns the IsReplica field value if set, zero value otherwise.
func (o *CDB) GetIsReplica() bool {
	if o == nil || IsNil(o.IsReplica) {
		var ret bool
		return ret
	}
	return *o.IsReplica
}

// GetIsReplicaOk returns a tuple with the IsReplica field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CDB) GetIsReplicaOk() (*bool, bool) {
	if o == nil || IsNil(o.IsReplica) {
		return nil, false
	}
	return o.IsReplica, true
}

// HasIsReplica returns a boolean if a field has been set.
func (o *CDB) HasIsReplica() bool {
	if o != nil && !IsNil(o.IsReplica) {
		return true
	}

	return false
}

// SetIsReplica gets a reference to the given bool and assigns it to the IsReplica field.
func (o *CDB) SetIsReplica(v bool) {
	o.IsReplica = &v
}

// GetDatabaseVersion returns the DatabaseVersion field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CDB) GetDatabaseVersion() string {
	if o == nil || IsNil(o.DatabaseVersion.Get()) {
		var ret string
		return ret
	}
	return *o.DatabaseVersion.Get()
}

// GetDatabaseVersionOk returns a tuple with the DatabaseVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CDB) GetDatabaseVersionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.DatabaseVersion.Get(), o.DatabaseVersion.IsSet()
}

// HasDatabaseVersion returns a boolean if a field has been set.
func (o *CDB) HasDatabaseVersion() bool {
	if o != nil && o.DatabaseVersion.IsSet() {
		return true
	}

	return false
}

// SetDatabaseVersion gets a reference to the given NullableString and assigns it to the DatabaseVersion field.
func (o *CDB) SetDatabaseVersion(v string) {
	o.DatabaseVersion.Set(&v)
}
// SetDatabaseVersionNil sets the value for DatabaseVersion to be an explicit nil
func (o *CDB) SetDatabaseVersionNil() {
	o.DatabaseVersion.Set(nil)
}

// UnsetDatabaseVersion ensures that no value is present for DatabaseVersion, not even an explicit nil
func (o *CDB) UnsetDatabaseVersion() {
	o.DatabaseVersion.Unset()
}

// GetEnvironmentId returns the EnvironmentId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CDB) GetEnvironmentId() string {
	if o == nil || IsNil(o.EnvironmentId.Get()) {
		var ret string
		return ret
	}
	return *o.EnvironmentId.Get()
}

// GetEnvironmentIdOk returns a tuple with the EnvironmentId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CDB) GetEnvironmentIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.EnvironmentId.Get(), o.EnvironmentId.IsSet()
}

// HasEnvironmentId returns a boolean if a field has been set.
func (o *CDB) HasEnvironmentId() bool {
	if o != nil && o.EnvironmentId.IsSet() {
		return true
	}

	return false
}

// SetEnvironmentId gets a reference to the given NullableString and assigns it to the EnvironmentId field.
func (o *CDB) SetEnvironmentId(v string) {
	o.EnvironmentId.Set(&v)
}
// SetEnvironmentIdNil sets the value for EnvironmentId to be an explicit nil
func (o *CDB) SetEnvironmentIdNil() {
	o.EnvironmentId.Set(nil)
}

// UnsetEnvironmentId ensures that no value is present for EnvironmentId, not even an explicit nil
func (o *CDB) UnsetEnvironmentId() {
	o.EnvironmentId.Unset()
}

// GetSize returns the Size field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CDB) GetSize() int64 {
	if o == nil || IsNil(o.Size.Get()) {
		var ret int64
		return ret
	}
	return *o.Size.Get()
}

// GetSizeOk returns a tuple with the Size field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CDB) GetSizeOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.Size.Get(), o.Size.IsSet()
}

// HasSize returns a boolean if a field has been set.
func (o *CDB) HasSize() bool {
	if o != nil && o.Size.IsSet() {
		return true
	}

	return false
}

// SetSize gets a reference to the given NullableInt64 and assigns it to the Size field.
func (o *CDB) SetSize(v int64) {
	o.Size.Set(&v)
}
// SetSizeNil sets the value for Size to be an explicit nil
func (o *CDB) SetSizeNil() {
	o.Size.Set(nil)
}

// UnsetSize ensures that no value is present for Size, not even an explicit nil
func (o *CDB) UnsetSize() {
	o.Size.Unset()
}

// GetJdbcConnectionString returns the JdbcConnectionString field value if set, zero value otherwise (both if not set or set to explicit null).
// Deprecated
func (o *CDB) GetJdbcConnectionString() string {
	if o == nil || IsNil(o.JdbcConnectionString.Get()) {
		var ret string
		return ret
	}
	return *o.JdbcConnectionString.Get()
}

// GetJdbcConnectionStringOk returns a tuple with the JdbcConnectionString field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
// Deprecated
func (o *CDB) GetJdbcConnectionStringOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.JdbcConnectionString.Get(), o.JdbcConnectionString.IsSet()
}

// HasJdbcConnectionString returns a boolean if a field has been set.
func (o *CDB) HasJdbcConnectionString() bool {
	if o != nil && o.JdbcConnectionString.IsSet() {
		return true
	}

	return false
}

// SetJdbcConnectionString gets a reference to the given NullableString and assigns it to the JdbcConnectionString field.
// Deprecated
func (o *CDB) SetJdbcConnectionString(v string) {
	o.JdbcConnectionString.Set(&v)
}
// SetJdbcConnectionStringNil sets the value for JdbcConnectionString to be an explicit nil
func (o *CDB) SetJdbcConnectionStringNil() {
	o.JdbcConnectionString.Set(nil)
}

// UnsetJdbcConnectionString ensures that no value is present for JdbcConnectionString, not even an explicit nil
func (o *CDB) UnsetJdbcConnectionString() {
	o.JdbcConnectionString.Unset()
}

// GetEngineId returns the EngineId field value if set, zero value otherwise.
func (o *CDB) GetEngineId() string {
	if o == nil || IsNil(o.EngineId) {
		var ret string
		return ret
	}
	return *o.EngineId
}

// GetEngineIdOk returns a tuple with the EngineId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CDB) GetEngineIdOk() (*string, bool) {
	if o == nil || IsNil(o.EngineId) {
		return nil, false
	}
	return o.EngineId, true
}

// HasEngineId returns a boolean if a field has been set.
func (o *CDB) HasEngineId() bool {
	if o != nil && !IsNil(o.EngineId) {
		return true
	}

	return false
}

// SetEngineId gets a reference to the given string and assigns it to the EngineId field.
func (o *CDB) SetEngineId(v string) {
	o.EngineId = &v
}

// GetIsLinked returns the IsLinked field value if set, zero value otherwise.
func (o *CDB) GetIsLinked() bool {
	if o == nil || IsNil(o.IsLinked) {
		var ret bool
		return ret
	}
	return *o.IsLinked
}

// GetIsLinkedOk returns a tuple with the IsLinked field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CDB) GetIsLinkedOk() (*bool, bool) {
	if o == nil || IsNil(o.IsLinked) {
		return nil, false
	}
	return o.IsLinked, true
}

// HasIsLinked returns a boolean if a field has been set.
func (o *CDB) HasIsLinked() bool {
	if o != nil && !IsNil(o.IsLinked) {
		return true
	}

	return false
}

// SetIsLinked gets a reference to the given bool and assigns it to the IsLinked field.
func (o *CDB) SetIsLinked(v bool) {
	o.IsLinked = &v
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *CDB) GetTags() []Tag {
	if o == nil || IsNil(o.Tags) {
		var ret []Tag
		return ret
	}
	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CDB) GetTagsOk() ([]Tag, bool) {
	if o == nil || IsNil(o.Tags) {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *CDB) HasTags() bool {
	if o != nil && !IsNil(o.Tags) {
		return true
	}

	return false
}

// SetTags gets a reference to the given []Tag and assigns it to the Tags field.
func (o *CDB) SetTags(v []Tag) {
	o.Tags = v
}

// GetGroupName returns the GroupName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CDB) GetGroupName() string {
	if o == nil || IsNil(o.GroupName.Get()) {
		var ret string
		return ret
	}
	return *o.GroupName.Get()
}

// GetGroupNameOk returns a tuple with the GroupName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CDB) GetGroupNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.GroupName.Get(), o.GroupName.IsSet()
}

// HasGroupName returns a boolean if a field has been set.
func (o *CDB) HasGroupName() bool {
	if o != nil && o.GroupName.IsSet() {
		return true
	}

	return false
}

// SetGroupName gets a reference to the given NullableString and assigns it to the GroupName field.
func (o *CDB) SetGroupName(v string) {
	o.GroupName.Set(&v)
}
// SetGroupNameNil sets the value for GroupName to be an explicit nil
func (o *CDB) SetGroupNameNil() {
	o.GroupName.Set(nil)
}

// UnsetGroupName ensures that no value is present for GroupName, not even an explicit nil
func (o *CDB) UnsetGroupName() {
	o.GroupName.Unset()
}

// GetStatus returns the Status field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CDB) GetStatus() string {
	if o == nil || IsNil(o.Status.Get()) {
		var ret string
		return ret
	}
	return *o.Status.Get()
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CDB) GetStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Status.Get(), o.Status.IsSet()
}

// HasStatus returns a boolean if a field has been set.
func (o *CDB) HasStatus() bool {
	if o != nil && o.Status.IsSet() {
		return true
	}

	return false
}

// SetStatus gets a reference to the given NullableString and assigns it to the Status field.
func (o *CDB) SetStatus(v string) {
	o.Status.Set(&v)
}
// SetStatusNil sets the value for Status to be an explicit nil
func (o *CDB) SetStatusNil() {
	o.Status.Set(nil)
}

// UnsetStatus ensures that no value is present for Status, not even an explicit nil
func (o *CDB) UnsetStatus() {
	o.Status.Unset()
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *CDB) GetEnabled() bool {
	if o == nil || IsNil(o.Enabled) {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CDB) GetEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Enabled) {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *CDB) HasEnabled() bool {
	if o != nil && !IsNil(o.Enabled) {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *CDB) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetInstanceName returns the InstanceName field value if set, zero value otherwise.
func (o *CDB) GetInstanceName() string {
	if o == nil || IsNil(o.InstanceName) {
		var ret string
		return ret
	}
	return *o.InstanceName
}

// GetInstanceNameOk returns a tuple with the InstanceName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CDB) GetInstanceNameOk() (*string, bool) {
	if o == nil || IsNil(o.InstanceName) {
		return nil, false
	}
	return o.InstanceName, true
}

// HasInstanceName returns a boolean if a field has been set.
func (o *CDB) HasInstanceName() bool {
	if o != nil && !IsNil(o.InstanceName) {
		return true
	}

	return false
}

// SetInstanceName gets a reference to the given string and assigns it to the InstanceName field.
func (o *CDB) SetInstanceName(v string) {
	o.InstanceName = &v
}

// GetInstanceNumber returns the InstanceNumber field value if set, zero value otherwise.
func (o *CDB) GetInstanceNumber() int32 {
	if o == nil || IsNil(o.InstanceNumber) {
		var ret int32
		return ret
	}
	return *o.InstanceNumber
}

// GetInstanceNumberOk returns a tuple with the InstanceNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CDB) GetInstanceNumberOk() (*int32, bool) {
	if o == nil || IsNil(o.InstanceNumber) {
		return nil, false
	}
	return o.InstanceNumber, true
}

// HasInstanceNumber returns a boolean if a field has been set.
func (o *CDB) HasInstanceNumber() bool {
	if o != nil && !IsNil(o.InstanceNumber) {
		return true
	}

	return false
}

// SetInstanceNumber gets a reference to the given int32 and assigns it to the InstanceNumber field.
func (o *CDB) SetInstanceNumber(v int32) {
	o.InstanceNumber = &v
}

// GetInstances returns the Instances field value if set, zero value otherwise.
func (o *CDB) GetInstances() []OracleRACDatabaseInstance {
	if o == nil || IsNil(o.Instances) {
		var ret []OracleRACDatabaseInstance
		return ret
	}
	return o.Instances
}

// GetInstancesOk returns a tuple with the Instances field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CDB) GetInstancesOk() ([]OracleRACDatabaseInstance, bool) {
	if o == nil || IsNil(o.Instances) {
		return nil, false
	}
	return o.Instances, true
}

// HasInstances returns a boolean if a field has been set.
func (o *CDB) HasInstances() bool {
	if o != nil && !IsNil(o.Instances) {
		return true
	}

	return false
}

// SetInstances gets a reference to the given []OracleRACDatabaseInstance and assigns it to the Instances field.
func (o *CDB) SetInstances(v []OracleRACDatabaseInstance) {
	o.Instances = v
}

// GetOracleServices returns the OracleServices field value if set, zero value otherwise.
func (o *CDB) GetOracleServices() []OracleService {
	if o == nil || IsNil(o.OracleServices) {
		var ret []OracleService
		return ret
	}
	return o.OracleServices
}

// GetOracleServicesOk returns a tuple with the OracleServices field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CDB) GetOracleServicesOk() ([]OracleService, bool) {
	if o == nil || IsNil(o.OracleServices) {
		return nil, false
	}
	return o.OracleServices, true
}

// HasOracleServices returns a boolean if a field has been set.
func (o *CDB) HasOracleServices() bool {
	if o != nil && !IsNil(o.OracleServices) {
		return true
	}

	return false
}

// SetOracleServices gets a reference to the given []OracleService and assigns it to the OracleServices field.
func (o *CDB) SetOracleServices(v []OracleService) {
	o.OracleServices = v
}

// GetRepositoryId returns the RepositoryId field value if set, zero value otherwise.
func (o *CDB) GetRepositoryId() string {
	if o == nil || IsNil(o.RepositoryId) {
		var ret string
		return ret
	}
	return *o.RepositoryId
}

// GetRepositoryIdOk returns a tuple with the RepositoryId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CDB) GetRepositoryIdOk() (*string, bool) {
	if o == nil || IsNil(o.RepositoryId) {
		return nil, false
	}
	return o.RepositoryId, true
}

// HasRepositoryId returns a boolean if a field has been set.
func (o *CDB) HasRepositoryId() bool {
	if o != nil && !IsNil(o.RepositoryId) {
		return true
	}

	return false
}

// SetRepositoryId gets a reference to the given string and assigns it to the RepositoryId field.
func (o *CDB) SetRepositoryId(v string) {
	o.RepositoryId = &v
}

func (o CDB) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CDB) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if o.Name.IsSet() {
		toSerialize["name"] = o.Name.Get()
	}
	if !IsNil(o.NamespaceId) {
		toSerialize["namespace_id"] = o.NamespaceId
	}
	if !IsNil(o.NamespaceName) {
		toSerialize["namespace_name"] = o.NamespaceName
	}
	if !IsNil(o.IsReplica) {
		toSerialize["is_replica"] = o.IsReplica
	}
	if o.DatabaseVersion.IsSet() {
		toSerialize["database_version"] = o.DatabaseVersion.Get()
	}
	if o.EnvironmentId.IsSet() {
		toSerialize["environment_id"] = o.EnvironmentId.Get()
	}
	if o.Size.IsSet() {
		toSerialize["size"] = o.Size.Get()
	}
	if o.JdbcConnectionString.IsSet() {
		toSerialize["jdbc_connection_string"] = o.JdbcConnectionString.Get()
	}
	if !IsNil(o.EngineId) {
		toSerialize["engine_id"] = o.EngineId
	}
	if !IsNil(o.IsLinked) {
		toSerialize["is_linked"] = o.IsLinked
	}
	if !IsNil(o.Tags) {
		toSerialize["tags"] = o.Tags
	}
	if o.GroupName.IsSet() {
		toSerialize["group_name"] = o.GroupName.Get()
	}
	if o.Status.IsSet() {
		toSerialize["status"] = o.Status.Get()
	}
	if !IsNil(o.Enabled) {
		toSerialize["enabled"] = o.Enabled
	}
	if !IsNil(o.InstanceName) {
		toSerialize["instance_name"] = o.InstanceName
	}
	if !IsNil(o.InstanceNumber) {
		toSerialize["instance_number"] = o.InstanceNumber
	}
	if !IsNil(o.Instances) {
		toSerialize["instances"] = o.Instances
	}
	if !IsNil(o.OracleServices) {
		toSerialize["oracle_services"] = o.OracleServices
	}
	if !IsNil(o.RepositoryId) {
		toSerialize["repository_id"] = o.RepositoryId
	}
	return toSerialize, nil
}

type NullableCDB struct {
	value *CDB
	isSet bool
}

func (v NullableCDB) Get() *CDB {
	return v.value
}

func (v *NullableCDB) Set(val *CDB) {
	v.value = val
	v.isSet = true
}

func (v NullableCDB) IsSet() bool {
	return v.isSet
}

func (v *NullableCDB) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCDB(val *CDB) *NullableCDB {
	return &NullableCDB{value: val, isSet: true}
}

func (v NullableCDB) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCDB) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


