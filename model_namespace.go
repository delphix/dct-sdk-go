/*
Delphix DCT API

Delphix DCT API

API version: 3.17.0
Contact: support@delphix.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package delphix_dct_api

import (
	"encoding/json"
	"time"
)

// checks if the Namespace type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Namespace{}

// Namespace A namespace represents an alternative namespace for objects and data within a Delphix engine.
type Namespace struct {
	// The Namespace ID.
	Id *string `json:"id,omitempty"`
	// The Namespace name.
	Name *string `json:"name,omitempty"`
	// This is the tag of the Replication profile that created this namespace.
	Tag *string `json:"tag,omitempty"`
	// The ID of the engine that the Namespace belongs to.
	EngineId *string `json:"engine_id,omitempty"`
	// A description of the namespace.
	Description *string `json:"description,omitempty"`
	// True if the source data stream was generated from a ReplicationProfile with mode CONTINUOUS_VAULT.
	SecureNamespace *bool `json:"secure_namespace,omitempty"`
	// True if the namespace has been failed over into the live environment.
	FailedOver *bool `json:"failed_over,omitempty"`
	// If the namespace has been failed over, this contains a report about objects affected by the failover.
	FailoverReport *string `json:"failover_report,omitempty"`
	// True if the namespace is locked.
	Locked *bool `json:"locked,omitempty"`
	// True if the namespace can be failed back.
	FailbackPossible *bool `json:"failback_possible,omitempty"`
	// Whether the namespace is capable of failback
	FailbackCapability *string `json:"failback_capability,omitempty"`
	// When incapable, the reason why the namespace is incompatible with failback.
	FailbackIncapabilityReason *string `json:"failback_incapability_reason,omitempty"`
	// The replication mode of the associated ReplicationProfile that created the Namespace.
	ReplicationMode *string `json:"replication_mode,omitempty"`
	// The status of the last execution of the ReplicationProfile associated with the Namespace.
	LastExecutionStatus *string `json:"last_execution_status,omitempty"`
	// The timestamp of the last execution status of the ReplicationProfile associated with the Namespace.
	LastExecutionStatusTimestamp *time.Time `json:"last_execution_status_timestamp,omitempty"`
	// The ID of the source engine that the ReplicationProfile that created the Namespace belongs to.
	SourceEngineId *string `json:"source_engine_id,omitempty"`
	// The name of the source engine that the ReplicationProfile that created the Namespace belongs to.
	SourceEngineName *string `json:"source_engine_name,omitempty"`
}

// NewNamespace instantiates a new Namespace object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNamespace() *Namespace {
	this := Namespace{}
	return &this
}

// NewNamespaceWithDefaults instantiates a new Namespace object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNamespaceWithDefaults() *Namespace {
	this := Namespace{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Namespace) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Namespace) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Namespace) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *Namespace) SetId(v string) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *Namespace) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Namespace) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *Namespace) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *Namespace) SetName(v string) {
	o.Name = &v
}

// GetTag returns the Tag field value if set, zero value otherwise.
func (o *Namespace) GetTag() string {
	if o == nil || IsNil(o.Tag) {
		var ret string
		return ret
	}
	return *o.Tag
}

// GetTagOk returns a tuple with the Tag field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Namespace) GetTagOk() (*string, bool) {
	if o == nil || IsNil(o.Tag) {
		return nil, false
	}
	return o.Tag, true
}

// HasTag returns a boolean if a field has been set.
func (o *Namespace) HasTag() bool {
	if o != nil && !IsNil(o.Tag) {
		return true
	}

	return false
}

// SetTag gets a reference to the given string and assigns it to the Tag field.
func (o *Namespace) SetTag(v string) {
	o.Tag = &v
}

// GetEngineId returns the EngineId field value if set, zero value otherwise.
func (o *Namespace) GetEngineId() string {
	if o == nil || IsNil(o.EngineId) {
		var ret string
		return ret
	}
	return *o.EngineId
}

// GetEngineIdOk returns a tuple with the EngineId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Namespace) GetEngineIdOk() (*string, bool) {
	if o == nil || IsNil(o.EngineId) {
		return nil, false
	}
	return o.EngineId, true
}

// HasEngineId returns a boolean if a field has been set.
func (o *Namespace) HasEngineId() bool {
	if o != nil && !IsNil(o.EngineId) {
		return true
	}

	return false
}

// SetEngineId gets a reference to the given string and assigns it to the EngineId field.
func (o *Namespace) SetEngineId(v string) {
	o.EngineId = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *Namespace) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Namespace) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *Namespace) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *Namespace) SetDescription(v string) {
	o.Description = &v
}

// GetSecureNamespace returns the SecureNamespace field value if set, zero value otherwise.
func (o *Namespace) GetSecureNamespace() bool {
	if o == nil || IsNil(o.SecureNamespace) {
		var ret bool
		return ret
	}
	return *o.SecureNamespace
}

// GetSecureNamespaceOk returns a tuple with the SecureNamespace field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Namespace) GetSecureNamespaceOk() (*bool, bool) {
	if o == nil || IsNil(o.SecureNamespace) {
		return nil, false
	}
	return o.SecureNamespace, true
}

// HasSecureNamespace returns a boolean if a field has been set.
func (o *Namespace) HasSecureNamespace() bool {
	if o != nil && !IsNil(o.SecureNamespace) {
		return true
	}

	return false
}

// SetSecureNamespace gets a reference to the given bool and assigns it to the SecureNamespace field.
func (o *Namespace) SetSecureNamespace(v bool) {
	o.SecureNamespace = &v
}

// GetFailedOver returns the FailedOver field value if set, zero value otherwise.
func (o *Namespace) GetFailedOver() bool {
	if o == nil || IsNil(o.FailedOver) {
		var ret bool
		return ret
	}
	return *o.FailedOver
}

// GetFailedOverOk returns a tuple with the FailedOver field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Namespace) GetFailedOverOk() (*bool, bool) {
	if o == nil || IsNil(o.FailedOver) {
		return nil, false
	}
	return o.FailedOver, true
}

// HasFailedOver returns a boolean if a field has been set.
func (o *Namespace) HasFailedOver() bool {
	if o != nil && !IsNil(o.FailedOver) {
		return true
	}

	return false
}

// SetFailedOver gets a reference to the given bool and assigns it to the FailedOver field.
func (o *Namespace) SetFailedOver(v bool) {
	o.FailedOver = &v
}

// GetFailoverReport returns the FailoverReport field value if set, zero value otherwise.
func (o *Namespace) GetFailoverReport() string {
	if o == nil || IsNil(o.FailoverReport) {
		var ret string
		return ret
	}
	return *o.FailoverReport
}

// GetFailoverReportOk returns a tuple with the FailoverReport field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Namespace) GetFailoverReportOk() (*string, bool) {
	if o == nil || IsNil(o.FailoverReport) {
		return nil, false
	}
	return o.FailoverReport, true
}

// HasFailoverReport returns a boolean if a field has been set.
func (o *Namespace) HasFailoverReport() bool {
	if o != nil && !IsNil(o.FailoverReport) {
		return true
	}

	return false
}

// SetFailoverReport gets a reference to the given string and assigns it to the FailoverReport field.
func (o *Namespace) SetFailoverReport(v string) {
	o.FailoverReport = &v
}

// GetLocked returns the Locked field value if set, zero value otherwise.
func (o *Namespace) GetLocked() bool {
	if o == nil || IsNil(o.Locked) {
		var ret bool
		return ret
	}
	return *o.Locked
}

// GetLockedOk returns a tuple with the Locked field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Namespace) GetLockedOk() (*bool, bool) {
	if o == nil || IsNil(o.Locked) {
		return nil, false
	}
	return o.Locked, true
}

// HasLocked returns a boolean if a field has been set.
func (o *Namespace) HasLocked() bool {
	if o != nil && !IsNil(o.Locked) {
		return true
	}

	return false
}

// SetLocked gets a reference to the given bool and assigns it to the Locked field.
func (o *Namespace) SetLocked(v bool) {
	o.Locked = &v
}

// GetFailbackPossible returns the FailbackPossible field value if set, zero value otherwise.
func (o *Namespace) GetFailbackPossible() bool {
	if o == nil || IsNil(o.FailbackPossible) {
		var ret bool
		return ret
	}
	return *o.FailbackPossible
}

// GetFailbackPossibleOk returns a tuple with the FailbackPossible field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Namespace) GetFailbackPossibleOk() (*bool, bool) {
	if o == nil || IsNil(o.FailbackPossible) {
		return nil, false
	}
	return o.FailbackPossible, true
}

// HasFailbackPossible returns a boolean if a field has been set.
func (o *Namespace) HasFailbackPossible() bool {
	if o != nil && !IsNil(o.FailbackPossible) {
		return true
	}

	return false
}

// SetFailbackPossible gets a reference to the given bool and assigns it to the FailbackPossible field.
func (o *Namespace) SetFailbackPossible(v bool) {
	o.FailbackPossible = &v
}

// GetFailbackCapability returns the FailbackCapability field value if set, zero value otherwise.
func (o *Namespace) GetFailbackCapability() string {
	if o == nil || IsNil(o.FailbackCapability) {
		var ret string
		return ret
	}
	return *o.FailbackCapability
}

// GetFailbackCapabilityOk returns a tuple with the FailbackCapability field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Namespace) GetFailbackCapabilityOk() (*string, bool) {
	if o == nil || IsNil(o.FailbackCapability) {
		return nil, false
	}
	return o.FailbackCapability, true
}

// HasFailbackCapability returns a boolean if a field has been set.
func (o *Namespace) HasFailbackCapability() bool {
	if o != nil && !IsNil(o.FailbackCapability) {
		return true
	}

	return false
}

// SetFailbackCapability gets a reference to the given string and assigns it to the FailbackCapability field.
func (o *Namespace) SetFailbackCapability(v string) {
	o.FailbackCapability = &v
}

// GetFailbackIncapabilityReason returns the FailbackIncapabilityReason field value if set, zero value otherwise.
func (o *Namespace) GetFailbackIncapabilityReason() string {
	if o == nil || IsNil(o.FailbackIncapabilityReason) {
		var ret string
		return ret
	}
	return *o.FailbackIncapabilityReason
}

// GetFailbackIncapabilityReasonOk returns a tuple with the FailbackIncapabilityReason field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Namespace) GetFailbackIncapabilityReasonOk() (*string, bool) {
	if o == nil || IsNil(o.FailbackIncapabilityReason) {
		return nil, false
	}
	return o.FailbackIncapabilityReason, true
}

// HasFailbackIncapabilityReason returns a boolean if a field has been set.
func (o *Namespace) HasFailbackIncapabilityReason() bool {
	if o != nil && !IsNil(o.FailbackIncapabilityReason) {
		return true
	}

	return false
}

// SetFailbackIncapabilityReason gets a reference to the given string and assigns it to the FailbackIncapabilityReason field.
func (o *Namespace) SetFailbackIncapabilityReason(v string) {
	o.FailbackIncapabilityReason = &v
}

// GetReplicationMode returns the ReplicationMode field value if set, zero value otherwise.
func (o *Namespace) GetReplicationMode() string {
	if o == nil || IsNil(o.ReplicationMode) {
		var ret string
		return ret
	}
	return *o.ReplicationMode
}

// GetReplicationModeOk returns a tuple with the ReplicationMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Namespace) GetReplicationModeOk() (*string, bool) {
	if o == nil || IsNil(o.ReplicationMode) {
		return nil, false
	}
	return o.ReplicationMode, true
}

// HasReplicationMode returns a boolean if a field has been set.
func (o *Namespace) HasReplicationMode() bool {
	if o != nil && !IsNil(o.ReplicationMode) {
		return true
	}

	return false
}

// SetReplicationMode gets a reference to the given string and assigns it to the ReplicationMode field.
func (o *Namespace) SetReplicationMode(v string) {
	o.ReplicationMode = &v
}

// GetLastExecutionStatus returns the LastExecutionStatus field value if set, zero value otherwise.
func (o *Namespace) GetLastExecutionStatus() string {
	if o == nil || IsNil(o.LastExecutionStatus) {
		var ret string
		return ret
	}
	return *o.LastExecutionStatus
}

// GetLastExecutionStatusOk returns a tuple with the LastExecutionStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Namespace) GetLastExecutionStatusOk() (*string, bool) {
	if o == nil || IsNil(o.LastExecutionStatus) {
		return nil, false
	}
	return o.LastExecutionStatus, true
}

// HasLastExecutionStatus returns a boolean if a field has been set.
func (o *Namespace) HasLastExecutionStatus() bool {
	if o != nil && !IsNil(o.LastExecutionStatus) {
		return true
	}

	return false
}

// SetLastExecutionStatus gets a reference to the given string and assigns it to the LastExecutionStatus field.
func (o *Namespace) SetLastExecutionStatus(v string) {
	o.LastExecutionStatus = &v
}

// GetLastExecutionStatusTimestamp returns the LastExecutionStatusTimestamp field value if set, zero value otherwise.
func (o *Namespace) GetLastExecutionStatusTimestamp() time.Time {
	if o == nil || IsNil(o.LastExecutionStatusTimestamp) {
		var ret time.Time
		return ret
	}
	return *o.LastExecutionStatusTimestamp
}

// GetLastExecutionStatusTimestampOk returns a tuple with the LastExecutionStatusTimestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Namespace) GetLastExecutionStatusTimestampOk() (*time.Time, bool) {
	if o == nil || IsNil(o.LastExecutionStatusTimestamp) {
		return nil, false
	}
	return o.LastExecutionStatusTimestamp, true
}

// HasLastExecutionStatusTimestamp returns a boolean if a field has been set.
func (o *Namespace) HasLastExecutionStatusTimestamp() bool {
	if o != nil && !IsNil(o.LastExecutionStatusTimestamp) {
		return true
	}

	return false
}

// SetLastExecutionStatusTimestamp gets a reference to the given time.Time and assigns it to the LastExecutionStatusTimestamp field.
func (o *Namespace) SetLastExecutionStatusTimestamp(v time.Time) {
	o.LastExecutionStatusTimestamp = &v
}

// GetSourceEngineId returns the SourceEngineId field value if set, zero value otherwise.
func (o *Namespace) GetSourceEngineId() string {
	if o == nil || IsNil(o.SourceEngineId) {
		var ret string
		return ret
	}
	return *o.SourceEngineId
}

// GetSourceEngineIdOk returns a tuple with the SourceEngineId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Namespace) GetSourceEngineIdOk() (*string, bool) {
	if o == nil || IsNil(o.SourceEngineId) {
		return nil, false
	}
	return o.SourceEngineId, true
}

// HasSourceEngineId returns a boolean if a field has been set.
func (o *Namespace) HasSourceEngineId() bool {
	if o != nil && !IsNil(o.SourceEngineId) {
		return true
	}

	return false
}

// SetSourceEngineId gets a reference to the given string and assigns it to the SourceEngineId field.
func (o *Namespace) SetSourceEngineId(v string) {
	o.SourceEngineId = &v
}

// GetSourceEngineName returns the SourceEngineName field value if set, zero value otherwise.
func (o *Namespace) GetSourceEngineName() string {
	if o == nil || IsNil(o.SourceEngineName) {
		var ret string
		return ret
	}
	return *o.SourceEngineName
}

// GetSourceEngineNameOk returns a tuple with the SourceEngineName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Namespace) GetSourceEngineNameOk() (*string, bool) {
	if o == nil || IsNil(o.SourceEngineName) {
		return nil, false
	}
	return o.SourceEngineName, true
}

// HasSourceEngineName returns a boolean if a field has been set.
func (o *Namespace) HasSourceEngineName() bool {
	if o != nil && !IsNil(o.SourceEngineName) {
		return true
	}

	return false
}

// SetSourceEngineName gets a reference to the given string and assigns it to the SourceEngineName field.
func (o *Namespace) SetSourceEngineName(v string) {
	o.SourceEngineName = &v
}

func (o Namespace) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Namespace) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Tag) {
		toSerialize["tag"] = o.Tag
	}
	if !IsNil(o.EngineId) {
		toSerialize["engine_id"] = o.EngineId
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.SecureNamespace) {
		toSerialize["secure_namespace"] = o.SecureNamespace
	}
	if !IsNil(o.FailedOver) {
		toSerialize["failed_over"] = o.FailedOver
	}
	if !IsNil(o.FailoverReport) {
		toSerialize["failover_report"] = o.FailoverReport
	}
	if !IsNil(o.Locked) {
		toSerialize["locked"] = o.Locked
	}
	if !IsNil(o.FailbackPossible) {
		toSerialize["failback_possible"] = o.FailbackPossible
	}
	if !IsNil(o.FailbackCapability) {
		toSerialize["failback_capability"] = o.FailbackCapability
	}
	if !IsNil(o.FailbackIncapabilityReason) {
		toSerialize["failback_incapability_reason"] = o.FailbackIncapabilityReason
	}
	if !IsNil(o.ReplicationMode) {
		toSerialize["replication_mode"] = o.ReplicationMode
	}
	if !IsNil(o.LastExecutionStatus) {
		toSerialize["last_execution_status"] = o.LastExecutionStatus
	}
	if !IsNil(o.LastExecutionStatusTimestamp) {
		toSerialize["last_execution_status_timestamp"] = o.LastExecutionStatusTimestamp
	}
	if !IsNil(o.SourceEngineId) {
		toSerialize["source_engine_id"] = o.SourceEngineId
	}
	if !IsNil(o.SourceEngineName) {
		toSerialize["source_engine_name"] = o.SourceEngineName
	}
	return toSerialize, nil
}

type NullableNamespace struct {
	value *Namespace
	isSet bool
}

func (v NullableNamespace) Get() *Namespace {
	return v.value
}

func (v *NullableNamespace) Set(val *Namespace) {
	v.value = val
	v.isSet = true
}

func (v NullableNamespace) IsSet() bool {
	return v.isSet
}

func (v *NullableNamespace) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNamespace(val *Namespace) *NullableNamespace {
	return &NullableNamespace{value: val, isSet: true}
}

func (v NullableNamespace) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNamespace) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


