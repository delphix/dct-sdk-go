/*
Delphix DCT API

Delphix DCT API

API version: 3.18.0
Contact: support@delphix.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package delphix_dct_api

import (
	"encoding/json"
	"time"
)

// checks if the VirtualizationJob type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VirtualizationJob{}

// VirtualizationJob A virtualization engine job.
type VirtualizationJob struct {
	// ID of the virtualization engine job.
	EngineJobId *string `json:"engine_job_id,omitempty"`
	// ID of the RegisteredEngine.
	EngineId *string `json:"engine_id,omitempty"`
	// Legacy type of the job.
	LegacyJobType *string `json:"legacy_job_type,omitempty"`
	JobType *TargetJobType `json:"job_type,omitempty"`
	// ID of the target object.
	TargetObjectId *string `json:"target_object_id,omitempty"`
	// Legacy type of the target object.
	LegacyTargetObjectType *string `json:"legacy_target_object_type,omitempty"`
	TargetObjectType *TargetObjectType `json:"target_object_type,omitempty"`
	JobState *string `json:"job_state,omitempty"`
	// The time the job started.
	StartTime *time.Time `json:"start_time,omitempty"`
	// The time the job was last updated.
	UpdateTime *time.Time `json:"update_time,omitempty"`
	// Indicates whether the job can be suspended.
	Suspendable *bool `json:"suspendable,omitempty"`
	// Indicates whether the job can be canceled.
	Cancelable *bool `json:"cancelable,omitempty"`
	// Indicates whether the job is queued.
	Queued *bool `json:"queued,omitempty"`
	// The title of the job.
	Title *string `json:"title,omitempty"`
	// The reason the job was canceled.
	CancelReason *string `json:"cancel_reason,omitempty"`
	// The percentage of the job that is complete.
	PercentComplete *int32 `json:"percent_complete,omitempty"`
	// The time this job took to complete in milliseconds.
	RunDuration *int64 `json:"run_duration,omitempty"`
	// The events associated with this job.
	Events []VirtualizationJobEvent `json:"events,omitempty"`
}

// NewVirtualizationJob instantiates a new VirtualizationJob object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVirtualizationJob() *VirtualizationJob {
	this := VirtualizationJob{}
	return &this
}

// NewVirtualizationJobWithDefaults instantiates a new VirtualizationJob object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVirtualizationJobWithDefaults() *VirtualizationJob {
	this := VirtualizationJob{}
	return &this
}

// GetEngineJobId returns the EngineJobId field value if set, zero value otherwise.
func (o *VirtualizationJob) GetEngineJobId() string {
	if o == nil || IsNil(o.EngineJobId) {
		var ret string
		return ret
	}
	return *o.EngineJobId
}

// GetEngineJobIdOk returns a tuple with the EngineJobId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualizationJob) GetEngineJobIdOk() (*string, bool) {
	if o == nil || IsNil(o.EngineJobId) {
		return nil, false
	}
	return o.EngineJobId, true
}

// HasEngineJobId returns a boolean if a field has been set.
func (o *VirtualizationJob) HasEngineJobId() bool {
	if o != nil && !IsNil(o.EngineJobId) {
		return true
	}

	return false
}

// SetEngineJobId gets a reference to the given string and assigns it to the EngineJobId field.
func (o *VirtualizationJob) SetEngineJobId(v string) {
	o.EngineJobId = &v
}

// GetEngineId returns the EngineId field value if set, zero value otherwise.
func (o *VirtualizationJob) GetEngineId() string {
	if o == nil || IsNil(o.EngineId) {
		var ret string
		return ret
	}
	return *o.EngineId
}

// GetEngineIdOk returns a tuple with the EngineId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualizationJob) GetEngineIdOk() (*string, bool) {
	if o == nil || IsNil(o.EngineId) {
		return nil, false
	}
	return o.EngineId, true
}

// HasEngineId returns a boolean if a field has been set.
func (o *VirtualizationJob) HasEngineId() bool {
	if o != nil && !IsNil(o.EngineId) {
		return true
	}

	return false
}

// SetEngineId gets a reference to the given string and assigns it to the EngineId field.
func (o *VirtualizationJob) SetEngineId(v string) {
	o.EngineId = &v
}

// GetLegacyJobType returns the LegacyJobType field value if set, zero value otherwise.
func (o *VirtualizationJob) GetLegacyJobType() string {
	if o == nil || IsNil(o.LegacyJobType) {
		var ret string
		return ret
	}
	return *o.LegacyJobType
}

// GetLegacyJobTypeOk returns a tuple with the LegacyJobType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualizationJob) GetLegacyJobTypeOk() (*string, bool) {
	if o == nil || IsNil(o.LegacyJobType) {
		return nil, false
	}
	return o.LegacyJobType, true
}

// HasLegacyJobType returns a boolean if a field has been set.
func (o *VirtualizationJob) HasLegacyJobType() bool {
	if o != nil && !IsNil(o.LegacyJobType) {
		return true
	}

	return false
}

// SetLegacyJobType gets a reference to the given string and assigns it to the LegacyJobType field.
func (o *VirtualizationJob) SetLegacyJobType(v string) {
	o.LegacyJobType = &v
}

// GetJobType returns the JobType field value if set, zero value otherwise.
func (o *VirtualizationJob) GetJobType() TargetJobType {
	if o == nil || IsNil(o.JobType) {
		var ret TargetJobType
		return ret
	}
	return *o.JobType
}

// GetJobTypeOk returns a tuple with the JobType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualizationJob) GetJobTypeOk() (*TargetJobType, bool) {
	if o == nil || IsNil(o.JobType) {
		return nil, false
	}
	return o.JobType, true
}

// HasJobType returns a boolean if a field has been set.
func (o *VirtualizationJob) HasJobType() bool {
	if o != nil && !IsNil(o.JobType) {
		return true
	}

	return false
}

// SetJobType gets a reference to the given TargetJobType and assigns it to the JobType field.
func (o *VirtualizationJob) SetJobType(v TargetJobType) {
	o.JobType = &v
}

// GetTargetObjectId returns the TargetObjectId field value if set, zero value otherwise.
func (o *VirtualizationJob) GetTargetObjectId() string {
	if o == nil || IsNil(o.TargetObjectId) {
		var ret string
		return ret
	}
	return *o.TargetObjectId
}

// GetTargetObjectIdOk returns a tuple with the TargetObjectId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualizationJob) GetTargetObjectIdOk() (*string, bool) {
	if o == nil || IsNil(o.TargetObjectId) {
		return nil, false
	}
	return o.TargetObjectId, true
}

// HasTargetObjectId returns a boolean if a field has been set.
func (o *VirtualizationJob) HasTargetObjectId() bool {
	if o != nil && !IsNil(o.TargetObjectId) {
		return true
	}

	return false
}

// SetTargetObjectId gets a reference to the given string and assigns it to the TargetObjectId field.
func (o *VirtualizationJob) SetTargetObjectId(v string) {
	o.TargetObjectId = &v
}

// GetLegacyTargetObjectType returns the LegacyTargetObjectType field value if set, zero value otherwise.
func (o *VirtualizationJob) GetLegacyTargetObjectType() string {
	if o == nil || IsNil(o.LegacyTargetObjectType) {
		var ret string
		return ret
	}
	return *o.LegacyTargetObjectType
}

// GetLegacyTargetObjectTypeOk returns a tuple with the LegacyTargetObjectType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualizationJob) GetLegacyTargetObjectTypeOk() (*string, bool) {
	if o == nil || IsNil(o.LegacyTargetObjectType) {
		return nil, false
	}
	return o.LegacyTargetObjectType, true
}

// HasLegacyTargetObjectType returns a boolean if a field has been set.
func (o *VirtualizationJob) HasLegacyTargetObjectType() bool {
	if o != nil && !IsNil(o.LegacyTargetObjectType) {
		return true
	}

	return false
}

// SetLegacyTargetObjectType gets a reference to the given string and assigns it to the LegacyTargetObjectType field.
func (o *VirtualizationJob) SetLegacyTargetObjectType(v string) {
	o.LegacyTargetObjectType = &v
}

// GetTargetObjectType returns the TargetObjectType field value if set, zero value otherwise.
func (o *VirtualizationJob) GetTargetObjectType() TargetObjectType {
	if o == nil || IsNil(o.TargetObjectType) {
		var ret TargetObjectType
		return ret
	}
	return *o.TargetObjectType
}

// GetTargetObjectTypeOk returns a tuple with the TargetObjectType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualizationJob) GetTargetObjectTypeOk() (*TargetObjectType, bool) {
	if o == nil || IsNil(o.TargetObjectType) {
		return nil, false
	}
	return o.TargetObjectType, true
}

// HasTargetObjectType returns a boolean if a field has been set.
func (o *VirtualizationJob) HasTargetObjectType() bool {
	if o != nil && !IsNil(o.TargetObjectType) {
		return true
	}

	return false
}

// SetTargetObjectType gets a reference to the given TargetObjectType and assigns it to the TargetObjectType field.
func (o *VirtualizationJob) SetTargetObjectType(v TargetObjectType) {
	o.TargetObjectType = &v
}

// GetJobState returns the JobState field value if set, zero value otherwise.
func (o *VirtualizationJob) GetJobState() string {
	if o == nil || IsNil(o.JobState) {
		var ret string
		return ret
	}
	return *o.JobState
}

// GetJobStateOk returns a tuple with the JobState field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualizationJob) GetJobStateOk() (*string, bool) {
	if o == nil || IsNil(o.JobState) {
		return nil, false
	}
	return o.JobState, true
}

// HasJobState returns a boolean if a field has been set.
func (o *VirtualizationJob) HasJobState() bool {
	if o != nil && !IsNil(o.JobState) {
		return true
	}

	return false
}

// SetJobState gets a reference to the given string and assigns it to the JobState field.
func (o *VirtualizationJob) SetJobState(v string) {
	o.JobState = &v
}

// GetStartTime returns the StartTime field value if set, zero value otherwise.
func (o *VirtualizationJob) GetStartTime() time.Time {
	if o == nil || IsNil(o.StartTime) {
		var ret time.Time
		return ret
	}
	return *o.StartTime
}

// GetStartTimeOk returns a tuple with the StartTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualizationJob) GetStartTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.StartTime) {
		return nil, false
	}
	return o.StartTime, true
}

// HasStartTime returns a boolean if a field has been set.
func (o *VirtualizationJob) HasStartTime() bool {
	if o != nil && !IsNil(o.StartTime) {
		return true
	}

	return false
}

// SetStartTime gets a reference to the given time.Time and assigns it to the StartTime field.
func (o *VirtualizationJob) SetStartTime(v time.Time) {
	o.StartTime = &v
}

// GetUpdateTime returns the UpdateTime field value if set, zero value otherwise.
func (o *VirtualizationJob) GetUpdateTime() time.Time {
	if o == nil || IsNil(o.UpdateTime) {
		var ret time.Time
		return ret
	}
	return *o.UpdateTime
}

// GetUpdateTimeOk returns a tuple with the UpdateTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualizationJob) GetUpdateTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.UpdateTime) {
		return nil, false
	}
	return o.UpdateTime, true
}

// HasUpdateTime returns a boolean if a field has been set.
func (o *VirtualizationJob) HasUpdateTime() bool {
	if o != nil && !IsNil(o.UpdateTime) {
		return true
	}

	return false
}

// SetUpdateTime gets a reference to the given time.Time and assigns it to the UpdateTime field.
func (o *VirtualizationJob) SetUpdateTime(v time.Time) {
	o.UpdateTime = &v
}

// GetSuspendable returns the Suspendable field value if set, zero value otherwise.
func (o *VirtualizationJob) GetSuspendable() bool {
	if o == nil || IsNil(o.Suspendable) {
		var ret bool
		return ret
	}
	return *o.Suspendable
}

// GetSuspendableOk returns a tuple with the Suspendable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualizationJob) GetSuspendableOk() (*bool, bool) {
	if o == nil || IsNil(o.Suspendable) {
		return nil, false
	}
	return o.Suspendable, true
}

// HasSuspendable returns a boolean if a field has been set.
func (o *VirtualizationJob) HasSuspendable() bool {
	if o != nil && !IsNil(o.Suspendable) {
		return true
	}

	return false
}

// SetSuspendable gets a reference to the given bool and assigns it to the Suspendable field.
func (o *VirtualizationJob) SetSuspendable(v bool) {
	o.Suspendable = &v
}

// GetCancelable returns the Cancelable field value if set, zero value otherwise.
func (o *VirtualizationJob) GetCancelable() bool {
	if o == nil || IsNil(o.Cancelable) {
		var ret bool
		return ret
	}
	return *o.Cancelable
}

// GetCancelableOk returns a tuple with the Cancelable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualizationJob) GetCancelableOk() (*bool, bool) {
	if o == nil || IsNil(o.Cancelable) {
		return nil, false
	}
	return o.Cancelable, true
}

// HasCancelable returns a boolean if a field has been set.
func (o *VirtualizationJob) HasCancelable() bool {
	if o != nil && !IsNil(o.Cancelable) {
		return true
	}

	return false
}

// SetCancelable gets a reference to the given bool and assigns it to the Cancelable field.
func (o *VirtualizationJob) SetCancelable(v bool) {
	o.Cancelable = &v
}

// GetQueued returns the Queued field value if set, zero value otherwise.
func (o *VirtualizationJob) GetQueued() bool {
	if o == nil || IsNil(o.Queued) {
		var ret bool
		return ret
	}
	return *o.Queued
}

// GetQueuedOk returns a tuple with the Queued field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualizationJob) GetQueuedOk() (*bool, bool) {
	if o == nil || IsNil(o.Queued) {
		return nil, false
	}
	return o.Queued, true
}

// HasQueued returns a boolean if a field has been set.
func (o *VirtualizationJob) HasQueued() bool {
	if o != nil && !IsNil(o.Queued) {
		return true
	}

	return false
}

// SetQueued gets a reference to the given bool and assigns it to the Queued field.
func (o *VirtualizationJob) SetQueued(v bool) {
	o.Queued = &v
}

// GetTitle returns the Title field value if set, zero value otherwise.
func (o *VirtualizationJob) GetTitle() string {
	if o == nil || IsNil(o.Title) {
		var ret string
		return ret
	}
	return *o.Title
}

// GetTitleOk returns a tuple with the Title field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualizationJob) GetTitleOk() (*string, bool) {
	if o == nil || IsNil(o.Title) {
		return nil, false
	}
	return o.Title, true
}

// HasTitle returns a boolean if a field has been set.
func (o *VirtualizationJob) HasTitle() bool {
	if o != nil && !IsNil(o.Title) {
		return true
	}

	return false
}

// SetTitle gets a reference to the given string and assigns it to the Title field.
func (o *VirtualizationJob) SetTitle(v string) {
	o.Title = &v
}

// GetCancelReason returns the CancelReason field value if set, zero value otherwise.
func (o *VirtualizationJob) GetCancelReason() string {
	if o == nil || IsNil(o.CancelReason) {
		var ret string
		return ret
	}
	return *o.CancelReason
}

// GetCancelReasonOk returns a tuple with the CancelReason field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualizationJob) GetCancelReasonOk() (*string, bool) {
	if o == nil || IsNil(o.CancelReason) {
		return nil, false
	}
	return o.CancelReason, true
}

// HasCancelReason returns a boolean if a field has been set.
func (o *VirtualizationJob) HasCancelReason() bool {
	if o != nil && !IsNil(o.CancelReason) {
		return true
	}

	return false
}

// SetCancelReason gets a reference to the given string and assigns it to the CancelReason field.
func (o *VirtualizationJob) SetCancelReason(v string) {
	o.CancelReason = &v
}

// GetPercentComplete returns the PercentComplete field value if set, zero value otherwise.
func (o *VirtualizationJob) GetPercentComplete() int32 {
	if o == nil || IsNil(o.PercentComplete) {
		var ret int32
		return ret
	}
	return *o.PercentComplete
}

// GetPercentCompleteOk returns a tuple with the PercentComplete field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualizationJob) GetPercentCompleteOk() (*int32, bool) {
	if o == nil || IsNil(o.PercentComplete) {
		return nil, false
	}
	return o.PercentComplete, true
}

// HasPercentComplete returns a boolean if a field has been set.
func (o *VirtualizationJob) HasPercentComplete() bool {
	if o != nil && !IsNil(o.PercentComplete) {
		return true
	}

	return false
}

// SetPercentComplete gets a reference to the given int32 and assigns it to the PercentComplete field.
func (o *VirtualizationJob) SetPercentComplete(v int32) {
	o.PercentComplete = &v
}

// GetRunDuration returns the RunDuration field value if set, zero value otherwise.
func (o *VirtualizationJob) GetRunDuration() int64 {
	if o == nil || IsNil(o.RunDuration) {
		var ret int64
		return ret
	}
	return *o.RunDuration
}

// GetRunDurationOk returns a tuple with the RunDuration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualizationJob) GetRunDurationOk() (*int64, bool) {
	if o == nil || IsNil(o.RunDuration) {
		return nil, false
	}
	return o.RunDuration, true
}

// HasRunDuration returns a boolean if a field has been set.
func (o *VirtualizationJob) HasRunDuration() bool {
	if o != nil && !IsNil(o.RunDuration) {
		return true
	}

	return false
}

// SetRunDuration gets a reference to the given int64 and assigns it to the RunDuration field.
func (o *VirtualizationJob) SetRunDuration(v int64) {
	o.RunDuration = &v
}

// GetEvents returns the Events field value if set, zero value otherwise.
func (o *VirtualizationJob) GetEvents() []VirtualizationJobEvent {
	if o == nil || IsNil(o.Events) {
		var ret []VirtualizationJobEvent
		return ret
	}
	return o.Events
}

// GetEventsOk returns a tuple with the Events field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualizationJob) GetEventsOk() ([]VirtualizationJobEvent, bool) {
	if o == nil || IsNil(o.Events) {
		return nil, false
	}
	return o.Events, true
}

// HasEvents returns a boolean if a field has been set.
func (o *VirtualizationJob) HasEvents() bool {
	if o != nil && !IsNil(o.Events) {
		return true
	}

	return false
}

// SetEvents gets a reference to the given []VirtualizationJobEvent and assigns it to the Events field.
func (o *VirtualizationJob) SetEvents(v []VirtualizationJobEvent) {
	o.Events = v
}

func (o VirtualizationJob) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VirtualizationJob) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.EngineJobId) {
		toSerialize["engine_job_id"] = o.EngineJobId
	}
	if !IsNil(o.EngineId) {
		toSerialize["engine_id"] = o.EngineId
	}
	if !IsNil(o.LegacyJobType) {
		toSerialize["legacy_job_type"] = o.LegacyJobType
	}
	if !IsNil(o.JobType) {
		toSerialize["job_type"] = o.JobType
	}
	if !IsNil(o.TargetObjectId) {
		toSerialize["target_object_id"] = o.TargetObjectId
	}
	if !IsNil(o.LegacyTargetObjectType) {
		toSerialize["legacy_target_object_type"] = o.LegacyTargetObjectType
	}
	if !IsNil(o.TargetObjectType) {
		toSerialize["target_object_type"] = o.TargetObjectType
	}
	if !IsNil(o.JobState) {
		toSerialize["job_state"] = o.JobState
	}
	if !IsNil(o.StartTime) {
		toSerialize["start_time"] = o.StartTime
	}
	if !IsNil(o.UpdateTime) {
		toSerialize["update_time"] = o.UpdateTime
	}
	if !IsNil(o.Suspendable) {
		toSerialize["suspendable"] = o.Suspendable
	}
	if !IsNil(o.Cancelable) {
		toSerialize["cancelable"] = o.Cancelable
	}
	if !IsNil(o.Queued) {
		toSerialize["queued"] = o.Queued
	}
	if !IsNil(o.Title) {
		toSerialize["title"] = o.Title
	}
	if !IsNil(o.CancelReason) {
		toSerialize["cancel_reason"] = o.CancelReason
	}
	if !IsNil(o.PercentComplete) {
		toSerialize["percent_complete"] = o.PercentComplete
	}
	if !IsNil(o.RunDuration) {
		toSerialize["run_duration"] = o.RunDuration
	}
	if !IsNil(o.Events) {
		toSerialize["events"] = o.Events
	}
	return toSerialize, nil
}

type NullableVirtualizationJob struct {
	value *VirtualizationJob
	isSet bool
}

func (v NullableVirtualizationJob) Get() *VirtualizationJob {
	return v.value
}

func (v *NullableVirtualizationJob) Set(val *VirtualizationJob) {
	v.value = val
	v.isSet = true
}

func (v NullableVirtualizationJob) IsSet() bool {
	return v.isSet
}

func (v *NullableVirtualizationJob) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVirtualizationJob(val *VirtualizationJob) *NullableVirtualizationJob {
	return &NullableVirtualizationJob{value: val, isSet: true}
}

func (v NullableVirtualizationJob) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVirtualizationJob) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


