/*
Delphix DCT API

Delphix DCT API

API version: 3.18.0
Contact: support@delphix.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package delphix_dct_api

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the VirtualizationStorageSummaryData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VirtualizationStorageSummaryData{}

// VirtualizationStorageSummaryData struct for VirtualizationStorageSummaryData
type VirtualizationStorageSummaryData struct {
	// A reference to the engine.
	EngineId string `json:"engine_id"`
	// The engine name.
	EngineName string `json:"engine_name"`
	// The engine hostname.
	EngineHostname string `json:"engine_hostname"`
	// The total amount of storage allocated for engine objects and system metadata, in bytes.
	TotalCapacity *int64 `json:"total_capacity,omitempty"`
	// The amount of available storage, in bytes.
	FreeStorage *int64 `json:"free_storage,omitempty"`
	// The amount of storage used by engine objects and system metadata, in bytes.
	UsedStorage *int64 `json:"used_storage,omitempty"`
	// The percentage of storage used.
	UsedPercentage *float32 `json:"used_percentage,omitempty"`
	// The number of dSources on the engine.
	DsourceCount *int64 `json:"dsource_count,omitempty"`
	// The number of VDBs on the engine.
	VdbCount *int64 `json:"vdb_count,omitempty"`
	// The total number of dSources and VDBs on the engine.
	TotalObjectCount *int64 `json:"total_object_count,omitempty"`
	// The amount of storage reversed by the engine as a safety buffer, in bytes.
	ReservedStorage *int64 `json:"reserved_storage,omitempty"`
	// The amount of storage used by all dSources on the engine, in bytes.
	DsourceUsedStorage *int64 `json:"dsource_used_storage,omitempty"`
	// The amount of storage used by all VDBs on the engine, in bytes.
	VdbUsedStorage *int64 `json:"vdb_used_storage,omitempty"`
}

type _VirtualizationStorageSummaryData VirtualizationStorageSummaryData

// NewVirtualizationStorageSummaryData instantiates a new VirtualizationStorageSummaryData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVirtualizationStorageSummaryData(engineId string, engineName string, engineHostname string) *VirtualizationStorageSummaryData {
	this := VirtualizationStorageSummaryData{}
	this.EngineId = engineId
	this.EngineName = engineName
	this.EngineHostname = engineHostname
	return &this
}

// NewVirtualizationStorageSummaryDataWithDefaults instantiates a new VirtualizationStorageSummaryData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVirtualizationStorageSummaryDataWithDefaults() *VirtualizationStorageSummaryData {
	this := VirtualizationStorageSummaryData{}
	return &this
}

// GetEngineId returns the EngineId field value
func (o *VirtualizationStorageSummaryData) GetEngineId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EngineId
}

// GetEngineIdOk returns a tuple with the EngineId field value
// and a boolean to check if the value has been set.
func (o *VirtualizationStorageSummaryData) GetEngineIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EngineId, true
}

// SetEngineId sets field value
func (o *VirtualizationStorageSummaryData) SetEngineId(v string) {
	o.EngineId = v
}

// GetEngineName returns the EngineName field value
func (o *VirtualizationStorageSummaryData) GetEngineName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EngineName
}

// GetEngineNameOk returns a tuple with the EngineName field value
// and a boolean to check if the value has been set.
func (o *VirtualizationStorageSummaryData) GetEngineNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EngineName, true
}

// SetEngineName sets field value
func (o *VirtualizationStorageSummaryData) SetEngineName(v string) {
	o.EngineName = v
}

// GetEngineHostname returns the EngineHostname field value
func (o *VirtualizationStorageSummaryData) GetEngineHostname() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EngineHostname
}

// GetEngineHostnameOk returns a tuple with the EngineHostname field value
// and a boolean to check if the value has been set.
func (o *VirtualizationStorageSummaryData) GetEngineHostnameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EngineHostname, true
}

// SetEngineHostname sets field value
func (o *VirtualizationStorageSummaryData) SetEngineHostname(v string) {
	o.EngineHostname = v
}

// GetTotalCapacity returns the TotalCapacity field value if set, zero value otherwise.
func (o *VirtualizationStorageSummaryData) GetTotalCapacity() int64 {
	if o == nil || IsNil(o.TotalCapacity) {
		var ret int64
		return ret
	}
	return *o.TotalCapacity
}

// GetTotalCapacityOk returns a tuple with the TotalCapacity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualizationStorageSummaryData) GetTotalCapacityOk() (*int64, bool) {
	if o == nil || IsNil(o.TotalCapacity) {
		return nil, false
	}
	return o.TotalCapacity, true
}

// HasTotalCapacity returns a boolean if a field has been set.
func (o *VirtualizationStorageSummaryData) HasTotalCapacity() bool {
	if o != nil && !IsNil(o.TotalCapacity) {
		return true
	}

	return false
}

// SetTotalCapacity gets a reference to the given int64 and assigns it to the TotalCapacity field.
func (o *VirtualizationStorageSummaryData) SetTotalCapacity(v int64) {
	o.TotalCapacity = &v
}

// GetFreeStorage returns the FreeStorage field value if set, zero value otherwise.
func (o *VirtualizationStorageSummaryData) GetFreeStorage() int64 {
	if o == nil || IsNil(o.FreeStorage) {
		var ret int64
		return ret
	}
	return *o.FreeStorage
}

// GetFreeStorageOk returns a tuple with the FreeStorage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualizationStorageSummaryData) GetFreeStorageOk() (*int64, bool) {
	if o == nil || IsNil(o.FreeStorage) {
		return nil, false
	}
	return o.FreeStorage, true
}

// HasFreeStorage returns a boolean if a field has been set.
func (o *VirtualizationStorageSummaryData) HasFreeStorage() bool {
	if o != nil && !IsNil(o.FreeStorage) {
		return true
	}

	return false
}

// SetFreeStorage gets a reference to the given int64 and assigns it to the FreeStorage field.
func (o *VirtualizationStorageSummaryData) SetFreeStorage(v int64) {
	o.FreeStorage = &v
}

// GetUsedStorage returns the UsedStorage field value if set, zero value otherwise.
func (o *VirtualizationStorageSummaryData) GetUsedStorage() int64 {
	if o == nil || IsNil(o.UsedStorage) {
		var ret int64
		return ret
	}
	return *o.UsedStorage
}

// GetUsedStorageOk returns a tuple with the UsedStorage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualizationStorageSummaryData) GetUsedStorageOk() (*int64, bool) {
	if o == nil || IsNil(o.UsedStorage) {
		return nil, false
	}
	return o.UsedStorage, true
}

// HasUsedStorage returns a boolean if a field has been set.
func (o *VirtualizationStorageSummaryData) HasUsedStorage() bool {
	if o != nil && !IsNil(o.UsedStorage) {
		return true
	}

	return false
}

// SetUsedStorage gets a reference to the given int64 and assigns it to the UsedStorage field.
func (o *VirtualizationStorageSummaryData) SetUsedStorage(v int64) {
	o.UsedStorage = &v
}

// GetUsedPercentage returns the UsedPercentage field value if set, zero value otherwise.
func (o *VirtualizationStorageSummaryData) GetUsedPercentage() float32 {
	if o == nil || IsNil(o.UsedPercentage) {
		var ret float32
		return ret
	}
	return *o.UsedPercentage
}

// GetUsedPercentageOk returns a tuple with the UsedPercentage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualizationStorageSummaryData) GetUsedPercentageOk() (*float32, bool) {
	if o == nil || IsNil(o.UsedPercentage) {
		return nil, false
	}
	return o.UsedPercentage, true
}

// HasUsedPercentage returns a boolean if a field has been set.
func (o *VirtualizationStorageSummaryData) HasUsedPercentage() bool {
	if o != nil && !IsNil(o.UsedPercentage) {
		return true
	}

	return false
}

// SetUsedPercentage gets a reference to the given float32 and assigns it to the UsedPercentage field.
func (o *VirtualizationStorageSummaryData) SetUsedPercentage(v float32) {
	o.UsedPercentage = &v
}

// GetDsourceCount returns the DsourceCount field value if set, zero value otherwise.
func (o *VirtualizationStorageSummaryData) GetDsourceCount() int64 {
	if o == nil || IsNil(o.DsourceCount) {
		var ret int64
		return ret
	}
	return *o.DsourceCount
}

// GetDsourceCountOk returns a tuple with the DsourceCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualizationStorageSummaryData) GetDsourceCountOk() (*int64, bool) {
	if o == nil || IsNil(o.DsourceCount) {
		return nil, false
	}
	return o.DsourceCount, true
}

// HasDsourceCount returns a boolean if a field has been set.
func (o *VirtualizationStorageSummaryData) HasDsourceCount() bool {
	if o != nil && !IsNil(o.DsourceCount) {
		return true
	}

	return false
}

// SetDsourceCount gets a reference to the given int64 and assigns it to the DsourceCount field.
func (o *VirtualizationStorageSummaryData) SetDsourceCount(v int64) {
	o.DsourceCount = &v
}

// GetVdbCount returns the VdbCount field value if set, zero value otherwise.
func (o *VirtualizationStorageSummaryData) GetVdbCount() int64 {
	if o == nil || IsNil(o.VdbCount) {
		var ret int64
		return ret
	}
	return *o.VdbCount
}

// GetVdbCountOk returns a tuple with the VdbCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualizationStorageSummaryData) GetVdbCountOk() (*int64, bool) {
	if o == nil || IsNil(o.VdbCount) {
		return nil, false
	}
	return o.VdbCount, true
}

// HasVdbCount returns a boolean if a field has been set.
func (o *VirtualizationStorageSummaryData) HasVdbCount() bool {
	if o != nil && !IsNil(o.VdbCount) {
		return true
	}

	return false
}

// SetVdbCount gets a reference to the given int64 and assigns it to the VdbCount field.
func (o *VirtualizationStorageSummaryData) SetVdbCount(v int64) {
	o.VdbCount = &v
}

// GetTotalObjectCount returns the TotalObjectCount field value if set, zero value otherwise.
func (o *VirtualizationStorageSummaryData) GetTotalObjectCount() int64 {
	if o == nil || IsNil(o.TotalObjectCount) {
		var ret int64
		return ret
	}
	return *o.TotalObjectCount
}

// GetTotalObjectCountOk returns a tuple with the TotalObjectCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualizationStorageSummaryData) GetTotalObjectCountOk() (*int64, bool) {
	if o == nil || IsNil(o.TotalObjectCount) {
		return nil, false
	}
	return o.TotalObjectCount, true
}

// HasTotalObjectCount returns a boolean if a field has been set.
func (o *VirtualizationStorageSummaryData) HasTotalObjectCount() bool {
	if o != nil && !IsNil(o.TotalObjectCount) {
		return true
	}

	return false
}

// SetTotalObjectCount gets a reference to the given int64 and assigns it to the TotalObjectCount field.
func (o *VirtualizationStorageSummaryData) SetTotalObjectCount(v int64) {
	o.TotalObjectCount = &v
}

// GetReservedStorage returns the ReservedStorage field value if set, zero value otherwise.
func (o *VirtualizationStorageSummaryData) GetReservedStorage() int64 {
	if o == nil || IsNil(o.ReservedStorage) {
		var ret int64
		return ret
	}
	return *o.ReservedStorage
}

// GetReservedStorageOk returns a tuple with the ReservedStorage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualizationStorageSummaryData) GetReservedStorageOk() (*int64, bool) {
	if o == nil || IsNil(o.ReservedStorage) {
		return nil, false
	}
	return o.ReservedStorage, true
}

// HasReservedStorage returns a boolean if a field has been set.
func (o *VirtualizationStorageSummaryData) HasReservedStorage() bool {
	if o != nil && !IsNil(o.ReservedStorage) {
		return true
	}

	return false
}

// SetReservedStorage gets a reference to the given int64 and assigns it to the ReservedStorage field.
func (o *VirtualizationStorageSummaryData) SetReservedStorage(v int64) {
	o.ReservedStorage = &v
}

// GetDsourceUsedStorage returns the DsourceUsedStorage field value if set, zero value otherwise.
func (o *VirtualizationStorageSummaryData) GetDsourceUsedStorage() int64 {
	if o == nil || IsNil(o.DsourceUsedStorage) {
		var ret int64
		return ret
	}
	return *o.DsourceUsedStorage
}

// GetDsourceUsedStorageOk returns a tuple with the DsourceUsedStorage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualizationStorageSummaryData) GetDsourceUsedStorageOk() (*int64, bool) {
	if o == nil || IsNil(o.DsourceUsedStorage) {
		return nil, false
	}
	return o.DsourceUsedStorage, true
}

// HasDsourceUsedStorage returns a boolean if a field has been set.
func (o *VirtualizationStorageSummaryData) HasDsourceUsedStorage() bool {
	if o != nil && !IsNil(o.DsourceUsedStorage) {
		return true
	}

	return false
}

// SetDsourceUsedStorage gets a reference to the given int64 and assigns it to the DsourceUsedStorage field.
func (o *VirtualizationStorageSummaryData) SetDsourceUsedStorage(v int64) {
	o.DsourceUsedStorage = &v
}

// GetVdbUsedStorage returns the VdbUsedStorage field value if set, zero value otherwise.
func (o *VirtualizationStorageSummaryData) GetVdbUsedStorage() int64 {
	if o == nil || IsNil(o.VdbUsedStorage) {
		var ret int64
		return ret
	}
	return *o.VdbUsedStorage
}

// GetVdbUsedStorageOk returns a tuple with the VdbUsedStorage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualizationStorageSummaryData) GetVdbUsedStorageOk() (*int64, bool) {
	if o == nil || IsNil(o.VdbUsedStorage) {
		return nil, false
	}
	return o.VdbUsedStorage, true
}

// HasVdbUsedStorage returns a boolean if a field has been set.
func (o *VirtualizationStorageSummaryData) HasVdbUsedStorage() bool {
	if o != nil && !IsNil(o.VdbUsedStorage) {
		return true
	}

	return false
}

// SetVdbUsedStorage gets a reference to the given int64 and assigns it to the VdbUsedStorage field.
func (o *VirtualizationStorageSummaryData) SetVdbUsedStorage(v int64) {
	o.VdbUsedStorage = &v
}

func (o VirtualizationStorageSummaryData) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VirtualizationStorageSummaryData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["engine_id"] = o.EngineId
	toSerialize["engine_name"] = o.EngineName
	toSerialize["engine_hostname"] = o.EngineHostname
	if !IsNil(o.TotalCapacity) {
		toSerialize["total_capacity"] = o.TotalCapacity
	}
	if !IsNil(o.FreeStorage) {
		toSerialize["free_storage"] = o.FreeStorage
	}
	if !IsNil(o.UsedStorage) {
		toSerialize["used_storage"] = o.UsedStorage
	}
	if !IsNil(o.UsedPercentage) {
		toSerialize["used_percentage"] = o.UsedPercentage
	}
	if !IsNil(o.DsourceCount) {
		toSerialize["dsource_count"] = o.DsourceCount
	}
	if !IsNil(o.VdbCount) {
		toSerialize["vdb_count"] = o.VdbCount
	}
	if !IsNil(o.TotalObjectCount) {
		toSerialize["total_object_count"] = o.TotalObjectCount
	}
	if !IsNil(o.ReservedStorage) {
		toSerialize["reserved_storage"] = o.ReservedStorage
	}
	if !IsNil(o.DsourceUsedStorage) {
		toSerialize["dsource_used_storage"] = o.DsourceUsedStorage
	}
	if !IsNil(o.VdbUsedStorage) {
		toSerialize["vdb_used_storage"] = o.VdbUsedStorage
	}
	return toSerialize, nil
}

func (o *VirtualizationStorageSummaryData) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"engine_id",
		"engine_name",
		"engine_hostname",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varVirtualizationStorageSummaryData := _VirtualizationStorageSummaryData{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varVirtualizationStorageSummaryData)

	if err != nil {
		return err
	}

	*o = VirtualizationStorageSummaryData(varVirtualizationStorageSummaryData)

	return err
}

type NullableVirtualizationStorageSummaryData struct {
	value *VirtualizationStorageSummaryData
	isSet bool
}

func (v NullableVirtualizationStorageSummaryData) Get() *VirtualizationStorageSummaryData {
	return v.value
}

func (v *NullableVirtualizationStorageSummaryData) Set(val *VirtualizationStorageSummaryData) {
	v.value = val
	v.isSet = true
}

func (v NullableVirtualizationStorageSummaryData) IsSet() bool {
	return v.isSet
}

func (v *NullableVirtualizationStorageSummaryData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVirtualizationStorageSummaryData(val *VirtualizationStorageSummaryData) *NullableVirtualizationStorageSummaryData {
	return &NullableVirtualizationStorageSummaryData{value: val, isSet: true}
}

func (v NullableVirtualizationStorageSummaryData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVirtualizationStorageSummaryData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


