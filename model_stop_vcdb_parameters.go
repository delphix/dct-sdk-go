/*
Delphix DCT API

Delphix DCT API

API version: 3.17.0
Contact: support@delphix.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package delphix_dct_api

import (
	"encoding/json"
)

// checks if the StopVCDBParameters type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &StopVCDBParameters{}

// StopVCDBParameters Parameters to stop a vCDB.
type StopVCDBParameters struct {
	// List of specific Virtual Container Database Instances to stop.
	Instances []int32 `json:"instances,omitempty"`
	// Whether to issue 'shutdown abort' to shutdown Virtual Container DB instances.
	Abort *bool `json:"abort,omitempty"`
}

// NewStopVCDBParameters instantiates a new StopVCDBParameters object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStopVCDBParameters() *StopVCDBParameters {
	this := StopVCDBParameters{}
	var abort bool = false
	this.Abort = &abort
	return &this
}

// NewStopVCDBParametersWithDefaults instantiates a new StopVCDBParameters object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStopVCDBParametersWithDefaults() *StopVCDBParameters {
	this := StopVCDBParameters{}
	var abort bool = false
	this.Abort = &abort
	return &this
}

// GetInstances returns the Instances field value if set, zero value otherwise.
func (o *StopVCDBParameters) GetInstances() []int32 {
	if o == nil || IsNil(o.Instances) {
		var ret []int32
		return ret
	}
	return o.Instances
}

// GetInstancesOk returns a tuple with the Instances field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StopVCDBParameters) GetInstancesOk() ([]int32, bool) {
	if o == nil || IsNil(o.Instances) {
		return nil, false
	}
	return o.Instances, true
}

// HasInstances returns a boolean if a field has been set.
func (o *StopVCDBParameters) HasInstances() bool {
	if o != nil && !IsNil(o.Instances) {
		return true
	}

	return false
}

// SetInstances gets a reference to the given []int32 and assigns it to the Instances field.
func (o *StopVCDBParameters) SetInstances(v []int32) {
	o.Instances = v
}

// GetAbort returns the Abort field value if set, zero value otherwise.
func (o *StopVCDBParameters) GetAbort() bool {
	if o == nil || IsNil(o.Abort) {
		var ret bool
		return ret
	}
	return *o.Abort
}

// GetAbortOk returns a tuple with the Abort field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StopVCDBParameters) GetAbortOk() (*bool, bool) {
	if o == nil || IsNil(o.Abort) {
		return nil, false
	}
	return o.Abort, true
}

// HasAbort returns a boolean if a field has been set.
func (o *StopVCDBParameters) HasAbort() bool {
	if o != nil && !IsNil(o.Abort) {
		return true
	}

	return false
}

// SetAbort gets a reference to the given bool and assigns it to the Abort field.
func (o *StopVCDBParameters) SetAbort(v bool) {
	o.Abort = &v
}

func (o StopVCDBParameters) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o StopVCDBParameters) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Instances) {
		toSerialize["instances"] = o.Instances
	}
	if !IsNil(o.Abort) {
		toSerialize["abort"] = o.Abort
	}
	return toSerialize, nil
}

type NullableStopVCDBParameters struct {
	value *StopVCDBParameters
	isSet bool
}

func (v NullableStopVCDBParameters) Get() *StopVCDBParameters {
	return v.value
}

func (v *NullableStopVCDBParameters) Set(val *StopVCDBParameters) {
	v.value = val
	v.isSet = true
}

func (v NullableStopVCDBParameters) IsSet() bool {
	return v.isSet
}

func (v *NullableStopVCDBParameters) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStopVCDBParameters(val *StopVCDBParameters) *NullableStopVCDBParameters {
	return &NullableStopVCDBParameters{value: val, isSet: true}
}

func (v NullableStopVCDBParameters) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStopVCDBParameters) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


