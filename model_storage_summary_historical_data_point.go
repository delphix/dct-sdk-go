/*
Delphix DCT API

Delphix DCT API

API version: 3.18.0
Contact: support@delphix.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package delphix_dct_api

import (
	"encoding/json"
)

// checks if the StorageSummaryHistoricalDataPoint type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &StorageSummaryHistoricalDataPoint{}

// StorageSummaryHistoricalDataPoint struct for StorageSummaryHistoricalDataPoint
type StorageSummaryHistoricalDataPoint struct {
	Timestamp *string `json:"timestamp,omitempty"`
	// The amount of available storage, in bytes.
	FreeStorage *int64 `json:"free_storage,omitempty"`
	// The amount of storage used by engine objects, in bytes.
	UsedStorage *int64 `json:"used_storage,omitempty"`
	// The amount of reserved space, in bytes.
	ReservedStorage *int64 `json:"reserved_storage,omitempty"`
}

// NewStorageSummaryHistoricalDataPoint instantiates a new StorageSummaryHistoricalDataPoint object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStorageSummaryHistoricalDataPoint() *StorageSummaryHistoricalDataPoint {
	this := StorageSummaryHistoricalDataPoint{}
	return &this
}

// NewStorageSummaryHistoricalDataPointWithDefaults instantiates a new StorageSummaryHistoricalDataPoint object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStorageSummaryHistoricalDataPointWithDefaults() *StorageSummaryHistoricalDataPoint {
	this := StorageSummaryHistoricalDataPoint{}
	return &this
}

// GetTimestamp returns the Timestamp field value if set, zero value otherwise.
func (o *StorageSummaryHistoricalDataPoint) GetTimestamp() string {
	if o == nil || IsNil(o.Timestamp) {
		var ret string
		return ret
	}
	return *o.Timestamp
}

// GetTimestampOk returns a tuple with the Timestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageSummaryHistoricalDataPoint) GetTimestampOk() (*string, bool) {
	if o == nil || IsNil(o.Timestamp) {
		return nil, false
	}
	return o.Timestamp, true
}

// HasTimestamp returns a boolean if a field has been set.
func (o *StorageSummaryHistoricalDataPoint) HasTimestamp() bool {
	if o != nil && !IsNil(o.Timestamp) {
		return true
	}

	return false
}

// SetTimestamp gets a reference to the given string and assigns it to the Timestamp field.
func (o *StorageSummaryHistoricalDataPoint) SetTimestamp(v string) {
	o.Timestamp = &v
}

// GetFreeStorage returns the FreeStorage field value if set, zero value otherwise.
func (o *StorageSummaryHistoricalDataPoint) GetFreeStorage() int64 {
	if o == nil || IsNil(o.FreeStorage) {
		var ret int64
		return ret
	}
	return *o.FreeStorage
}

// GetFreeStorageOk returns a tuple with the FreeStorage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageSummaryHistoricalDataPoint) GetFreeStorageOk() (*int64, bool) {
	if o == nil || IsNil(o.FreeStorage) {
		return nil, false
	}
	return o.FreeStorage, true
}

// HasFreeStorage returns a boolean if a field has been set.
func (o *StorageSummaryHistoricalDataPoint) HasFreeStorage() bool {
	if o != nil && !IsNil(o.FreeStorage) {
		return true
	}

	return false
}

// SetFreeStorage gets a reference to the given int64 and assigns it to the FreeStorage field.
func (o *StorageSummaryHistoricalDataPoint) SetFreeStorage(v int64) {
	o.FreeStorage = &v
}

// GetUsedStorage returns the UsedStorage field value if set, zero value otherwise.
func (o *StorageSummaryHistoricalDataPoint) GetUsedStorage() int64 {
	if o == nil || IsNil(o.UsedStorage) {
		var ret int64
		return ret
	}
	return *o.UsedStorage
}

// GetUsedStorageOk returns a tuple with the UsedStorage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageSummaryHistoricalDataPoint) GetUsedStorageOk() (*int64, bool) {
	if o == nil || IsNil(o.UsedStorage) {
		return nil, false
	}
	return o.UsedStorage, true
}

// HasUsedStorage returns a boolean if a field has been set.
func (o *StorageSummaryHistoricalDataPoint) HasUsedStorage() bool {
	if o != nil && !IsNil(o.UsedStorage) {
		return true
	}

	return false
}

// SetUsedStorage gets a reference to the given int64 and assigns it to the UsedStorage field.
func (o *StorageSummaryHistoricalDataPoint) SetUsedStorage(v int64) {
	o.UsedStorage = &v
}

// GetReservedStorage returns the ReservedStorage field value if set, zero value otherwise.
func (o *StorageSummaryHistoricalDataPoint) GetReservedStorage() int64 {
	if o == nil || IsNil(o.ReservedStorage) {
		var ret int64
		return ret
	}
	return *o.ReservedStorage
}

// GetReservedStorageOk returns a tuple with the ReservedStorage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageSummaryHistoricalDataPoint) GetReservedStorageOk() (*int64, bool) {
	if o == nil || IsNil(o.ReservedStorage) {
		return nil, false
	}
	return o.ReservedStorage, true
}

// HasReservedStorage returns a boolean if a field has been set.
func (o *StorageSummaryHistoricalDataPoint) HasReservedStorage() bool {
	if o != nil && !IsNil(o.ReservedStorage) {
		return true
	}

	return false
}

// SetReservedStorage gets a reference to the given int64 and assigns it to the ReservedStorage field.
func (o *StorageSummaryHistoricalDataPoint) SetReservedStorage(v int64) {
	o.ReservedStorage = &v
}

func (o StorageSummaryHistoricalDataPoint) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o StorageSummaryHistoricalDataPoint) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Timestamp) {
		toSerialize["timestamp"] = o.Timestamp
	}
	if !IsNil(o.FreeStorage) {
		toSerialize["free_storage"] = o.FreeStorage
	}
	if !IsNil(o.UsedStorage) {
		toSerialize["used_storage"] = o.UsedStorage
	}
	if !IsNil(o.ReservedStorage) {
		toSerialize["reserved_storage"] = o.ReservedStorage
	}
	return toSerialize, nil
}

type NullableStorageSummaryHistoricalDataPoint struct {
	value *StorageSummaryHistoricalDataPoint
	isSet bool
}

func (v NullableStorageSummaryHistoricalDataPoint) Get() *StorageSummaryHistoricalDataPoint {
	return v.value
}

func (v *NullableStorageSummaryHistoricalDataPoint) Set(val *StorageSummaryHistoricalDataPoint) {
	v.value = val
	v.isSet = true
}

func (v NullableStorageSummaryHistoricalDataPoint) IsSet() bool {
	return v.isSet
}

func (v *NullableStorageSummaryHistoricalDataPoint) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStorageSummaryHistoricalDataPoint(val *StorageSummaryHistoricalDataPoint) *NullableStorageSummaryHistoricalDataPoint {
	return &NullableStorageSummaryHistoricalDataPoint{value: val, isSet: true}
}

func (v NullableStorageSummaryHistoricalDataPoint) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStorageSummaryHistoricalDataPoint) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


