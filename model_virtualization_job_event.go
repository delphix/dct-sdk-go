/*
Delphix DCT API

Delphix DCT API

API version: 3.18.0
Contact: support@delphix.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package delphix_dct_api

import (
	"encoding/json"
	"time"
)

// checks if the VirtualizationJobEvent type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VirtualizationJobEvent{}

// VirtualizationJobEvent An event associated with a virtualization engine job.
type VirtualizationJobEvent struct {
	// The type of the event.
	EventType *string `json:"event_type,omitempty"`
	// The time the event occurred.
	EventTimestamp *time.Time `json:"event_timestamp,omitempty"`
	// The state of the event.
	EventState *string `json:"event_state,omitempty"`
	// The percentage of the event that is complete.
	PercentComplete *int32 `json:"percent_complete,omitempty"`
	// Message ID associated with the event.
	MessageCode *string `json:"message_code,omitempty"`
	// Localized message details.
	MessageDetails *string `json:"message_details,omitempty"`
	// Localized message action.
	MessageAction *string `json:"message_action,omitempty"`
	// Command output associated with the event, if applicable.
	MessageCommandOutput *string `json:"message_command_output,omitempty"`
}

// NewVirtualizationJobEvent instantiates a new VirtualizationJobEvent object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVirtualizationJobEvent() *VirtualizationJobEvent {
	this := VirtualizationJobEvent{}
	return &this
}

// NewVirtualizationJobEventWithDefaults instantiates a new VirtualizationJobEvent object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVirtualizationJobEventWithDefaults() *VirtualizationJobEvent {
	this := VirtualizationJobEvent{}
	return &this
}

// GetEventType returns the EventType field value if set, zero value otherwise.
func (o *VirtualizationJobEvent) GetEventType() string {
	if o == nil || IsNil(o.EventType) {
		var ret string
		return ret
	}
	return *o.EventType
}

// GetEventTypeOk returns a tuple with the EventType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualizationJobEvent) GetEventTypeOk() (*string, bool) {
	if o == nil || IsNil(o.EventType) {
		return nil, false
	}
	return o.EventType, true
}

// HasEventType returns a boolean if a field has been set.
func (o *VirtualizationJobEvent) HasEventType() bool {
	if o != nil && !IsNil(o.EventType) {
		return true
	}

	return false
}

// SetEventType gets a reference to the given string and assigns it to the EventType field.
func (o *VirtualizationJobEvent) SetEventType(v string) {
	o.EventType = &v
}

// GetEventTimestamp returns the EventTimestamp field value if set, zero value otherwise.
func (o *VirtualizationJobEvent) GetEventTimestamp() time.Time {
	if o == nil || IsNil(o.EventTimestamp) {
		var ret time.Time
		return ret
	}
	return *o.EventTimestamp
}

// GetEventTimestampOk returns a tuple with the EventTimestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualizationJobEvent) GetEventTimestampOk() (*time.Time, bool) {
	if o == nil || IsNil(o.EventTimestamp) {
		return nil, false
	}
	return o.EventTimestamp, true
}

// HasEventTimestamp returns a boolean if a field has been set.
func (o *VirtualizationJobEvent) HasEventTimestamp() bool {
	if o != nil && !IsNil(o.EventTimestamp) {
		return true
	}

	return false
}

// SetEventTimestamp gets a reference to the given time.Time and assigns it to the EventTimestamp field.
func (o *VirtualizationJobEvent) SetEventTimestamp(v time.Time) {
	o.EventTimestamp = &v
}

// GetEventState returns the EventState field value if set, zero value otherwise.
func (o *VirtualizationJobEvent) GetEventState() string {
	if o == nil || IsNil(o.EventState) {
		var ret string
		return ret
	}
	return *o.EventState
}

// GetEventStateOk returns a tuple with the EventState field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualizationJobEvent) GetEventStateOk() (*string, bool) {
	if o == nil || IsNil(o.EventState) {
		return nil, false
	}
	return o.EventState, true
}

// HasEventState returns a boolean if a field has been set.
func (o *VirtualizationJobEvent) HasEventState() bool {
	if o != nil && !IsNil(o.EventState) {
		return true
	}

	return false
}

// SetEventState gets a reference to the given string and assigns it to the EventState field.
func (o *VirtualizationJobEvent) SetEventState(v string) {
	o.EventState = &v
}

// GetPercentComplete returns the PercentComplete field value if set, zero value otherwise.
func (o *VirtualizationJobEvent) GetPercentComplete() int32 {
	if o == nil || IsNil(o.PercentComplete) {
		var ret int32
		return ret
	}
	return *o.PercentComplete
}

// GetPercentCompleteOk returns a tuple with the PercentComplete field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualizationJobEvent) GetPercentCompleteOk() (*int32, bool) {
	if o == nil || IsNil(o.PercentComplete) {
		return nil, false
	}
	return o.PercentComplete, true
}

// HasPercentComplete returns a boolean if a field has been set.
func (o *VirtualizationJobEvent) HasPercentComplete() bool {
	if o != nil && !IsNil(o.PercentComplete) {
		return true
	}

	return false
}

// SetPercentComplete gets a reference to the given int32 and assigns it to the PercentComplete field.
func (o *VirtualizationJobEvent) SetPercentComplete(v int32) {
	o.PercentComplete = &v
}

// GetMessageCode returns the MessageCode field value if set, zero value otherwise.
func (o *VirtualizationJobEvent) GetMessageCode() string {
	if o == nil || IsNil(o.MessageCode) {
		var ret string
		return ret
	}
	return *o.MessageCode
}

// GetMessageCodeOk returns a tuple with the MessageCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualizationJobEvent) GetMessageCodeOk() (*string, bool) {
	if o == nil || IsNil(o.MessageCode) {
		return nil, false
	}
	return o.MessageCode, true
}

// HasMessageCode returns a boolean if a field has been set.
func (o *VirtualizationJobEvent) HasMessageCode() bool {
	if o != nil && !IsNil(o.MessageCode) {
		return true
	}

	return false
}

// SetMessageCode gets a reference to the given string and assigns it to the MessageCode field.
func (o *VirtualizationJobEvent) SetMessageCode(v string) {
	o.MessageCode = &v
}

// GetMessageDetails returns the MessageDetails field value if set, zero value otherwise.
func (o *VirtualizationJobEvent) GetMessageDetails() string {
	if o == nil || IsNil(o.MessageDetails) {
		var ret string
		return ret
	}
	return *o.MessageDetails
}

// GetMessageDetailsOk returns a tuple with the MessageDetails field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualizationJobEvent) GetMessageDetailsOk() (*string, bool) {
	if o == nil || IsNil(o.MessageDetails) {
		return nil, false
	}
	return o.MessageDetails, true
}

// HasMessageDetails returns a boolean if a field has been set.
func (o *VirtualizationJobEvent) HasMessageDetails() bool {
	if o != nil && !IsNil(o.MessageDetails) {
		return true
	}

	return false
}

// SetMessageDetails gets a reference to the given string and assigns it to the MessageDetails field.
func (o *VirtualizationJobEvent) SetMessageDetails(v string) {
	o.MessageDetails = &v
}

// GetMessageAction returns the MessageAction field value if set, zero value otherwise.
func (o *VirtualizationJobEvent) GetMessageAction() string {
	if o == nil || IsNil(o.MessageAction) {
		var ret string
		return ret
	}
	return *o.MessageAction
}

// GetMessageActionOk returns a tuple with the MessageAction field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualizationJobEvent) GetMessageActionOk() (*string, bool) {
	if o == nil || IsNil(o.MessageAction) {
		return nil, false
	}
	return o.MessageAction, true
}

// HasMessageAction returns a boolean if a field has been set.
func (o *VirtualizationJobEvent) HasMessageAction() bool {
	if o != nil && !IsNil(o.MessageAction) {
		return true
	}

	return false
}

// SetMessageAction gets a reference to the given string and assigns it to the MessageAction field.
func (o *VirtualizationJobEvent) SetMessageAction(v string) {
	o.MessageAction = &v
}

// GetMessageCommandOutput returns the MessageCommandOutput field value if set, zero value otherwise.
func (o *VirtualizationJobEvent) GetMessageCommandOutput() string {
	if o == nil || IsNil(o.MessageCommandOutput) {
		var ret string
		return ret
	}
	return *o.MessageCommandOutput
}

// GetMessageCommandOutputOk returns a tuple with the MessageCommandOutput field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualizationJobEvent) GetMessageCommandOutputOk() (*string, bool) {
	if o == nil || IsNil(o.MessageCommandOutput) {
		return nil, false
	}
	return o.MessageCommandOutput, true
}

// HasMessageCommandOutput returns a boolean if a field has been set.
func (o *VirtualizationJobEvent) HasMessageCommandOutput() bool {
	if o != nil && !IsNil(o.MessageCommandOutput) {
		return true
	}

	return false
}

// SetMessageCommandOutput gets a reference to the given string and assigns it to the MessageCommandOutput field.
func (o *VirtualizationJobEvent) SetMessageCommandOutput(v string) {
	o.MessageCommandOutput = &v
}

func (o VirtualizationJobEvent) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VirtualizationJobEvent) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.EventType) {
		toSerialize["event_type"] = o.EventType
	}
	if !IsNil(o.EventTimestamp) {
		toSerialize["event_timestamp"] = o.EventTimestamp
	}
	if !IsNil(o.EventState) {
		toSerialize["event_state"] = o.EventState
	}
	if !IsNil(o.PercentComplete) {
		toSerialize["percent_complete"] = o.PercentComplete
	}
	if !IsNil(o.MessageCode) {
		toSerialize["message_code"] = o.MessageCode
	}
	if !IsNil(o.MessageDetails) {
		toSerialize["message_details"] = o.MessageDetails
	}
	if !IsNil(o.MessageAction) {
		toSerialize["message_action"] = o.MessageAction
	}
	if !IsNil(o.MessageCommandOutput) {
		toSerialize["message_command_output"] = o.MessageCommandOutput
	}
	return toSerialize, nil
}

type NullableVirtualizationJobEvent struct {
	value *VirtualizationJobEvent
	isSet bool
}

func (v NullableVirtualizationJobEvent) Get() *VirtualizationJobEvent {
	return v.value
}

func (v *NullableVirtualizationJobEvent) Set(val *VirtualizationJobEvent) {
	v.value = val
	v.isSet = true
}

func (v NullableVirtualizationJobEvent) IsSet() bool {
	return v.isSet
}

func (v *NullableVirtualizationJobEvent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVirtualizationJobEvent(val *VirtualizationJobEvent) *NullableVirtualizationJobEvent {
	return &NullableVirtualizationJobEvent{value: val, isSet: true}
}

func (v NullableVirtualizationJobEvent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVirtualizationJobEvent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


