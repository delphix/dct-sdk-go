/*
Delphix DCT API

Delphix DCT API

API version: 3.17.0
Contact: support@delphix.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package delphix_dct_api

import (
	"encoding/json"
)

// checks if the CreatePostgresSourceResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreatePostgresSourceResponse{}

// CreatePostgresSourceResponse struct for CreatePostgresSourceResponse
type CreatePostgresSourceResponse struct {
	Job *Job `json:"job,omitempty"`
	// The id of the created source.
	SourceId *string `json:"source_id,omitempty"`
}

// NewCreatePostgresSourceResponse instantiates a new CreatePostgresSourceResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreatePostgresSourceResponse() *CreatePostgresSourceResponse {
	this := CreatePostgresSourceResponse{}
	return &this
}

// NewCreatePostgresSourceResponseWithDefaults instantiates a new CreatePostgresSourceResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreatePostgresSourceResponseWithDefaults() *CreatePostgresSourceResponse {
	this := CreatePostgresSourceResponse{}
	return &this
}

// GetJob returns the Job field value if set, zero value otherwise.
func (o *CreatePostgresSourceResponse) GetJob() Job {
	if o == nil || IsNil(o.Job) {
		var ret Job
		return ret
	}
	return *o.Job
}

// GetJobOk returns a tuple with the Job field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreatePostgresSourceResponse) GetJobOk() (*Job, bool) {
	if o == nil || IsNil(o.Job) {
		return nil, false
	}
	return o.Job, true
}

// HasJob returns a boolean if a field has been set.
func (o *CreatePostgresSourceResponse) HasJob() bool {
	if o != nil && !IsNil(o.Job) {
		return true
	}

	return false
}

// SetJob gets a reference to the given Job and assigns it to the Job field.
func (o *CreatePostgresSourceResponse) SetJob(v Job) {
	o.Job = &v
}

// GetSourceId returns the SourceId field value if set, zero value otherwise.
func (o *CreatePostgresSourceResponse) GetSourceId() string {
	if o == nil || IsNil(o.SourceId) {
		var ret string
		return ret
	}
	return *o.SourceId
}

// GetSourceIdOk returns a tuple with the SourceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreatePostgresSourceResponse) GetSourceIdOk() (*string, bool) {
	if o == nil || IsNil(o.SourceId) {
		return nil, false
	}
	return o.SourceId, true
}

// HasSourceId returns a boolean if a field has been set.
func (o *CreatePostgresSourceResponse) HasSourceId() bool {
	if o != nil && !IsNil(o.SourceId) {
		return true
	}

	return false
}

// SetSourceId gets a reference to the given string and assigns it to the SourceId field.
func (o *CreatePostgresSourceResponse) SetSourceId(v string) {
	o.SourceId = &v
}

func (o CreatePostgresSourceResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreatePostgresSourceResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Job) {
		toSerialize["job"] = o.Job
	}
	if !IsNil(o.SourceId) {
		toSerialize["source_id"] = o.SourceId
	}
	return toSerialize, nil
}

type NullableCreatePostgresSourceResponse struct {
	value *CreatePostgresSourceResponse
	isSet bool
}

func (v NullableCreatePostgresSourceResponse) Get() *CreatePostgresSourceResponse {
	return v.value
}

func (v *NullableCreatePostgresSourceResponse) Set(val *CreatePostgresSourceResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableCreatePostgresSourceResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableCreatePostgresSourceResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreatePostgresSourceResponse(val *CreatePostgresSourceResponse) *NullableCreatePostgresSourceResponse {
	return &NullableCreatePostgresSourceResponse{value: val, isSet: true}
}

func (v NullableCreatePostgresSourceResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreatePostgresSourceResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


