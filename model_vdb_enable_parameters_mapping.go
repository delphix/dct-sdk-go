/*
Delphix DCT API

Delphix DCT API

API version: 3.17.0
Contact: support@delphix.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package delphix_dct_api

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the VDBEnableParametersMapping type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VDBEnableParametersMapping{}

// VDBEnableParametersMapping Parameters to enable a VDB.
type VDBEnableParametersMapping struct {
	// Whether to attempt a startup of the VDB after the enable.
	AttemptStart *bool `json:"attempt_start,omitempty"`
	// ID of the VDB to enable.
	VdbId string `json:"vdb_id"`
}

type _VDBEnableParametersMapping VDBEnableParametersMapping

// NewVDBEnableParametersMapping instantiates a new VDBEnableParametersMapping object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVDBEnableParametersMapping(vdbId string) *VDBEnableParametersMapping {
	this := VDBEnableParametersMapping{}
	var attemptStart bool = true
	this.AttemptStart = &attemptStart
	this.VdbId = vdbId
	return &this
}

// NewVDBEnableParametersMappingWithDefaults instantiates a new VDBEnableParametersMapping object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVDBEnableParametersMappingWithDefaults() *VDBEnableParametersMapping {
	this := VDBEnableParametersMapping{}
	var attemptStart bool = true
	this.AttemptStart = &attemptStart
	return &this
}

// GetAttemptStart returns the AttemptStart field value if set, zero value otherwise.
func (o *VDBEnableParametersMapping) GetAttemptStart() bool {
	if o == nil || IsNil(o.AttemptStart) {
		var ret bool
		return ret
	}
	return *o.AttemptStart
}

// GetAttemptStartOk returns a tuple with the AttemptStart field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VDBEnableParametersMapping) GetAttemptStartOk() (*bool, bool) {
	if o == nil || IsNil(o.AttemptStart) {
		return nil, false
	}
	return o.AttemptStart, true
}

// HasAttemptStart returns a boolean if a field has been set.
func (o *VDBEnableParametersMapping) HasAttemptStart() bool {
	if o != nil && !IsNil(o.AttemptStart) {
		return true
	}

	return false
}

// SetAttemptStart gets a reference to the given bool and assigns it to the AttemptStart field.
func (o *VDBEnableParametersMapping) SetAttemptStart(v bool) {
	o.AttemptStart = &v
}

// GetVdbId returns the VdbId field value
func (o *VDBEnableParametersMapping) GetVdbId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.VdbId
}

// GetVdbIdOk returns a tuple with the VdbId field value
// and a boolean to check if the value has been set.
func (o *VDBEnableParametersMapping) GetVdbIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.VdbId, true
}

// SetVdbId sets field value
func (o *VDBEnableParametersMapping) SetVdbId(v string) {
	o.VdbId = v
}

func (o VDBEnableParametersMapping) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VDBEnableParametersMapping) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AttemptStart) {
		toSerialize["attempt_start"] = o.AttemptStart
	}
	toSerialize["vdb_id"] = o.VdbId
	return toSerialize, nil
}

func (o *VDBEnableParametersMapping) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"vdb_id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varVDBEnableParametersMapping := _VDBEnableParametersMapping{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varVDBEnableParametersMapping)

	if err != nil {
		return err
	}

	*o = VDBEnableParametersMapping(varVDBEnableParametersMapping)

	return err
}

type NullableVDBEnableParametersMapping struct {
	value *VDBEnableParametersMapping
	isSet bool
}

func (v NullableVDBEnableParametersMapping) Get() *VDBEnableParametersMapping {
	return v.value
}

func (v *NullableVDBEnableParametersMapping) Set(val *VDBEnableParametersMapping) {
	v.value = val
	v.isSet = true
}

func (v NullableVDBEnableParametersMapping) IsSet() bool {
	return v.isSet
}

func (v *NullableVDBEnableParametersMapping) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVDBEnableParametersMapping(val *VDBEnableParametersMapping) *NullableVDBEnableParametersMapping {
	return &NullableVDBEnableParametersMapping{value: val, isSet: true}
}

func (v NullableVDBEnableParametersMapping) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVDBEnableParametersMapping) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


