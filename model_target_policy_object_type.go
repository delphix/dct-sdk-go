/*
Delphix DCT API

Delphix DCT API

API version: 3.17.0
Contact: support@delphix.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package delphix_dct_api

import (
	"encoding/json"
	"fmt"
)

// TargetPolicyObjectType A DCT specific target policy object type.
type TargetPolicyObjectType string

// List of TargetPolicyObjectType
const (
	TARGETPOLICYOBJECTTYPE_CDB TargetPolicyObjectType = "CDB"
	TARGETPOLICYOBJECTTYPE_DSOURCE TargetPolicyObjectType = "DSOURCE"
	TARGETPOLICYOBJECTTYPE_VCDB TargetPolicyObjectType = "VCDB"
	TARGETPOLICYOBJECTTYPE_VDB TargetPolicyObjectType = "VDB"
	TARGETPOLICYOBJECTTYPE_DATASET_GROUP TargetPolicyObjectType = "DATASET_GROUP"
	TARGETPOLICYOBJECTTYPE_REPLICATION_PROFILE TargetPolicyObjectType = "REPLICATION_PROFILE"
	TARGETPOLICYOBJECTTYPE_NAMESPACE TargetPolicyObjectType = "NAMESPACE"
)

// All allowed values of TargetPolicyObjectType enum
var AllowedTargetPolicyObjectTypeEnumValues = []TargetPolicyObjectType{
	"CDB",
	"DSOURCE",
	"VCDB",
	"VDB",
	"DATASET_GROUP",
	"REPLICATION_PROFILE",
	"NAMESPACE",
}

func (v *TargetPolicyObjectType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := TargetPolicyObjectType(value)
	for _, existing := range AllowedTargetPolicyObjectTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid TargetPolicyObjectType", value)
}

// NewTargetPolicyObjectTypeFromValue returns a pointer to a valid TargetPolicyObjectType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewTargetPolicyObjectTypeFromValue(v string) (*TargetPolicyObjectType, error) {
	ev := TargetPolicyObjectType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for TargetPolicyObjectType: valid values are %v", v, AllowedTargetPolicyObjectTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v TargetPolicyObjectType) IsValid() bool {
	for _, existing := range AllowedTargetPolicyObjectTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to TargetPolicyObjectType value
func (v TargetPolicyObjectType) Ptr() *TargetPolicyObjectType {
	return &v
}

type NullableTargetPolicyObjectType struct {
	value *TargetPolicyObjectType
	isSet bool
}

func (v NullableTargetPolicyObjectType) Get() *TargetPolicyObjectType {
	return v.value
}

func (v *NullableTargetPolicyObjectType) Set(val *TargetPolicyObjectType) {
	v.value = val
	v.isSet = true
}

func (v NullableTargetPolicyObjectType) IsSet() bool {
	return v.isSet
}

func (v *NullableTargetPolicyObjectType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTargetPolicyObjectType(val *TargetPolicyObjectType) *NullableTargetPolicyObjectType {
	return &NullableTargetPolicyObjectType{value: val, isSet: true}
}

func (v NullableTargetPolicyObjectType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTargetPolicyObjectType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

