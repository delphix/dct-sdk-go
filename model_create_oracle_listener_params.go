/*
Delphix DCT API

Delphix DCT API

API version: 3.18.0
Contact: support@delphix.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package delphix_dct_api

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CreateOracleListenerParams type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateOracleListenerParams{}

// CreateOracleListenerParams struct for CreateOracleListenerParams
type CreateOracleListenerParams struct {
	Type OracleListenerTypeEnum `json:"type"`
	// The name of the Oracle listener.
	Name *string `json:"name,omitempty"`
	// The protocol addresses of the Oracle listener.
	ProtocolAddresses []string `json:"protocol_addresses,omitempty"`
	// The id of the host on which the Oracle listener runs.
	HostId *string `json:"host_id,omitempty"`
}

type _CreateOracleListenerParams CreateOracleListenerParams

// NewCreateOracleListenerParams instantiates a new CreateOracleListenerParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateOracleListenerParams(type_ OracleListenerTypeEnum) *CreateOracleListenerParams {
	this := CreateOracleListenerParams{}
	this.Type = type_
	return &this
}

// NewCreateOracleListenerParamsWithDefaults instantiates a new CreateOracleListenerParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateOracleListenerParamsWithDefaults() *CreateOracleListenerParams {
	this := CreateOracleListenerParams{}
	return &this
}

// GetType returns the Type field value
func (o *CreateOracleListenerParams) GetType() OracleListenerTypeEnum {
	if o == nil {
		var ret OracleListenerTypeEnum
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *CreateOracleListenerParams) GetTypeOk() (*OracleListenerTypeEnum, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *CreateOracleListenerParams) SetType(v OracleListenerTypeEnum) {
	o.Type = v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *CreateOracleListenerParams) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateOracleListenerParams) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *CreateOracleListenerParams) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *CreateOracleListenerParams) SetName(v string) {
	o.Name = &v
}

// GetProtocolAddresses returns the ProtocolAddresses field value if set, zero value otherwise.
func (o *CreateOracleListenerParams) GetProtocolAddresses() []string {
	if o == nil || IsNil(o.ProtocolAddresses) {
		var ret []string
		return ret
	}
	return o.ProtocolAddresses
}

// GetProtocolAddressesOk returns a tuple with the ProtocolAddresses field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateOracleListenerParams) GetProtocolAddressesOk() ([]string, bool) {
	if o == nil || IsNil(o.ProtocolAddresses) {
		return nil, false
	}
	return o.ProtocolAddresses, true
}

// HasProtocolAddresses returns a boolean if a field has been set.
func (o *CreateOracleListenerParams) HasProtocolAddresses() bool {
	if o != nil && !IsNil(o.ProtocolAddresses) {
		return true
	}

	return false
}

// SetProtocolAddresses gets a reference to the given []string and assigns it to the ProtocolAddresses field.
func (o *CreateOracleListenerParams) SetProtocolAddresses(v []string) {
	o.ProtocolAddresses = v
}

// GetHostId returns the HostId field value if set, zero value otherwise.
func (o *CreateOracleListenerParams) GetHostId() string {
	if o == nil || IsNil(o.HostId) {
		var ret string
		return ret
	}
	return *o.HostId
}

// GetHostIdOk returns a tuple with the HostId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateOracleListenerParams) GetHostIdOk() (*string, bool) {
	if o == nil || IsNil(o.HostId) {
		return nil, false
	}
	return o.HostId, true
}

// HasHostId returns a boolean if a field has been set.
func (o *CreateOracleListenerParams) HasHostId() bool {
	if o != nil && !IsNil(o.HostId) {
		return true
	}

	return false
}

// SetHostId gets a reference to the given string and assigns it to the HostId field.
func (o *CreateOracleListenerParams) SetHostId(v string) {
	o.HostId = &v
}

func (o CreateOracleListenerParams) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateOracleListenerParams) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["type"] = o.Type
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.ProtocolAddresses) {
		toSerialize["protocol_addresses"] = o.ProtocolAddresses
	}
	if !IsNil(o.HostId) {
		toSerialize["host_id"] = o.HostId
	}
	return toSerialize, nil
}

func (o *CreateOracleListenerParams) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCreateOracleListenerParams := _CreateOracleListenerParams{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCreateOracleListenerParams)

	if err != nil {
		return err
	}

	*o = CreateOracleListenerParams(varCreateOracleListenerParams)

	return err
}

type NullableCreateOracleListenerParams struct {
	value *CreateOracleListenerParams
	isSet bool
}

func (v NullableCreateOracleListenerParams) Get() *CreateOracleListenerParams {
	return v.value
}

func (v *NullableCreateOracleListenerParams) Set(val *CreateOracleListenerParams) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateOracleListenerParams) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateOracleListenerParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateOracleListenerParams(val *CreateOracleListenerParams) *NullableCreateOracleListenerParams {
	return &NullableCreateOracleListenerParams{value: val, isSet: true}
}

func (v NullableCreateOracleListenerParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateOracleListenerParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


