/*
Delphix DCT API

Delphix DCT API

API version: 3.18.0
Contact: support@delphix.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package delphix_dct_api

import (
	"encoding/json"
)

// checks if the VirtualizationFaultResolveOrIgnoreParameters type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VirtualizationFaultResolveOrIgnoreParameters{}

// VirtualizationFaultResolveOrIgnoreParameters Marks selected faults as resolved or ignored.
type VirtualizationFaultResolveOrIgnoreParameters struct {
	// The ID of the engine that the faults belong to.
	EngineId *string `json:"engine_id,omitempty"`
	// Flag indicating whether to ignore the selected faults if they are detected on the same objects in the future.
	Ignore *bool `json:"ignore,omitempty"`
	// The IDs of the faults to resolve or ignore.
	FaultIds []string `json:"fault_ids,omitempty"`
}

// NewVirtualizationFaultResolveOrIgnoreParameters instantiates a new VirtualizationFaultResolveOrIgnoreParameters object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVirtualizationFaultResolveOrIgnoreParameters() *VirtualizationFaultResolveOrIgnoreParameters {
	this := VirtualizationFaultResolveOrIgnoreParameters{}
	var ignore bool = false
	this.Ignore = &ignore
	return &this
}

// NewVirtualizationFaultResolveOrIgnoreParametersWithDefaults instantiates a new VirtualizationFaultResolveOrIgnoreParameters object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVirtualizationFaultResolveOrIgnoreParametersWithDefaults() *VirtualizationFaultResolveOrIgnoreParameters {
	this := VirtualizationFaultResolveOrIgnoreParameters{}
	var ignore bool = false
	this.Ignore = &ignore
	return &this
}

// GetEngineId returns the EngineId field value if set, zero value otherwise.
func (o *VirtualizationFaultResolveOrIgnoreParameters) GetEngineId() string {
	if o == nil || IsNil(o.EngineId) {
		var ret string
		return ret
	}
	return *o.EngineId
}

// GetEngineIdOk returns a tuple with the EngineId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualizationFaultResolveOrIgnoreParameters) GetEngineIdOk() (*string, bool) {
	if o == nil || IsNil(o.EngineId) {
		return nil, false
	}
	return o.EngineId, true
}

// HasEngineId returns a boolean if a field has been set.
func (o *VirtualizationFaultResolveOrIgnoreParameters) HasEngineId() bool {
	if o != nil && !IsNil(o.EngineId) {
		return true
	}

	return false
}

// SetEngineId gets a reference to the given string and assigns it to the EngineId field.
func (o *VirtualizationFaultResolveOrIgnoreParameters) SetEngineId(v string) {
	o.EngineId = &v
}

// GetIgnore returns the Ignore field value if set, zero value otherwise.
func (o *VirtualizationFaultResolveOrIgnoreParameters) GetIgnore() bool {
	if o == nil || IsNil(o.Ignore) {
		var ret bool
		return ret
	}
	return *o.Ignore
}

// GetIgnoreOk returns a tuple with the Ignore field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualizationFaultResolveOrIgnoreParameters) GetIgnoreOk() (*bool, bool) {
	if o == nil || IsNil(o.Ignore) {
		return nil, false
	}
	return o.Ignore, true
}

// HasIgnore returns a boolean if a field has been set.
func (o *VirtualizationFaultResolveOrIgnoreParameters) HasIgnore() bool {
	if o != nil && !IsNil(o.Ignore) {
		return true
	}

	return false
}

// SetIgnore gets a reference to the given bool and assigns it to the Ignore field.
func (o *VirtualizationFaultResolveOrIgnoreParameters) SetIgnore(v bool) {
	o.Ignore = &v
}

// GetFaultIds returns the FaultIds field value if set, zero value otherwise.
func (o *VirtualizationFaultResolveOrIgnoreParameters) GetFaultIds() []string {
	if o == nil || IsNil(o.FaultIds) {
		var ret []string
		return ret
	}
	return o.FaultIds
}

// GetFaultIdsOk returns a tuple with the FaultIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualizationFaultResolveOrIgnoreParameters) GetFaultIdsOk() ([]string, bool) {
	if o == nil || IsNil(o.FaultIds) {
		return nil, false
	}
	return o.FaultIds, true
}

// HasFaultIds returns a boolean if a field has been set.
func (o *VirtualizationFaultResolveOrIgnoreParameters) HasFaultIds() bool {
	if o != nil && !IsNil(o.FaultIds) {
		return true
	}

	return false
}

// SetFaultIds gets a reference to the given []string and assigns it to the FaultIds field.
func (o *VirtualizationFaultResolveOrIgnoreParameters) SetFaultIds(v []string) {
	o.FaultIds = v
}

func (o VirtualizationFaultResolveOrIgnoreParameters) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VirtualizationFaultResolveOrIgnoreParameters) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.EngineId) {
		toSerialize["engine_id"] = o.EngineId
	}
	if !IsNil(o.Ignore) {
		toSerialize["ignore"] = o.Ignore
	}
	if !IsNil(o.FaultIds) {
		toSerialize["fault_ids"] = o.FaultIds
	}
	return toSerialize, nil
}

type NullableVirtualizationFaultResolveOrIgnoreParameters struct {
	value *VirtualizationFaultResolveOrIgnoreParameters
	isSet bool
}

func (v NullableVirtualizationFaultResolveOrIgnoreParameters) Get() *VirtualizationFaultResolveOrIgnoreParameters {
	return v.value
}

func (v *NullableVirtualizationFaultResolveOrIgnoreParameters) Set(val *VirtualizationFaultResolveOrIgnoreParameters) {
	v.value = val
	v.isSet = true
}

func (v NullableVirtualizationFaultResolveOrIgnoreParameters) IsSet() bool {
	return v.isSet
}

func (v *NullableVirtualizationFaultResolveOrIgnoreParameters) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVirtualizationFaultResolveOrIgnoreParameters(val *VirtualizationFaultResolveOrIgnoreParameters) *NullableVirtualizationFaultResolveOrIgnoreParameters {
	return &NullableVirtualizationFaultResolveOrIgnoreParameters{value: val, isSet: true}
}

func (v NullableVirtualizationFaultResolveOrIgnoreParameters) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVirtualizationFaultResolveOrIgnoreParameters) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


