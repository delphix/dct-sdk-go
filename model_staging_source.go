/*
Delphix DCT API

Delphix DCT API

API version: 3.17.0
Contact: support@delphix.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package delphix_dct_api

import (
	"encoding/json"
)

// checks if the StagingSource type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &StagingSource{}

// StagingSource The Delphix representation of the staging source database (not typically managed by Delphix).
type StagingSource struct {
	// The Staging Source object entity ID.
	Id *string `json:"id,omitempty"`
	// The name of this staging source database.
	Name NullableString `json:"name,omitempty"`
	// The type of this staging source database.
	DatabaseType NullableString `json:"database_type,omitempty"`
	// The name of container database of associated with this staging source database.
	DatabaseName NullableString `json:"database_name,omitempty"`
	// The version of container database associated with this staging source database.
	DatabaseVersion NullableString `json:"database_version,omitempty"`
	// A reference to the Environment that hosts this staging source database.
	EnvironmentId NullableString `json:"environment_id,omitempty"`
	// A universal ID that uniquely identifies this staging source database.
	DataUuid NullableString `json:"data_uuid,omitempty"`
	// The IP address of the staging source's host.
	IpAddress NullableString `json:"ip_address,omitempty"`
	// The FQDN of the staging source's host.
	Fqdn NullableString `json:"fqdn,omitempty"`
	// The repository id for this staging source.
	Repository *string `json:"repository,omitempty"`
	OracleConfigType *OracleConfigTypeEnum `json:"oracle_config_type,omitempty"`
	// The cdb type for this staging source. (Oracle only)
	CdbType *string `json:"cdb_type,omitempty"`
	// The dsource_id associated with this staging source.
	DsourceId *string `json:"dsource_id,omitempty"`
	Tags []Tag `json:"tags,omitempty"`
	OracleServices []OracleService `json:"oracle_services,omitempty"`
}

// NewStagingSource instantiates a new StagingSource object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStagingSource() *StagingSource {
	this := StagingSource{}
	return &this
}

// NewStagingSourceWithDefaults instantiates a new StagingSource object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStagingSourceWithDefaults() *StagingSource {
	this := StagingSource{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *StagingSource) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StagingSource) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *StagingSource) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *StagingSource) SetId(v string) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *StagingSource) GetName() string {
	if o == nil || IsNil(o.Name.Get()) {
		var ret string
		return ret
	}
	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *StagingSource) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// HasName returns a boolean if a field has been set.
func (o *StagingSource) HasName() bool {
	if o != nil && o.Name.IsSet() {
		return true
	}

	return false
}

// SetName gets a reference to the given NullableString and assigns it to the Name field.
func (o *StagingSource) SetName(v string) {
	o.Name.Set(&v)
}
// SetNameNil sets the value for Name to be an explicit nil
func (o *StagingSource) SetNameNil() {
	o.Name.Set(nil)
}

// UnsetName ensures that no value is present for Name, not even an explicit nil
func (o *StagingSource) UnsetName() {
	o.Name.Unset()
}

// GetDatabaseType returns the DatabaseType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *StagingSource) GetDatabaseType() string {
	if o == nil || IsNil(o.DatabaseType.Get()) {
		var ret string
		return ret
	}
	return *o.DatabaseType.Get()
}

// GetDatabaseTypeOk returns a tuple with the DatabaseType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *StagingSource) GetDatabaseTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.DatabaseType.Get(), o.DatabaseType.IsSet()
}

// HasDatabaseType returns a boolean if a field has been set.
func (o *StagingSource) HasDatabaseType() bool {
	if o != nil && o.DatabaseType.IsSet() {
		return true
	}

	return false
}

// SetDatabaseType gets a reference to the given NullableString and assigns it to the DatabaseType field.
func (o *StagingSource) SetDatabaseType(v string) {
	o.DatabaseType.Set(&v)
}
// SetDatabaseTypeNil sets the value for DatabaseType to be an explicit nil
func (o *StagingSource) SetDatabaseTypeNil() {
	o.DatabaseType.Set(nil)
}

// UnsetDatabaseType ensures that no value is present for DatabaseType, not even an explicit nil
func (o *StagingSource) UnsetDatabaseType() {
	o.DatabaseType.Unset()
}

// GetDatabaseName returns the DatabaseName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *StagingSource) GetDatabaseName() string {
	if o == nil || IsNil(o.DatabaseName.Get()) {
		var ret string
		return ret
	}
	return *o.DatabaseName.Get()
}

// GetDatabaseNameOk returns a tuple with the DatabaseName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *StagingSource) GetDatabaseNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.DatabaseName.Get(), o.DatabaseName.IsSet()
}

// HasDatabaseName returns a boolean if a field has been set.
func (o *StagingSource) HasDatabaseName() bool {
	if o != nil && o.DatabaseName.IsSet() {
		return true
	}

	return false
}

// SetDatabaseName gets a reference to the given NullableString and assigns it to the DatabaseName field.
func (o *StagingSource) SetDatabaseName(v string) {
	o.DatabaseName.Set(&v)
}
// SetDatabaseNameNil sets the value for DatabaseName to be an explicit nil
func (o *StagingSource) SetDatabaseNameNil() {
	o.DatabaseName.Set(nil)
}

// UnsetDatabaseName ensures that no value is present for DatabaseName, not even an explicit nil
func (o *StagingSource) UnsetDatabaseName() {
	o.DatabaseName.Unset()
}

// GetDatabaseVersion returns the DatabaseVersion field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *StagingSource) GetDatabaseVersion() string {
	if o == nil || IsNil(o.DatabaseVersion.Get()) {
		var ret string
		return ret
	}
	return *o.DatabaseVersion.Get()
}

// GetDatabaseVersionOk returns a tuple with the DatabaseVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *StagingSource) GetDatabaseVersionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.DatabaseVersion.Get(), o.DatabaseVersion.IsSet()
}

// HasDatabaseVersion returns a boolean if a field has been set.
func (o *StagingSource) HasDatabaseVersion() bool {
	if o != nil && o.DatabaseVersion.IsSet() {
		return true
	}

	return false
}

// SetDatabaseVersion gets a reference to the given NullableString and assigns it to the DatabaseVersion field.
func (o *StagingSource) SetDatabaseVersion(v string) {
	o.DatabaseVersion.Set(&v)
}
// SetDatabaseVersionNil sets the value for DatabaseVersion to be an explicit nil
func (o *StagingSource) SetDatabaseVersionNil() {
	o.DatabaseVersion.Set(nil)
}

// UnsetDatabaseVersion ensures that no value is present for DatabaseVersion, not even an explicit nil
func (o *StagingSource) UnsetDatabaseVersion() {
	o.DatabaseVersion.Unset()
}

// GetEnvironmentId returns the EnvironmentId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *StagingSource) GetEnvironmentId() string {
	if o == nil || IsNil(o.EnvironmentId.Get()) {
		var ret string
		return ret
	}
	return *o.EnvironmentId.Get()
}

// GetEnvironmentIdOk returns a tuple with the EnvironmentId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *StagingSource) GetEnvironmentIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.EnvironmentId.Get(), o.EnvironmentId.IsSet()
}

// HasEnvironmentId returns a boolean if a field has been set.
func (o *StagingSource) HasEnvironmentId() bool {
	if o != nil && o.EnvironmentId.IsSet() {
		return true
	}

	return false
}

// SetEnvironmentId gets a reference to the given NullableString and assigns it to the EnvironmentId field.
func (o *StagingSource) SetEnvironmentId(v string) {
	o.EnvironmentId.Set(&v)
}
// SetEnvironmentIdNil sets the value for EnvironmentId to be an explicit nil
func (o *StagingSource) SetEnvironmentIdNil() {
	o.EnvironmentId.Set(nil)
}

// UnsetEnvironmentId ensures that no value is present for EnvironmentId, not even an explicit nil
func (o *StagingSource) UnsetEnvironmentId() {
	o.EnvironmentId.Unset()
}

// GetDataUuid returns the DataUuid field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *StagingSource) GetDataUuid() string {
	if o == nil || IsNil(o.DataUuid.Get()) {
		var ret string
		return ret
	}
	return *o.DataUuid.Get()
}

// GetDataUuidOk returns a tuple with the DataUuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *StagingSource) GetDataUuidOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.DataUuid.Get(), o.DataUuid.IsSet()
}

// HasDataUuid returns a boolean if a field has been set.
func (o *StagingSource) HasDataUuid() bool {
	if o != nil && o.DataUuid.IsSet() {
		return true
	}

	return false
}

// SetDataUuid gets a reference to the given NullableString and assigns it to the DataUuid field.
func (o *StagingSource) SetDataUuid(v string) {
	o.DataUuid.Set(&v)
}
// SetDataUuidNil sets the value for DataUuid to be an explicit nil
func (o *StagingSource) SetDataUuidNil() {
	o.DataUuid.Set(nil)
}

// UnsetDataUuid ensures that no value is present for DataUuid, not even an explicit nil
func (o *StagingSource) UnsetDataUuid() {
	o.DataUuid.Unset()
}

// GetIpAddress returns the IpAddress field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *StagingSource) GetIpAddress() string {
	if o == nil || IsNil(o.IpAddress.Get()) {
		var ret string
		return ret
	}
	return *o.IpAddress.Get()
}

// GetIpAddressOk returns a tuple with the IpAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *StagingSource) GetIpAddressOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.IpAddress.Get(), o.IpAddress.IsSet()
}

// HasIpAddress returns a boolean if a field has been set.
func (o *StagingSource) HasIpAddress() bool {
	if o != nil && o.IpAddress.IsSet() {
		return true
	}

	return false
}

// SetIpAddress gets a reference to the given NullableString and assigns it to the IpAddress field.
func (o *StagingSource) SetIpAddress(v string) {
	o.IpAddress.Set(&v)
}
// SetIpAddressNil sets the value for IpAddress to be an explicit nil
func (o *StagingSource) SetIpAddressNil() {
	o.IpAddress.Set(nil)
}

// UnsetIpAddress ensures that no value is present for IpAddress, not even an explicit nil
func (o *StagingSource) UnsetIpAddress() {
	o.IpAddress.Unset()
}

// GetFqdn returns the Fqdn field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *StagingSource) GetFqdn() string {
	if o == nil || IsNil(o.Fqdn.Get()) {
		var ret string
		return ret
	}
	return *o.Fqdn.Get()
}

// GetFqdnOk returns a tuple with the Fqdn field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *StagingSource) GetFqdnOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Fqdn.Get(), o.Fqdn.IsSet()
}

// HasFqdn returns a boolean if a field has been set.
func (o *StagingSource) HasFqdn() bool {
	if o != nil && o.Fqdn.IsSet() {
		return true
	}

	return false
}

// SetFqdn gets a reference to the given NullableString and assigns it to the Fqdn field.
func (o *StagingSource) SetFqdn(v string) {
	o.Fqdn.Set(&v)
}
// SetFqdnNil sets the value for Fqdn to be an explicit nil
func (o *StagingSource) SetFqdnNil() {
	o.Fqdn.Set(nil)
}

// UnsetFqdn ensures that no value is present for Fqdn, not even an explicit nil
func (o *StagingSource) UnsetFqdn() {
	o.Fqdn.Unset()
}

// GetRepository returns the Repository field value if set, zero value otherwise.
func (o *StagingSource) GetRepository() string {
	if o == nil || IsNil(o.Repository) {
		var ret string
		return ret
	}
	return *o.Repository
}

// GetRepositoryOk returns a tuple with the Repository field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StagingSource) GetRepositoryOk() (*string, bool) {
	if o == nil || IsNil(o.Repository) {
		return nil, false
	}
	return o.Repository, true
}

// HasRepository returns a boolean if a field has been set.
func (o *StagingSource) HasRepository() bool {
	if o != nil && !IsNil(o.Repository) {
		return true
	}

	return false
}

// SetRepository gets a reference to the given string and assigns it to the Repository field.
func (o *StagingSource) SetRepository(v string) {
	o.Repository = &v
}

// GetOracleConfigType returns the OracleConfigType field value if set, zero value otherwise.
func (o *StagingSource) GetOracleConfigType() OracleConfigTypeEnum {
	if o == nil || IsNil(o.OracleConfigType) {
		var ret OracleConfigTypeEnum
		return ret
	}
	return *o.OracleConfigType
}

// GetOracleConfigTypeOk returns a tuple with the OracleConfigType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StagingSource) GetOracleConfigTypeOk() (*OracleConfigTypeEnum, bool) {
	if o == nil || IsNil(o.OracleConfigType) {
		return nil, false
	}
	return o.OracleConfigType, true
}

// HasOracleConfigType returns a boolean if a field has been set.
func (o *StagingSource) HasOracleConfigType() bool {
	if o != nil && !IsNil(o.OracleConfigType) {
		return true
	}

	return false
}

// SetOracleConfigType gets a reference to the given OracleConfigTypeEnum and assigns it to the OracleConfigType field.
func (o *StagingSource) SetOracleConfigType(v OracleConfigTypeEnum) {
	o.OracleConfigType = &v
}

// GetCdbType returns the CdbType field value if set, zero value otherwise.
func (o *StagingSource) GetCdbType() string {
	if o == nil || IsNil(o.CdbType) {
		var ret string
		return ret
	}
	return *o.CdbType
}

// GetCdbTypeOk returns a tuple with the CdbType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StagingSource) GetCdbTypeOk() (*string, bool) {
	if o == nil || IsNil(o.CdbType) {
		return nil, false
	}
	return o.CdbType, true
}

// HasCdbType returns a boolean if a field has been set.
func (o *StagingSource) HasCdbType() bool {
	if o != nil && !IsNil(o.CdbType) {
		return true
	}

	return false
}

// SetCdbType gets a reference to the given string and assigns it to the CdbType field.
func (o *StagingSource) SetCdbType(v string) {
	o.CdbType = &v
}

// GetDsourceId returns the DsourceId field value if set, zero value otherwise.
func (o *StagingSource) GetDsourceId() string {
	if o == nil || IsNil(o.DsourceId) {
		var ret string
		return ret
	}
	return *o.DsourceId
}

// GetDsourceIdOk returns a tuple with the DsourceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StagingSource) GetDsourceIdOk() (*string, bool) {
	if o == nil || IsNil(o.DsourceId) {
		return nil, false
	}
	return o.DsourceId, true
}

// HasDsourceId returns a boolean if a field has been set.
func (o *StagingSource) HasDsourceId() bool {
	if o != nil && !IsNil(o.DsourceId) {
		return true
	}

	return false
}

// SetDsourceId gets a reference to the given string and assigns it to the DsourceId field.
func (o *StagingSource) SetDsourceId(v string) {
	o.DsourceId = &v
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *StagingSource) GetTags() []Tag {
	if o == nil || IsNil(o.Tags) {
		var ret []Tag
		return ret
	}
	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StagingSource) GetTagsOk() ([]Tag, bool) {
	if o == nil || IsNil(o.Tags) {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *StagingSource) HasTags() bool {
	if o != nil && !IsNil(o.Tags) {
		return true
	}

	return false
}

// SetTags gets a reference to the given []Tag and assigns it to the Tags field.
func (o *StagingSource) SetTags(v []Tag) {
	o.Tags = v
}

// GetOracleServices returns the OracleServices field value if set, zero value otherwise.
func (o *StagingSource) GetOracleServices() []OracleService {
	if o == nil || IsNil(o.OracleServices) {
		var ret []OracleService
		return ret
	}
	return o.OracleServices
}

// GetOracleServicesOk returns a tuple with the OracleServices field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StagingSource) GetOracleServicesOk() ([]OracleService, bool) {
	if o == nil || IsNil(o.OracleServices) {
		return nil, false
	}
	return o.OracleServices, true
}

// HasOracleServices returns a boolean if a field has been set.
func (o *StagingSource) HasOracleServices() bool {
	if o != nil && !IsNil(o.OracleServices) {
		return true
	}

	return false
}

// SetOracleServices gets a reference to the given []OracleService and assigns it to the OracleServices field.
func (o *StagingSource) SetOracleServices(v []OracleService) {
	o.OracleServices = v
}

func (o StagingSource) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o StagingSource) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if o.Name.IsSet() {
		toSerialize["name"] = o.Name.Get()
	}
	if o.DatabaseType.IsSet() {
		toSerialize["database_type"] = o.DatabaseType.Get()
	}
	if o.DatabaseName.IsSet() {
		toSerialize["database_name"] = o.DatabaseName.Get()
	}
	if o.DatabaseVersion.IsSet() {
		toSerialize["database_version"] = o.DatabaseVersion.Get()
	}
	if o.EnvironmentId.IsSet() {
		toSerialize["environment_id"] = o.EnvironmentId.Get()
	}
	if o.DataUuid.IsSet() {
		toSerialize["data_uuid"] = o.DataUuid.Get()
	}
	if o.IpAddress.IsSet() {
		toSerialize["ip_address"] = o.IpAddress.Get()
	}
	if o.Fqdn.IsSet() {
		toSerialize["fqdn"] = o.Fqdn.Get()
	}
	if !IsNil(o.Repository) {
		toSerialize["repository"] = o.Repository
	}
	if !IsNil(o.OracleConfigType) {
		toSerialize["oracle_config_type"] = o.OracleConfigType
	}
	if !IsNil(o.CdbType) {
		toSerialize["cdb_type"] = o.CdbType
	}
	if !IsNil(o.DsourceId) {
		toSerialize["dsource_id"] = o.DsourceId
	}
	if !IsNil(o.Tags) {
		toSerialize["tags"] = o.Tags
	}
	if !IsNil(o.OracleServices) {
		toSerialize["oracle_services"] = o.OracleServices
	}
	return toSerialize, nil
}

type NullableStagingSource struct {
	value *StagingSource
	isSet bool
}

func (v NullableStagingSource) Get() *StagingSource {
	return v.value
}

func (v *NullableStagingSource) Set(val *StagingSource) {
	v.value = val
	v.isSet = true
}

func (v NullableStagingSource) IsSet() bool {
	return v.isSet
}

func (v *NullableStagingSource) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStagingSource(val *StagingSource) *NullableStagingSource {
	return &NullableStagingSource{value: val, isSet: true}
}

func (v NullableStagingSource) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStagingSource) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


