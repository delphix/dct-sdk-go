/*
Delphix DCT API

Delphix DCT API

API version: 3.18.0
Contact: support@delphix.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package delphix_dct_api

import (
	"encoding/json"
	"fmt"
)

// ObjectTypeEnum Type of the DCT object.
type ObjectTypeEnum string

// List of ObjectTypeEnum
const (
	OBJECTTYPEENUM_ALGORITHM ObjectTypeEnum = "ALGORITHM"
	OBJECTTYPEENUM_ACCESS_GROUP ObjectTypeEnum = "ACCESS_GROUP"
	OBJECTTYPEENUM_ACCOUNT ObjectTypeEnum = "ACCOUNT"
	OBJECTTYPEENUM_ROLE ObjectTypeEnum = "ROLE"
	OBJECTTYPEENUM_BOOKMARK ObjectTypeEnum = "BOOKMARK"
	OBJECTTYPEENUM_CDB ObjectTypeEnum = "CDB"
	OBJECTTYPEENUM_CLASSIFIER ObjectTypeEnum = "CLASSIFIER"
	OBJECTTYPEENUM_DATA_CLASS ObjectTypeEnum = "DATA_CLASS"
	OBJECTTYPEENUM_DATABASE_TEMPLATE ObjectTypeEnum = "DATABASE_TEMPLATE"
	OBJECTTYPEENUM_DISCOVERY_EXPRESSION ObjectTypeEnum = "DISCOVERY_EXPRESSION"
	OBJECTTYPEENUM_DISCOVERY_POLICY ObjectTypeEnum = "DISCOVERY_POLICY"
	OBJECTTYPEENUM_DSOURCE ObjectTypeEnum = "DSOURCE"
	OBJECTTYPEENUM_ENGINE ObjectTypeEnum = "ENGINE"
	OBJECTTYPEENUM_ENVIRONMENT ObjectTypeEnum = "ENVIRONMENT"
	OBJECTTYPEENUM_MASKING_ENVIRONMENT ObjectTypeEnum = "MASKING_ENVIRONMENT"
	OBJECTTYPEENUM_MASKING_FILE_UPLOAD ObjectTypeEnum = "MASKING_FILE_UPLOAD"
	OBJECTTYPEENUM_MASKING_JOB ObjectTypeEnum = "MASKING_JOB"
	OBJECTTYPEENUM_MASKING_JOB_SET ObjectTypeEnum = "MASKING_JOB_SET"
	OBJECTTYPEENUM_REPORT_SCHEDULE ObjectTypeEnum = "REPORT_SCHEDULE"
	OBJECTTYPEENUM_RULE_SET ObjectTypeEnum = "RULE_SET"
	OBJECTTYPEENUM_SOURCE ObjectTypeEnum = "SOURCE"
	OBJECTTYPEENUM_VAULT ObjectTypeEnum = "VAULT"
	OBJECTTYPEENUM_VCDB ObjectTypeEnum = "VCDB"
	OBJECTTYPEENUM_VDB ObjectTypeEnum = "VDB"
	OBJECTTYPEENUM_VDB_GROUP ObjectTypeEnum = "VDB_GROUP"
	OBJECTTYPEENUM_CONNECTOR ObjectTypeEnum = "CONNECTOR"
	OBJECTTYPEENUM_VIRTUALIZATION_POLICY ObjectTypeEnum = "VIRTUALIZATION_POLICY"
	OBJECTTYPEENUM_DATASET_GROUP ObjectTypeEnum = "DATASET_GROUP"
	OBJECTTYPEENUM_ENGINE_VAULT ObjectTypeEnum = "ENGINE_VAULT"
	OBJECTTYPEENUM_KERBEROS_CONFIG ObjectTypeEnum = "KERBEROS_CONFIG"
	OBJECTTYPEENUM_TIMEFLOW ObjectTypeEnum = "TIMEFLOW"
	OBJECTTYPEENUM_MASKING_PLUGIN ObjectTypeEnum = "MASKING_PLUGIN"
	OBJECTTYPEENUM_HYPERSCALE_INSTANCE ObjectTypeEnum = "HYPERSCALE_INSTANCE"
	OBJECTTYPEENUM_HYPERSCALE_CONNECTOR ObjectTypeEnum = "HYPERSCALE_CONNECTOR"
	OBJECTTYPEENUM_HYPERSCALE_DATASET ObjectTypeEnum = "HYPERSCALE_DATASET"
	OBJECTTYPEENUM_TOOLKIT ObjectTypeEnum = "TOOLKIT"
	OBJECTTYPEENUM_REPLICATION_PROFILE ObjectTypeEnum = "REPLICATION_PROFILE"
	OBJECTTYPEENUM_NAMESPACE ObjectTypeEnum = "NAMESPACE"
	OBJECTTYPEENUM_STAGING_SOURCE ObjectTypeEnum = "STAGING_SOURCE"
	OBJECTTYPEENUM_DATA_LAYOUT ObjectTypeEnum = "DATA_LAYOUT"
	OBJECTTYPEENUM_SNAPSHOT ObjectTypeEnum = "SNAPSHOT"
	OBJECTTYPEENUM_JOB ObjectTypeEnum = "JOB"
)

// All allowed values of ObjectTypeEnum enum
var AllowedObjectTypeEnumEnumValues = []ObjectTypeEnum{
	"ALGORITHM",
	"ACCESS_GROUP",
	"ACCOUNT",
	"ROLE",
	"BOOKMARK",
	"CDB",
	"CLASSIFIER",
	"DATA_CLASS",
	"DATABASE_TEMPLATE",
	"DISCOVERY_EXPRESSION",
	"DISCOVERY_POLICY",
	"DSOURCE",
	"ENGINE",
	"ENVIRONMENT",
	"MASKING_ENVIRONMENT",
	"MASKING_FILE_UPLOAD",
	"MASKING_JOB",
	"MASKING_JOB_SET",
	"REPORT_SCHEDULE",
	"RULE_SET",
	"SOURCE",
	"VAULT",
	"VCDB",
	"VDB",
	"VDB_GROUP",
	"CONNECTOR",
	"VIRTUALIZATION_POLICY",
	"DATASET_GROUP",
	"ENGINE_VAULT",
	"KERBEROS_CONFIG",
	"TIMEFLOW",
	"MASKING_PLUGIN",
	"HYPERSCALE_INSTANCE",
	"HYPERSCALE_CONNECTOR",
	"HYPERSCALE_DATASET",
	"TOOLKIT",
	"REPLICATION_PROFILE",
	"NAMESPACE",
	"STAGING_SOURCE",
	"DATA_LAYOUT",
	"SNAPSHOT",
	"JOB",
}

func (v *ObjectTypeEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ObjectTypeEnum(value)
	for _, existing := range AllowedObjectTypeEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ObjectTypeEnum", value)
}

// NewObjectTypeEnumFromValue returns a pointer to a valid ObjectTypeEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewObjectTypeEnumFromValue(v string) (*ObjectTypeEnum, error) {
	ev := ObjectTypeEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ObjectTypeEnum: valid values are %v", v, AllowedObjectTypeEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ObjectTypeEnum) IsValid() bool {
	for _, existing := range AllowedObjectTypeEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ObjectTypeEnum value
func (v ObjectTypeEnum) Ptr() *ObjectTypeEnum {
	return &v
}

type NullableObjectTypeEnum struct {
	value *ObjectTypeEnum
	isSet bool
}

func (v NullableObjectTypeEnum) Get() *ObjectTypeEnum {
	return v.value
}

func (v *NullableObjectTypeEnum) Set(val *ObjectTypeEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableObjectTypeEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableObjectTypeEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableObjectTypeEnum(val *ObjectTypeEnum) *NullableObjectTypeEnum {
	return &NullableObjectTypeEnum{value: val, isSet: true}
}

func (v NullableObjectTypeEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableObjectTypeEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

