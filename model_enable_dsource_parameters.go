/*
Delphix DCT API

Delphix DCT API

API version: 3.18.0
Contact: support@delphix.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package delphix_dct_api

import (
	"encoding/json"
)

// checks if the EnableDsourceParameters type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EnableDsourceParameters{}

// EnableDsourceParameters The parameters to enable a dSource.
type EnableDsourceParameters struct {
	// Whether to attempt a startup of the source after the enable.
	AttemptStart *bool `json:"attempt_start,omitempty"`
}

// NewEnableDsourceParameters instantiates a new EnableDsourceParameters object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEnableDsourceParameters() *EnableDsourceParameters {
	this := EnableDsourceParameters{}
	var attemptStart bool = true
	this.AttemptStart = &attemptStart
	return &this
}

// NewEnableDsourceParametersWithDefaults instantiates a new EnableDsourceParameters object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEnableDsourceParametersWithDefaults() *EnableDsourceParameters {
	this := EnableDsourceParameters{}
	var attemptStart bool = true
	this.AttemptStart = &attemptStart
	return &this
}

// GetAttemptStart returns the AttemptStart field value if set, zero value otherwise.
func (o *EnableDsourceParameters) GetAttemptStart() bool {
	if o == nil || IsNil(o.AttemptStart) {
		var ret bool
		return ret
	}
	return *o.AttemptStart
}

// GetAttemptStartOk returns a tuple with the AttemptStart field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnableDsourceParameters) GetAttemptStartOk() (*bool, bool) {
	if o == nil || IsNil(o.AttemptStart) {
		return nil, false
	}
	return o.AttemptStart, true
}

// HasAttemptStart returns a boolean if a field has been set.
func (o *EnableDsourceParameters) HasAttemptStart() bool {
	if o != nil && !IsNil(o.AttemptStart) {
		return true
	}

	return false
}

// SetAttemptStart gets a reference to the given bool and assigns it to the AttemptStart field.
func (o *EnableDsourceParameters) SetAttemptStart(v bool) {
	o.AttemptStart = &v
}

func (o EnableDsourceParameters) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EnableDsourceParameters) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AttemptStart) {
		toSerialize["attempt_start"] = o.AttemptStart
	}
	return toSerialize, nil
}

type NullableEnableDsourceParameters struct {
	value *EnableDsourceParameters
	isSet bool
}

func (v NullableEnableDsourceParameters) Get() *EnableDsourceParameters {
	return v.value
}

func (v *NullableEnableDsourceParameters) Set(val *EnableDsourceParameters) {
	v.value = val
	v.isSet = true
}

func (v NullableEnableDsourceParameters) IsSet() bool {
	return v.isSet
}

func (v *NullableEnableDsourceParameters) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnableDsourceParameters(val *EnableDsourceParameters) *NullableEnableDsourceParameters {
	return &NullableEnableDsourceParameters{value: val, isSet: true}
}

func (v NullableEnableDsourceParameters) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnableDsourceParameters) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


