/*
Delphix DCT API

Delphix DCT API

API version: 3.17.0
Contact: support@delphix.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package delphix_dct_api

import (
	"encoding/json"
)

// checks if the EnginePerformanceAnalytic type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EnginePerformanceAnalytic{}

// EnginePerformanceAnalytic Analytics Information of the engine.
type EnginePerformanceAnalytic struct {
	// The engine name.
	EngineName *string `json:"engine_name,omitempty"`
	// The engine id.
	EngineId *string `json:"engine_id,omitempty"`
	// The engine type.
	EngineType *string `json:"engine_type,omitempty"`
	// The time period by which engine performance analytics data is being aggregated, in hours.
	AggregationPeriod *int32 `json:"aggregation_period,omitempty"`
	// The total number of CPU cores on this engine.
	CpuCoresCount *int32 `json:"cpu_cores_count,omitempty"`
	// The total cpu utilization of this engine, in percentage.
	CpuUtilization *float64 `json:"cpu_utilization,omitempty"`
	// The total amount of memory on this engine, in bytes.
	TotalMemory *int64 `json:"total_memory,omitempty"`
	// The average I/O latency of disk for read operation, in nanoseconds.
	AverageDiskLatencyRead *int64 `json:"average_disk_latency_read,omitempty"`
	// The average I/O latency of disk for write operation, in nanoseconds.
	AverageDiskLatencyWrite *int64 `json:"average_disk_latency_write,omitempty"`
	// The average I/O latency of disk for both (read and write) operations, in nanoseconds.
	AverageDiskLatencyTotal *int64 `json:"average_disk_latency_total,omitempty"`
	// The average I/O throughput of disk for read operation, in bytes/s.
	AverageDiskThroughputRead *int64 `json:"average_disk_throughput_read,omitempty"`
	// The average I/O throughput of disk for write operation, in bytes/s.
	AverageDiskThroughputWrite *int64 `json:"average_disk_throughput_write,omitempty"`
	// The average I/O throughput of disk for both (read and write) operations, in bytes/s.
	AverageDiskThroughputTotal *int64 `json:"average_disk_throughput_total,omitempty"`
	// The average number of read I/O operations of disk per seconds.
	AverageDiskIopsRead *int64 `json:"average_disk_iops_read,omitempty"`
	// The average number of write I/O operations of disk per seconds.
	AverageDiskIopsWrite *int64 `json:"average_disk_iops_write,omitempty"`
	// The average number of read and write I/O operations of disk per seconds.
	AverageDiskIopsTotal *int64 `json:"average_disk_iops_total,omitempty"`
	// The average I/O latency of nfs for read operation, in nanoseconds.
	AverageNfsLatencyRead *int64 `json:"average_nfs_latency_read,omitempty"`
	// The average I/O latency of nfs for write operation, in nanoseconds.
	AverageNfsLatencyWrite *int64 `json:"average_nfs_latency_write,omitempty"`
	// The average I/O latency of nfs for both (read and write) operation, in nanoseconds.
	AverageNfsLatencyTotal *int64 `json:"average_nfs_latency_total,omitempty"`
	// The average I/O throughput of disk for read operations, in bytes/s.
	AverageNfsThroughputRead *int64 `json:"average_nfs_throughput_read,omitempty"`
	// The average I/O throughput of nfs for write operations, in bytes/s.
	AverageNfsThroughputWrite *int64 `json:"average_nfs_throughput_write,omitempty"`
	// The average I/O throughput of nfs for both (read and write) operations, in bytes/s.
	AverageNfsThroughputTotal *int64 `json:"average_nfs_throughput_total,omitempty"`
	// The average number of read I/O operations of nfs per seconds.
	AverageNfsIopsRead *int64 `json:"average_nfs_iops_read,omitempty"`
	// The average number of write I/O operations of nfs per seconds.
	AverageNfsIopsWrite *int64 `json:"average_nfs_iops_write,omitempty"`
	// The average number of read and write I/O operations of nfs per seconds.
	AverageNfsIopsTotal *int64 `json:"average_nfs_iops_total,omitempty"`
	// The average I/O latency of iSCSI for read operation, in nanoseconds.
	AverageIscsiLatencyRead *int64 `json:"average_iscsi_latency_read,omitempty"`
	// The average I/O latency of iSCSI for write operation, in nanoseconds.
	AverageIscsiLatencyWrite *int64 `json:"average_iscsi_latency_write,omitempty"`
	// The average I/O latency of iSCSI for both (read and write) operation, in nanoseconds.
	AverageIscsiLatencyTotal *int64 `json:"average_iscsi_latency_total,omitempty"`
	// The average I/O throughput of iSCSI read operations, in bytes/s.
	AverageIscsiThroughputRead *int64 `json:"average_iscsi_throughput_read,omitempty"`
	// The average I/O throughput of iSCSI for write operations, in bytes/s.
	AverageIscsiThroughputWrite *int64 `json:"average_iscsi_throughput_write,omitempty"`
	// The average I/O throughput of iSCSI for both (read and write) operations, in bytes/s.
	AverageIscsiThroughputTotal *int64 `json:"average_iscsi_throughput_total,omitempty"`
	// The average number of read I/O operations of iSCSI per seconds.
	AverageIscsiIopsRead *int64 `json:"average_iscsi_iops_read,omitempty"`
	// The average number of write I/O operations of iSCSI per seconds.
	AverageIscsiIopsWrite *int64 `json:"average_iscsi_iops_write,omitempty"`
	// The average number of read and write I/O operations of iSCSI per seconds.
	AverageIscsiIopsTotal *int64 `json:"average_iscsi_iops_total,omitempty"`
	// The average bytes transmitted on the network interface, in bytes/s.
	AverageNetworkThroughputTransmit *int64 `json:"average_network_throughput_transmit,omitempty"`
	// The average bytes received on the network interface, in bytes/s.
	AverageNetworkThroughputReceive *int64 `json:"average_network_throughput_receive,omitempty"`
}

// NewEnginePerformanceAnalytic instantiates a new EnginePerformanceAnalytic object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEnginePerformanceAnalytic() *EnginePerformanceAnalytic {
	this := EnginePerformanceAnalytic{}
	return &this
}

// NewEnginePerformanceAnalyticWithDefaults instantiates a new EnginePerformanceAnalytic object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEnginePerformanceAnalyticWithDefaults() *EnginePerformanceAnalytic {
	this := EnginePerformanceAnalytic{}
	return &this
}

// GetEngineName returns the EngineName field value if set, zero value otherwise.
func (o *EnginePerformanceAnalytic) GetEngineName() string {
	if o == nil || IsNil(o.EngineName) {
		var ret string
		return ret
	}
	return *o.EngineName
}

// GetEngineNameOk returns a tuple with the EngineName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnginePerformanceAnalytic) GetEngineNameOk() (*string, bool) {
	if o == nil || IsNil(o.EngineName) {
		return nil, false
	}
	return o.EngineName, true
}

// HasEngineName returns a boolean if a field has been set.
func (o *EnginePerformanceAnalytic) HasEngineName() bool {
	if o != nil && !IsNil(o.EngineName) {
		return true
	}

	return false
}

// SetEngineName gets a reference to the given string and assigns it to the EngineName field.
func (o *EnginePerformanceAnalytic) SetEngineName(v string) {
	o.EngineName = &v
}

// GetEngineId returns the EngineId field value if set, zero value otherwise.
func (o *EnginePerformanceAnalytic) GetEngineId() string {
	if o == nil || IsNil(o.EngineId) {
		var ret string
		return ret
	}
	return *o.EngineId
}

// GetEngineIdOk returns a tuple with the EngineId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnginePerformanceAnalytic) GetEngineIdOk() (*string, bool) {
	if o == nil || IsNil(o.EngineId) {
		return nil, false
	}
	return o.EngineId, true
}

// HasEngineId returns a boolean if a field has been set.
func (o *EnginePerformanceAnalytic) HasEngineId() bool {
	if o != nil && !IsNil(o.EngineId) {
		return true
	}

	return false
}

// SetEngineId gets a reference to the given string and assigns it to the EngineId field.
func (o *EnginePerformanceAnalytic) SetEngineId(v string) {
	o.EngineId = &v
}

// GetEngineType returns the EngineType field value if set, zero value otherwise.
func (o *EnginePerformanceAnalytic) GetEngineType() string {
	if o == nil || IsNil(o.EngineType) {
		var ret string
		return ret
	}
	return *o.EngineType
}

// GetEngineTypeOk returns a tuple with the EngineType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnginePerformanceAnalytic) GetEngineTypeOk() (*string, bool) {
	if o == nil || IsNil(o.EngineType) {
		return nil, false
	}
	return o.EngineType, true
}

// HasEngineType returns a boolean if a field has been set.
func (o *EnginePerformanceAnalytic) HasEngineType() bool {
	if o != nil && !IsNil(o.EngineType) {
		return true
	}

	return false
}

// SetEngineType gets a reference to the given string and assigns it to the EngineType field.
func (o *EnginePerformanceAnalytic) SetEngineType(v string) {
	o.EngineType = &v
}

// GetAggregationPeriod returns the AggregationPeriod field value if set, zero value otherwise.
func (o *EnginePerformanceAnalytic) GetAggregationPeriod() int32 {
	if o == nil || IsNil(o.AggregationPeriod) {
		var ret int32
		return ret
	}
	return *o.AggregationPeriod
}

// GetAggregationPeriodOk returns a tuple with the AggregationPeriod field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnginePerformanceAnalytic) GetAggregationPeriodOk() (*int32, bool) {
	if o == nil || IsNil(o.AggregationPeriod) {
		return nil, false
	}
	return o.AggregationPeriod, true
}

// HasAggregationPeriod returns a boolean if a field has been set.
func (o *EnginePerformanceAnalytic) HasAggregationPeriod() bool {
	if o != nil && !IsNil(o.AggregationPeriod) {
		return true
	}

	return false
}

// SetAggregationPeriod gets a reference to the given int32 and assigns it to the AggregationPeriod field.
func (o *EnginePerformanceAnalytic) SetAggregationPeriod(v int32) {
	o.AggregationPeriod = &v
}

// GetCpuCoresCount returns the CpuCoresCount field value if set, zero value otherwise.
func (o *EnginePerformanceAnalytic) GetCpuCoresCount() int32 {
	if o == nil || IsNil(o.CpuCoresCount) {
		var ret int32
		return ret
	}
	return *o.CpuCoresCount
}

// GetCpuCoresCountOk returns a tuple with the CpuCoresCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnginePerformanceAnalytic) GetCpuCoresCountOk() (*int32, bool) {
	if o == nil || IsNil(o.CpuCoresCount) {
		return nil, false
	}
	return o.CpuCoresCount, true
}

// HasCpuCoresCount returns a boolean if a field has been set.
func (o *EnginePerformanceAnalytic) HasCpuCoresCount() bool {
	if o != nil && !IsNil(o.CpuCoresCount) {
		return true
	}

	return false
}

// SetCpuCoresCount gets a reference to the given int32 and assigns it to the CpuCoresCount field.
func (o *EnginePerformanceAnalytic) SetCpuCoresCount(v int32) {
	o.CpuCoresCount = &v
}

// GetCpuUtilization returns the CpuUtilization field value if set, zero value otherwise.
func (o *EnginePerformanceAnalytic) GetCpuUtilization() float64 {
	if o == nil || IsNil(o.CpuUtilization) {
		var ret float64
		return ret
	}
	return *o.CpuUtilization
}

// GetCpuUtilizationOk returns a tuple with the CpuUtilization field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnginePerformanceAnalytic) GetCpuUtilizationOk() (*float64, bool) {
	if o == nil || IsNil(o.CpuUtilization) {
		return nil, false
	}
	return o.CpuUtilization, true
}

// HasCpuUtilization returns a boolean if a field has been set.
func (o *EnginePerformanceAnalytic) HasCpuUtilization() bool {
	if o != nil && !IsNil(o.CpuUtilization) {
		return true
	}

	return false
}

// SetCpuUtilization gets a reference to the given float64 and assigns it to the CpuUtilization field.
func (o *EnginePerformanceAnalytic) SetCpuUtilization(v float64) {
	o.CpuUtilization = &v
}

// GetTotalMemory returns the TotalMemory field value if set, zero value otherwise.
func (o *EnginePerformanceAnalytic) GetTotalMemory() int64 {
	if o == nil || IsNil(o.TotalMemory) {
		var ret int64
		return ret
	}
	return *o.TotalMemory
}

// GetTotalMemoryOk returns a tuple with the TotalMemory field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnginePerformanceAnalytic) GetTotalMemoryOk() (*int64, bool) {
	if o == nil || IsNil(o.TotalMemory) {
		return nil, false
	}
	return o.TotalMemory, true
}

// HasTotalMemory returns a boolean if a field has been set.
func (o *EnginePerformanceAnalytic) HasTotalMemory() bool {
	if o != nil && !IsNil(o.TotalMemory) {
		return true
	}

	return false
}

// SetTotalMemory gets a reference to the given int64 and assigns it to the TotalMemory field.
func (o *EnginePerformanceAnalytic) SetTotalMemory(v int64) {
	o.TotalMemory = &v
}

// GetAverageDiskLatencyRead returns the AverageDiskLatencyRead field value if set, zero value otherwise.
func (o *EnginePerformanceAnalytic) GetAverageDiskLatencyRead() int64 {
	if o == nil || IsNil(o.AverageDiskLatencyRead) {
		var ret int64
		return ret
	}
	return *o.AverageDiskLatencyRead
}

// GetAverageDiskLatencyReadOk returns a tuple with the AverageDiskLatencyRead field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnginePerformanceAnalytic) GetAverageDiskLatencyReadOk() (*int64, bool) {
	if o == nil || IsNil(o.AverageDiskLatencyRead) {
		return nil, false
	}
	return o.AverageDiskLatencyRead, true
}

// HasAverageDiskLatencyRead returns a boolean if a field has been set.
func (o *EnginePerformanceAnalytic) HasAverageDiskLatencyRead() bool {
	if o != nil && !IsNil(o.AverageDiskLatencyRead) {
		return true
	}

	return false
}

// SetAverageDiskLatencyRead gets a reference to the given int64 and assigns it to the AverageDiskLatencyRead field.
func (o *EnginePerformanceAnalytic) SetAverageDiskLatencyRead(v int64) {
	o.AverageDiskLatencyRead = &v
}

// GetAverageDiskLatencyWrite returns the AverageDiskLatencyWrite field value if set, zero value otherwise.
func (o *EnginePerformanceAnalytic) GetAverageDiskLatencyWrite() int64 {
	if o == nil || IsNil(o.AverageDiskLatencyWrite) {
		var ret int64
		return ret
	}
	return *o.AverageDiskLatencyWrite
}

// GetAverageDiskLatencyWriteOk returns a tuple with the AverageDiskLatencyWrite field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnginePerformanceAnalytic) GetAverageDiskLatencyWriteOk() (*int64, bool) {
	if o == nil || IsNil(o.AverageDiskLatencyWrite) {
		return nil, false
	}
	return o.AverageDiskLatencyWrite, true
}

// HasAverageDiskLatencyWrite returns a boolean if a field has been set.
func (o *EnginePerformanceAnalytic) HasAverageDiskLatencyWrite() bool {
	if o != nil && !IsNil(o.AverageDiskLatencyWrite) {
		return true
	}

	return false
}

// SetAverageDiskLatencyWrite gets a reference to the given int64 and assigns it to the AverageDiskLatencyWrite field.
func (o *EnginePerformanceAnalytic) SetAverageDiskLatencyWrite(v int64) {
	o.AverageDiskLatencyWrite = &v
}

// GetAverageDiskLatencyTotal returns the AverageDiskLatencyTotal field value if set, zero value otherwise.
func (o *EnginePerformanceAnalytic) GetAverageDiskLatencyTotal() int64 {
	if o == nil || IsNil(o.AverageDiskLatencyTotal) {
		var ret int64
		return ret
	}
	return *o.AverageDiskLatencyTotal
}

// GetAverageDiskLatencyTotalOk returns a tuple with the AverageDiskLatencyTotal field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnginePerformanceAnalytic) GetAverageDiskLatencyTotalOk() (*int64, bool) {
	if o == nil || IsNil(o.AverageDiskLatencyTotal) {
		return nil, false
	}
	return o.AverageDiskLatencyTotal, true
}

// HasAverageDiskLatencyTotal returns a boolean if a field has been set.
func (o *EnginePerformanceAnalytic) HasAverageDiskLatencyTotal() bool {
	if o != nil && !IsNil(o.AverageDiskLatencyTotal) {
		return true
	}

	return false
}

// SetAverageDiskLatencyTotal gets a reference to the given int64 and assigns it to the AverageDiskLatencyTotal field.
func (o *EnginePerformanceAnalytic) SetAverageDiskLatencyTotal(v int64) {
	o.AverageDiskLatencyTotal = &v
}

// GetAverageDiskThroughputRead returns the AverageDiskThroughputRead field value if set, zero value otherwise.
func (o *EnginePerformanceAnalytic) GetAverageDiskThroughputRead() int64 {
	if o == nil || IsNil(o.AverageDiskThroughputRead) {
		var ret int64
		return ret
	}
	return *o.AverageDiskThroughputRead
}

// GetAverageDiskThroughputReadOk returns a tuple with the AverageDiskThroughputRead field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnginePerformanceAnalytic) GetAverageDiskThroughputReadOk() (*int64, bool) {
	if o == nil || IsNil(o.AverageDiskThroughputRead) {
		return nil, false
	}
	return o.AverageDiskThroughputRead, true
}

// HasAverageDiskThroughputRead returns a boolean if a field has been set.
func (o *EnginePerformanceAnalytic) HasAverageDiskThroughputRead() bool {
	if o != nil && !IsNil(o.AverageDiskThroughputRead) {
		return true
	}

	return false
}

// SetAverageDiskThroughputRead gets a reference to the given int64 and assigns it to the AverageDiskThroughputRead field.
func (o *EnginePerformanceAnalytic) SetAverageDiskThroughputRead(v int64) {
	o.AverageDiskThroughputRead = &v
}

// GetAverageDiskThroughputWrite returns the AverageDiskThroughputWrite field value if set, zero value otherwise.
func (o *EnginePerformanceAnalytic) GetAverageDiskThroughputWrite() int64 {
	if o == nil || IsNil(o.AverageDiskThroughputWrite) {
		var ret int64
		return ret
	}
	return *o.AverageDiskThroughputWrite
}

// GetAverageDiskThroughputWriteOk returns a tuple with the AverageDiskThroughputWrite field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnginePerformanceAnalytic) GetAverageDiskThroughputWriteOk() (*int64, bool) {
	if o == nil || IsNil(o.AverageDiskThroughputWrite) {
		return nil, false
	}
	return o.AverageDiskThroughputWrite, true
}

// HasAverageDiskThroughputWrite returns a boolean if a field has been set.
func (o *EnginePerformanceAnalytic) HasAverageDiskThroughputWrite() bool {
	if o != nil && !IsNil(o.AverageDiskThroughputWrite) {
		return true
	}

	return false
}

// SetAverageDiskThroughputWrite gets a reference to the given int64 and assigns it to the AverageDiskThroughputWrite field.
func (o *EnginePerformanceAnalytic) SetAverageDiskThroughputWrite(v int64) {
	o.AverageDiskThroughputWrite = &v
}

// GetAverageDiskThroughputTotal returns the AverageDiskThroughputTotal field value if set, zero value otherwise.
func (o *EnginePerformanceAnalytic) GetAverageDiskThroughputTotal() int64 {
	if o == nil || IsNil(o.AverageDiskThroughputTotal) {
		var ret int64
		return ret
	}
	return *o.AverageDiskThroughputTotal
}

// GetAverageDiskThroughputTotalOk returns a tuple with the AverageDiskThroughputTotal field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnginePerformanceAnalytic) GetAverageDiskThroughputTotalOk() (*int64, bool) {
	if o == nil || IsNil(o.AverageDiskThroughputTotal) {
		return nil, false
	}
	return o.AverageDiskThroughputTotal, true
}

// HasAverageDiskThroughputTotal returns a boolean if a field has been set.
func (o *EnginePerformanceAnalytic) HasAverageDiskThroughputTotal() bool {
	if o != nil && !IsNil(o.AverageDiskThroughputTotal) {
		return true
	}

	return false
}

// SetAverageDiskThroughputTotal gets a reference to the given int64 and assigns it to the AverageDiskThroughputTotal field.
func (o *EnginePerformanceAnalytic) SetAverageDiskThroughputTotal(v int64) {
	o.AverageDiskThroughputTotal = &v
}

// GetAverageDiskIopsRead returns the AverageDiskIopsRead field value if set, zero value otherwise.
func (o *EnginePerformanceAnalytic) GetAverageDiskIopsRead() int64 {
	if o == nil || IsNil(o.AverageDiskIopsRead) {
		var ret int64
		return ret
	}
	return *o.AverageDiskIopsRead
}

// GetAverageDiskIopsReadOk returns a tuple with the AverageDiskIopsRead field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnginePerformanceAnalytic) GetAverageDiskIopsReadOk() (*int64, bool) {
	if o == nil || IsNil(o.AverageDiskIopsRead) {
		return nil, false
	}
	return o.AverageDiskIopsRead, true
}

// HasAverageDiskIopsRead returns a boolean if a field has been set.
func (o *EnginePerformanceAnalytic) HasAverageDiskIopsRead() bool {
	if o != nil && !IsNil(o.AverageDiskIopsRead) {
		return true
	}

	return false
}

// SetAverageDiskIopsRead gets a reference to the given int64 and assigns it to the AverageDiskIopsRead field.
func (o *EnginePerformanceAnalytic) SetAverageDiskIopsRead(v int64) {
	o.AverageDiskIopsRead = &v
}

// GetAverageDiskIopsWrite returns the AverageDiskIopsWrite field value if set, zero value otherwise.
func (o *EnginePerformanceAnalytic) GetAverageDiskIopsWrite() int64 {
	if o == nil || IsNil(o.AverageDiskIopsWrite) {
		var ret int64
		return ret
	}
	return *o.AverageDiskIopsWrite
}

// GetAverageDiskIopsWriteOk returns a tuple with the AverageDiskIopsWrite field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnginePerformanceAnalytic) GetAverageDiskIopsWriteOk() (*int64, bool) {
	if o == nil || IsNil(o.AverageDiskIopsWrite) {
		return nil, false
	}
	return o.AverageDiskIopsWrite, true
}

// HasAverageDiskIopsWrite returns a boolean if a field has been set.
func (o *EnginePerformanceAnalytic) HasAverageDiskIopsWrite() bool {
	if o != nil && !IsNil(o.AverageDiskIopsWrite) {
		return true
	}

	return false
}

// SetAverageDiskIopsWrite gets a reference to the given int64 and assigns it to the AverageDiskIopsWrite field.
func (o *EnginePerformanceAnalytic) SetAverageDiskIopsWrite(v int64) {
	o.AverageDiskIopsWrite = &v
}

// GetAverageDiskIopsTotal returns the AverageDiskIopsTotal field value if set, zero value otherwise.
func (o *EnginePerformanceAnalytic) GetAverageDiskIopsTotal() int64 {
	if o == nil || IsNil(o.AverageDiskIopsTotal) {
		var ret int64
		return ret
	}
	return *o.AverageDiskIopsTotal
}

// GetAverageDiskIopsTotalOk returns a tuple with the AverageDiskIopsTotal field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnginePerformanceAnalytic) GetAverageDiskIopsTotalOk() (*int64, bool) {
	if o == nil || IsNil(o.AverageDiskIopsTotal) {
		return nil, false
	}
	return o.AverageDiskIopsTotal, true
}

// HasAverageDiskIopsTotal returns a boolean if a field has been set.
func (o *EnginePerformanceAnalytic) HasAverageDiskIopsTotal() bool {
	if o != nil && !IsNil(o.AverageDiskIopsTotal) {
		return true
	}

	return false
}

// SetAverageDiskIopsTotal gets a reference to the given int64 and assigns it to the AverageDiskIopsTotal field.
func (o *EnginePerformanceAnalytic) SetAverageDiskIopsTotal(v int64) {
	o.AverageDiskIopsTotal = &v
}

// GetAverageNfsLatencyRead returns the AverageNfsLatencyRead field value if set, zero value otherwise.
func (o *EnginePerformanceAnalytic) GetAverageNfsLatencyRead() int64 {
	if o == nil || IsNil(o.AverageNfsLatencyRead) {
		var ret int64
		return ret
	}
	return *o.AverageNfsLatencyRead
}

// GetAverageNfsLatencyReadOk returns a tuple with the AverageNfsLatencyRead field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnginePerformanceAnalytic) GetAverageNfsLatencyReadOk() (*int64, bool) {
	if o == nil || IsNil(o.AverageNfsLatencyRead) {
		return nil, false
	}
	return o.AverageNfsLatencyRead, true
}

// HasAverageNfsLatencyRead returns a boolean if a field has been set.
func (o *EnginePerformanceAnalytic) HasAverageNfsLatencyRead() bool {
	if o != nil && !IsNil(o.AverageNfsLatencyRead) {
		return true
	}

	return false
}

// SetAverageNfsLatencyRead gets a reference to the given int64 and assigns it to the AverageNfsLatencyRead field.
func (o *EnginePerformanceAnalytic) SetAverageNfsLatencyRead(v int64) {
	o.AverageNfsLatencyRead = &v
}

// GetAverageNfsLatencyWrite returns the AverageNfsLatencyWrite field value if set, zero value otherwise.
func (o *EnginePerformanceAnalytic) GetAverageNfsLatencyWrite() int64 {
	if o == nil || IsNil(o.AverageNfsLatencyWrite) {
		var ret int64
		return ret
	}
	return *o.AverageNfsLatencyWrite
}

// GetAverageNfsLatencyWriteOk returns a tuple with the AverageNfsLatencyWrite field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnginePerformanceAnalytic) GetAverageNfsLatencyWriteOk() (*int64, bool) {
	if o == nil || IsNil(o.AverageNfsLatencyWrite) {
		return nil, false
	}
	return o.AverageNfsLatencyWrite, true
}

// HasAverageNfsLatencyWrite returns a boolean if a field has been set.
func (o *EnginePerformanceAnalytic) HasAverageNfsLatencyWrite() bool {
	if o != nil && !IsNil(o.AverageNfsLatencyWrite) {
		return true
	}

	return false
}

// SetAverageNfsLatencyWrite gets a reference to the given int64 and assigns it to the AverageNfsLatencyWrite field.
func (o *EnginePerformanceAnalytic) SetAverageNfsLatencyWrite(v int64) {
	o.AverageNfsLatencyWrite = &v
}

// GetAverageNfsLatencyTotal returns the AverageNfsLatencyTotal field value if set, zero value otherwise.
func (o *EnginePerformanceAnalytic) GetAverageNfsLatencyTotal() int64 {
	if o == nil || IsNil(o.AverageNfsLatencyTotal) {
		var ret int64
		return ret
	}
	return *o.AverageNfsLatencyTotal
}

// GetAverageNfsLatencyTotalOk returns a tuple with the AverageNfsLatencyTotal field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnginePerformanceAnalytic) GetAverageNfsLatencyTotalOk() (*int64, bool) {
	if o == nil || IsNil(o.AverageNfsLatencyTotal) {
		return nil, false
	}
	return o.AverageNfsLatencyTotal, true
}

// HasAverageNfsLatencyTotal returns a boolean if a field has been set.
func (o *EnginePerformanceAnalytic) HasAverageNfsLatencyTotal() bool {
	if o != nil && !IsNil(o.AverageNfsLatencyTotal) {
		return true
	}

	return false
}

// SetAverageNfsLatencyTotal gets a reference to the given int64 and assigns it to the AverageNfsLatencyTotal field.
func (o *EnginePerformanceAnalytic) SetAverageNfsLatencyTotal(v int64) {
	o.AverageNfsLatencyTotal = &v
}

// GetAverageNfsThroughputRead returns the AverageNfsThroughputRead field value if set, zero value otherwise.
func (o *EnginePerformanceAnalytic) GetAverageNfsThroughputRead() int64 {
	if o == nil || IsNil(o.AverageNfsThroughputRead) {
		var ret int64
		return ret
	}
	return *o.AverageNfsThroughputRead
}

// GetAverageNfsThroughputReadOk returns a tuple with the AverageNfsThroughputRead field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnginePerformanceAnalytic) GetAverageNfsThroughputReadOk() (*int64, bool) {
	if o == nil || IsNil(o.AverageNfsThroughputRead) {
		return nil, false
	}
	return o.AverageNfsThroughputRead, true
}

// HasAverageNfsThroughputRead returns a boolean if a field has been set.
func (o *EnginePerformanceAnalytic) HasAverageNfsThroughputRead() bool {
	if o != nil && !IsNil(o.AverageNfsThroughputRead) {
		return true
	}

	return false
}

// SetAverageNfsThroughputRead gets a reference to the given int64 and assigns it to the AverageNfsThroughputRead field.
func (o *EnginePerformanceAnalytic) SetAverageNfsThroughputRead(v int64) {
	o.AverageNfsThroughputRead = &v
}

// GetAverageNfsThroughputWrite returns the AverageNfsThroughputWrite field value if set, zero value otherwise.
func (o *EnginePerformanceAnalytic) GetAverageNfsThroughputWrite() int64 {
	if o == nil || IsNil(o.AverageNfsThroughputWrite) {
		var ret int64
		return ret
	}
	return *o.AverageNfsThroughputWrite
}

// GetAverageNfsThroughputWriteOk returns a tuple with the AverageNfsThroughputWrite field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnginePerformanceAnalytic) GetAverageNfsThroughputWriteOk() (*int64, bool) {
	if o == nil || IsNil(o.AverageNfsThroughputWrite) {
		return nil, false
	}
	return o.AverageNfsThroughputWrite, true
}

// HasAverageNfsThroughputWrite returns a boolean if a field has been set.
func (o *EnginePerformanceAnalytic) HasAverageNfsThroughputWrite() bool {
	if o != nil && !IsNil(o.AverageNfsThroughputWrite) {
		return true
	}

	return false
}

// SetAverageNfsThroughputWrite gets a reference to the given int64 and assigns it to the AverageNfsThroughputWrite field.
func (o *EnginePerformanceAnalytic) SetAverageNfsThroughputWrite(v int64) {
	o.AverageNfsThroughputWrite = &v
}

// GetAverageNfsThroughputTotal returns the AverageNfsThroughputTotal field value if set, zero value otherwise.
func (o *EnginePerformanceAnalytic) GetAverageNfsThroughputTotal() int64 {
	if o == nil || IsNil(o.AverageNfsThroughputTotal) {
		var ret int64
		return ret
	}
	return *o.AverageNfsThroughputTotal
}

// GetAverageNfsThroughputTotalOk returns a tuple with the AverageNfsThroughputTotal field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnginePerformanceAnalytic) GetAverageNfsThroughputTotalOk() (*int64, bool) {
	if o == nil || IsNil(o.AverageNfsThroughputTotal) {
		return nil, false
	}
	return o.AverageNfsThroughputTotal, true
}

// HasAverageNfsThroughputTotal returns a boolean if a field has been set.
func (o *EnginePerformanceAnalytic) HasAverageNfsThroughputTotal() bool {
	if o != nil && !IsNil(o.AverageNfsThroughputTotal) {
		return true
	}

	return false
}

// SetAverageNfsThroughputTotal gets a reference to the given int64 and assigns it to the AverageNfsThroughputTotal field.
func (o *EnginePerformanceAnalytic) SetAverageNfsThroughputTotal(v int64) {
	o.AverageNfsThroughputTotal = &v
}

// GetAverageNfsIopsRead returns the AverageNfsIopsRead field value if set, zero value otherwise.
func (o *EnginePerformanceAnalytic) GetAverageNfsIopsRead() int64 {
	if o == nil || IsNil(o.AverageNfsIopsRead) {
		var ret int64
		return ret
	}
	return *o.AverageNfsIopsRead
}

// GetAverageNfsIopsReadOk returns a tuple with the AverageNfsIopsRead field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnginePerformanceAnalytic) GetAverageNfsIopsReadOk() (*int64, bool) {
	if o == nil || IsNil(o.AverageNfsIopsRead) {
		return nil, false
	}
	return o.AverageNfsIopsRead, true
}

// HasAverageNfsIopsRead returns a boolean if a field has been set.
func (o *EnginePerformanceAnalytic) HasAverageNfsIopsRead() bool {
	if o != nil && !IsNil(o.AverageNfsIopsRead) {
		return true
	}

	return false
}

// SetAverageNfsIopsRead gets a reference to the given int64 and assigns it to the AverageNfsIopsRead field.
func (o *EnginePerformanceAnalytic) SetAverageNfsIopsRead(v int64) {
	o.AverageNfsIopsRead = &v
}

// GetAverageNfsIopsWrite returns the AverageNfsIopsWrite field value if set, zero value otherwise.
func (o *EnginePerformanceAnalytic) GetAverageNfsIopsWrite() int64 {
	if o == nil || IsNil(o.AverageNfsIopsWrite) {
		var ret int64
		return ret
	}
	return *o.AverageNfsIopsWrite
}

// GetAverageNfsIopsWriteOk returns a tuple with the AverageNfsIopsWrite field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnginePerformanceAnalytic) GetAverageNfsIopsWriteOk() (*int64, bool) {
	if o == nil || IsNil(o.AverageNfsIopsWrite) {
		return nil, false
	}
	return o.AverageNfsIopsWrite, true
}

// HasAverageNfsIopsWrite returns a boolean if a field has been set.
func (o *EnginePerformanceAnalytic) HasAverageNfsIopsWrite() bool {
	if o != nil && !IsNil(o.AverageNfsIopsWrite) {
		return true
	}

	return false
}

// SetAverageNfsIopsWrite gets a reference to the given int64 and assigns it to the AverageNfsIopsWrite field.
func (o *EnginePerformanceAnalytic) SetAverageNfsIopsWrite(v int64) {
	o.AverageNfsIopsWrite = &v
}

// GetAverageNfsIopsTotal returns the AverageNfsIopsTotal field value if set, zero value otherwise.
func (o *EnginePerformanceAnalytic) GetAverageNfsIopsTotal() int64 {
	if o == nil || IsNil(o.AverageNfsIopsTotal) {
		var ret int64
		return ret
	}
	return *o.AverageNfsIopsTotal
}

// GetAverageNfsIopsTotalOk returns a tuple with the AverageNfsIopsTotal field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnginePerformanceAnalytic) GetAverageNfsIopsTotalOk() (*int64, bool) {
	if o == nil || IsNil(o.AverageNfsIopsTotal) {
		return nil, false
	}
	return o.AverageNfsIopsTotal, true
}

// HasAverageNfsIopsTotal returns a boolean if a field has been set.
func (o *EnginePerformanceAnalytic) HasAverageNfsIopsTotal() bool {
	if o != nil && !IsNil(o.AverageNfsIopsTotal) {
		return true
	}

	return false
}

// SetAverageNfsIopsTotal gets a reference to the given int64 and assigns it to the AverageNfsIopsTotal field.
func (o *EnginePerformanceAnalytic) SetAverageNfsIopsTotal(v int64) {
	o.AverageNfsIopsTotal = &v
}

// GetAverageIscsiLatencyRead returns the AverageIscsiLatencyRead field value if set, zero value otherwise.
func (o *EnginePerformanceAnalytic) GetAverageIscsiLatencyRead() int64 {
	if o == nil || IsNil(o.AverageIscsiLatencyRead) {
		var ret int64
		return ret
	}
	return *o.AverageIscsiLatencyRead
}

// GetAverageIscsiLatencyReadOk returns a tuple with the AverageIscsiLatencyRead field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnginePerformanceAnalytic) GetAverageIscsiLatencyReadOk() (*int64, bool) {
	if o == nil || IsNil(o.AverageIscsiLatencyRead) {
		return nil, false
	}
	return o.AverageIscsiLatencyRead, true
}

// HasAverageIscsiLatencyRead returns a boolean if a field has been set.
func (o *EnginePerformanceAnalytic) HasAverageIscsiLatencyRead() bool {
	if o != nil && !IsNil(o.AverageIscsiLatencyRead) {
		return true
	}

	return false
}

// SetAverageIscsiLatencyRead gets a reference to the given int64 and assigns it to the AverageIscsiLatencyRead field.
func (o *EnginePerformanceAnalytic) SetAverageIscsiLatencyRead(v int64) {
	o.AverageIscsiLatencyRead = &v
}

// GetAverageIscsiLatencyWrite returns the AverageIscsiLatencyWrite field value if set, zero value otherwise.
func (o *EnginePerformanceAnalytic) GetAverageIscsiLatencyWrite() int64 {
	if o == nil || IsNil(o.AverageIscsiLatencyWrite) {
		var ret int64
		return ret
	}
	return *o.AverageIscsiLatencyWrite
}

// GetAverageIscsiLatencyWriteOk returns a tuple with the AverageIscsiLatencyWrite field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnginePerformanceAnalytic) GetAverageIscsiLatencyWriteOk() (*int64, bool) {
	if o == nil || IsNil(o.AverageIscsiLatencyWrite) {
		return nil, false
	}
	return o.AverageIscsiLatencyWrite, true
}

// HasAverageIscsiLatencyWrite returns a boolean if a field has been set.
func (o *EnginePerformanceAnalytic) HasAverageIscsiLatencyWrite() bool {
	if o != nil && !IsNil(o.AverageIscsiLatencyWrite) {
		return true
	}

	return false
}

// SetAverageIscsiLatencyWrite gets a reference to the given int64 and assigns it to the AverageIscsiLatencyWrite field.
func (o *EnginePerformanceAnalytic) SetAverageIscsiLatencyWrite(v int64) {
	o.AverageIscsiLatencyWrite = &v
}

// GetAverageIscsiLatencyTotal returns the AverageIscsiLatencyTotal field value if set, zero value otherwise.
func (o *EnginePerformanceAnalytic) GetAverageIscsiLatencyTotal() int64 {
	if o == nil || IsNil(o.AverageIscsiLatencyTotal) {
		var ret int64
		return ret
	}
	return *o.AverageIscsiLatencyTotal
}

// GetAverageIscsiLatencyTotalOk returns a tuple with the AverageIscsiLatencyTotal field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnginePerformanceAnalytic) GetAverageIscsiLatencyTotalOk() (*int64, bool) {
	if o == nil || IsNil(o.AverageIscsiLatencyTotal) {
		return nil, false
	}
	return o.AverageIscsiLatencyTotal, true
}

// HasAverageIscsiLatencyTotal returns a boolean if a field has been set.
func (o *EnginePerformanceAnalytic) HasAverageIscsiLatencyTotal() bool {
	if o != nil && !IsNil(o.AverageIscsiLatencyTotal) {
		return true
	}

	return false
}

// SetAverageIscsiLatencyTotal gets a reference to the given int64 and assigns it to the AverageIscsiLatencyTotal field.
func (o *EnginePerformanceAnalytic) SetAverageIscsiLatencyTotal(v int64) {
	o.AverageIscsiLatencyTotal = &v
}

// GetAverageIscsiThroughputRead returns the AverageIscsiThroughputRead field value if set, zero value otherwise.
func (o *EnginePerformanceAnalytic) GetAverageIscsiThroughputRead() int64 {
	if o == nil || IsNil(o.AverageIscsiThroughputRead) {
		var ret int64
		return ret
	}
	return *o.AverageIscsiThroughputRead
}

// GetAverageIscsiThroughputReadOk returns a tuple with the AverageIscsiThroughputRead field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnginePerformanceAnalytic) GetAverageIscsiThroughputReadOk() (*int64, bool) {
	if o == nil || IsNil(o.AverageIscsiThroughputRead) {
		return nil, false
	}
	return o.AverageIscsiThroughputRead, true
}

// HasAverageIscsiThroughputRead returns a boolean if a field has been set.
func (o *EnginePerformanceAnalytic) HasAverageIscsiThroughputRead() bool {
	if o != nil && !IsNil(o.AverageIscsiThroughputRead) {
		return true
	}

	return false
}

// SetAverageIscsiThroughputRead gets a reference to the given int64 and assigns it to the AverageIscsiThroughputRead field.
func (o *EnginePerformanceAnalytic) SetAverageIscsiThroughputRead(v int64) {
	o.AverageIscsiThroughputRead = &v
}

// GetAverageIscsiThroughputWrite returns the AverageIscsiThroughputWrite field value if set, zero value otherwise.
func (o *EnginePerformanceAnalytic) GetAverageIscsiThroughputWrite() int64 {
	if o == nil || IsNil(o.AverageIscsiThroughputWrite) {
		var ret int64
		return ret
	}
	return *o.AverageIscsiThroughputWrite
}

// GetAverageIscsiThroughputWriteOk returns a tuple with the AverageIscsiThroughputWrite field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnginePerformanceAnalytic) GetAverageIscsiThroughputWriteOk() (*int64, bool) {
	if o == nil || IsNil(o.AverageIscsiThroughputWrite) {
		return nil, false
	}
	return o.AverageIscsiThroughputWrite, true
}

// HasAverageIscsiThroughputWrite returns a boolean if a field has been set.
func (o *EnginePerformanceAnalytic) HasAverageIscsiThroughputWrite() bool {
	if o != nil && !IsNil(o.AverageIscsiThroughputWrite) {
		return true
	}

	return false
}

// SetAverageIscsiThroughputWrite gets a reference to the given int64 and assigns it to the AverageIscsiThroughputWrite field.
func (o *EnginePerformanceAnalytic) SetAverageIscsiThroughputWrite(v int64) {
	o.AverageIscsiThroughputWrite = &v
}

// GetAverageIscsiThroughputTotal returns the AverageIscsiThroughputTotal field value if set, zero value otherwise.
func (o *EnginePerformanceAnalytic) GetAverageIscsiThroughputTotal() int64 {
	if o == nil || IsNil(o.AverageIscsiThroughputTotal) {
		var ret int64
		return ret
	}
	return *o.AverageIscsiThroughputTotal
}

// GetAverageIscsiThroughputTotalOk returns a tuple with the AverageIscsiThroughputTotal field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnginePerformanceAnalytic) GetAverageIscsiThroughputTotalOk() (*int64, bool) {
	if o == nil || IsNil(o.AverageIscsiThroughputTotal) {
		return nil, false
	}
	return o.AverageIscsiThroughputTotal, true
}

// HasAverageIscsiThroughputTotal returns a boolean if a field has been set.
func (o *EnginePerformanceAnalytic) HasAverageIscsiThroughputTotal() bool {
	if o != nil && !IsNil(o.AverageIscsiThroughputTotal) {
		return true
	}

	return false
}

// SetAverageIscsiThroughputTotal gets a reference to the given int64 and assigns it to the AverageIscsiThroughputTotal field.
func (o *EnginePerformanceAnalytic) SetAverageIscsiThroughputTotal(v int64) {
	o.AverageIscsiThroughputTotal = &v
}

// GetAverageIscsiIopsRead returns the AverageIscsiIopsRead field value if set, zero value otherwise.
func (o *EnginePerformanceAnalytic) GetAverageIscsiIopsRead() int64 {
	if o == nil || IsNil(o.AverageIscsiIopsRead) {
		var ret int64
		return ret
	}
	return *o.AverageIscsiIopsRead
}

// GetAverageIscsiIopsReadOk returns a tuple with the AverageIscsiIopsRead field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnginePerformanceAnalytic) GetAverageIscsiIopsReadOk() (*int64, bool) {
	if o == nil || IsNil(o.AverageIscsiIopsRead) {
		return nil, false
	}
	return o.AverageIscsiIopsRead, true
}

// HasAverageIscsiIopsRead returns a boolean if a field has been set.
func (o *EnginePerformanceAnalytic) HasAverageIscsiIopsRead() bool {
	if o != nil && !IsNil(o.AverageIscsiIopsRead) {
		return true
	}

	return false
}

// SetAverageIscsiIopsRead gets a reference to the given int64 and assigns it to the AverageIscsiIopsRead field.
func (o *EnginePerformanceAnalytic) SetAverageIscsiIopsRead(v int64) {
	o.AverageIscsiIopsRead = &v
}

// GetAverageIscsiIopsWrite returns the AverageIscsiIopsWrite field value if set, zero value otherwise.
func (o *EnginePerformanceAnalytic) GetAverageIscsiIopsWrite() int64 {
	if o == nil || IsNil(o.AverageIscsiIopsWrite) {
		var ret int64
		return ret
	}
	return *o.AverageIscsiIopsWrite
}

// GetAverageIscsiIopsWriteOk returns a tuple with the AverageIscsiIopsWrite field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnginePerformanceAnalytic) GetAverageIscsiIopsWriteOk() (*int64, bool) {
	if o == nil || IsNil(o.AverageIscsiIopsWrite) {
		return nil, false
	}
	return o.AverageIscsiIopsWrite, true
}

// HasAverageIscsiIopsWrite returns a boolean if a field has been set.
func (o *EnginePerformanceAnalytic) HasAverageIscsiIopsWrite() bool {
	if o != nil && !IsNil(o.AverageIscsiIopsWrite) {
		return true
	}

	return false
}

// SetAverageIscsiIopsWrite gets a reference to the given int64 and assigns it to the AverageIscsiIopsWrite field.
func (o *EnginePerformanceAnalytic) SetAverageIscsiIopsWrite(v int64) {
	o.AverageIscsiIopsWrite = &v
}

// GetAverageIscsiIopsTotal returns the AverageIscsiIopsTotal field value if set, zero value otherwise.
func (o *EnginePerformanceAnalytic) GetAverageIscsiIopsTotal() int64 {
	if o == nil || IsNil(o.AverageIscsiIopsTotal) {
		var ret int64
		return ret
	}
	return *o.AverageIscsiIopsTotal
}

// GetAverageIscsiIopsTotalOk returns a tuple with the AverageIscsiIopsTotal field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnginePerformanceAnalytic) GetAverageIscsiIopsTotalOk() (*int64, bool) {
	if o == nil || IsNil(o.AverageIscsiIopsTotal) {
		return nil, false
	}
	return o.AverageIscsiIopsTotal, true
}

// HasAverageIscsiIopsTotal returns a boolean if a field has been set.
func (o *EnginePerformanceAnalytic) HasAverageIscsiIopsTotal() bool {
	if o != nil && !IsNil(o.AverageIscsiIopsTotal) {
		return true
	}

	return false
}

// SetAverageIscsiIopsTotal gets a reference to the given int64 and assigns it to the AverageIscsiIopsTotal field.
func (o *EnginePerformanceAnalytic) SetAverageIscsiIopsTotal(v int64) {
	o.AverageIscsiIopsTotal = &v
}

// GetAverageNetworkThroughputTransmit returns the AverageNetworkThroughputTransmit field value if set, zero value otherwise.
func (o *EnginePerformanceAnalytic) GetAverageNetworkThroughputTransmit() int64 {
	if o == nil || IsNil(o.AverageNetworkThroughputTransmit) {
		var ret int64
		return ret
	}
	return *o.AverageNetworkThroughputTransmit
}

// GetAverageNetworkThroughputTransmitOk returns a tuple with the AverageNetworkThroughputTransmit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnginePerformanceAnalytic) GetAverageNetworkThroughputTransmitOk() (*int64, bool) {
	if o == nil || IsNil(o.AverageNetworkThroughputTransmit) {
		return nil, false
	}
	return o.AverageNetworkThroughputTransmit, true
}

// HasAverageNetworkThroughputTransmit returns a boolean if a field has been set.
func (o *EnginePerformanceAnalytic) HasAverageNetworkThroughputTransmit() bool {
	if o != nil && !IsNil(o.AverageNetworkThroughputTransmit) {
		return true
	}

	return false
}

// SetAverageNetworkThroughputTransmit gets a reference to the given int64 and assigns it to the AverageNetworkThroughputTransmit field.
func (o *EnginePerformanceAnalytic) SetAverageNetworkThroughputTransmit(v int64) {
	o.AverageNetworkThroughputTransmit = &v
}

// GetAverageNetworkThroughputReceive returns the AverageNetworkThroughputReceive field value if set, zero value otherwise.
func (o *EnginePerformanceAnalytic) GetAverageNetworkThroughputReceive() int64 {
	if o == nil || IsNil(o.AverageNetworkThroughputReceive) {
		var ret int64
		return ret
	}
	return *o.AverageNetworkThroughputReceive
}

// GetAverageNetworkThroughputReceiveOk returns a tuple with the AverageNetworkThroughputReceive field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnginePerformanceAnalytic) GetAverageNetworkThroughputReceiveOk() (*int64, bool) {
	if o == nil || IsNil(o.AverageNetworkThroughputReceive) {
		return nil, false
	}
	return o.AverageNetworkThroughputReceive, true
}

// HasAverageNetworkThroughputReceive returns a boolean if a field has been set.
func (o *EnginePerformanceAnalytic) HasAverageNetworkThroughputReceive() bool {
	if o != nil && !IsNil(o.AverageNetworkThroughputReceive) {
		return true
	}

	return false
}

// SetAverageNetworkThroughputReceive gets a reference to the given int64 and assigns it to the AverageNetworkThroughputReceive field.
func (o *EnginePerformanceAnalytic) SetAverageNetworkThroughputReceive(v int64) {
	o.AverageNetworkThroughputReceive = &v
}

func (o EnginePerformanceAnalytic) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EnginePerformanceAnalytic) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.EngineName) {
		toSerialize["engine_name"] = o.EngineName
	}
	if !IsNil(o.EngineId) {
		toSerialize["engine_id"] = o.EngineId
	}
	if !IsNil(o.EngineType) {
		toSerialize["engine_type"] = o.EngineType
	}
	if !IsNil(o.AggregationPeriod) {
		toSerialize["aggregation_period"] = o.AggregationPeriod
	}
	if !IsNil(o.CpuCoresCount) {
		toSerialize["cpu_cores_count"] = o.CpuCoresCount
	}
	if !IsNil(o.CpuUtilization) {
		toSerialize["cpu_utilization"] = o.CpuUtilization
	}
	if !IsNil(o.TotalMemory) {
		toSerialize["total_memory"] = o.TotalMemory
	}
	if !IsNil(o.AverageDiskLatencyRead) {
		toSerialize["average_disk_latency_read"] = o.AverageDiskLatencyRead
	}
	if !IsNil(o.AverageDiskLatencyWrite) {
		toSerialize["average_disk_latency_write"] = o.AverageDiskLatencyWrite
	}
	if !IsNil(o.AverageDiskLatencyTotal) {
		toSerialize["average_disk_latency_total"] = o.AverageDiskLatencyTotal
	}
	if !IsNil(o.AverageDiskThroughputRead) {
		toSerialize["average_disk_throughput_read"] = o.AverageDiskThroughputRead
	}
	if !IsNil(o.AverageDiskThroughputWrite) {
		toSerialize["average_disk_throughput_write"] = o.AverageDiskThroughputWrite
	}
	if !IsNil(o.AverageDiskThroughputTotal) {
		toSerialize["average_disk_throughput_total"] = o.AverageDiskThroughputTotal
	}
	if !IsNil(o.AverageDiskIopsRead) {
		toSerialize["average_disk_iops_read"] = o.AverageDiskIopsRead
	}
	if !IsNil(o.AverageDiskIopsWrite) {
		toSerialize["average_disk_iops_write"] = o.AverageDiskIopsWrite
	}
	if !IsNil(o.AverageDiskIopsTotal) {
		toSerialize["average_disk_iops_total"] = o.AverageDiskIopsTotal
	}
	if !IsNil(o.AverageNfsLatencyRead) {
		toSerialize["average_nfs_latency_read"] = o.AverageNfsLatencyRead
	}
	if !IsNil(o.AverageNfsLatencyWrite) {
		toSerialize["average_nfs_latency_write"] = o.AverageNfsLatencyWrite
	}
	if !IsNil(o.AverageNfsLatencyTotal) {
		toSerialize["average_nfs_latency_total"] = o.AverageNfsLatencyTotal
	}
	if !IsNil(o.AverageNfsThroughputRead) {
		toSerialize["average_nfs_throughput_read"] = o.AverageNfsThroughputRead
	}
	if !IsNil(o.AverageNfsThroughputWrite) {
		toSerialize["average_nfs_throughput_write"] = o.AverageNfsThroughputWrite
	}
	if !IsNil(o.AverageNfsThroughputTotal) {
		toSerialize["average_nfs_throughput_total"] = o.AverageNfsThroughputTotal
	}
	if !IsNil(o.AverageNfsIopsRead) {
		toSerialize["average_nfs_iops_read"] = o.AverageNfsIopsRead
	}
	if !IsNil(o.AverageNfsIopsWrite) {
		toSerialize["average_nfs_iops_write"] = o.AverageNfsIopsWrite
	}
	if !IsNil(o.AverageNfsIopsTotal) {
		toSerialize["average_nfs_iops_total"] = o.AverageNfsIopsTotal
	}
	if !IsNil(o.AverageIscsiLatencyRead) {
		toSerialize["average_iscsi_latency_read"] = o.AverageIscsiLatencyRead
	}
	if !IsNil(o.AverageIscsiLatencyWrite) {
		toSerialize["average_iscsi_latency_write"] = o.AverageIscsiLatencyWrite
	}
	if !IsNil(o.AverageIscsiLatencyTotal) {
		toSerialize["average_iscsi_latency_total"] = o.AverageIscsiLatencyTotal
	}
	if !IsNil(o.AverageIscsiThroughputRead) {
		toSerialize["average_iscsi_throughput_read"] = o.AverageIscsiThroughputRead
	}
	if !IsNil(o.AverageIscsiThroughputWrite) {
		toSerialize["average_iscsi_throughput_write"] = o.AverageIscsiThroughputWrite
	}
	if !IsNil(o.AverageIscsiThroughputTotal) {
		toSerialize["average_iscsi_throughput_total"] = o.AverageIscsiThroughputTotal
	}
	if !IsNil(o.AverageIscsiIopsRead) {
		toSerialize["average_iscsi_iops_read"] = o.AverageIscsiIopsRead
	}
	if !IsNil(o.AverageIscsiIopsWrite) {
		toSerialize["average_iscsi_iops_write"] = o.AverageIscsiIopsWrite
	}
	if !IsNil(o.AverageIscsiIopsTotal) {
		toSerialize["average_iscsi_iops_total"] = o.AverageIscsiIopsTotal
	}
	if !IsNil(o.AverageNetworkThroughputTransmit) {
		toSerialize["average_network_throughput_transmit"] = o.AverageNetworkThroughputTransmit
	}
	if !IsNil(o.AverageNetworkThroughputReceive) {
		toSerialize["average_network_throughput_receive"] = o.AverageNetworkThroughputReceive
	}
	return toSerialize, nil
}

type NullableEnginePerformanceAnalytic struct {
	value *EnginePerformanceAnalytic
	isSet bool
}

func (v NullableEnginePerformanceAnalytic) Get() *EnginePerformanceAnalytic {
	return v.value
}

func (v *NullableEnginePerformanceAnalytic) Set(val *EnginePerformanceAnalytic) {
	v.value = val
	v.isSet = true
}

func (v NullableEnginePerformanceAnalytic) IsSet() bool {
	return v.isSet
}

func (v *NullableEnginePerformanceAnalytic) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnginePerformanceAnalytic(val *EnginePerformanceAnalytic) *NullableEnginePerformanceAnalytic {
	return &NullableEnginePerformanceAnalytic{value: val, isSet: true}
}

func (v NullableEnginePerformanceAnalytic) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnginePerformanceAnalytic) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


