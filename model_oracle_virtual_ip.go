/*
Delphix DCT API

Delphix DCT API

API version: 3.18.0
Contact: support@delphix.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package delphix_dct_api

import (
	"encoding/json"
)

// checks if the OracleVirtualIP type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OracleVirtualIP{}

// OracleVirtualIP A virtual IP address.
type OracleVirtualIP struct {
	// The domain name for the VirtualIP.
	DomainName *string `json:"domain_name,omitempty"`
	// The IP address for this VirtualIP.
	Ip *string `json:"ip,omitempty"`
	// Whether this VirtualIP was discovered.
	Discovered *bool `json:"discovered,omitempty"`
}

// NewOracleVirtualIP instantiates a new OracleVirtualIP object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOracleVirtualIP() *OracleVirtualIP {
	this := OracleVirtualIP{}
	return &this
}

// NewOracleVirtualIPWithDefaults instantiates a new OracleVirtualIP object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOracleVirtualIPWithDefaults() *OracleVirtualIP {
	this := OracleVirtualIP{}
	return &this
}

// GetDomainName returns the DomainName field value if set, zero value otherwise.
func (o *OracleVirtualIP) GetDomainName() string {
	if o == nil || IsNil(o.DomainName) {
		var ret string
		return ret
	}
	return *o.DomainName
}

// GetDomainNameOk returns a tuple with the DomainName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OracleVirtualIP) GetDomainNameOk() (*string, bool) {
	if o == nil || IsNil(o.DomainName) {
		return nil, false
	}
	return o.DomainName, true
}

// HasDomainName returns a boolean if a field has been set.
func (o *OracleVirtualIP) HasDomainName() bool {
	if o != nil && !IsNil(o.DomainName) {
		return true
	}

	return false
}

// SetDomainName gets a reference to the given string and assigns it to the DomainName field.
func (o *OracleVirtualIP) SetDomainName(v string) {
	o.DomainName = &v
}

// GetIp returns the Ip field value if set, zero value otherwise.
func (o *OracleVirtualIP) GetIp() string {
	if o == nil || IsNil(o.Ip) {
		var ret string
		return ret
	}
	return *o.Ip
}

// GetIpOk returns a tuple with the Ip field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OracleVirtualIP) GetIpOk() (*string, bool) {
	if o == nil || IsNil(o.Ip) {
		return nil, false
	}
	return o.Ip, true
}

// HasIp returns a boolean if a field has been set.
func (o *OracleVirtualIP) HasIp() bool {
	if o != nil && !IsNil(o.Ip) {
		return true
	}

	return false
}

// SetIp gets a reference to the given string and assigns it to the Ip field.
func (o *OracleVirtualIP) SetIp(v string) {
	o.Ip = &v
}

// GetDiscovered returns the Discovered field value if set, zero value otherwise.
func (o *OracleVirtualIP) GetDiscovered() bool {
	if o == nil || IsNil(o.Discovered) {
		var ret bool
		return ret
	}
	return *o.Discovered
}

// GetDiscoveredOk returns a tuple with the Discovered field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OracleVirtualIP) GetDiscoveredOk() (*bool, bool) {
	if o == nil || IsNil(o.Discovered) {
		return nil, false
	}
	return o.Discovered, true
}

// HasDiscovered returns a boolean if a field has been set.
func (o *OracleVirtualIP) HasDiscovered() bool {
	if o != nil && !IsNil(o.Discovered) {
		return true
	}

	return false
}

// SetDiscovered gets a reference to the given bool and assigns it to the Discovered field.
func (o *OracleVirtualIP) SetDiscovered(v bool) {
	o.Discovered = &v
}

func (o OracleVirtualIP) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OracleVirtualIP) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DomainName) {
		toSerialize["domain_name"] = o.DomainName
	}
	if !IsNil(o.Ip) {
		toSerialize["ip"] = o.Ip
	}
	if !IsNil(o.Discovered) {
		toSerialize["discovered"] = o.Discovered
	}
	return toSerialize, nil
}

type NullableOracleVirtualIP struct {
	value *OracleVirtualIP
	isSet bool
}

func (v NullableOracleVirtualIP) Get() *OracleVirtualIP {
	return v.value
}

func (v *NullableOracleVirtualIP) Set(val *OracleVirtualIP) {
	v.value = val
	v.isSet = true
}

func (v NullableOracleVirtualIP) IsSet() bool {
	return v.isSet
}

func (v *NullableOracleVirtualIP) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOracleVirtualIP(val *OracleVirtualIP) *NullableOracleVirtualIP {
	return &NullableOracleVirtualIP{value: val, isSet: true}
}

func (v NullableOracleVirtualIP) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOracleVirtualIP) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


