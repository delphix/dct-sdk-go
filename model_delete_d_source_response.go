/*
Delphix DCT API

Delphix DCT API

API version: 3.18.0
Contact: support@delphix.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package delphix_dct_api

import (
	"encoding/json"
	"time"
)

// checks if the DeleteDSourceResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DeleteDSourceResponse{}

// DeleteDSourceResponse struct for DeleteDSourceResponse
type DeleteDSourceResponse struct {
	// The Job entity ID.
	Id *string `json:"id,omitempty"`
	// The status of the job.
	Status *string `json:"status,omitempty"`
	// Indicates that the operations performed by this Job have completed successfully, but the object changes are not yet reflected. This is only set when when the JOB is in STARTED status, with the guarantee that the job will not transition to the FAILED status. Note that this flag will likely be replaced with a new status in future API versions and be deprecated.
	IsWaitingForTelemetry *bool `json:"is_waiting_for_telemetry,omitempty"`
	// The type of job being done.
	// Deprecated
	Type *string `json:"type,omitempty"`
	// The i18n translated type of job being done.
	LocalizedType *string `json:"localized_type,omitempty"`
	// Details about the failure for FAILED jobs.
	ErrorDetails *string `json:"error_details,omitempty"`
	// Warnings for the job.
	WarningMessage *string `json:"warning_message,omitempty"`
	// A reference to the job's target.
	TargetId *string `json:"target_id,omitempty"`
	// A reference to the job's target name.
	TargetName *string `json:"target_name,omitempty"`
	// The time the job started executing.
	StartTime *time.Time `json:"start_time,omitempty"`
	// The time the job was last updated.
	UpdateTime *time.Time `json:"update_time,omitempty"`
	// traceId of the request which created this Job
	TraceId *string `json:"trace_id,omitempty"`
	// IDs of the engines this Job is executing on.
	// Deprecated
	EngineIds []string `json:"engine_ids,omitempty"`
	Tags []Tag `json:"tags,omitempty"`
	Engines []Engine `json:"engines,omitempty"`
	// The ID of the account who initiated this job.
	AccountId *int32 `json:"account_id,omitempty"`
	// The account name which initiated this job. It can be either firstname and lastname combination or firstname or lastname or username or email address or Account-<id>.
	AccountName *string `json:"account_name,omitempty"`
	// Completion percentage of the Job.
	PercentComplete *int32 `json:"percent_complete,omitempty"`
	// Deprecated
	VirtualizationTasks []VirtualizationTask `json:"virtualization_tasks,omitempty"`
	Tasks []JobTask `json:"tasks,omitempty"`
	// The ID of the associated masking execution, if any.
	ExecutionId NullableString `json:"execution_id,omitempty"`
	Job *Job `json:"job,omitempty"`
}

// NewDeleteDSourceResponse instantiates a new DeleteDSourceResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDeleteDSourceResponse() *DeleteDSourceResponse {
	this := DeleteDSourceResponse{}
	return &this
}

// NewDeleteDSourceResponseWithDefaults instantiates a new DeleteDSourceResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDeleteDSourceResponseWithDefaults() *DeleteDSourceResponse {
	this := DeleteDSourceResponse{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *DeleteDSourceResponse) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeleteDSourceResponse) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *DeleteDSourceResponse) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *DeleteDSourceResponse) SetId(v string) {
	o.Id = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *DeleteDSourceResponse) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeleteDSourceResponse) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *DeleteDSourceResponse) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *DeleteDSourceResponse) SetStatus(v string) {
	o.Status = &v
}

// GetIsWaitingForTelemetry returns the IsWaitingForTelemetry field value if set, zero value otherwise.
func (o *DeleteDSourceResponse) GetIsWaitingForTelemetry() bool {
	if o == nil || IsNil(o.IsWaitingForTelemetry) {
		var ret bool
		return ret
	}
	return *o.IsWaitingForTelemetry
}

// GetIsWaitingForTelemetryOk returns a tuple with the IsWaitingForTelemetry field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeleteDSourceResponse) GetIsWaitingForTelemetryOk() (*bool, bool) {
	if o == nil || IsNil(o.IsWaitingForTelemetry) {
		return nil, false
	}
	return o.IsWaitingForTelemetry, true
}

// HasIsWaitingForTelemetry returns a boolean if a field has been set.
func (o *DeleteDSourceResponse) HasIsWaitingForTelemetry() bool {
	if o != nil && !IsNil(o.IsWaitingForTelemetry) {
		return true
	}

	return false
}

// SetIsWaitingForTelemetry gets a reference to the given bool and assigns it to the IsWaitingForTelemetry field.
func (o *DeleteDSourceResponse) SetIsWaitingForTelemetry(v bool) {
	o.IsWaitingForTelemetry = &v
}

// GetType returns the Type field value if set, zero value otherwise.
// Deprecated
func (o *DeleteDSourceResponse) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
// Deprecated
func (o *DeleteDSourceResponse) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *DeleteDSourceResponse) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
// Deprecated
func (o *DeleteDSourceResponse) SetType(v string) {
	o.Type = &v
}

// GetLocalizedType returns the LocalizedType field value if set, zero value otherwise.
func (o *DeleteDSourceResponse) GetLocalizedType() string {
	if o == nil || IsNil(o.LocalizedType) {
		var ret string
		return ret
	}
	return *o.LocalizedType
}

// GetLocalizedTypeOk returns a tuple with the LocalizedType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeleteDSourceResponse) GetLocalizedTypeOk() (*string, bool) {
	if o == nil || IsNil(o.LocalizedType) {
		return nil, false
	}
	return o.LocalizedType, true
}

// HasLocalizedType returns a boolean if a field has been set.
func (o *DeleteDSourceResponse) HasLocalizedType() bool {
	if o != nil && !IsNil(o.LocalizedType) {
		return true
	}

	return false
}

// SetLocalizedType gets a reference to the given string and assigns it to the LocalizedType field.
func (o *DeleteDSourceResponse) SetLocalizedType(v string) {
	o.LocalizedType = &v
}

// GetErrorDetails returns the ErrorDetails field value if set, zero value otherwise.
func (o *DeleteDSourceResponse) GetErrorDetails() string {
	if o == nil || IsNil(o.ErrorDetails) {
		var ret string
		return ret
	}
	return *o.ErrorDetails
}

// GetErrorDetailsOk returns a tuple with the ErrorDetails field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeleteDSourceResponse) GetErrorDetailsOk() (*string, bool) {
	if o == nil || IsNil(o.ErrorDetails) {
		return nil, false
	}
	return o.ErrorDetails, true
}

// HasErrorDetails returns a boolean if a field has been set.
func (o *DeleteDSourceResponse) HasErrorDetails() bool {
	if o != nil && !IsNil(o.ErrorDetails) {
		return true
	}

	return false
}

// SetErrorDetails gets a reference to the given string and assigns it to the ErrorDetails field.
func (o *DeleteDSourceResponse) SetErrorDetails(v string) {
	o.ErrorDetails = &v
}

// GetWarningMessage returns the WarningMessage field value if set, zero value otherwise.
func (o *DeleteDSourceResponse) GetWarningMessage() string {
	if o == nil || IsNil(o.WarningMessage) {
		var ret string
		return ret
	}
	return *o.WarningMessage
}

// GetWarningMessageOk returns a tuple with the WarningMessage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeleteDSourceResponse) GetWarningMessageOk() (*string, bool) {
	if o == nil || IsNil(o.WarningMessage) {
		return nil, false
	}
	return o.WarningMessage, true
}

// HasWarningMessage returns a boolean if a field has been set.
func (o *DeleteDSourceResponse) HasWarningMessage() bool {
	if o != nil && !IsNil(o.WarningMessage) {
		return true
	}

	return false
}

// SetWarningMessage gets a reference to the given string and assigns it to the WarningMessage field.
func (o *DeleteDSourceResponse) SetWarningMessage(v string) {
	o.WarningMessage = &v
}

// GetTargetId returns the TargetId field value if set, zero value otherwise.
func (o *DeleteDSourceResponse) GetTargetId() string {
	if o == nil || IsNil(o.TargetId) {
		var ret string
		return ret
	}
	return *o.TargetId
}

// GetTargetIdOk returns a tuple with the TargetId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeleteDSourceResponse) GetTargetIdOk() (*string, bool) {
	if o == nil || IsNil(o.TargetId) {
		return nil, false
	}
	return o.TargetId, true
}

// HasTargetId returns a boolean if a field has been set.
func (o *DeleteDSourceResponse) HasTargetId() bool {
	if o != nil && !IsNil(o.TargetId) {
		return true
	}

	return false
}

// SetTargetId gets a reference to the given string and assigns it to the TargetId field.
func (o *DeleteDSourceResponse) SetTargetId(v string) {
	o.TargetId = &v
}

// GetTargetName returns the TargetName field value if set, zero value otherwise.
func (o *DeleteDSourceResponse) GetTargetName() string {
	if o == nil || IsNil(o.TargetName) {
		var ret string
		return ret
	}
	return *o.TargetName
}

// GetTargetNameOk returns a tuple with the TargetName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeleteDSourceResponse) GetTargetNameOk() (*string, bool) {
	if o == nil || IsNil(o.TargetName) {
		return nil, false
	}
	return o.TargetName, true
}

// HasTargetName returns a boolean if a field has been set.
func (o *DeleteDSourceResponse) HasTargetName() bool {
	if o != nil && !IsNil(o.TargetName) {
		return true
	}

	return false
}

// SetTargetName gets a reference to the given string and assigns it to the TargetName field.
func (o *DeleteDSourceResponse) SetTargetName(v string) {
	o.TargetName = &v
}

// GetStartTime returns the StartTime field value if set, zero value otherwise.
func (o *DeleteDSourceResponse) GetStartTime() time.Time {
	if o == nil || IsNil(o.StartTime) {
		var ret time.Time
		return ret
	}
	return *o.StartTime
}

// GetStartTimeOk returns a tuple with the StartTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeleteDSourceResponse) GetStartTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.StartTime) {
		return nil, false
	}
	return o.StartTime, true
}

// HasStartTime returns a boolean if a field has been set.
func (o *DeleteDSourceResponse) HasStartTime() bool {
	if o != nil && !IsNil(o.StartTime) {
		return true
	}

	return false
}

// SetStartTime gets a reference to the given time.Time and assigns it to the StartTime field.
func (o *DeleteDSourceResponse) SetStartTime(v time.Time) {
	o.StartTime = &v
}

// GetUpdateTime returns the UpdateTime field value if set, zero value otherwise.
func (o *DeleteDSourceResponse) GetUpdateTime() time.Time {
	if o == nil || IsNil(o.UpdateTime) {
		var ret time.Time
		return ret
	}
	return *o.UpdateTime
}

// GetUpdateTimeOk returns a tuple with the UpdateTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeleteDSourceResponse) GetUpdateTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.UpdateTime) {
		return nil, false
	}
	return o.UpdateTime, true
}

// HasUpdateTime returns a boolean if a field has been set.
func (o *DeleteDSourceResponse) HasUpdateTime() bool {
	if o != nil && !IsNil(o.UpdateTime) {
		return true
	}

	return false
}

// SetUpdateTime gets a reference to the given time.Time and assigns it to the UpdateTime field.
func (o *DeleteDSourceResponse) SetUpdateTime(v time.Time) {
	o.UpdateTime = &v
}

// GetTraceId returns the TraceId field value if set, zero value otherwise.
func (o *DeleteDSourceResponse) GetTraceId() string {
	if o == nil || IsNil(o.TraceId) {
		var ret string
		return ret
	}
	return *o.TraceId
}

// GetTraceIdOk returns a tuple with the TraceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeleteDSourceResponse) GetTraceIdOk() (*string, bool) {
	if o == nil || IsNil(o.TraceId) {
		return nil, false
	}
	return o.TraceId, true
}

// HasTraceId returns a boolean if a field has been set.
func (o *DeleteDSourceResponse) HasTraceId() bool {
	if o != nil && !IsNil(o.TraceId) {
		return true
	}

	return false
}

// SetTraceId gets a reference to the given string and assigns it to the TraceId field.
func (o *DeleteDSourceResponse) SetTraceId(v string) {
	o.TraceId = &v
}

// GetEngineIds returns the EngineIds field value if set, zero value otherwise.
// Deprecated
func (o *DeleteDSourceResponse) GetEngineIds() []string {
	if o == nil || IsNil(o.EngineIds) {
		var ret []string
		return ret
	}
	return o.EngineIds
}

// GetEngineIdsOk returns a tuple with the EngineIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
// Deprecated
func (o *DeleteDSourceResponse) GetEngineIdsOk() ([]string, bool) {
	if o == nil || IsNil(o.EngineIds) {
		return nil, false
	}
	return o.EngineIds, true
}

// HasEngineIds returns a boolean if a field has been set.
func (o *DeleteDSourceResponse) HasEngineIds() bool {
	if o != nil && !IsNil(o.EngineIds) {
		return true
	}

	return false
}

// SetEngineIds gets a reference to the given []string and assigns it to the EngineIds field.
// Deprecated
func (o *DeleteDSourceResponse) SetEngineIds(v []string) {
	o.EngineIds = v
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *DeleteDSourceResponse) GetTags() []Tag {
	if o == nil || IsNil(o.Tags) {
		var ret []Tag
		return ret
	}
	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeleteDSourceResponse) GetTagsOk() ([]Tag, bool) {
	if o == nil || IsNil(o.Tags) {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *DeleteDSourceResponse) HasTags() bool {
	if o != nil && !IsNil(o.Tags) {
		return true
	}

	return false
}

// SetTags gets a reference to the given []Tag and assigns it to the Tags field.
func (o *DeleteDSourceResponse) SetTags(v []Tag) {
	o.Tags = v
}

// GetEngines returns the Engines field value if set, zero value otherwise.
func (o *DeleteDSourceResponse) GetEngines() []Engine {
	if o == nil || IsNil(o.Engines) {
		var ret []Engine
		return ret
	}
	return o.Engines
}

// GetEnginesOk returns a tuple with the Engines field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeleteDSourceResponse) GetEnginesOk() ([]Engine, bool) {
	if o == nil || IsNil(o.Engines) {
		return nil, false
	}
	return o.Engines, true
}

// HasEngines returns a boolean if a field has been set.
func (o *DeleteDSourceResponse) HasEngines() bool {
	if o != nil && !IsNil(o.Engines) {
		return true
	}

	return false
}

// SetEngines gets a reference to the given []Engine and assigns it to the Engines field.
func (o *DeleteDSourceResponse) SetEngines(v []Engine) {
	o.Engines = v
}

// GetAccountId returns the AccountId field value if set, zero value otherwise.
func (o *DeleteDSourceResponse) GetAccountId() int32 {
	if o == nil || IsNil(o.AccountId) {
		var ret int32
		return ret
	}
	return *o.AccountId
}

// GetAccountIdOk returns a tuple with the AccountId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeleteDSourceResponse) GetAccountIdOk() (*int32, bool) {
	if o == nil || IsNil(o.AccountId) {
		return nil, false
	}
	return o.AccountId, true
}

// HasAccountId returns a boolean if a field has been set.
func (o *DeleteDSourceResponse) HasAccountId() bool {
	if o != nil && !IsNil(o.AccountId) {
		return true
	}

	return false
}

// SetAccountId gets a reference to the given int32 and assigns it to the AccountId field.
func (o *DeleteDSourceResponse) SetAccountId(v int32) {
	o.AccountId = &v
}

// GetAccountName returns the AccountName field value if set, zero value otherwise.
func (o *DeleteDSourceResponse) GetAccountName() string {
	if o == nil || IsNil(o.AccountName) {
		var ret string
		return ret
	}
	return *o.AccountName
}

// GetAccountNameOk returns a tuple with the AccountName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeleteDSourceResponse) GetAccountNameOk() (*string, bool) {
	if o == nil || IsNil(o.AccountName) {
		return nil, false
	}
	return o.AccountName, true
}

// HasAccountName returns a boolean if a field has been set.
func (o *DeleteDSourceResponse) HasAccountName() bool {
	if o != nil && !IsNil(o.AccountName) {
		return true
	}

	return false
}

// SetAccountName gets a reference to the given string and assigns it to the AccountName field.
func (o *DeleteDSourceResponse) SetAccountName(v string) {
	o.AccountName = &v
}

// GetPercentComplete returns the PercentComplete field value if set, zero value otherwise.
func (o *DeleteDSourceResponse) GetPercentComplete() int32 {
	if o == nil || IsNil(o.PercentComplete) {
		var ret int32
		return ret
	}
	return *o.PercentComplete
}

// GetPercentCompleteOk returns a tuple with the PercentComplete field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeleteDSourceResponse) GetPercentCompleteOk() (*int32, bool) {
	if o == nil || IsNil(o.PercentComplete) {
		return nil, false
	}
	return o.PercentComplete, true
}

// HasPercentComplete returns a boolean if a field has been set.
func (o *DeleteDSourceResponse) HasPercentComplete() bool {
	if o != nil && !IsNil(o.PercentComplete) {
		return true
	}

	return false
}

// SetPercentComplete gets a reference to the given int32 and assigns it to the PercentComplete field.
func (o *DeleteDSourceResponse) SetPercentComplete(v int32) {
	o.PercentComplete = &v
}

// GetVirtualizationTasks returns the VirtualizationTasks field value if set, zero value otherwise.
// Deprecated
func (o *DeleteDSourceResponse) GetVirtualizationTasks() []VirtualizationTask {
	if o == nil || IsNil(o.VirtualizationTasks) {
		var ret []VirtualizationTask
		return ret
	}
	return o.VirtualizationTasks
}

// GetVirtualizationTasksOk returns a tuple with the VirtualizationTasks field value if set, nil otherwise
// and a boolean to check if the value has been set.
// Deprecated
func (o *DeleteDSourceResponse) GetVirtualizationTasksOk() ([]VirtualizationTask, bool) {
	if o == nil || IsNil(o.VirtualizationTasks) {
		return nil, false
	}
	return o.VirtualizationTasks, true
}

// HasVirtualizationTasks returns a boolean if a field has been set.
func (o *DeleteDSourceResponse) HasVirtualizationTasks() bool {
	if o != nil && !IsNil(o.VirtualizationTasks) {
		return true
	}

	return false
}

// SetVirtualizationTasks gets a reference to the given []VirtualizationTask and assigns it to the VirtualizationTasks field.
// Deprecated
func (o *DeleteDSourceResponse) SetVirtualizationTasks(v []VirtualizationTask) {
	o.VirtualizationTasks = v
}

// GetTasks returns the Tasks field value if set, zero value otherwise.
func (o *DeleteDSourceResponse) GetTasks() []JobTask {
	if o == nil || IsNil(o.Tasks) {
		var ret []JobTask
		return ret
	}
	return o.Tasks
}

// GetTasksOk returns a tuple with the Tasks field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeleteDSourceResponse) GetTasksOk() ([]JobTask, bool) {
	if o == nil || IsNil(o.Tasks) {
		return nil, false
	}
	return o.Tasks, true
}

// HasTasks returns a boolean if a field has been set.
func (o *DeleteDSourceResponse) HasTasks() bool {
	if o != nil && !IsNil(o.Tasks) {
		return true
	}

	return false
}

// SetTasks gets a reference to the given []JobTask and assigns it to the Tasks field.
func (o *DeleteDSourceResponse) SetTasks(v []JobTask) {
	o.Tasks = v
}

// GetExecutionId returns the ExecutionId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DeleteDSourceResponse) GetExecutionId() string {
	if o == nil || IsNil(o.ExecutionId.Get()) {
		var ret string
		return ret
	}
	return *o.ExecutionId.Get()
}

// GetExecutionIdOk returns a tuple with the ExecutionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DeleteDSourceResponse) GetExecutionIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ExecutionId.Get(), o.ExecutionId.IsSet()
}

// HasExecutionId returns a boolean if a field has been set.
func (o *DeleteDSourceResponse) HasExecutionId() bool {
	if o != nil && o.ExecutionId.IsSet() {
		return true
	}

	return false
}

// SetExecutionId gets a reference to the given NullableString and assigns it to the ExecutionId field.
func (o *DeleteDSourceResponse) SetExecutionId(v string) {
	o.ExecutionId.Set(&v)
}
// SetExecutionIdNil sets the value for ExecutionId to be an explicit nil
func (o *DeleteDSourceResponse) SetExecutionIdNil() {
	o.ExecutionId.Set(nil)
}

// UnsetExecutionId ensures that no value is present for ExecutionId, not even an explicit nil
func (o *DeleteDSourceResponse) UnsetExecutionId() {
	o.ExecutionId.Unset()
}

// GetJob returns the Job field value if set, zero value otherwise.
func (o *DeleteDSourceResponse) GetJob() Job {
	if o == nil || IsNil(o.Job) {
		var ret Job
		return ret
	}
	return *o.Job
}

// GetJobOk returns a tuple with the Job field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeleteDSourceResponse) GetJobOk() (*Job, bool) {
	if o == nil || IsNil(o.Job) {
		return nil, false
	}
	return o.Job, true
}

// HasJob returns a boolean if a field has been set.
func (o *DeleteDSourceResponse) HasJob() bool {
	if o != nil && !IsNil(o.Job) {
		return true
	}

	return false
}

// SetJob gets a reference to the given Job and assigns it to the Job field.
func (o *DeleteDSourceResponse) SetJob(v Job) {
	o.Job = &v
}

func (o DeleteDSourceResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DeleteDSourceResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.IsWaitingForTelemetry) {
		toSerialize["is_waiting_for_telemetry"] = o.IsWaitingForTelemetry
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.LocalizedType) {
		toSerialize["localized_type"] = o.LocalizedType
	}
	if !IsNil(o.ErrorDetails) {
		toSerialize["error_details"] = o.ErrorDetails
	}
	if !IsNil(o.WarningMessage) {
		toSerialize["warning_message"] = o.WarningMessage
	}
	if !IsNil(o.TargetId) {
		toSerialize["target_id"] = o.TargetId
	}
	if !IsNil(o.TargetName) {
		toSerialize["target_name"] = o.TargetName
	}
	if !IsNil(o.StartTime) {
		toSerialize["start_time"] = o.StartTime
	}
	if !IsNil(o.UpdateTime) {
		toSerialize["update_time"] = o.UpdateTime
	}
	if !IsNil(o.TraceId) {
		toSerialize["trace_id"] = o.TraceId
	}
	if !IsNil(o.EngineIds) {
		toSerialize["engine_ids"] = o.EngineIds
	}
	if !IsNil(o.Tags) {
		toSerialize["tags"] = o.Tags
	}
	if !IsNil(o.Engines) {
		toSerialize["engines"] = o.Engines
	}
	if !IsNil(o.AccountId) {
		toSerialize["account_id"] = o.AccountId
	}
	if !IsNil(o.AccountName) {
		toSerialize["account_name"] = o.AccountName
	}
	if !IsNil(o.PercentComplete) {
		toSerialize["percent_complete"] = o.PercentComplete
	}
	if !IsNil(o.VirtualizationTasks) {
		toSerialize["virtualization_tasks"] = o.VirtualizationTasks
	}
	if !IsNil(o.Tasks) {
		toSerialize["tasks"] = o.Tasks
	}
	if o.ExecutionId.IsSet() {
		toSerialize["execution_id"] = o.ExecutionId.Get()
	}
	if !IsNil(o.Job) {
		toSerialize["job"] = o.Job
	}
	return toSerialize, nil
}

type NullableDeleteDSourceResponse struct {
	value *DeleteDSourceResponse
	isSet bool
}

func (v NullableDeleteDSourceResponse) Get() *DeleteDSourceResponse {
	return v.value
}

func (v *NullableDeleteDSourceResponse) Set(val *DeleteDSourceResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableDeleteDSourceResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableDeleteDSourceResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeleteDSourceResponse(val *DeleteDSourceResponse) *NullableDeleteDSourceResponse {
	return &NullableDeleteDSourceResponse{value: val, isSet: true}
}

func (v NullableDeleteDSourceResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeleteDSourceResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


