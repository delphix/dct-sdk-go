/*
Delphix DCT API

Delphix DCT API

API version: 3.17.0
Contact: support@delphix.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package delphix_dct_api

import (
	"encoding/json"
)

// checks if the DiscoveryResult type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DiscoveryResult{}

// DiscoveryResult The result of sensitive data discovery on a single column or field
type DiscoveryResult struct {
	// The DCT local id of this discovery result
	Id *int64 `json:"id,omitempty"`
	// The name of the table to which the column belongs
	TableName *string `json:"tableName,omitempty"`
	// The name of the file to which the discovery result applies
	FileName *string `json:"fileName,omitempty"`
	// The name the column to which the discovery result applies
	ColumnName *string `json:"columnName,omitempty"`
	// The name the field to which the discovery result applies
	FieldName *string `json:"fieldName,omitempty"`
	// The data class selected for the column or field
	DataClassName *string `json:"dataClassName,omitempty"`
	// The name of the algorithm selected for the column or field
	AlgorithmName *string `json:"algorithmName,omitempty"`
	// The data type determined for the column or field
	DataType *string `json:"dataType,omitempty"`
	// The confidence of the discovery result, ranging from -100 to 100
	Confidence *int32 `json:"confidence,omitempty"`
	// Whether the corresponding ruleset column or field was configured to allow the discovery process to update the masking assignment
	IsProfilerWritable *bool `json:"isProfilerWritable,omitempty"`
}

// NewDiscoveryResult instantiates a new DiscoveryResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDiscoveryResult() *DiscoveryResult {
	this := DiscoveryResult{}
	return &this
}

// NewDiscoveryResultWithDefaults instantiates a new DiscoveryResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDiscoveryResultWithDefaults() *DiscoveryResult {
	this := DiscoveryResult{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *DiscoveryResult) GetId() int64 {
	if o == nil || IsNil(o.Id) {
		var ret int64
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DiscoveryResult) GetIdOk() (*int64, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *DiscoveryResult) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int64 and assigns it to the Id field.
func (o *DiscoveryResult) SetId(v int64) {
	o.Id = &v
}

// GetTableName returns the TableName field value if set, zero value otherwise.
func (o *DiscoveryResult) GetTableName() string {
	if o == nil || IsNil(o.TableName) {
		var ret string
		return ret
	}
	return *o.TableName
}

// GetTableNameOk returns a tuple with the TableName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DiscoveryResult) GetTableNameOk() (*string, bool) {
	if o == nil || IsNil(o.TableName) {
		return nil, false
	}
	return o.TableName, true
}

// HasTableName returns a boolean if a field has been set.
func (o *DiscoveryResult) HasTableName() bool {
	if o != nil && !IsNil(o.TableName) {
		return true
	}

	return false
}

// SetTableName gets a reference to the given string and assigns it to the TableName field.
func (o *DiscoveryResult) SetTableName(v string) {
	o.TableName = &v
}

// GetFileName returns the FileName field value if set, zero value otherwise.
func (o *DiscoveryResult) GetFileName() string {
	if o == nil || IsNil(o.FileName) {
		var ret string
		return ret
	}
	return *o.FileName
}

// GetFileNameOk returns a tuple with the FileName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DiscoveryResult) GetFileNameOk() (*string, bool) {
	if o == nil || IsNil(o.FileName) {
		return nil, false
	}
	return o.FileName, true
}

// HasFileName returns a boolean if a field has been set.
func (o *DiscoveryResult) HasFileName() bool {
	if o != nil && !IsNil(o.FileName) {
		return true
	}

	return false
}

// SetFileName gets a reference to the given string and assigns it to the FileName field.
func (o *DiscoveryResult) SetFileName(v string) {
	o.FileName = &v
}

// GetColumnName returns the ColumnName field value if set, zero value otherwise.
func (o *DiscoveryResult) GetColumnName() string {
	if o == nil || IsNil(o.ColumnName) {
		var ret string
		return ret
	}
	return *o.ColumnName
}

// GetColumnNameOk returns a tuple with the ColumnName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DiscoveryResult) GetColumnNameOk() (*string, bool) {
	if o == nil || IsNil(o.ColumnName) {
		return nil, false
	}
	return o.ColumnName, true
}

// HasColumnName returns a boolean if a field has been set.
func (o *DiscoveryResult) HasColumnName() bool {
	if o != nil && !IsNil(o.ColumnName) {
		return true
	}

	return false
}

// SetColumnName gets a reference to the given string and assigns it to the ColumnName field.
func (o *DiscoveryResult) SetColumnName(v string) {
	o.ColumnName = &v
}

// GetFieldName returns the FieldName field value if set, zero value otherwise.
func (o *DiscoveryResult) GetFieldName() string {
	if o == nil || IsNil(o.FieldName) {
		var ret string
		return ret
	}
	return *o.FieldName
}

// GetFieldNameOk returns a tuple with the FieldName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DiscoveryResult) GetFieldNameOk() (*string, bool) {
	if o == nil || IsNil(o.FieldName) {
		return nil, false
	}
	return o.FieldName, true
}

// HasFieldName returns a boolean if a field has been set.
func (o *DiscoveryResult) HasFieldName() bool {
	if o != nil && !IsNil(o.FieldName) {
		return true
	}

	return false
}

// SetFieldName gets a reference to the given string and assigns it to the FieldName field.
func (o *DiscoveryResult) SetFieldName(v string) {
	o.FieldName = &v
}

// GetDataClassName returns the DataClassName field value if set, zero value otherwise.
func (o *DiscoveryResult) GetDataClassName() string {
	if o == nil || IsNil(o.DataClassName) {
		var ret string
		return ret
	}
	return *o.DataClassName
}

// GetDataClassNameOk returns a tuple with the DataClassName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DiscoveryResult) GetDataClassNameOk() (*string, bool) {
	if o == nil || IsNil(o.DataClassName) {
		return nil, false
	}
	return o.DataClassName, true
}

// HasDataClassName returns a boolean if a field has been set.
func (o *DiscoveryResult) HasDataClassName() bool {
	if o != nil && !IsNil(o.DataClassName) {
		return true
	}

	return false
}

// SetDataClassName gets a reference to the given string and assigns it to the DataClassName field.
func (o *DiscoveryResult) SetDataClassName(v string) {
	o.DataClassName = &v
}

// GetAlgorithmName returns the AlgorithmName field value if set, zero value otherwise.
func (o *DiscoveryResult) GetAlgorithmName() string {
	if o == nil || IsNil(o.AlgorithmName) {
		var ret string
		return ret
	}
	return *o.AlgorithmName
}

// GetAlgorithmNameOk returns a tuple with the AlgorithmName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DiscoveryResult) GetAlgorithmNameOk() (*string, bool) {
	if o == nil || IsNil(o.AlgorithmName) {
		return nil, false
	}
	return o.AlgorithmName, true
}

// HasAlgorithmName returns a boolean if a field has been set.
func (o *DiscoveryResult) HasAlgorithmName() bool {
	if o != nil && !IsNil(o.AlgorithmName) {
		return true
	}

	return false
}

// SetAlgorithmName gets a reference to the given string and assigns it to the AlgorithmName field.
func (o *DiscoveryResult) SetAlgorithmName(v string) {
	o.AlgorithmName = &v
}

// GetDataType returns the DataType field value if set, zero value otherwise.
func (o *DiscoveryResult) GetDataType() string {
	if o == nil || IsNil(o.DataType) {
		var ret string
		return ret
	}
	return *o.DataType
}

// GetDataTypeOk returns a tuple with the DataType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DiscoveryResult) GetDataTypeOk() (*string, bool) {
	if o == nil || IsNil(o.DataType) {
		return nil, false
	}
	return o.DataType, true
}

// HasDataType returns a boolean if a field has been set.
func (o *DiscoveryResult) HasDataType() bool {
	if o != nil && !IsNil(o.DataType) {
		return true
	}

	return false
}

// SetDataType gets a reference to the given string and assigns it to the DataType field.
func (o *DiscoveryResult) SetDataType(v string) {
	o.DataType = &v
}

// GetConfidence returns the Confidence field value if set, zero value otherwise.
func (o *DiscoveryResult) GetConfidence() int32 {
	if o == nil || IsNil(o.Confidence) {
		var ret int32
		return ret
	}
	return *o.Confidence
}

// GetConfidenceOk returns a tuple with the Confidence field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DiscoveryResult) GetConfidenceOk() (*int32, bool) {
	if o == nil || IsNil(o.Confidence) {
		return nil, false
	}
	return o.Confidence, true
}

// HasConfidence returns a boolean if a field has been set.
func (o *DiscoveryResult) HasConfidence() bool {
	if o != nil && !IsNil(o.Confidence) {
		return true
	}

	return false
}

// SetConfidence gets a reference to the given int32 and assigns it to the Confidence field.
func (o *DiscoveryResult) SetConfidence(v int32) {
	o.Confidence = &v
}

// GetIsProfilerWritable returns the IsProfilerWritable field value if set, zero value otherwise.
func (o *DiscoveryResult) GetIsProfilerWritable() bool {
	if o == nil || IsNil(o.IsProfilerWritable) {
		var ret bool
		return ret
	}
	return *o.IsProfilerWritable
}

// GetIsProfilerWritableOk returns a tuple with the IsProfilerWritable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DiscoveryResult) GetIsProfilerWritableOk() (*bool, bool) {
	if o == nil || IsNil(o.IsProfilerWritable) {
		return nil, false
	}
	return o.IsProfilerWritable, true
}

// HasIsProfilerWritable returns a boolean if a field has been set.
func (o *DiscoveryResult) HasIsProfilerWritable() bool {
	if o != nil && !IsNil(o.IsProfilerWritable) {
		return true
	}

	return false
}

// SetIsProfilerWritable gets a reference to the given bool and assigns it to the IsProfilerWritable field.
func (o *DiscoveryResult) SetIsProfilerWritable(v bool) {
	o.IsProfilerWritable = &v
}

func (o DiscoveryResult) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DiscoveryResult) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.TableName) {
		toSerialize["tableName"] = o.TableName
	}
	if !IsNil(o.FileName) {
		toSerialize["fileName"] = o.FileName
	}
	if !IsNil(o.ColumnName) {
		toSerialize["columnName"] = o.ColumnName
	}
	if !IsNil(o.FieldName) {
		toSerialize["fieldName"] = o.FieldName
	}
	if !IsNil(o.DataClassName) {
		toSerialize["dataClassName"] = o.DataClassName
	}
	if !IsNil(o.AlgorithmName) {
		toSerialize["algorithmName"] = o.AlgorithmName
	}
	if !IsNil(o.DataType) {
		toSerialize["dataType"] = o.DataType
	}
	if !IsNil(o.Confidence) {
		toSerialize["confidence"] = o.Confidence
	}
	if !IsNil(o.IsProfilerWritable) {
		toSerialize["isProfilerWritable"] = o.IsProfilerWritable
	}
	return toSerialize, nil
}

type NullableDiscoveryResult struct {
	value *DiscoveryResult
	isSet bool
}

func (v NullableDiscoveryResult) Get() *DiscoveryResult {
	return v.value
}

func (v *NullableDiscoveryResult) Set(val *DiscoveryResult) {
	v.value = val
	v.isSet = true
}

func (v NullableDiscoveryResult) IsSet() bool {
	return v.isSet
}

func (v *NullableDiscoveryResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDiscoveryResult(val *DiscoveryResult) *NullableDiscoveryResult {
	return &NullableDiscoveryResult{value: val, isSet: true}
}

func (v NullableDiscoveryResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDiscoveryResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


