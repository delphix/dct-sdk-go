/*
Delphix DCT API

Delphix DCT API

API version: 3.17.0
Contact: support@delphix.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package delphix_dct_api

import (
	"encoding/json"
)

// checks if the Source type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Source{}

// Source The Delphix representation of the source database (not typically managed by Delphix).
type Source struct {
	// The Source object entity ID.
	Id *string `json:"id,omitempty"`
	// The type of this source database.
	DatabaseType NullableString `json:"database_type,omitempty"`
	// The name of this source database.
	Name NullableString `json:"name,omitempty"`
	// The namespace id of this source database.
	NamespaceId NullableString `json:"namespace_id,omitempty"`
	// The namespace name of this source database.
	NamespaceName NullableString `json:"namespace_name,omitempty"`
	// Is this a replicated object.
	IsReplica NullableBool `json:"is_replica,omitempty"`
	// The version of this source database.
	DatabaseVersion NullableString `json:"database_version,omitempty"`
	// A reference to the Environment that hosts this source database.
	EnvironmentId NullableString `json:"environment_id,omitempty"`
	// A universal ID that uniquely identifies this source database.
	DataUuid NullableString `json:"data_uuid,omitempty"`
	// The IP address of the source's host.
	IpAddress NullableString `json:"ip_address,omitempty"`
	// The FQDN of the source's host.
	Fqdn NullableString `json:"fqdn,omitempty"`
	// The total size of this source database, in bytes.
	Size NullableInt64 `json:"size,omitempty"`
	// The JDBC connection URL for this source database.
	// Deprecated
	JdbcConnectionString NullableString `json:"jdbc_connection_string,omitempty"`
	// The version of the plugin associated with this source database.
	PluginVersion NullableString `json:"plugin_version,omitempty"`
	// The ID of the toolkit associated with this source database(AppData only).
	ToolkitId *string `json:"toolkit_id,omitempty"`
	IsDsource *bool `json:"is_dsource,omitempty"`
	// The repository id for this source
	Repository *string `json:"repository,omitempty"`
	// Recovery model of the source database (MSSql Only).
	RecoveryModel NullableString `json:"recovery_model,omitempty"`
	// The type of this mssql source database (MSSql Only).
	MssqlSourceType NullableString `json:"mssql_source_type,omitempty"`
	// The type of this appdata source database (Appdata Only).
	AppdataSourceType NullableString `json:"appdata_source_type,omitempty"`
	// If this source is of PDB type (Oracle Only).
	IsPdb NullableBool `json:"is_pdb,omitempty"`
	Tags []Tag `json:"tags,omitempty"`
	// The instance name of this single instance database source.
	InstanceName *string `json:"instance_name,omitempty"`
	// The instance number of this single instance database source.
	InstanceNumber *int32 `json:"instance_number,omitempty"`
	Instances []OracleRACDatabaseInstance `json:"instances,omitempty"`
	OracleServices []OracleService `json:"oracle_services,omitempty"`
	// The username of the database user.
	User *string `json:"user,omitempty"`
	// The username of a database user that does not have administrative privileges.
	NonSysUser *string `json:"non_sys_user,omitempty"`
	// Whether this source was discovered.
	Discovered *bool `json:"discovered,omitempty"`
	// Whether this source should be used for linking.
	LinkingEnabled *bool `json:"linking_enabled,omitempty"`
}

// NewSource instantiates a new Source object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSource() *Source {
	this := Source{}
	return &this
}

// NewSourceWithDefaults instantiates a new Source object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSourceWithDefaults() *Source {
	this := Source{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Source) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Source) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Source) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *Source) SetId(v string) {
	o.Id = &v
}

// GetDatabaseType returns the DatabaseType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Source) GetDatabaseType() string {
	if o == nil || IsNil(o.DatabaseType.Get()) {
		var ret string
		return ret
	}
	return *o.DatabaseType.Get()
}

// GetDatabaseTypeOk returns a tuple with the DatabaseType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Source) GetDatabaseTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.DatabaseType.Get(), o.DatabaseType.IsSet()
}

// HasDatabaseType returns a boolean if a field has been set.
func (o *Source) HasDatabaseType() bool {
	if o != nil && o.DatabaseType.IsSet() {
		return true
	}

	return false
}

// SetDatabaseType gets a reference to the given NullableString and assigns it to the DatabaseType field.
func (o *Source) SetDatabaseType(v string) {
	o.DatabaseType.Set(&v)
}
// SetDatabaseTypeNil sets the value for DatabaseType to be an explicit nil
func (o *Source) SetDatabaseTypeNil() {
	o.DatabaseType.Set(nil)
}

// UnsetDatabaseType ensures that no value is present for DatabaseType, not even an explicit nil
func (o *Source) UnsetDatabaseType() {
	o.DatabaseType.Unset()
}

// GetName returns the Name field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Source) GetName() string {
	if o == nil || IsNil(o.Name.Get()) {
		var ret string
		return ret
	}
	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Source) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// HasName returns a boolean if a field has been set.
func (o *Source) HasName() bool {
	if o != nil && o.Name.IsSet() {
		return true
	}

	return false
}

// SetName gets a reference to the given NullableString and assigns it to the Name field.
func (o *Source) SetName(v string) {
	o.Name.Set(&v)
}
// SetNameNil sets the value for Name to be an explicit nil
func (o *Source) SetNameNil() {
	o.Name.Set(nil)
}

// UnsetName ensures that no value is present for Name, not even an explicit nil
func (o *Source) UnsetName() {
	o.Name.Unset()
}

// GetNamespaceId returns the NamespaceId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Source) GetNamespaceId() string {
	if o == nil || IsNil(o.NamespaceId.Get()) {
		var ret string
		return ret
	}
	return *o.NamespaceId.Get()
}

// GetNamespaceIdOk returns a tuple with the NamespaceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Source) GetNamespaceIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.NamespaceId.Get(), o.NamespaceId.IsSet()
}

// HasNamespaceId returns a boolean if a field has been set.
func (o *Source) HasNamespaceId() bool {
	if o != nil && o.NamespaceId.IsSet() {
		return true
	}

	return false
}

// SetNamespaceId gets a reference to the given NullableString and assigns it to the NamespaceId field.
func (o *Source) SetNamespaceId(v string) {
	o.NamespaceId.Set(&v)
}
// SetNamespaceIdNil sets the value for NamespaceId to be an explicit nil
func (o *Source) SetNamespaceIdNil() {
	o.NamespaceId.Set(nil)
}

// UnsetNamespaceId ensures that no value is present for NamespaceId, not even an explicit nil
func (o *Source) UnsetNamespaceId() {
	o.NamespaceId.Unset()
}

// GetNamespaceName returns the NamespaceName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Source) GetNamespaceName() string {
	if o == nil || IsNil(o.NamespaceName.Get()) {
		var ret string
		return ret
	}
	return *o.NamespaceName.Get()
}

// GetNamespaceNameOk returns a tuple with the NamespaceName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Source) GetNamespaceNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.NamespaceName.Get(), o.NamespaceName.IsSet()
}

// HasNamespaceName returns a boolean if a field has been set.
func (o *Source) HasNamespaceName() bool {
	if o != nil && o.NamespaceName.IsSet() {
		return true
	}

	return false
}

// SetNamespaceName gets a reference to the given NullableString and assigns it to the NamespaceName field.
func (o *Source) SetNamespaceName(v string) {
	o.NamespaceName.Set(&v)
}
// SetNamespaceNameNil sets the value for NamespaceName to be an explicit nil
func (o *Source) SetNamespaceNameNil() {
	o.NamespaceName.Set(nil)
}

// UnsetNamespaceName ensures that no value is present for NamespaceName, not even an explicit nil
func (o *Source) UnsetNamespaceName() {
	o.NamespaceName.Unset()
}

// GetIsReplica returns the IsReplica field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Source) GetIsReplica() bool {
	if o == nil || IsNil(o.IsReplica.Get()) {
		var ret bool
		return ret
	}
	return *o.IsReplica.Get()
}

// GetIsReplicaOk returns a tuple with the IsReplica field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Source) GetIsReplicaOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.IsReplica.Get(), o.IsReplica.IsSet()
}

// HasIsReplica returns a boolean if a field has been set.
func (o *Source) HasIsReplica() bool {
	if o != nil && o.IsReplica.IsSet() {
		return true
	}

	return false
}

// SetIsReplica gets a reference to the given NullableBool and assigns it to the IsReplica field.
func (o *Source) SetIsReplica(v bool) {
	o.IsReplica.Set(&v)
}
// SetIsReplicaNil sets the value for IsReplica to be an explicit nil
func (o *Source) SetIsReplicaNil() {
	o.IsReplica.Set(nil)
}

// UnsetIsReplica ensures that no value is present for IsReplica, not even an explicit nil
func (o *Source) UnsetIsReplica() {
	o.IsReplica.Unset()
}

// GetDatabaseVersion returns the DatabaseVersion field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Source) GetDatabaseVersion() string {
	if o == nil || IsNil(o.DatabaseVersion.Get()) {
		var ret string
		return ret
	}
	return *o.DatabaseVersion.Get()
}

// GetDatabaseVersionOk returns a tuple with the DatabaseVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Source) GetDatabaseVersionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.DatabaseVersion.Get(), o.DatabaseVersion.IsSet()
}

// HasDatabaseVersion returns a boolean if a field has been set.
func (o *Source) HasDatabaseVersion() bool {
	if o != nil && o.DatabaseVersion.IsSet() {
		return true
	}

	return false
}

// SetDatabaseVersion gets a reference to the given NullableString and assigns it to the DatabaseVersion field.
func (o *Source) SetDatabaseVersion(v string) {
	o.DatabaseVersion.Set(&v)
}
// SetDatabaseVersionNil sets the value for DatabaseVersion to be an explicit nil
func (o *Source) SetDatabaseVersionNil() {
	o.DatabaseVersion.Set(nil)
}

// UnsetDatabaseVersion ensures that no value is present for DatabaseVersion, not even an explicit nil
func (o *Source) UnsetDatabaseVersion() {
	o.DatabaseVersion.Unset()
}

// GetEnvironmentId returns the EnvironmentId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Source) GetEnvironmentId() string {
	if o == nil || IsNil(o.EnvironmentId.Get()) {
		var ret string
		return ret
	}
	return *o.EnvironmentId.Get()
}

// GetEnvironmentIdOk returns a tuple with the EnvironmentId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Source) GetEnvironmentIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.EnvironmentId.Get(), o.EnvironmentId.IsSet()
}

// HasEnvironmentId returns a boolean if a field has been set.
func (o *Source) HasEnvironmentId() bool {
	if o != nil && o.EnvironmentId.IsSet() {
		return true
	}

	return false
}

// SetEnvironmentId gets a reference to the given NullableString and assigns it to the EnvironmentId field.
func (o *Source) SetEnvironmentId(v string) {
	o.EnvironmentId.Set(&v)
}
// SetEnvironmentIdNil sets the value for EnvironmentId to be an explicit nil
func (o *Source) SetEnvironmentIdNil() {
	o.EnvironmentId.Set(nil)
}

// UnsetEnvironmentId ensures that no value is present for EnvironmentId, not even an explicit nil
func (o *Source) UnsetEnvironmentId() {
	o.EnvironmentId.Unset()
}

// GetDataUuid returns the DataUuid field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Source) GetDataUuid() string {
	if o == nil || IsNil(o.DataUuid.Get()) {
		var ret string
		return ret
	}
	return *o.DataUuid.Get()
}

// GetDataUuidOk returns a tuple with the DataUuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Source) GetDataUuidOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.DataUuid.Get(), o.DataUuid.IsSet()
}

// HasDataUuid returns a boolean if a field has been set.
func (o *Source) HasDataUuid() bool {
	if o != nil && o.DataUuid.IsSet() {
		return true
	}

	return false
}

// SetDataUuid gets a reference to the given NullableString and assigns it to the DataUuid field.
func (o *Source) SetDataUuid(v string) {
	o.DataUuid.Set(&v)
}
// SetDataUuidNil sets the value for DataUuid to be an explicit nil
func (o *Source) SetDataUuidNil() {
	o.DataUuid.Set(nil)
}

// UnsetDataUuid ensures that no value is present for DataUuid, not even an explicit nil
func (o *Source) UnsetDataUuid() {
	o.DataUuid.Unset()
}

// GetIpAddress returns the IpAddress field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Source) GetIpAddress() string {
	if o == nil || IsNil(o.IpAddress.Get()) {
		var ret string
		return ret
	}
	return *o.IpAddress.Get()
}

// GetIpAddressOk returns a tuple with the IpAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Source) GetIpAddressOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.IpAddress.Get(), o.IpAddress.IsSet()
}

// HasIpAddress returns a boolean if a field has been set.
func (o *Source) HasIpAddress() bool {
	if o != nil && o.IpAddress.IsSet() {
		return true
	}

	return false
}

// SetIpAddress gets a reference to the given NullableString and assigns it to the IpAddress field.
func (o *Source) SetIpAddress(v string) {
	o.IpAddress.Set(&v)
}
// SetIpAddressNil sets the value for IpAddress to be an explicit nil
func (o *Source) SetIpAddressNil() {
	o.IpAddress.Set(nil)
}

// UnsetIpAddress ensures that no value is present for IpAddress, not even an explicit nil
func (o *Source) UnsetIpAddress() {
	o.IpAddress.Unset()
}

// GetFqdn returns the Fqdn field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Source) GetFqdn() string {
	if o == nil || IsNil(o.Fqdn.Get()) {
		var ret string
		return ret
	}
	return *o.Fqdn.Get()
}

// GetFqdnOk returns a tuple with the Fqdn field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Source) GetFqdnOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Fqdn.Get(), o.Fqdn.IsSet()
}

// HasFqdn returns a boolean if a field has been set.
func (o *Source) HasFqdn() bool {
	if o != nil && o.Fqdn.IsSet() {
		return true
	}

	return false
}

// SetFqdn gets a reference to the given NullableString and assigns it to the Fqdn field.
func (o *Source) SetFqdn(v string) {
	o.Fqdn.Set(&v)
}
// SetFqdnNil sets the value for Fqdn to be an explicit nil
func (o *Source) SetFqdnNil() {
	o.Fqdn.Set(nil)
}

// UnsetFqdn ensures that no value is present for Fqdn, not even an explicit nil
func (o *Source) UnsetFqdn() {
	o.Fqdn.Unset()
}

// GetSize returns the Size field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Source) GetSize() int64 {
	if o == nil || IsNil(o.Size.Get()) {
		var ret int64
		return ret
	}
	return *o.Size.Get()
}

// GetSizeOk returns a tuple with the Size field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Source) GetSizeOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.Size.Get(), o.Size.IsSet()
}

// HasSize returns a boolean if a field has been set.
func (o *Source) HasSize() bool {
	if o != nil && o.Size.IsSet() {
		return true
	}

	return false
}

// SetSize gets a reference to the given NullableInt64 and assigns it to the Size field.
func (o *Source) SetSize(v int64) {
	o.Size.Set(&v)
}
// SetSizeNil sets the value for Size to be an explicit nil
func (o *Source) SetSizeNil() {
	o.Size.Set(nil)
}

// UnsetSize ensures that no value is present for Size, not even an explicit nil
func (o *Source) UnsetSize() {
	o.Size.Unset()
}

// GetJdbcConnectionString returns the JdbcConnectionString field value if set, zero value otherwise (both if not set or set to explicit null).
// Deprecated
func (o *Source) GetJdbcConnectionString() string {
	if o == nil || IsNil(o.JdbcConnectionString.Get()) {
		var ret string
		return ret
	}
	return *o.JdbcConnectionString.Get()
}

// GetJdbcConnectionStringOk returns a tuple with the JdbcConnectionString field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
// Deprecated
func (o *Source) GetJdbcConnectionStringOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.JdbcConnectionString.Get(), o.JdbcConnectionString.IsSet()
}

// HasJdbcConnectionString returns a boolean if a field has been set.
func (o *Source) HasJdbcConnectionString() bool {
	if o != nil && o.JdbcConnectionString.IsSet() {
		return true
	}

	return false
}

// SetJdbcConnectionString gets a reference to the given NullableString and assigns it to the JdbcConnectionString field.
// Deprecated
func (o *Source) SetJdbcConnectionString(v string) {
	o.JdbcConnectionString.Set(&v)
}
// SetJdbcConnectionStringNil sets the value for JdbcConnectionString to be an explicit nil
func (o *Source) SetJdbcConnectionStringNil() {
	o.JdbcConnectionString.Set(nil)
}

// UnsetJdbcConnectionString ensures that no value is present for JdbcConnectionString, not even an explicit nil
func (o *Source) UnsetJdbcConnectionString() {
	o.JdbcConnectionString.Unset()
}

// GetPluginVersion returns the PluginVersion field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Source) GetPluginVersion() string {
	if o == nil || IsNil(o.PluginVersion.Get()) {
		var ret string
		return ret
	}
	return *o.PluginVersion.Get()
}

// GetPluginVersionOk returns a tuple with the PluginVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Source) GetPluginVersionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.PluginVersion.Get(), o.PluginVersion.IsSet()
}

// HasPluginVersion returns a boolean if a field has been set.
func (o *Source) HasPluginVersion() bool {
	if o != nil && o.PluginVersion.IsSet() {
		return true
	}

	return false
}

// SetPluginVersion gets a reference to the given NullableString and assigns it to the PluginVersion field.
func (o *Source) SetPluginVersion(v string) {
	o.PluginVersion.Set(&v)
}
// SetPluginVersionNil sets the value for PluginVersion to be an explicit nil
func (o *Source) SetPluginVersionNil() {
	o.PluginVersion.Set(nil)
}

// UnsetPluginVersion ensures that no value is present for PluginVersion, not even an explicit nil
func (o *Source) UnsetPluginVersion() {
	o.PluginVersion.Unset()
}

// GetToolkitId returns the ToolkitId field value if set, zero value otherwise.
func (o *Source) GetToolkitId() string {
	if o == nil || IsNil(o.ToolkitId) {
		var ret string
		return ret
	}
	return *o.ToolkitId
}

// GetToolkitIdOk returns a tuple with the ToolkitId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Source) GetToolkitIdOk() (*string, bool) {
	if o == nil || IsNil(o.ToolkitId) {
		return nil, false
	}
	return o.ToolkitId, true
}

// HasToolkitId returns a boolean if a field has been set.
func (o *Source) HasToolkitId() bool {
	if o != nil && !IsNil(o.ToolkitId) {
		return true
	}

	return false
}

// SetToolkitId gets a reference to the given string and assigns it to the ToolkitId field.
func (o *Source) SetToolkitId(v string) {
	o.ToolkitId = &v
}

// GetIsDsource returns the IsDsource field value if set, zero value otherwise.
func (o *Source) GetIsDsource() bool {
	if o == nil || IsNil(o.IsDsource) {
		var ret bool
		return ret
	}
	return *o.IsDsource
}

// GetIsDsourceOk returns a tuple with the IsDsource field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Source) GetIsDsourceOk() (*bool, bool) {
	if o == nil || IsNil(o.IsDsource) {
		return nil, false
	}
	return o.IsDsource, true
}

// HasIsDsource returns a boolean if a field has been set.
func (o *Source) HasIsDsource() bool {
	if o != nil && !IsNil(o.IsDsource) {
		return true
	}

	return false
}

// SetIsDsource gets a reference to the given bool and assigns it to the IsDsource field.
func (o *Source) SetIsDsource(v bool) {
	o.IsDsource = &v
}

// GetRepository returns the Repository field value if set, zero value otherwise.
func (o *Source) GetRepository() string {
	if o == nil || IsNil(o.Repository) {
		var ret string
		return ret
	}
	return *o.Repository
}

// GetRepositoryOk returns a tuple with the Repository field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Source) GetRepositoryOk() (*string, bool) {
	if o == nil || IsNil(o.Repository) {
		return nil, false
	}
	return o.Repository, true
}

// HasRepository returns a boolean if a field has been set.
func (o *Source) HasRepository() bool {
	if o != nil && !IsNil(o.Repository) {
		return true
	}

	return false
}

// SetRepository gets a reference to the given string and assigns it to the Repository field.
func (o *Source) SetRepository(v string) {
	o.Repository = &v
}

// GetRecoveryModel returns the RecoveryModel field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Source) GetRecoveryModel() string {
	if o == nil || IsNil(o.RecoveryModel.Get()) {
		var ret string
		return ret
	}
	return *o.RecoveryModel.Get()
}

// GetRecoveryModelOk returns a tuple with the RecoveryModel field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Source) GetRecoveryModelOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.RecoveryModel.Get(), o.RecoveryModel.IsSet()
}

// HasRecoveryModel returns a boolean if a field has been set.
func (o *Source) HasRecoveryModel() bool {
	if o != nil && o.RecoveryModel.IsSet() {
		return true
	}

	return false
}

// SetRecoveryModel gets a reference to the given NullableString and assigns it to the RecoveryModel field.
func (o *Source) SetRecoveryModel(v string) {
	o.RecoveryModel.Set(&v)
}
// SetRecoveryModelNil sets the value for RecoveryModel to be an explicit nil
func (o *Source) SetRecoveryModelNil() {
	o.RecoveryModel.Set(nil)
}

// UnsetRecoveryModel ensures that no value is present for RecoveryModel, not even an explicit nil
func (o *Source) UnsetRecoveryModel() {
	o.RecoveryModel.Unset()
}

// GetMssqlSourceType returns the MssqlSourceType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Source) GetMssqlSourceType() string {
	if o == nil || IsNil(o.MssqlSourceType.Get()) {
		var ret string
		return ret
	}
	return *o.MssqlSourceType.Get()
}

// GetMssqlSourceTypeOk returns a tuple with the MssqlSourceType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Source) GetMssqlSourceTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.MssqlSourceType.Get(), o.MssqlSourceType.IsSet()
}

// HasMssqlSourceType returns a boolean if a field has been set.
func (o *Source) HasMssqlSourceType() bool {
	if o != nil && o.MssqlSourceType.IsSet() {
		return true
	}

	return false
}

// SetMssqlSourceType gets a reference to the given NullableString and assigns it to the MssqlSourceType field.
func (o *Source) SetMssqlSourceType(v string) {
	o.MssqlSourceType.Set(&v)
}
// SetMssqlSourceTypeNil sets the value for MssqlSourceType to be an explicit nil
func (o *Source) SetMssqlSourceTypeNil() {
	o.MssqlSourceType.Set(nil)
}

// UnsetMssqlSourceType ensures that no value is present for MssqlSourceType, not even an explicit nil
func (o *Source) UnsetMssqlSourceType() {
	o.MssqlSourceType.Unset()
}

// GetAppdataSourceType returns the AppdataSourceType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Source) GetAppdataSourceType() string {
	if o == nil || IsNil(o.AppdataSourceType.Get()) {
		var ret string
		return ret
	}
	return *o.AppdataSourceType.Get()
}

// GetAppdataSourceTypeOk returns a tuple with the AppdataSourceType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Source) GetAppdataSourceTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.AppdataSourceType.Get(), o.AppdataSourceType.IsSet()
}

// HasAppdataSourceType returns a boolean if a field has been set.
func (o *Source) HasAppdataSourceType() bool {
	if o != nil && o.AppdataSourceType.IsSet() {
		return true
	}

	return false
}

// SetAppdataSourceType gets a reference to the given NullableString and assigns it to the AppdataSourceType field.
func (o *Source) SetAppdataSourceType(v string) {
	o.AppdataSourceType.Set(&v)
}
// SetAppdataSourceTypeNil sets the value for AppdataSourceType to be an explicit nil
func (o *Source) SetAppdataSourceTypeNil() {
	o.AppdataSourceType.Set(nil)
}

// UnsetAppdataSourceType ensures that no value is present for AppdataSourceType, not even an explicit nil
func (o *Source) UnsetAppdataSourceType() {
	o.AppdataSourceType.Unset()
}

// GetIsPdb returns the IsPdb field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Source) GetIsPdb() bool {
	if o == nil || IsNil(o.IsPdb.Get()) {
		var ret bool
		return ret
	}
	return *o.IsPdb.Get()
}

// GetIsPdbOk returns a tuple with the IsPdb field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Source) GetIsPdbOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.IsPdb.Get(), o.IsPdb.IsSet()
}

// HasIsPdb returns a boolean if a field has been set.
func (o *Source) HasIsPdb() bool {
	if o != nil && o.IsPdb.IsSet() {
		return true
	}

	return false
}

// SetIsPdb gets a reference to the given NullableBool and assigns it to the IsPdb field.
func (o *Source) SetIsPdb(v bool) {
	o.IsPdb.Set(&v)
}
// SetIsPdbNil sets the value for IsPdb to be an explicit nil
func (o *Source) SetIsPdbNil() {
	o.IsPdb.Set(nil)
}

// UnsetIsPdb ensures that no value is present for IsPdb, not even an explicit nil
func (o *Source) UnsetIsPdb() {
	o.IsPdb.Unset()
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *Source) GetTags() []Tag {
	if o == nil || IsNil(o.Tags) {
		var ret []Tag
		return ret
	}
	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Source) GetTagsOk() ([]Tag, bool) {
	if o == nil || IsNil(o.Tags) {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *Source) HasTags() bool {
	if o != nil && !IsNil(o.Tags) {
		return true
	}

	return false
}

// SetTags gets a reference to the given []Tag and assigns it to the Tags field.
func (o *Source) SetTags(v []Tag) {
	o.Tags = v
}

// GetInstanceName returns the InstanceName field value if set, zero value otherwise.
func (o *Source) GetInstanceName() string {
	if o == nil || IsNil(o.InstanceName) {
		var ret string
		return ret
	}
	return *o.InstanceName
}

// GetInstanceNameOk returns a tuple with the InstanceName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Source) GetInstanceNameOk() (*string, bool) {
	if o == nil || IsNil(o.InstanceName) {
		return nil, false
	}
	return o.InstanceName, true
}

// HasInstanceName returns a boolean if a field has been set.
func (o *Source) HasInstanceName() bool {
	if o != nil && !IsNil(o.InstanceName) {
		return true
	}

	return false
}

// SetInstanceName gets a reference to the given string and assigns it to the InstanceName field.
func (o *Source) SetInstanceName(v string) {
	o.InstanceName = &v
}

// GetInstanceNumber returns the InstanceNumber field value if set, zero value otherwise.
func (o *Source) GetInstanceNumber() int32 {
	if o == nil || IsNil(o.InstanceNumber) {
		var ret int32
		return ret
	}
	return *o.InstanceNumber
}

// GetInstanceNumberOk returns a tuple with the InstanceNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Source) GetInstanceNumberOk() (*int32, bool) {
	if o == nil || IsNil(o.InstanceNumber) {
		return nil, false
	}
	return o.InstanceNumber, true
}

// HasInstanceNumber returns a boolean if a field has been set.
func (o *Source) HasInstanceNumber() bool {
	if o != nil && !IsNil(o.InstanceNumber) {
		return true
	}

	return false
}

// SetInstanceNumber gets a reference to the given int32 and assigns it to the InstanceNumber field.
func (o *Source) SetInstanceNumber(v int32) {
	o.InstanceNumber = &v
}

// GetInstances returns the Instances field value if set, zero value otherwise.
func (o *Source) GetInstances() []OracleRACDatabaseInstance {
	if o == nil || IsNil(o.Instances) {
		var ret []OracleRACDatabaseInstance
		return ret
	}
	return o.Instances
}

// GetInstancesOk returns a tuple with the Instances field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Source) GetInstancesOk() ([]OracleRACDatabaseInstance, bool) {
	if o == nil || IsNil(o.Instances) {
		return nil, false
	}
	return o.Instances, true
}

// HasInstances returns a boolean if a field has been set.
func (o *Source) HasInstances() bool {
	if o != nil && !IsNil(o.Instances) {
		return true
	}

	return false
}

// SetInstances gets a reference to the given []OracleRACDatabaseInstance and assigns it to the Instances field.
func (o *Source) SetInstances(v []OracleRACDatabaseInstance) {
	o.Instances = v
}

// GetOracleServices returns the OracleServices field value if set, zero value otherwise.
func (o *Source) GetOracleServices() []OracleService {
	if o == nil || IsNil(o.OracleServices) {
		var ret []OracleService
		return ret
	}
	return o.OracleServices
}

// GetOracleServicesOk returns a tuple with the OracleServices field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Source) GetOracleServicesOk() ([]OracleService, bool) {
	if o == nil || IsNil(o.OracleServices) {
		return nil, false
	}
	return o.OracleServices, true
}

// HasOracleServices returns a boolean if a field has been set.
func (o *Source) HasOracleServices() bool {
	if o != nil && !IsNil(o.OracleServices) {
		return true
	}

	return false
}

// SetOracleServices gets a reference to the given []OracleService and assigns it to the OracleServices field.
func (o *Source) SetOracleServices(v []OracleService) {
	o.OracleServices = v
}

// GetUser returns the User field value if set, zero value otherwise.
func (o *Source) GetUser() string {
	if o == nil || IsNil(o.User) {
		var ret string
		return ret
	}
	return *o.User
}

// GetUserOk returns a tuple with the User field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Source) GetUserOk() (*string, bool) {
	if o == nil || IsNil(o.User) {
		return nil, false
	}
	return o.User, true
}

// HasUser returns a boolean if a field has been set.
func (o *Source) HasUser() bool {
	if o != nil && !IsNil(o.User) {
		return true
	}

	return false
}

// SetUser gets a reference to the given string and assigns it to the User field.
func (o *Source) SetUser(v string) {
	o.User = &v
}

// GetNonSysUser returns the NonSysUser field value if set, zero value otherwise.
func (o *Source) GetNonSysUser() string {
	if o == nil || IsNil(o.NonSysUser) {
		var ret string
		return ret
	}
	return *o.NonSysUser
}

// GetNonSysUserOk returns a tuple with the NonSysUser field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Source) GetNonSysUserOk() (*string, bool) {
	if o == nil || IsNil(o.NonSysUser) {
		return nil, false
	}
	return o.NonSysUser, true
}

// HasNonSysUser returns a boolean if a field has been set.
func (o *Source) HasNonSysUser() bool {
	if o != nil && !IsNil(o.NonSysUser) {
		return true
	}

	return false
}

// SetNonSysUser gets a reference to the given string and assigns it to the NonSysUser field.
func (o *Source) SetNonSysUser(v string) {
	o.NonSysUser = &v
}

// GetDiscovered returns the Discovered field value if set, zero value otherwise.
func (o *Source) GetDiscovered() bool {
	if o == nil || IsNil(o.Discovered) {
		var ret bool
		return ret
	}
	return *o.Discovered
}

// GetDiscoveredOk returns a tuple with the Discovered field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Source) GetDiscoveredOk() (*bool, bool) {
	if o == nil || IsNil(o.Discovered) {
		return nil, false
	}
	return o.Discovered, true
}

// HasDiscovered returns a boolean if a field has been set.
func (o *Source) HasDiscovered() bool {
	if o != nil && !IsNil(o.Discovered) {
		return true
	}

	return false
}

// SetDiscovered gets a reference to the given bool and assigns it to the Discovered field.
func (o *Source) SetDiscovered(v bool) {
	o.Discovered = &v
}

// GetLinkingEnabled returns the LinkingEnabled field value if set, zero value otherwise.
func (o *Source) GetLinkingEnabled() bool {
	if o == nil || IsNil(o.LinkingEnabled) {
		var ret bool
		return ret
	}
	return *o.LinkingEnabled
}

// GetLinkingEnabledOk returns a tuple with the LinkingEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Source) GetLinkingEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.LinkingEnabled) {
		return nil, false
	}
	return o.LinkingEnabled, true
}

// HasLinkingEnabled returns a boolean if a field has been set.
func (o *Source) HasLinkingEnabled() bool {
	if o != nil && !IsNil(o.LinkingEnabled) {
		return true
	}

	return false
}

// SetLinkingEnabled gets a reference to the given bool and assigns it to the LinkingEnabled field.
func (o *Source) SetLinkingEnabled(v bool) {
	o.LinkingEnabled = &v
}

func (o Source) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Source) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if o.DatabaseType.IsSet() {
		toSerialize["database_type"] = o.DatabaseType.Get()
	}
	if o.Name.IsSet() {
		toSerialize["name"] = o.Name.Get()
	}
	if o.NamespaceId.IsSet() {
		toSerialize["namespace_id"] = o.NamespaceId.Get()
	}
	if o.NamespaceName.IsSet() {
		toSerialize["namespace_name"] = o.NamespaceName.Get()
	}
	if o.IsReplica.IsSet() {
		toSerialize["is_replica"] = o.IsReplica.Get()
	}
	if o.DatabaseVersion.IsSet() {
		toSerialize["database_version"] = o.DatabaseVersion.Get()
	}
	if o.EnvironmentId.IsSet() {
		toSerialize["environment_id"] = o.EnvironmentId.Get()
	}
	if o.DataUuid.IsSet() {
		toSerialize["data_uuid"] = o.DataUuid.Get()
	}
	if o.IpAddress.IsSet() {
		toSerialize["ip_address"] = o.IpAddress.Get()
	}
	if o.Fqdn.IsSet() {
		toSerialize["fqdn"] = o.Fqdn.Get()
	}
	if o.Size.IsSet() {
		toSerialize["size"] = o.Size.Get()
	}
	if o.JdbcConnectionString.IsSet() {
		toSerialize["jdbc_connection_string"] = o.JdbcConnectionString.Get()
	}
	if o.PluginVersion.IsSet() {
		toSerialize["plugin_version"] = o.PluginVersion.Get()
	}
	if !IsNil(o.ToolkitId) {
		toSerialize["toolkit_id"] = o.ToolkitId
	}
	if !IsNil(o.IsDsource) {
		toSerialize["is_dsource"] = o.IsDsource
	}
	if !IsNil(o.Repository) {
		toSerialize["repository"] = o.Repository
	}
	if o.RecoveryModel.IsSet() {
		toSerialize["recovery_model"] = o.RecoveryModel.Get()
	}
	if o.MssqlSourceType.IsSet() {
		toSerialize["mssql_source_type"] = o.MssqlSourceType.Get()
	}
	if o.AppdataSourceType.IsSet() {
		toSerialize["appdata_source_type"] = o.AppdataSourceType.Get()
	}
	if o.IsPdb.IsSet() {
		toSerialize["is_pdb"] = o.IsPdb.Get()
	}
	if !IsNil(o.Tags) {
		toSerialize["tags"] = o.Tags
	}
	if !IsNil(o.InstanceName) {
		toSerialize["instance_name"] = o.InstanceName
	}
	if !IsNil(o.InstanceNumber) {
		toSerialize["instance_number"] = o.InstanceNumber
	}
	if !IsNil(o.Instances) {
		toSerialize["instances"] = o.Instances
	}
	if !IsNil(o.OracleServices) {
		toSerialize["oracle_services"] = o.OracleServices
	}
	if !IsNil(o.User) {
		toSerialize["user"] = o.User
	}
	if !IsNil(o.NonSysUser) {
		toSerialize["non_sys_user"] = o.NonSysUser
	}
	if !IsNil(o.Discovered) {
		toSerialize["discovered"] = o.Discovered
	}
	if !IsNil(o.LinkingEnabled) {
		toSerialize["linking_enabled"] = o.LinkingEnabled
	}
	return toSerialize, nil
}

type NullableSource struct {
	value *Source
	isSet bool
}

func (v NullableSource) Get() *Source {
	return v.value
}

func (v *NullableSource) Set(val *Source) {
	v.value = val
	v.isSet = true
}

func (v NullableSource) IsSet() bool {
	return v.isSet
}

func (v *NullableSource) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSource(val *Source) *NullableSource {
	return &NullableSource{value: val, isSet: true}
}

func (v NullableSource) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSource) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


