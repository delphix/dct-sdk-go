/*
Delphix DCT API

Delphix DCT API

API version: 3.17.0
Contact: support@delphix.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package delphix_dct_api

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CreateRepositoryParams type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateRepositoryParams{}

// CreateRepositoryParams struct for CreateRepositoryParams
type CreateRepositoryParams struct {
	// The database type of this repository.
	DatabaseType string `json:"database_type"`
	// 32 or 64 bits.
	Bits *int32 `json:"bits,omitempty"`
	// The Oracle install or SQL Server instance home.
	InstallationHome *string `json:"installation_home,omitempty"`
	// Version of the oracle repository or SQL Server instance.
	Version *string `json:"version,omitempty"`
	// The Oracle base where database binaries are located.
	OracleBase *string `json:"oracle_base,omitempty"`
	// Flag indicating whether the repository should be used for provisioning.
	AllowProvisioning *bool `json:"allow_provisioning,omitempty"`
	// Flag indicating whether this repository can be used by the Delphix Engine for internal processing.
	IsStaging *bool `json:"is_staging,omitempty"`
	// List of Oracle patches that have been applied to this Oracle Home.
	AppliedPatches []int64 `json:"applied_patches,omitempty"`
	// This property determines if the full-text search and semantic search is installed or not (MSSql only).
	FullTextInstalled *bool `json:"full_text_installed,omitempty"`
	// The Server Name of the SQL Server instance.
	ServerName *string `json:"server_name,omitempty"`
	// The network port for connecting to the SQL Server instance.
	Port *int64 `json:"port,omitempty"`
	// Account the SQL Server instance is running as.
	InstanceOwner *string `json:"instance_owner,omitempty"`
	// The name of the SQL Server instance.
	InstanceName *string `json:"instance_name,omitempty"`
}

type _CreateRepositoryParams CreateRepositoryParams

// NewCreateRepositoryParams instantiates a new CreateRepositoryParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateRepositoryParams(databaseType string) *CreateRepositoryParams {
	this := CreateRepositoryParams{}
	this.DatabaseType = databaseType
	var allowProvisioning bool = true
	this.AllowProvisioning = &allowProvisioning
	var isStaging bool = false
	this.IsStaging = &isStaging
	return &this
}

// NewCreateRepositoryParamsWithDefaults instantiates a new CreateRepositoryParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateRepositoryParamsWithDefaults() *CreateRepositoryParams {
	this := CreateRepositoryParams{}
	var allowProvisioning bool = true
	this.AllowProvisioning = &allowProvisioning
	var isStaging bool = false
	this.IsStaging = &isStaging
	return &this
}

// GetDatabaseType returns the DatabaseType field value
func (o *CreateRepositoryParams) GetDatabaseType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DatabaseType
}

// GetDatabaseTypeOk returns a tuple with the DatabaseType field value
// and a boolean to check if the value has been set.
func (o *CreateRepositoryParams) GetDatabaseTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DatabaseType, true
}

// SetDatabaseType sets field value
func (o *CreateRepositoryParams) SetDatabaseType(v string) {
	o.DatabaseType = v
}

// GetBits returns the Bits field value if set, zero value otherwise.
func (o *CreateRepositoryParams) GetBits() int32 {
	if o == nil || IsNil(o.Bits) {
		var ret int32
		return ret
	}
	return *o.Bits
}

// GetBitsOk returns a tuple with the Bits field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateRepositoryParams) GetBitsOk() (*int32, bool) {
	if o == nil || IsNil(o.Bits) {
		return nil, false
	}
	return o.Bits, true
}

// HasBits returns a boolean if a field has been set.
func (o *CreateRepositoryParams) HasBits() bool {
	if o != nil && !IsNil(o.Bits) {
		return true
	}

	return false
}

// SetBits gets a reference to the given int32 and assigns it to the Bits field.
func (o *CreateRepositoryParams) SetBits(v int32) {
	o.Bits = &v
}

// GetInstallationHome returns the InstallationHome field value if set, zero value otherwise.
func (o *CreateRepositoryParams) GetInstallationHome() string {
	if o == nil || IsNil(o.InstallationHome) {
		var ret string
		return ret
	}
	return *o.InstallationHome
}

// GetInstallationHomeOk returns a tuple with the InstallationHome field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateRepositoryParams) GetInstallationHomeOk() (*string, bool) {
	if o == nil || IsNil(o.InstallationHome) {
		return nil, false
	}
	return o.InstallationHome, true
}

// HasInstallationHome returns a boolean if a field has been set.
func (o *CreateRepositoryParams) HasInstallationHome() bool {
	if o != nil && !IsNil(o.InstallationHome) {
		return true
	}

	return false
}

// SetInstallationHome gets a reference to the given string and assigns it to the InstallationHome field.
func (o *CreateRepositoryParams) SetInstallationHome(v string) {
	o.InstallationHome = &v
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *CreateRepositoryParams) GetVersion() string {
	if o == nil || IsNil(o.Version) {
		var ret string
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateRepositoryParams) GetVersionOk() (*string, bool) {
	if o == nil || IsNil(o.Version) {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *CreateRepositoryParams) HasVersion() bool {
	if o != nil && !IsNil(o.Version) {
		return true
	}

	return false
}

// SetVersion gets a reference to the given string and assigns it to the Version field.
func (o *CreateRepositoryParams) SetVersion(v string) {
	o.Version = &v
}

// GetOracleBase returns the OracleBase field value if set, zero value otherwise.
func (o *CreateRepositoryParams) GetOracleBase() string {
	if o == nil || IsNil(o.OracleBase) {
		var ret string
		return ret
	}
	return *o.OracleBase
}

// GetOracleBaseOk returns a tuple with the OracleBase field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateRepositoryParams) GetOracleBaseOk() (*string, bool) {
	if o == nil || IsNil(o.OracleBase) {
		return nil, false
	}
	return o.OracleBase, true
}

// HasOracleBase returns a boolean if a field has been set.
func (o *CreateRepositoryParams) HasOracleBase() bool {
	if o != nil && !IsNil(o.OracleBase) {
		return true
	}

	return false
}

// SetOracleBase gets a reference to the given string and assigns it to the OracleBase field.
func (o *CreateRepositoryParams) SetOracleBase(v string) {
	o.OracleBase = &v
}

// GetAllowProvisioning returns the AllowProvisioning field value if set, zero value otherwise.
func (o *CreateRepositoryParams) GetAllowProvisioning() bool {
	if o == nil || IsNil(o.AllowProvisioning) {
		var ret bool
		return ret
	}
	return *o.AllowProvisioning
}

// GetAllowProvisioningOk returns a tuple with the AllowProvisioning field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateRepositoryParams) GetAllowProvisioningOk() (*bool, bool) {
	if o == nil || IsNil(o.AllowProvisioning) {
		return nil, false
	}
	return o.AllowProvisioning, true
}

// HasAllowProvisioning returns a boolean if a field has been set.
func (o *CreateRepositoryParams) HasAllowProvisioning() bool {
	if o != nil && !IsNil(o.AllowProvisioning) {
		return true
	}

	return false
}

// SetAllowProvisioning gets a reference to the given bool and assigns it to the AllowProvisioning field.
func (o *CreateRepositoryParams) SetAllowProvisioning(v bool) {
	o.AllowProvisioning = &v
}

// GetIsStaging returns the IsStaging field value if set, zero value otherwise.
func (o *CreateRepositoryParams) GetIsStaging() bool {
	if o == nil || IsNil(o.IsStaging) {
		var ret bool
		return ret
	}
	return *o.IsStaging
}

// GetIsStagingOk returns a tuple with the IsStaging field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateRepositoryParams) GetIsStagingOk() (*bool, bool) {
	if o == nil || IsNil(o.IsStaging) {
		return nil, false
	}
	return o.IsStaging, true
}

// HasIsStaging returns a boolean if a field has been set.
func (o *CreateRepositoryParams) HasIsStaging() bool {
	if o != nil && !IsNil(o.IsStaging) {
		return true
	}

	return false
}

// SetIsStaging gets a reference to the given bool and assigns it to the IsStaging field.
func (o *CreateRepositoryParams) SetIsStaging(v bool) {
	o.IsStaging = &v
}

// GetAppliedPatches returns the AppliedPatches field value if set, zero value otherwise.
func (o *CreateRepositoryParams) GetAppliedPatches() []int64 {
	if o == nil || IsNil(o.AppliedPatches) {
		var ret []int64
		return ret
	}
	return o.AppliedPatches
}

// GetAppliedPatchesOk returns a tuple with the AppliedPatches field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateRepositoryParams) GetAppliedPatchesOk() ([]int64, bool) {
	if o == nil || IsNil(o.AppliedPatches) {
		return nil, false
	}
	return o.AppliedPatches, true
}

// HasAppliedPatches returns a boolean if a field has been set.
func (o *CreateRepositoryParams) HasAppliedPatches() bool {
	if o != nil && !IsNil(o.AppliedPatches) {
		return true
	}

	return false
}

// SetAppliedPatches gets a reference to the given []int64 and assigns it to the AppliedPatches field.
func (o *CreateRepositoryParams) SetAppliedPatches(v []int64) {
	o.AppliedPatches = v
}

// GetFullTextInstalled returns the FullTextInstalled field value if set, zero value otherwise.
func (o *CreateRepositoryParams) GetFullTextInstalled() bool {
	if o == nil || IsNil(o.FullTextInstalled) {
		var ret bool
		return ret
	}
	return *o.FullTextInstalled
}

// GetFullTextInstalledOk returns a tuple with the FullTextInstalled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateRepositoryParams) GetFullTextInstalledOk() (*bool, bool) {
	if o == nil || IsNil(o.FullTextInstalled) {
		return nil, false
	}
	return o.FullTextInstalled, true
}

// HasFullTextInstalled returns a boolean if a field has been set.
func (o *CreateRepositoryParams) HasFullTextInstalled() bool {
	if o != nil && !IsNil(o.FullTextInstalled) {
		return true
	}

	return false
}

// SetFullTextInstalled gets a reference to the given bool and assigns it to the FullTextInstalled field.
func (o *CreateRepositoryParams) SetFullTextInstalled(v bool) {
	o.FullTextInstalled = &v
}

// GetServerName returns the ServerName field value if set, zero value otherwise.
func (o *CreateRepositoryParams) GetServerName() string {
	if o == nil || IsNil(o.ServerName) {
		var ret string
		return ret
	}
	return *o.ServerName
}

// GetServerNameOk returns a tuple with the ServerName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateRepositoryParams) GetServerNameOk() (*string, bool) {
	if o == nil || IsNil(o.ServerName) {
		return nil, false
	}
	return o.ServerName, true
}

// HasServerName returns a boolean if a field has been set.
func (o *CreateRepositoryParams) HasServerName() bool {
	if o != nil && !IsNil(o.ServerName) {
		return true
	}

	return false
}

// SetServerName gets a reference to the given string and assigns it to the ServerName field.
func (o *CreateRepositoryParams) SetServerName(v string) {
	o.ServerName = &v
}

// GetPort returns the Port field value if set, zero value otherwise.
func (o *CreateRepositoryParams) GetPort() int64 {
	if o == nil || IsNil(o.Port) {
		var ret int64
		return ret
	}
	return *o.Port
}

// GetPortOk returns a tuple with the Port field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateRepositoryParams) GetPortOk() (*int64, bool) {
	if o == nil || IsNil(o.Port) {
		return nil, false
	}
	return o.Port, true
}

// HasPort returns a boolean if a field has been set.
func (o *CreateRepositoryParams) HasPort() bool {
	if o != nil && !IsNil(o.Port) {
		return true
	}

	return false
}

// SetPort gets a reference to the given int64 and assigns it to the Port field.
func (o *CreateRepositoryParams) SetPort(v int64) {
	o.Port = &v
}

// GetInstanceOwner returns the InstanceOwner field value if set, zero value otherwise.
func (o *CreateRepositoryParams) GetInstanceOwner() string {
	if o == nil || IsNil(o.InstanceOwner) {
		var ret string
		return ret
	}
	return *o.InstanceOwner
}

// GetInstanceOwnerOk returns a tuple with the InstanceOwner field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateRepositoryParams) GetInstanceOwnerOk() (*string, bool) {
	if o == nil || IsNil(o.InstanceOwner) {
		return nil, false
	}
	return o.InstanceOwner, true
}

// HasInstanceOwner returns a boolean if a field has been set.
func (o *CreateRepositoryParams) HasInstanceOwner() bool {
	if o != nil && !IsNil(o.InstanceOwner) {
		return true
	}

	return false
}

// SetInstanceOwner gets a reference to the given string and assigns it to the InstanceOwner field.
func (o *CreateRepositoryParams) SetInstanceOwner(v string) {
	o.InstanceOwner = &v
}

// GetInstanceName returns the InstanceName field value if set, zero value otherwise.
func (o *CreateRepositoryParams) GetInstanceName() string {
	if o == nil || IsNil(o.InstanceName) {
		var ret string
		return ret
	}
	return *o.InstanceName
}

// GetInstanceNameOk returns a tuple with the InstanceName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateRepositoryParams) GetInstanceNameOk() (*string, bool) {
	if o == nil || IsNil(o.InstanceName) {
		return nil, false
	}
	return o.InstanceName, true
}

// HasInstanceName returns a boolean if a field has been set.
func (o *CreateRepositoryParams) HasInstanceName() bool {
	if o != nil && !IsNil(o.InstanceName) {
		return true
	}

	return false
}

// SetInstanceName gets a reference to the given string and assigns it to the InstanceName field.
func (o *CreateRepositoryParams) SetInstanceName(v string) {
	o.InstanceName = &v
}

func (o CreateRepositoryParams) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateRepositoryParams) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["database_type"] = o.DatabaseType
	if !IsNil(o.Bits) {
		toSerialize["bits"] = o.Bits
	}
	if !IsNil(o.InstallationHome) {
		toSerialize["installation_home"] = o.InstallationHome
	}
	if !IsNil(o.Version) {
		toSerialize["version"] = o.Version
	}
	if !IsNil(o.OracleBase) {
		toSerialize["oracle_base"] = o.OracleBase
	}
	if !IsNil(o.AllowProvisioning) {
		toSerialize["allow_provisioning"] = o.AllowProvisioning
	}
	if !IsNil(o.IsStaging) {
		toSerialize["is_staging"] = o.IsStaging
	}
	if !IsNil(o.AppliedPatches) {
		toSerialize["applied_patches"] = o.AppliedPatches
	}
	if !IsNil(o.FullTextInstalled) {
		toSerialize["full_text_installed"] = o.FullTextInstalled
	}
	if !IsNil(o.ServerName) {
		toSerialize["server_name"] = o.ServerName
	}
	if !IsNil(o.Port) {
		toSerialize["port"] = o.Port
	}
	if !IsNil(o.InstanceOwner) {
		toSerialize["instance_owner"] = o.InstanceOwner
	}
	if !IsNil(o.InstanceName) {
		toSerialize["instance_name"] = o.InstanceName
	}
	return toSerialize, nil
}

func (o *CreateRepositoryParams) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"database_type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCreateRepositoryParams := _CreateRepositoryParams{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCreateRepositoryParams)

	if err != nil {
		return err
	}

	*o = CreateRepositoryParams(varCreateRepositoryParams)

	return err
}

type NullableCreateRepositoryParams struct {
	value *CreateRepositoryParams
	isSet bool
}

func (v NullableCreateRepositoryParams) Get() *CreateRepositoryParams {
	return v.value
}

func (v *NullableCreateRepositoryParams) Set(val *CreateRepositoryParams) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateRepositoryParams) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateRepositoryParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateRepositoryParams(val *CreateRepositoryParams) *NullableCreateRepositoryParams {
	return &NullableCreateRepositoryParams{value: val, isSet: true}
}

func (v NullableCreateRepositoryParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateRepositoryParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


