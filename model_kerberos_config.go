/*
Delphix DCT API

Delphix DCT API

API version: 3.17.0
Contact: support@delphix.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package delphix_dct_api

import (
	"encoding/json"
)

// checks if the KerberosConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &KerberosConfig{}

// KerberosConfig A Kerberos config object.
type KerberosConfig struct {
	// The kerberos config ID.
	Id *string `json:"id,omitempty"`
	// The name of the kerberos config object.
	Name *string `json:"name,omitempty"`
	// The namespace id of this kerberos config object.
	NamespaceId *string `json:"namespace_id,omitempty"`
	// The namespace name of this kerberos config object.
	NamespaceName *string `json:"namespace_name,omitempty"`
	// Is this a replicated object.
	IsReplica *bool `json:"is_replica,omitempty"`
	// Id of the Engine that this kerberos config object belongs to.
	EngineId *string `json:"engine_id,omitempty"`
	// Name of the Engine that this kerberos config object belongs to.
	EngineName *string `json:"engine_name,omitempty"`
	// Kerberos Realm name.
	Realm *string `json:"realm,omitempty"`
	// Kerberos principal name.
	Principal *string `json:"principal,omitempty"`
	// The kerberos is enabled or not.
	Enabled NullableBool `json:"enabled,omitempty"`
	// Kerberos keytab.
	Keytab *string `json:"keytab,omitempty"`
	// One of more KDC servers.
	KdcServers []KDCServers `json:"kdc_servers,omitempty"`
}

// NewKerberosConfig instantiates a new KerberosConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewKerberosConfig() *KerberosConfig {
	this := KerberosConfig{}
	return &this
}

// NewKerberosConfigWithDefaults instantiates a new KerberosConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewKerberosConfigWithDefaults() *KerberosConfig {
	this := KerberosConfig{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *KerberosConfig) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KerberosConfig) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *KerberosConfig) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *KerberosConfig) SetId(v string) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *KerberosConfig) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KerberosConfig) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *KerberosConfig) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *KerberosConfig) SetName(v string) {
	o.Name = &v
}

// GetNamespaceId returns the NamespaceId field value if set, zero value otherwise.
func (o *KerberosConfig) GetNamespaceId() string {
	if o == nil || IsNil(o.NamespaceId) {
		var ret string
		return ret
	}
	return *o.NamespaceId
}

// GetNamespaceIdOk returns a tuple with the NamespaceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KerberosConfig) GetNamespaceIdOk() (*string, bool) {
	if o == nil || IsNil(o.NamespaceId) {
		return nil, false
	}
	return o.NamespaceId, true
}

// HasNamespaceId returns a boolean if a field has been set.
func (o *KerberosConfig) HasNamespaceId() bool {
	if o != nil && !IsNil(o.NamespaceId) {
		return true
	}

	return false
}

// SetNamespaceId gets a reference to the given string and assigns it to the NamespaceId field.
func (o *KerberosConfig) SetNamespaceId(v string) {
	o.NamespaceId = &v
}

// GetNamespaceName returns the NamespaceName field value if set, zero value otherwise.
func (o *KerberosConfig) GetNamespaceName() string {
	if o == nil || IsNil(o.NamespaceName) {
		var ret string
		return ret
	}
	return *o.NamespaceName
}

// GetNamespaceNameOk returns a tuple with the NamespaceName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KerberosConfig) GetNamespaceNameOk() (*string, bool) {
	if o == nil || IsNil(o.NamespaceName) {
		return nil, false
	}
	return o.NamespaceName, true
}

// HasNamespaceName returns a boolean if a field has been set.
func (o *KerberosConfig) HasNamespaceName() bool {
	if o != nil && !IsNil(o.NamespaceName) {
		return true
	}

	return false
}

// SetNamespaceName gets a reference to the given string and assigns it to the NamespaceName field.
func (o *KerberosConfig) SetNamespaceName(v string) {
	o.NamespaceName = &v
}

// GetIsReplica returns the IsReplica field value if set, zero value otherwise.
func (o *KerberosConfig) GetIsReplica() bool {
	if o == nil || IsNil(o.IsReplica) {
		var ret bool
		return ret
	}
	return *o.IsReplica
}

// GetIsReplicaOk returns a tuple with the IsReplica field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KerberosConfig) GetIsReplicaOk() (*bool, bool) {
	if o == nil || IsNil(o.IsReplica) {
		return nil, false
	}
	return o.IsReplica, true
}

// HasIsReplica returns a boolean if a field has been set.
func (o *KerberosConfig) HasIsReplica() bool {
	if o != nil && !IsNil(o.IsReplica) {
		return true
	}

	return false
}

// SetIsReplica gets a reference to the given bool and assigns it to the IsReplica field.
func (o *KerberosConfig) SetIsReplica(v bool) {
	o.IsReplica = &v
}

// GetEngineId returns the EngineId field value if set, zero value otherwise.
func (o *KerberosConfig) GetEngineId() string {
	if o == nil || IsNil(o.EngineId) {
		var ret string
		return ret
	}
	return *o.EngineId
}

// GetEngineIdOk returns a tuple with the EngineId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KerberosConfig) GetEngineIdOk() (*string, bool) {
	if o == nil || IsNil(o.EngineId) {
		return nil, false
	}
	return o.EngineId, true
}

// HasEngineId returns a boolean if a field has been set.
func (o *KerberosConfig) HasEngineId() bool {
	if o != nil && !IsNil(o.EngineId) {
		return true
	}

	return false
}

// SetEngineId gets a reference to the given string and assigns it to the EngineId field.
func (o *KerberosConfig) SetEngineId(v string) {
	o.EngineId = &v
}

// GetEngineName returns the EngineName field value if set, zero value otherwise.
func (o *KerberosConfig) GetEngineName() string {
	if o == nil || IsNil(o.EngineName) {
		var ret string
		return ret
	}
	return *o.EngineName
}

// GetEngineNameOk returns a tuple with the EngineName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KerberosConfig) GetEngineNameOk() (*string, bool) {
	if o == nil || IsNil(o.EngineName) {
		return nil, false
	}
	return o.EngineName, true
}

// HasEngineName returns a boolean if a field has been set.
func (o *KerberosConfig) HasEngineName() bool {
	if o != nil && !IsNil(o.EngineName) {
		return true
	}

	return false
}

// SetEngineName gets a reference to the given string and assigns it to the EngineName field.
func (o *KerberosConfig) SetEngineName(v string) {
	o.EngineName = &v
}

// GetRealm returns the Realm field value if set, zero value otherwise.
func (o *KerberosConfig) GetRealm() string {
	if o == nil || IsNil(o.Realm) {
		var ret string
		return ret
	}
	return *o.Realm
}

// GetRealmOk returns a tuple with the Realm field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KerberosConfig) GetRealmOk() (*string, bool) {
	if o == nil || IsNil(o.Realm) {
		return nil, false
	}
	return o.Realm, true
}

// HasRealm returns a boolean if a field has been set.
func (o *KerberosConfig) HasRealm() bool {
	if o != nil && !IsNil(o.Realm) {
		return true
	}

	return false
}

// SetRealm gets a reference to the given string and assigns it to the Realm field.
func (o *KerberosConfig) SetRealm(v string) {
	o.Realm = &v
}

// GetPrincipal returns the Principal field value if set, zero value otherwise.
func (o *KerberosConfig) GetPrincipal() string {
	if o == nil || IsNil(o.Principal) {
		var ret string
		return ret
	}
	return *o.Principal
}

// GetPrincipalOk returns a tuple with the Principal field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KerberosConfig) GetPrincipalOk() (*string, bool) {
	if o == nil || IsNil(o.Principal) {
		return nil, false
	}
	return o.Principal, true
}

// HasPrincipal returns a boolean if a field has been set.
func (o *KerberosConfig) HasPrincipal() bool {
	if o != nil && !IsNil(o.Principal) {
		return true
	}

	return false
}

// SetPrincipal gets a reference to the given string and assigns it to the Principal field.
func (o *KerberosConfig) SetPrincipal(v string) {
	o.Principal = &v
}

// GetEnabled returns the Enabled field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *KerberosConfig) GetEnabled() bool {
	if o == nil || IsNil(o.Enabled.Get()) {
		var ret bool
		return ret
	}
	return *o.Enabled.Get()
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *KerberosConfig) GetEnabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.Enabled.Get(), o.Enabled.IsSet()
}

// HasEnabled returns a boolean if a field has been set.
func (o *KerberosConfig) HasEnabled() bool {
	if o != nil && o.Enabled.IsSet() {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given NullableBool and assigns it to the Enabled field.
func (o *KerberosConfig) SetEnabled(v bool) {
	o.Enabled.Set(&v)
}
// SetEnabledNil sets the value for Enabled to be an explicit nil
func (o *KerberosConfig) SetEnabledNil() {
	o.Enabled.Set(nil)
}

// UnsetEnabled ensures that no value is present for Enabled, not even an explicit nil
func (o *KerberosConfig) UnsetEnabled() {
	o.Enabled.Unset()
}

// GetKeytab returns the Keytab field value if set, zero value otherwise.
func (o *KerberosConfig) GetKeytab() string {
	if o == nil || IsNil(o.Keytab) {
		var ret string
		return ret
	}
	return *o.Keytab
}

// GetKeytabOk returns a tuple with the Keytab field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KerberosConfig) GetKeytabOk() (*string, bool) {
	if o == nil || IsNil(o.Keytab) {
		return nil, false
	}
	return o.Keytab, true
}

// HasKeytab returns a boolean if a field has been set.
func (o *KerberosConfig) HasKeytab() bool {
	if o != nil && !IsNil(o.Keytab) {
		return true
	}

	return false
}

// SetKeytab gets a reference to the given string and assigns it to the Keytab field.
func (o *KerberosConfig) SetKeytab(v string) {
	o.Keytab = &v
}

// GetKdcServers returns the KdcServers field value if set, zero value otherwise.
func (o *KerberosConfig) GetKdcServers() []KDCServers {
	if o == nil || IsNil(o.KdcServers) {
		var ret []KDCServers
		return ret
	}
	return o.KdcServers
}

// GetKdcServersOk returns a tuple with the KdcServers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KerberosConfig) GetKdcServersOk() ([]KDCServers, bool) {
	if o == nil || IsNil(o.KdcServers) {
		return nil, false
	}
	return o.KdcServers, true
}

// HasKdcServers returns a boolean if a field has been set.
func (o *KerberosConfig) HasKdcServers() bool {
	if o != nil && !IsNil(o.KdcServers) {
		return true
	}

	return false
}

// SetKdcServers gets a reference to the given []KDCServers and assigns it to the KdcServers field.
func (o *KerberosConfig) SetKdcServers(v []KDCServers) {
	o.KdcServers = v
}

func (o KerberosConfig) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o KerberosConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.NamespaceId) {
		toSerialize["namespace_id"] = o.NamespaceId
	}
	if !IsNil(o.NamespaceName) {
		toSerialize["namespace_name"] = o.NamespaceName
	}
	if !IsNil(o.IsReplica) {
		toSerialize["is_replica"] = o.IsReplica
	}
	if !IsNil(o.EngineId) {
		toSerialize["engine_id"] = o.EngineId
	}
	if !IsNil(o.EngineName) {
		toSerialize["engine_name"] = o.EngineName
	}
	if !IsNil(o.Realm) {
		toSerialize["realm"] = o.Realm
	}
	if !IsNil(o.Principal) {
		toSerialize["principal"] = o.Principal
	}
	if o.Enabled.IsSet() {
		toSerialize["enabled"] = o.Enabled.Get()
	}
	if !IsNil(o.Keytab) {
		toSerialize["keytab"] = o.Keytab
	}
	if !IsNil(o.KdcServers) {
		toSerialize["kdc_servers"] = o.KdcServers
	}
	return toSerialize, nil
}

type NullableKerberosConfig struct {
	value *KerberosConfig
	isSet bool
}

func (v NullableKerberosConfig) Get() *KerberosConfig {
	return v.value
}

func (v *NullableKerberosConfig) Set(val *KerberosConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableKerberosConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableKerberosConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableKerberosConfig(val *KerberosConfig) *NullableKerberosConfig {
	return &NullableKerberosConfig{value: val, isSet: true}
}

func (v NullableKerberosConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableKerberosConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


