/*
Delphix DCT API

Delphix DCT API

API version: 3.18.0
Contact: support@delphix.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package delphix_dct_api

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// HyperscaleInstanceAPIService HyperscaleInstanceAPI service
type HyperscaleInstanceAPIService service

type ApiAddEngineToHyperscaleInstanceRequest struct {
	ctx context.Context
	ApiService *HyperscaleInstanceAPIService
	hyperscaleInstanceId string
	engineIdBody *EngineIdBody
}

// Body containing the ID of the registered engine.
func (r ApiAddEngineToHyperscaleInstanceRequest) EngineIdBody(engineIdBody EngineIdBody) ApiAddEngineToHyperscaleInstanceRequest {
	r.engineIdBody = &engineIdBody
	return r
}

func (r ApiAddEngineToHyperscaleInstanceRequest) Execute() (*AddEngineToHyperscaleResponse, *http.Response, error) {
	return r.ApiService.AddEngineToHyperscaleInstanceExecute(r)
}

/*
AddEngineToHyperscaleInstance Add an engine to a Hyperscale Instance.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param hyperscaleInstanceId The ID of hyperscale instance.
 @return ApiAddEngineToHyperscaleInstanceRequest
*/
func (a *HyperscaleInstanceAPIService) AddEngineToHyperscaleInstance(ctx context.Context, hyperscaleInstanceId string) ApiAddEngineToHyperscaleInstanceRequest {
	return ApiAddEngineToHyperscaleInstanceRequest{
		ApiService: a,
		ctx: ctx,
		hyperscaleInstanceId: hyperscaleInstanceId,
	}
}

// Execute executes the request
//  @return AddEngineToHyperscaleResponse
func (a *HyperscaleInstanceAPIService) AddEngineToHyperscaleInstanceExecute(r ApiAddEngineToHyperscaleInstanceRequest) (*AddEngineToHyperscaleResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AddEngineToHyperscaleResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "HyperscaleInstanceAPIService.AddEngineToHyperscaleInstance")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hyperscale-instances/{hyperscaleInstanceId}/add-engine"
	localVarPath = strings.Replace(localVarPath, "{"+"hyperscaleInstanceId"+"}", url.PathEscape(parameterValueToString(r.hyperscaleInstanceId, "hyperscaleInstanceId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.engineIdBody == nil {
		return localVarReturnValue, nil, reportError("engineIdBody is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.engineIdBody
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ApiKeyAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCreateHyperscaleInstanceTagsRequest struct {
	ctx context.Context
	ApiService *HyperscaleInstanceAPIService
	hyperscaleInstanceId string
	tagsRequest *TagsRequest
}

// Tags information for Hyperscale Instance.
func (r ApiCreateHyperscaleInstanceTagsRequest) TagsRequest(tagsRequest TagsRequest) ApiCreateHyperscaleInstanceTagsRequest {
	r.tagsRequest = &tagsRequest
	return r
}

func (r ApiCreateHyperscaleInstanceTagsRequest) Execute() (*TagsResponse, *http.Response, error) {
	return r.ApiService.CreateHyperscaleInstanceTagsExecute(r)
}

/*
CreateHyperscaleInstanceTags Create tags for a Hyperscale Instance.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param hyperscaleInstanceId The ID of hyperscale instance.
 @return ApiCreateHyperscaleInstanceTagsRequest
*/
func (a *HyperscaleInstanceAPIService) CreateHyperscaleInstanceTags(ctx context.Context, hyperscaleInstanceId string) ApiCreateHyperscaleInstanceTagsRequest {
	return ApiCreateHyperscaleInstanceTagsRequest{
		ApiService: a,
		ctx: ctx,
		hyperscaleInstanceId: hyperscaleInstanceId,
	}
}

// Execute executes the request
//  @return TagsResponse
func (a *HyperscaleInstanceAPIService) CreateHyperscaleInstanceTagsExecute(r ApiCreateHyperscaleInstanceTagsRequest) (*TagsResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *TagsResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "HyperscaleInstanceAPIService.CreateHyperscaleInstanceTags")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hyperscale-instances/{hyperscaleInstanceId}/tags"
	localVarPath = strings.Replace(localVarPath, "{"+"hyperscaleInstanceId"+"}", url.PathEscape(parameterValueToString(r.hyperscaleInstanceId, "hyperscaleInstanceId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.tagsRequest == nil {
		return localVarReturnValue, nil, reportError("tagsRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.tagsRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ApiKeyAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteHyperscaleInstanceTagsRequest struct {
	ctx context.Context
	ApiService *HyperscaleInstanceAPIService
	hyperscaleInstanceId string
	deleteTag *DeleteTag
}

// The parameters to delete tags
func (r ApiDeleteHyperscaleInstanceTagsRequest) DeleteTag(deleteTag DeleteTag) ApiDeleteHyperscaleInstanceTagsRequest {
	r.deleteTag = &deleteTag
	return r
}

func (r ApiDeleteHyperscaleInstanceTagsRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteHyperscaleInstanceTagsExecute(r)
}

/*
DeleteHyperscaleInstanceTags Delete tags for a Hyperscale Instance.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param hyperscaleInstanceId The ID of hyperscale instance.
 @return ApiDeleteHyperscaleInstanceTagsRequest
*/
func (a *HyperscaleInstanceAPIService) DeleteHyperscaleInstanceTags(ctx context.Context, hyperscaleInstanceId string) ApiDeleteHyperscaleInstanceTagsRequest {
	return ApiDeleteHyperscaleInstanceTagsRequest{
		ApiService: a,
		ctx: ctx,
		hyperscaleInstanceId: hyperscaleInstanceId,
	}
}

// Execute executes the request
func (a *HyperscaleInstanceAPIService) DeleteHyperscaleInstanceTagsExecute(r ApiDeleteHyperscaleInstanceTagsRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "HyperscaleInstanceAPIService.DeleteHyperscaleInstanceTags")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hyperscale-instances/{hyperscaleInstanceId}/tags/delete"
	localVarPath = strings.Replace(localVarPath, "{"+"hyperscaleInstanceId"+"}", url.PathEscape(parameterValueToString(r.hyperscaleInstanceId, "hyperscaleInstanceId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.deleteTag
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ApiKeyAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetHyperscaleInstanceByIdRequest struct {
	ctx context.Context
	ApiService *HyperscaleInstanceAPIService
	hyperscaleInstanceId string
}

func (r ApiGetHyperscaleInstanceByIdRequest) Execute() (*HyperscaleInstance, *http.Response, error) {
	return r.ApiService.GetHyperscaleInstanceByIdExecute(r)
}

/*
GetHyperscaleInstanceById Returns a Hyperscale Instance by ID.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param hyperscaleInstanceId The ID of hyperscale instance.
 @return ApiGetHyperscaleInstanceByIdRequest
*/
func (a *HyperscaleInstanceAPIService) GetHyperscaleInstanceById(ctx context.Context, hyperscaleInstanceId string) ApiGetHyperscaleInstanceByIdRequest {
	return ApiGetHyperscaleInstanceByIdRequest{
		ApiService: a,
		ctx: ctx,
		hyperscaleInstanceId: hyperscaleInstanceId,
	}
}

// Execute executes the request
//  @return HyperscaleInstance
func (a *HyperscaleInstanceAPIService) GetHyperscaleInstanceByIdExecute(r ApiGetHyperscaleInstanceByIdRequest) (*HyperscaleInstance, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *HyperscaleInstance
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "HyperscaleInstanceAPIService.GetHyperscaleInstanceById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hyperscale-instances/{hyperscaleInstanceId}"
	localVarPath = strings.Replace(localVarPath, "{"+"hyperscaleInstanceId"+"}", url.PathEscape(parameterValueToString(r.hyperscaleInstanceId, "hyperscaleInstanceId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ApiKeyAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetHyperscaleInstanceTagsRequest struct {
	ctx context.Context
	ApiService *HyperscaleInstanceAPIService
	hyperscaleInstanceId string
}

func (r ApiGetHyperscaleInstanceTagsRequest) Execute() (*TagsResponse, *http.Response, error) {
	return r.ApiService.GetHyperscaleInstanceTagsExecute(r)
}

/*
GetHyperscaleInstanceTags Get tags for a Hyperscale Instance.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param hyperscaleInstanceId The ID of hyperscale instance.
 @return ApiGetHyperscaleInstanceTagsRequest
*/
func (a *HyperscaleInstanceAPIService) GetHyperscaleInstanceTags(ctx context.Context, hyperscaleInstanceId string) ApiGetHyperscaleInstanceTagsRequest {
	return ApiGetHyperscaleInstanceTagsRequest{
		ApiService: a,
		ctx: ctx,
		hyperscaleInstanceId: hyperscaleInstanceId,
	}
}

// Execute executes the request
//  @return TagsResponse
func (a *HyperscaleInstanceAPIService) GetHyperscaleInstanceTagsExecute(r ApiGetHyperscaleInstanceTagsRequest) (*TagsResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *TagsResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "HyperscaleInstanceAPIService.GetHyperscaleInstanceTags")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hyperscale-instances/{hyperscaleInstanceId}/tags"
	localVarPath = strings.Replace(localVarPath, "{"+"hyperscaleInstanceId"+"}", url.PathEscape(parameterValueToString(r.hyperscaleInstanceId, "hyperscaleInstanceId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ApiKeyAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetHyperscaleInstancesRequest struct {
	ctx context.Context
	ApiService *HyperscaleInstanceAPIService
	limit *int32
	cursor *string
	sort *string
}

// Maximum number of objects to return per query. The value must be between 1 and 1000. Default is 100.
func (r ApiGetHyperscaleInstancesRequest) Limit(limit int32) ApiGetHyperscaleInstancesRequest {
	r.limit = &limit
	return r
}

// Cursor to fetch the next or previous page of results. The value of this property must be extracted from the &#39;prev_cursor&#39; or &#39;next_cursor&#39; property of a PaginatedResponseMetadata which is contained in the response of list and search API endpoints.
func (r ApiGetHyperscaleInstancesRequest) Cursor(cursor string) ApiGetHyperscaleInstancesRequest {
	r.cursor = &cursor
	return r
}

// The field to sort results by. A property name with a prepended &#39;-&#39; signifies descending order.
func (r ApiGetHyperscaleInstancesRequest) Sort(sort string) ApiGetHyperscaleInstancesRequest {
	r.sort = &sort
	return r
}

func (r ApiGetHyperscaleInstancesRequest) Execute() (*ListHyperscaleInstancesResponse, *http.Response, error) {
	return r.ApiService.GetHyperscaleInstancesExecute(r)
}

/*
GetHyperscaleInstances Returns a list of Hyperscale instances.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetHyperscaleInstancesRequest
*/
func (a *HyperscaleInstanceAPIService) GetHyperscaleInstances(ctx context.Context) ApiGetHyperscaleInstancesRequest {
	return ApiGetHyperscaleInstancesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ListHyperscaleInstancesResponse
func (a *HyperscaleInstanceAPIService) GetHyperscaleInstancesExecute(r ApiGetHyperscaleInstancesRequest) (*ListHyperscaleInstancesResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ListHyperscaleInstancesResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "HyperscaleInstanceAPIService.GetHyperscaleInstances")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hyperscale-instances"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	} else {
		var defaultValue int32 = 100
		r.limit = &defaultValue
	}
	if r.cursor != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "cursor", r.cursor, "form", "")
	}
	if r.sort != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort", r.sort, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ApiKeyAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiRegisterHyperscaleInstanceRequest struct {
	ctx context.Context
	ApiService *HyperscaleInstanceAPIService
	hyperscaleInstanceRegistrationParameter *HyperscaleInstanceRegistrationParameter
}

// The parameters to register a Hyperscale instance.
func (r ApiRegisterHyperscaleInstanceRequest) HyperscaleInstanceRegistrationParameter(hyperscaleInstanceRegistrationParameter HyperscaleInstanceRegistrationParameter) ApiRegisterHyperscaleInstanceRequest {
	r.hyperscaleInstanceRegistrationParameter = &hyperscaleInstanceRegistrationParameter
	return r
}

func (r ApiRegisterHyperscaleInstanceRequest) Execute() (*HyperscaleInstance, *http.Response, error) {
	return r.ApiService.RegisterHyperscaleInstanceExecute(r)
}

/*
RegisterHyperscaleInstance Register a Hyperscale instance

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiRegisterHyperscaleInstanceRequest
*/
func (a *HyperscaleInstanceAPIService) RegisterHyperscaleInstance(ctx context.Context) ApiRegisterHyperscaleInstanceRequest {
	return ApiRegisterHyperscaleInstanceRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return HyperscaleInstance
func (a *HyperscaleInstanceAPIService) RegisterHyperscaleInstanceExecute(r ApiRegisterHyperscaleInstanceRequest) (*HyperscaleInstance, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *HyperscaleInstance
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "HyperscaleInstanceAPIService.RegisterHyperscaleInstance")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hyperscale-instances"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.hyperscaleInstanceRegistrationParameter == nil {
		return localVarReturnValue, nil, reportError("hyperscaleInstanceRegistrationParameter is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.hyperscaleInstanceRegistrationParameter
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ApiKeyAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiRemoveEngineFromHyperscaleInstanceRequest struct {
	ctx context.Context
	ApiService *HyperscaleInstanceAPIService
	hyperscaleInstanceId string
	engineIdBody *EngineIdBody
}

// Body containing the ID of the registered engine.
func (r ApiRemoveEngineFromHyperscaleInstanceRequest) EngineIdBody(engineIdBody EngineIdBody) ApiRemoveEngineFromHyperscaleInstanceRequest {
	r.engineIdBody = &engineIdBody
	return r
}

func (r ApiRemoveEngineFromHyperscaleInstanceRequest) Execute() (*RemoveEngineFromHyperscaleResponse, *http.Response, error) {
	return r.ApiService.RemoveEngineFromHyperscaleInstanceExecute(r)
}

/*
RemoveEngineFromHyperscaleInstance Remove an engine from a Hyperscale Instance.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param hyperscaleInstanceId The ID of hyperscale instance.
 @return ApiRemoveEngineFromHyperscaleInstanceRequest
*/
func (a *HyperscaleInstanceAPIService) RemoveEngineFromHyperscaleInstance(ctx context.Context, hyperscaleInstanceId string) ApiRemoveEngineFromHyperscaleInstanceRequest {
	return ApiRemoveEngineFromHyperscaleInstanceRequest{
		ApiService: a,
		ctx: ctx,
		hyperscaleInstanceId: hyperscaleInstanceId,
	}
}

// Execute executes the request
//  @return RemoveEngineFromHyperscaleResponse
func (a *HyperscaleInstanceAPIService) RemoveEngineFromHyperscaleInstanceExecute(r ApiRemoveEngineFromHyperscaleInstanceRequest) (*RemoveEngineFromHyperscaleResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *RemoveEngineFromHyperscaleResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "HyperscaleInstanceAPIService.RemoveEngineFromHyperscaleInstance")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hyperscale-instances/{hyperscaleInstanceId}/remove-engine"
	localVarPath = strings.Replace(localVarPath, "{"+"hyperscaleInstanceId"+"}", url.PathEscape(parameterValueToString(r.hyperscaleInstanceId, "hyperscaleInstanceId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.engineIdBody == nil {
		return localVarReturnValue, nil, reportError("engineIdBody is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.engineIdBody
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ApiKeyAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSearchHyperscaleInstancesRequest struct {
	ctx context.Context
	ApiService *HyperscaleInstanceAPIService
	limit *int32
	cursor *string
	sort *string
	searchBody *SearchBody
}

// Maximum number of objects to return per query. The value must be between 1 and 1000. Default is 100.
func (r ApiSearchHyperscaleInstancesRequest) Limit(limit int32) ApiSearchHyperscaleInstancesRequest {
	r.limit = &limit
	return r
}

// Cursor to fetch the next or previous page of results. The value of this property must be extracted from the &#39;prev_cursor&#39; or &#39;next_cursor&#39; property of a PaginatedResponseMetadata which is contained in the response of list and search API endpoints.
func (r ApiSearchHyperscaleInstancesRequest) Cursor(cursor string) ApiSearchHyperscaleInstancesRequest {
	r.cursor = &cursor
	return r
}

// The field to sort results by. A property name with a prepended &#39;-&#39; signifies descending order.
func (r ApiSearchHyperscaleInstancesRequest) Sort(sort string) ApiSearchHyperscaleInstancesRequest {
	r.sort = &sort
	return r
}

// A request body containing a filter expression. This enables searching for items matching arbitrarily complex conditions. The list of attributes which can be used in filter expressions is available in the x-filterable vendor extension.  # Filter Expression Overview **Note: All keywords are case-insensitive**  ## Comparison Operators | Operator | Description | Example | | --- | --- | --- | | CONTAINS | Substring or membership testing for string and list attributes respectively. | field3 CONTAINS &#39;foobar&#39;, field4 CONTAINS TRUE  | | IN | Tests if field is a member of a list literal. List can contain a maximum of 100 values | field2 IN [&#39;Goku&#39;, &#39;Vegeta&#39;] | | GE | Tests if a field is greater than or equal to a literal value | field1 GE 1.2e-2 | | GT | Tests if a field is greater than a literal value | field1 GT 1.2e-2 | | LE | Tests if a field is less than or equal to a literal value | field1 LE 9000 | | LT | Tests if a field is less than a literal value | field1 LT 9.02 | | NE | Tests if a field is not equal to a literal value | field1 NE 42 | | EQ | Tests if a field is equal to a literal value | field1 EQ 42 |  ## Search Operator The SEARCH operator filters for items which have any filterable attribute that contains the input string as a substring, comparison is done case-insensitively. This is not restricted to attributes with string values. Specifically &#x60;SEARCH &#39;12&#39;&#x60; would match an item with an attribute with an integer value of &#x60;123&#x60;.  ## Logical Operators Ordered by precedence. | Operator | Description | Example | | --- | --- | --- | | NOT | Logical NOT (Right associative) | NOT field1 LE 9000 | | AND | Logical AND (Left Associative) | field1 GT 9000 AND field2 EQ &#39;Goku&#39; | | OR | Logical OR (Left Associative) | field1 GT 9000 OR field2 EQ &#39;Goku&#39; |  ## Grouping Parenthesis &#x60;()&#x60; can be used to override operator precedence.  For example: NOT (field1 LT 1234 AND field2 CONTAINS &#39;foo&#39;)  ## Literal Values | Literal      | Description | Examples | | --- | --- | --- | | Nil | Represents the absence of a value | nil, Nil, nIl, NIL | | Boolean | true/false boolean | true, false, True, False, TRUE, FALSE | | Number | Signed integer and floating point numbers. Also supports scientific notation. | 0, 1, -1, 1.2, 0.35, 1.2e-2, -1.2e+2 | | String | Single or double quoted | \&quot;foo\&quot;, \&quot;bar\&quot;, \&quot;foo bar\&quot;, &#39;foo&#39;, &#39;bar&#39;, &#39;foo bar&#39; | | Datetime | Formatted according to [RFC3339](https://datatracker.ietf.org/doc/html/rfc3339) | 2018-04-27T18:39:26.397237+00:00 | | List | Comma-separated literals wrapped in square brackets | [0], [0, 1], [&#39;foo&#39;, \&quot;bar\&quot;] |  ## Limitations - A maximum of 8 unique identifiers may be used inside a filter expression. 
func (r ApiSearchHyperscaleInstancesRequest) SearchBody(searchBody SearchBody) ApiSearchHyperscaleInstancesRequest {
	r.searchBody = &searchBody
	return r
}

func (r ApiSearchHyperscaleInstancesRequest) Execute() (*SearchHyperscaleInstancesResponse, *http.Response, error) {
	return r.ApiService.SearchHyperscaleInstancesExecute(r)
}

/*
SearchHyperscaleInstances Search for Hyperscale instances.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiSearchHyperscaleInstancesRequest
*/
func (a *HyperscaleInstanceAPIService) SearchHyperscaleInstances(ctx context.Context) ApiSearchHyperscaleInstancesRequest {
	return ApiSearchHyperscaleInstancesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return SearchHyperscaleInstancesResponse
func (a *HyperscaleInstanceAPIService) SearchHyperscaleInstancesExecute(r ApiSearchHyperscaleInstancesRequest) (*SearchHyperscaleInstancesResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SearchHyperscaleInstancesResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "HyperscaleInstanceAPIService.SearchHyperscaleInstances")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hyperscale-instances/search"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	} else {
		var defaultValue int32 = 100
		r.limit = &defaultValue
	}
	if r.cursor != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "cursor", r.cursor, "form", "")
	}
	if r.sort != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort", r.sort, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.searchBody
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ApiKeyAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSyncEnginesHyperscaleInstanceRequest struct {
	ctx context.Context
	ApiService *HyperscaleInstanceAPIService
	hyperscaleInstanceId string
	syncEnginesHyperscaleParameters *SyncEnginesHyperscaleParameters
}

func (r ApiSyncEnginesHyperscaleInstanceRequest) SyncEnginesHyperscaleParameters(syncEnginesHyperscaleParameters SyncEnginesHyperscaleParameters) ApiSyncEnginesHyperscaleInstanceRequest {
	r.syncEnginesHyperscaleParameters = &syncEnginesHyperscaleParameters
	return r
}

func (r ApiSyncEnginesHyperscaleInstanceRequest) Execute() (*SyncEnginesHyperscaleResponse, *http.Response, error) {
	return r.ApiService.SyncEnginesHyperscaleInstanceExecute(r)
}

/*
SyncEnginesHyperscaleInstance Sync the global object from a source engine to engines on a Hyperscale Instance.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param hyperscaleInstanceId The ID of hyperscale instance.
 @return ApiSyncEnginesHyperscaleInstanceRequest
*/
func (a *HyperscaleInstanceAPIService) SyncEnginesHyperscaleInstance(ctx context.Context, hyperscaleInstanceId string) ApiSyncEnginesHyperscaleInstanceRequest {
	return ApiSyncEnginesHyperscaleInstanceRequest{
		ApiService: a,
		ctx: ctx,
		hyperscaleInstanceId: hyperscaleInstanceId,
	}
}

// Execute executes the request
//  @return SyncEnginesHyperscaleResponse
func (a *HyperscaleInstanceAPIService) SyncEnginesHyperscaleInstanceExecute(r ApiSyncEnginesHyperscaleInstanceRequest) (*SyncEnginesHyperscaleResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SyncEnginesHyperscaleResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "HyperscaleInstanceAPIService.SyncEnginesHyperscaleInstance")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hyperscale-instances/{hyperscaleInstanceId}/sync-engines"
	localVarPath = strings.Replace(localVarPath, "{"+"hyperscaleInstanceId"+"}", url.PathEscape(parameterValueToString(r.hyperscaleInstanceId, "hyperscaleInstanceId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.syncEnginesHyperscaleParameters
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ApiKeyAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUnregisterHyperscaleInstanceRequest struct {
	ctx context.Context
	ApiService *HyperscaleInstanceAPIService
	hyperscaleInstanceId string
}

func (r ApiUnregisterHyperscaleInstanceRequest) Execute() (*UnregisterHyperscaleInstanceResponse, *http.Response, error) {
	return r.ApiService.UnregisterHyperscaleInstanceExecute(r)
}

/*
UnregisterHyperscaleInstance Unregister a Hyperscale Instance.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param hyperscaleInstanceId The ID of hyperscale instance.
 @return ApiUnregisterHyperscaleInstanceRequest
*/
func (a *HyperscaleInstanceAPIService) UnregisterHyperscaleInstance(ctx context.Context, hyperscaleInstanceId string) ApiUnregisterHyperscaleInstanceRequest {
	return ApiUnregisterHyperscaleInstanceRequest{
		ApiService: a,
		ctx: ctx,
		hyperscaleInstanceId: hyperscaleInstanceId,
	}
}

// Execute executes the request
//  @return UnregisterHyperscaleInstanceResponse
func (a *HyperscaleInstanceAPIService) UnregisterHyperscaleInstanceExecute(r ApiUnregisterHyperscaleInstanceRequest) (*UnregisterHyperscaleInstanceResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *UnregisterHyperscaleInstanceResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "HyperscaleInstanceAPIService.UnregisterHyperscaleInstance")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hyperscale-instances/{hyperscaleInstanceId}"
	localVarPath = strings.Replace(localVarPath, "{"+"hyperscaleInstanceId"+"}", url.PathEscape(parameterValueToString(r.hyperscaleInstanceId, "hyperscaleInstanceId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ApiKeyAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdateHyperscaleInstanceRequest struct {
	ctx context.Context
	ApiService *HyperscaleInstanceAPIService
	hyperscaleInstanceId string
	hyperscaleInstanceUpdateParams *HyperscaleInstanceUpdateParams
}

// Update parameters for a hyperscale instance.
func (r ApiUpdateHyperscaleInstanceRequest) HyperscaleInstanceUpdateParams(hyperscaleInstanceUpdateParams HyperscaleInstanceUpdateParams) ApiUpdateHyperscaleInstanceRequest {
	r.hyperscaleInstanceUpdateParams = &hyperscaleInstanceUpdateParams
	return r
}

func (r ApiUpdateHyperscaleInstanceRequest) Execute() (*HyperscaleInstance, *http.Response, error) {
	return r.ApiService.UpdateHyperscaleInstanceExecute(r)
}

/*
UpdateHyperscaleInstance Update an Hyperscale Instance

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param hyperscaleInstanceId The ID of hyperscale instance.
 @return ApiUpdateHyperscaleInstanceRequest
*/
func (a *HyperscaleInstanceAPIService) UpdateHyperscaleInstance(ctx context.Context, hyperscaleInstanceId string) ApiUpdateHyperscaleInstanceRequest {
	return ApiUpdateHyperscaleInstanceRequest{
		ApiService: a,
		ctx: ctx,
		hyperscaleInstanceId: hyperscaleInstanceId,
	}
}

// Execute executes the request
//  @return HyperscaleInstance
func (a *HyperscaleInstanceAPIService) UpdateHyperscaleInstanceExecute(r ApiUpdateHyperscaleInstanceRequest) (*HyperscaleInstance, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *HyperscaleInstance
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "HyperscaleInstanceAPIService.UpdateHyperscaleInstance")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hyperscale-instances/{hyperscaleInstanceId}"
	localVarPath = strings.Replace(localVarPath, "{"+"hyperscaleInstanceId"+"}", url.PathEscape(parameterValueToString(r.hyperscaleInstanceId, "hyperscaleInstanceId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.hyperscaleInstanceUpdateParams == nil {
		return localVarReturnValue, nil, reportError("hyperscaleInstanceUpdateParams is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.hyperscaleInstanceUpdateParams
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ApiKeyAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
