/*
Delphix DCT API

Delphix DCT API

API version: 3.17.0
Contact: support@delphix.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package delphix_dct_api

import (
	"encoding/json"
)

// checks if the PolicyTargetObject type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PolicyTargetObject{}

// PolicyTargetObject A policy target object to apply policy to.This contains values for which translation logic is in place and for which users can query virtualization-jobs history.
type PolicyTargetObject struct {
	ObjectType *TargetPolicyObjectType `json:"object_type,omitempty"`
	// The ID of the object, the policy to be applied to.
	ObjectId *string `json:"object_id,omitempty"`
}

// NewPolicyTargetObject instantiates a new PolicyTargetObject object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPolicyTargetObject() *PolicyTargetObject {
	this := PolicyTargetObject{}
	return &this
}

// NewPolicyTargetObjectWithDefaults instantiates a new PolicyTargetObject object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPolicyTargetObjectWithDefaults() *PolicyTargetObject {
	this := PolicyTargetObject{}
	return &this
}

// GetObjectType returns the ObjectType field value if set, zero value otherwise.
func (o *PolicyTargetObject) GetObjectType() TargetPolicyObjectType {
	if o == nil || IsNil(o.ObjectType) {
		var ret TargetPolicyObjectType
		return ret
	}
	return *o.ObjectType
}

// GetObjectTypeOk returns a tuple with the ObjectType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PolicyTargetObject) GetObjectTypeOk() (*TargetPolicyObjectType, bool) {
	if o == nil || IsNil(o.ObjectType) {
		return nil, false
	}
	return o.ObjectType, true
}

// HasObjectType returns a boolean if a field has been set.
func (o *PolicyTargetObject) HasObjectType() bool {
	if o != nil && !IsNil(o.ObjectType) {
		return true
	}

	return false
}

// SetObjectType gets a reference to the given TargetPolicyObjectType and assigns it to the ObjectType field.
func (o *PolicyTargetObject) SetObjectType(v TargetPolicyObjectType) {
	o.ObjectType = &v
}

// GetObjectId returns the ObjectId field value if set, zero value otherwise.
func (o *PolicyTargetObject) GetObjectId() string {
	if o == nil || IsNil(o.ObjectId) {
		var ret string
		return ret
	}
	return *o.ObjectId
}

// GetObjectIdOk returns a tuple with the ObjectId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PolicyTargetObject) GetObjectIdOk() (*string, bool) {
	if o == nil || IsNil(o.ObjectId) {
		return nil, false
	}
	return o.ObjectId, true
}

// HasObjectId returns a boolean if a field has been set.
func (o *PolicyTargetObject) HasObjectId() bool {
	if o != nil && !IsNil(o.ObjectId) {
		return true
	}

	return false
}

// SetObjectId gets a reference to the given string and assigns it to the ObjectId field.
func (o *PolicyTargetObject) SetObjectId(v string) {
	o.ObjectId = &v
}

func (o PolicyTargetObject) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PolicyTargetObject) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ObjectType) {
		toSerialize["object_type"] = o.ObjectType
	}
	if !IsNil(o.ObjectId) {
		toSerialize["object_id"] = o.ObjectId
	}
	return toSerialize, nil
}

type NullablePolicyTargetObject struct {
	value *PolicyTargetObject
	isSet bool
}

func (v NullablePolicyTargetObject) Get() *PolicyTargetObject {
	return v.value
}

func (v *NullablePolicyTargetObject) Set(val *PolicyTargetObject) {
	v.value = val
	v.isSet = true
}

func (v NullablePolicyTargetObject) IsSet() bool {
	return v.isSet
}

func (v *NullablePolicyTargetObject) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePolicyTargetObject(val *PolicyTargetObject) *NullablePolicyTargetObject {
	return &NullablePolicyTargetObject{value: val, isSet: true}
}

func (v NullablePolicyTargetObject) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePolicyTargetObject) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


