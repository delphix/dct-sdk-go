/*
Delphix DCT API

Delphix DCT API

API version: 3.17.0
Contact: support@delphix.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package delphix_dct_api

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ScopeTag type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ScopeTag{}

// ScopeTag struct for ScopeTag
type ScopeTag struct {
	// Key of the tag
	Key string `json:"key"`
	// Value of the tag
	Value string `json:"value"`
	ObjectType *ObjectTypeEnum `json:"object_type,omitempty"`
	Permission *PermissionEnum `json:"permission,omitempty"`
}

type _ScopeTag ScopeTag

// NewScopeTag instantiates a new ScopeTag object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewScopeTag(key string, value string) *ScopeTag {
	this := ScopeTag{}
	this.Key = key
	this.Value = value
	return &this
}

// NewScopeTagWithDefaults instantiates a new ScopeTag object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewScopeTagWithDefaults() *ScopeTag {
	this := ScopeTag{}
	return &this
}

// GetKey returns the Key field value
func (o *ScopeTag) GetKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Key
}

// GetKeyOk returns a tuple with the Key field value
// and a boolean to check if the value has been set.
func (o *ScopeTag) GetKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Key, true
}

// SetKey sets field value
func (o *ScopeTag) SetKey(v string) {
	o.Key = v
}

// GetValue returns the Value field value
func (o *ScopeTag) GetValue() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Value
}

// GetValueOk returns a tuple with the Value field value
// and a boolean to check if the value has been set.
func (o *ScopeTag) GetValueOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Value, true
}

// SetValue sets field value
func (o *ScopeTag) SetValue(v string) {
	o.Value = v
}

// GetObjectType returns the ObjectType field value if set, zero value otherwise.
func (o *ScopeTag) GetObjectType() ObjectTypeEnum {
	if o == nil || IsNil(o.ObjectType) {
		var ret ObjectTypeEnum
		return ret
	}
	return *o.ObjectType
}

// GetObjectTypeOk returns a tuple with the ObjectType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScopeTag) GetObjectTypeOk() (*ObjectTypeEnum, bool) {
	if o == nil || IsNil(o.ObjectType) {
		return nil, false
	}
	return o.ObjectType, true
}

// HasObjectType returns a boolean if a field has been set.
func (o *ScopeTag) HasObjectType() bool {
	if o != nil && !IsNil(o.ObjectType) {
		return true
	}

	return false
}

// SetObjectType gets a reference to the given ObjectTypeEnum and assigns it to the ObjectType field.
func (o *ScopeTag) SetObjectType(v ObjectTypeEnum) {
	o.ObjectType = &v
}

// GetPermission returns the Permission field value if set, zero value otherwise.
func (o *ScopeTag) GetPermission() PermissionEnum {
	if o == nil || IsNil(o.Permission) {
		var ret PermissionEnum
		return ret
	}
	return *o.Permission
}

// GetPermissionOk returns a tuple with the Permission field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScopeTag) GetPermissionOk() (*PermissionEnum, bool) {
	if o == nil || IsNil(o.Permission) {
		return nil, false
	}
	return o.Permission, true
}

// HasPermission returns a boolean if a field has been set.
func (o *ScopeTag) HasPermission() bool {
	if o != nil && !IsNil(o.Permission) {
		return true
	}

	return false
}

// SetPermission gets a reference to the given PermissionEnum and assigns it to the Permission field.
func (o *ScopeTag) SetPermission(v PermissionEnum) {
	o.Permission = &v
}

func (o ScopeTag) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ScopeTag) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["key"] = o.Key
	toSerialize["value"] = o.Value
	if !IsNil(o.ObjectType) {
		toSerialize["object_type"] = o.ObjectType
	}
	if !IsNil(o.Permission) {
		toSerialize["permission"] = o.Permission
	}
	return toSerialize, nil
}

func (o *ScopeTag) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"key",
		"value",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varScopeTag := _ScopeTag{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varScopeTag)

	if err != nil {
		return err
	}

	*o = ScopeTag(varScopeTag)

	return err
}

type NullableScopeTag struct {
	value *ScopeTag
	isSet bool
}

func (v NullableScopeTag) Get() *ScopeTag {
	return v.value
}

func (v *NullableScopeTag) Set(val *ScopeTag) {
	v.value = val
	v.isSet = true
}

func (v NullableScopeTag) IsSet() bool {
	return v.isSet
}

func (v *NullableScopeTag) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableScopeTag(val *ScopeTag) *NullableScopeTag {
	return &NullableScopeTag{value: val, isSet: true}
}

func (v NullableScopeTag) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableScopeTag) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


