/*
Delphix DCT API

Delphix DCT API

API version: 3.18.0
Contact: support@delphix.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package delphix_dct_api

import (
	"encoding/json"
	"time"
)

// checks if the TimestampCompatibleRepositoryRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TimestampCompatibleRepositoryRequest{}

// TimestampCompatibleRepositoryRequest struct for TimestampCompatibleRepositoryRequest
type TimestampCompatibleRepositoryRequest struct {
	// The ID of the source object (dSource or VDB) to get the compatible repos. All other objects referenced by the parameters must live on the same engine as the source.
	SourceDataId *string `json:"source_data_id,omitempty"`
	// The ID of the Engine from where to get the compatible repos. If the source ID unambiguously identifies a source object, this parameter is unnecessary and ignored.
	EngineId *string `json:"engine_id,omitempty"`
	// The point in time from which to execute the operation. If the timestamp is not set, selects the latest point.
	Timestamp *time.Time `json:"timestamp,omitempty"`
	// ID of the timeflow from which compatible repos need to be fetched, mutually exclusive with source_data_id.
	TimeflowId *string `json:"timeflow_id,omitempty"`
	// The ID or name of the target environment.
	EnvironmentId *string `json:"environment_id,omitempty"`
}

// NewTimestampCompatibleRepositoryRequest instantiates a new TimestampCompatibleRepositoryRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTimestampCompatibleRepositoryRequest() *TimestampCompatibleRepositoryRequest {
	this := TimestampCompatibleRepositoryRequest{}
	return &this
}

// NewTimestampCompatibleRepositoryRequestWithDefaults instantiates a new TimestampCompatibleRepositoryRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTimestampCompatibleRepositoryRequestWithDefaults() *TimestampCompatibleRepositoryRequest {
	this := TimestampCompatibleRepositoryRequest{}
	return &this
}

// GetSourceDataId returns the SourceDataId field value if set, zero value otherwise.
func (o *TimestampCompatibleRepositoryRequest) GetSourceDataId() string {
	if o == nil || IsNil(o.SourceDataId) {
		var ret string
		return ret
	}
	return *o.SourceDataId
}

// GetSourceDataIdOk returns a tuple with the SourceDataId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TimestampCompatibleRepositoryRequest) GetSourceDataIdOk() (*string, bool) {
	if o == nil || IsNil(o.SourceDataId) {
		return nil, false
	}
	return o.SourceDataId, true
}

// HasSourceDataId returns a boolean if a field has been set.
func (o *TimestampCompatibleRepositoryRequest) HasSourceDataId() bool {
	if o != nil && !IsNil(o.SourceDataId) {
		return true
	}

	return false
}

// SetSourceDataId gets a reference to the given string and assigns it to the SourceDataId field.
func (o *TimestampCompatibleRepositoryRequest) SetSourceDataId(v string) {
	o.SourceDataId = &v
}

// GetEngineId returns the EngineId field value if set, zero value otherwise.
func (o *TimestampCompatibleRepositoryRequest) GetEngineId() string {
	if o == nil || IsNil(o.EngineId) {
		var ret string
		return ret
	}
	return *o.EngineId
}

// GetEngineIdOk returns a tuple with the EngineId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TimestampCompatibleRepositoryRequest) GetEngineIdOk() (*string, bool) {
	if o == nil || IsNil(o.EngineId) {
		return nil, false
	}
	return o.EngineId, true
}

// HasEngineId returns a boolean if a field has been set.
func (o *TimestampCompatibleRepositoryRequest) HasEngineId() bool {
	if o != nil && !IsNil(o.EngineId) {
		return true
	}

	return false
}

// SetEngineId gets a reference to the given string and assigns it to the EngineId field.
func (o *TimestampCompatibleRepositoryRequest) SetEngineId(v string) {
	o.EngineId = &v
}

// GetTimestamp returns the Timestamp field value if set, zero value otherwise.
func (o *TimestampCompatibleRepositoryRequest) GetTimestamp() time.Time {
	if o == nil || IsNil(o.Timestamp) {
		var ret time.Time
		return ret
	}
	return *o.Timestamp
}

// GetTimestampOk returns a tuple with the Timestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TimestampCompatibleRepositoryRequest) GetTimestampOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Timestamp) {
		return nil, false
	}
	return o.Timestamp, true
}

// HasTimestamp returns a boolean if a field has been set.
func (o *TimestampCompatibleRepositoryRequest) HasTimestamp() bool {
	if o != nil && !IsNil(o.Timestamp) {
		return true
	}

	return false
}

// SetTimestamp gets a reference to the given time.Time and assigns it to the Timestamp field.
func (o *TimestampCompatibleRepositoryRequest) SetTimestamp(v time.Time) {
	o.Timestamp = &v
}

// GetTimeflowId returns the TimeflowId field value if set, zero value otherwise.
func (o *TimestampCompatibleRepositoryRequest) GetTimeflowId() string {
	if o == nil || IsNil(o.TimeflowId) {
		var ret string
		return ret
	}
	return *o.TimeflowId
}

// GetTimeflowIdOk returns a tuple with the TimeflowId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TimestampCompatibleRepositoryRequest) GetTimeflowIdOk() (*string, bool) {
	if o == nil || IsNil(o.TimeflowId) {
		return nil, false
	}
	return o.TimeflowId, true
}

// HasTimeflowId returns a boolean if a field has been set.
func (o *TimestampCompatibleRepositoryRequest) HasTimeflowId() bool {
	if o != nil && !IsNil(o.TimeflowId) {
		return true
	}

	return false
}

// SetTimeflowId gets a reference to the given string and assigns it to the TimeflowId field.
func (o *TimestampCompatibleRepositoryRequest) SetTimeflowId(v string) {
	o.TimeflowId = &v
}

// GetEnvironmentId returns the EnvironmentId field value if set, zero value otherwise.
func (o *TimestampCompatibleRepositoryRequest) GetEnvironmentId() string {
	if o == nil || IsNil(o.EnvironmentId) {
		var ret string
		return ret
	}
	return *o.EnvironmentId
}

// GetEnvironmentIdOk returns a tuple with the EnvironmentId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TimestampCompatibleRepositoryRequest) GetEnvironmentIdOk() (*string, bool) {
	if o == nil || IsNil(o.EnvironmentId) {
		return nil, false
	}
	return o.EnvironmentId, true
}

// HasEnvironmentId returns a boolean if a field has been set.
func (o *TimestampCompatibleRepositoryRequest) HasEnvironmentId() bool {
	if o != nil && !IsNil(o.EnvironmentId) {
		return true
	}

	return false
}

// SetEnvironmentId gets a reference to the given string and assigns it to the EnvironmentId field.
func (o *TimestampCompatibleRepositoryRequest) SetEnvironmentId(v string) {
	o.EnvironmentId = &v
}

func (o TimestampCompatibleRepositoryRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TimestampCompatibleRepositoryRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.SourceDataId) {
		toSerialize["source_data_id"] = o.SourceDataId
	}
	if !IsNil(o.EngineId) {
		toSerialize["engine_id"] = o.EngineId
	}
	if !IsNil(o.Timestamp) {
		toSerialize["timestamp"] = o.Timestamp
	}
	if !IsNil(o.TimeflowId) {
		toSerialize["timeflow_id"] = o.TimeflowId
	}
	if !IsNil(o.EnvironmentId) {
		toSerialize["environment_id"] = o.EnvironmentId
	}
	return toSerialize, nil
}

type NullableTimestampCompatibleRepositoryRequest struct {
	value *TimestampCompatibleRepositoryRequest
	isSet bool
}

func (v NullableTimestampCompatibleRepositoryRequest) Get() *TimestampCompatibleRepositoryRequest {
	return v.value
}

func (v *NullableTimestampCompatibleRepositoryRequest) Set(val *TimestampCompatibleRepositoryRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableTimestampCompatibleRepositoryRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableTimestampCompatibleRepositoryRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTimestampCompatibleRepositoryRequest(val *TimestampCompatibleRepositoryRequest) *NullableTimestampCompatibleRepositoryRequest {
	return &NullableTimestampCompatibleRepositoryRequest{value: val, isSet: true}
}

func (v NullableTimestampCompatibleRepositoryRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTimestampCompatibleRepositoryRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


