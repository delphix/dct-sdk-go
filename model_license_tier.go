/*
Delphix DCT API

Delphix DCT API

API version: 3.18.0
Contact: support@delphix.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package delphix_dct_api

import (
	"encoding/json"
	"fmt"
)

// LicenseTier The DCT license tiers.
type LicenseTier string

// List of LicenseTier
const (
	LICENSETIER_CORE LicenseTier = "CORE"
	LICENSETIER_SELF_SERVICE LicenseTier = "SELF_SERVICE"
	LICENSETIER_ENTERPRISE LicenseTier = "ENTERPRISE"
)

// All allowed values of LicenseTier enum
var AllowedLicenseTierEnumValues = []LicenseTier{
	"CORE",
	"SELF_SERVICE",
	"ENTERPRISE",
}

func (v *LicenseTier) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := LicenseTier(value)
	for _, existing := range AllowedLicenseTierEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid LicenseTier", value)
}

// NewLicenseTierFromValue returns a pointer to a valid LicenseTier
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewLicenseTierFromValue(v string) (*LicenseTier, error) {
	ev := LicenseTier(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for LicenseTier: valid values are %v", v, AllowedLicenseTierEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v LicenseTier) IsValid() bool {
	for _, existing := range AllowedLicenseTierEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to LicenseTier value
func (v LicenseTier) Ptr() *LicenseTier {
	return &v
}

type NullableLicenseTier struct {
	value *LicenseTier
	isSet bool
}

func (v NullableLicenseTier) Get() *LicenseTier {
	return v.value
}

func (v *NullableLicenseTier) Set(val *LicenseTier) {
	v.value = val
	v.isSet = true
}

func (v NullableLicenseTier) IsSet() bool {
	return v.isSet
}

func (v *NullableLicenseTier) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLicenseTier(val *LicenseTier) *NullableLicenseTier {
	return &NullableLicenseTier{value: val, isSet: true}
}

func (v NullableLicenseTier) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLicenseTier) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

