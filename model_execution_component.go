/*
Delphix DCT API

Delphix DCT API

API version: 3.17.0
Contact: support@delphix.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package delphix_dct_api

import (
	"encoding/json"
	"time"
)

// checks if the ExecutionComponent type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ExecutionComponent{}

// ExecutionComponent An execution component associated with a job execution
type ExecutionComponent struct {
	// The ID of the execution component
	Id *string `json:"id,omitempty"`
	// The name of the execution component
	Name *string `json:"name,omitempty"`
	// The ID of the execution
	ExecutionId *string `json:"execution_id,omitempty"`
	Status *ExecutionStatus `json:"status,omitempty"`
	// The number of rows masked or profiled so far in the execution component. This is not applicable for JSON file type.
	RowsMasked *int64 `json:"rows_masked,omitempty"`
	// The total number of rows that should be masked or profiled in the execution component. This value is set to -1 while the total row count is being calculated. This is not applicable for JSON file type.
	RowsTotal *int64 `json:"rows_total,omitempty"`
	// The number of bytes masked or profiled so far in the component. This is only applicable to JSON files and ASDD profiling jobs on XML files.
	BytesProcessed *int64 `json:"bytes_processed,omitempty"`
	// The total number of bytes that should be masked or profiled in the component. This value is set to -1 while the total byte count is being calculated. This is only applicable to JSON files and ASDD profiling jobs on XML files.
	BytesTotal *int64 `json:"bytes_total,omitempty"`
	// The date and time that the masking engine starts operating on the execution component.
	StartTime *time.Time `json:"start_time,omitempty"`
	// The date and time that the execution component is placed in a final state.
	EndTime *time.Time `json:"end_time,omitempty"`
	// The non-conforming data count for this execution component.
	NonConformingDataCount *int64 `json:"non_conforming_data_count,omitempty"`
}

// NewExecutionComponent instantiates a new ExecutionComponent object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExecutionComponent() *ExecutionComponent {
	this := ExecutionComponent{}
	return &this
}

// NewExecutionComponentWithDefaults instantiates a new ExecutionComponent object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExecutionComponentWithDefaults() *ExecutionComponent {
	this := ExecutionComponent{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ExecutionComponent) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExecutionComponent) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ExecutionComponent) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *ExecutionComponent) SetId(v string) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ExecutionComponent) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExecutionComponent) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ExecutionComponent) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ExecutionComponent) SetName(v string) {
	o.Name = &v
}

// GetExecutionId returns the ExecutionId field value if set, zero value otherwise.
func (o *ExecutionComponent) GetExecutionId() string {
	if o == nil || IsNil(o.ExecutionId) {
		var ret string
		return ret
	}
	return *o.ExecutionId
}

// GetExecutionIdOk returns a tuple with the ExecutionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExecutionComponent) GetExecutionIdOk() (*string, bool) {
	if o == nil || IsNil(o.ExecutionId) {
		return nil, false
	}
	return o.ExecutionId, true
}

// HasExecutionId returns a boolean if a field has been set.
func (o *ExecutionComponent) HasExecutionId() bool {
	if o != nil && !IsNil(o.ExecutionId) {
		return true
	}

	return false
}

// SetExecutionId gets a reference to the given string and assigns it to the ExecutionId field.
func (o *ExecutionComponent) SetExecutionId(v string) {
	o.ExecutionId = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *ExecutionComponent) GetStatus() ExecutionStatus {
	if o == nil || IsNil(o.Status) {
		var ret ExecutionStatus
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExecutionComponent) GetStatusOk() (*ExecutionStatus, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *ExecutionComponent) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given ExecutionStatus and assigns it to the Status field.
func (o *ExecutionComponent) SetStatus(v ExecutionStatus) {
	o.Status = &v
}

// GetRowsMasked returns the RowsMasked field value if set, zero value otherwise.
func (o *ExecutionComponent) GetRowsMasked() int64 {
	if o == nil || IsNil(o.RowsMasked) {
		var ret int64
		return ret
	}
	return *o.RowsMasked
}

// GetRowsMaskedOk returns a tuple with the RowsMasked field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExecutionComponent) GetRowsMaskedOk() (*int64, bool) {
	if o == nil || IsNil(o.RowsMasked) {
		return nil, false
	}
	return o.RowsMasked, true
}

// HasRowsMasked returns a boolean if a field has been set.
func (o *ExecutionComponent) HasRowsMasked() bool {
	if o != nil && !IsNil(o.RowsMasked) {
		return true
	}

	return false
}

// SetRowsMasked gets a reference to the given int64 and assigns it to the RowsMasked field.
func (o *ExecutionComponent) SetRowsMasked(v int64) {
	o.RowsMasked = &v
}

// GetRowsTotal returns the RowsTotal field value if set, zero value otherwise.
func (o *ExecutionComponent) GetRowsTotal() int64 {
	if o == nil || IsNil(o.RowsTotal) {
		var ret int64
		return ret
	}
	return *o.RowsTotal
}

// GetRowsTotalOk returns a tuple with the RowsTotal field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExecutionComponent) GetRowsTotalOk() (*int64, bool) {
	if o == nil || IsNil(o.RowsTotal) {
		return nil, false
	}
	return o.RowsTotal, true
}

// HasRowsTotal returns a boolean if a field has been set.
func (o *ExecutionComponent) HasRowsTotal() bool {
	if o != nil && !IsNil(o.RowsTotal) {
		return true
	}

	return false
}

// SetRowsTotal gets a reference to the given int64 and assigns it to the RowsTotal field.
func (o *ExecutionComponent) SetRowsTotal(v int64) {
	o.RowsTotal = &v
}

// GetBytesProcessed returns the BytesProcessed field value if set, zero value otherwise.
func (o *ExecutionComponent) GetBytesProcessed() int64 {
	if o == nil || IsNil(o.BytesProcessed) {
		var ret int64
		return ret
	}
	return *o.BytesProcessed
}

// GetBytesProcessedOk returns a tuple with the BytesProcessed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExecutionComponent) GetBytesProcessedOk() (*int64, bool) {
	if o == nil || IsNil(o.BytesProcessed) {
		return nil, false
	}
	return o.BytesProcessed, true
}

// HasBytesProcessed returns a boolean if a field has been set.
func (o *ExecutionComponent) HasBytesProcessed() bool {
	if o != nil && !IsNil(o.BytesProcessed) {
		return true
	}

	return false
}

// SetBytesProcessed gets a reference to the given int64 and assigns it to the BytesProcessed field.
func (o *ExecutionComponent) SetBytesProcessed(v int64) {
	o.BytesProcessed = &v
}

// GetBytesTotal returns the BytesTotal field value if set, zero value otherwise.
func (o *ExecutionComponent) GetBytesTotal() int64 {
	if o == nil || IsNil(o.BytesTotal) {
		var ret int64
		return ret
	}
	return *o.BytesTotal
}

// GetBytesTotalOk returns a tuple with the BytesTotal field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExecutionComponent) GetBytesTotalOk() (*int64, bool) {
	if o == nil || IsNil(o.BytesTotal) {
		return nil, false
	}
	return o.BytesTotal, true
}

// HasBytesTotal returns a boolean if a field has been set.
func (o *ExecutionComponent) HasBytesTotal() bool {
	if o != nil && !IsNil(o.BytesTotal) {
		return true
	}

	return false
}

// SetBytesTotal gets a reference to the given int64 and assigns it to the BytesTotal field.
func (o *ExecutionComponent) SetBytesTotal(v int64) {
	o.BytesTotal = &v
}

// GetStartTime returns the StartTime field value if set, zero value otherwise.
func (o *ExecutionComponent) GetStartTime() time.Time {
	if o == nil || IsNil(o.StartTime) {
		var ret time.Time
		return ret
	}
	return *o.StartTime
}

// GetStartTimeOk returns a tuple with the StartTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExecutionComponent) GetStartTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.StartTime) {
		return nil, false
	}
	return o.StartTime, true
}

// HasStartTime returns a boolean if a field has been set.
func (o *ExecutionComponent) HasStartTime() bool {
	if o != nil && !IsNil(o.StartTime) {
		return true
	}

	return false
}

// SetStartTime gets a reference to the given time.Time and assigns it to the StartTime field.
func (o *ExecutionComponent) SetStartTime(v time.Time) {
	o.StartTime = &v
}

// GetEndTime returns the EndTime field value if set, zero value otherwise.
func (o *ExecutionComponent) GetEndTime() time.Time {
	if o == nil || IsNil(o.EndTime) {
		var ret time.Time
		return ret
	}
	return *o.EndTime
}

// GetEndTimeOk returns a tuple with the EndTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExecutionComponent) GetEndTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.EndTime) {
		return nil, false
	}
	return o.EndTime, true
}

// HasEndTime returns a boolean if a field has been set.
func (o *ExecutionComponent) HasEndTime() bool {
	if o != nil && !IsNil(o.EndTime) {
		return true
	}

	return false
}

// SetEndTime gets a reference to the given time.Time and assigns it to the EndTime field.
func (o *ExecutionComponent) SetEndTime(v time.Time) {
	o.EndTime = &v
}

// GetNonConformingDataCount returns the NonConformingDataCount field value if set, zero value otherwise.
func (o *ExecutionComponent) GetNonConformingDataCount() int64 {
	if o == nil || IsNil(o.NonConformingDataCount) {
		var ret int64
		return ret
	}
	return *o.NonConformingDataCount
}

// GetNonConformingDataCountOk returns a tuple with the NonConformingDataCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExecutionComponent) GetNonConformingDataCountOk() (*int64, bool) {
	if o == nil || IsNil(o.NonConformingDataCount) {
		return nil, false
	}
	return o.NonConformingDataCount, true
}

// HasNonConformingDataCount returns a boolean if a field has been set.
func (o *ExecutionComponent) HasNonConformingDataCount() bool {
	if o != nil && !IsNil(o.NonConformingDataCount) {
		return true
	}

	return false
}

// SetNonConformingDataCount gets a reference to the given int64 and assigns it to the NonConformingDataCount field.
func (o *ExecutionComponent) SetNonConformingDataCount(v int64) {
	o.NonConformingDataCount = &v
}

func (o ExecutionComponent) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ExecutionComponent) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.ExecutionId) {
		toSerialize["execution_id"] = o.ExecutionId
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.RowsMasked) {
		toSerialize["rows_masked"] = o.RowsMasked
	}
	if !IsNil(o.RowsTotal) {
		toSerialize["rows_total"] = o.RowsTotal
	}
	if !IsNil(o.BytesProcessed) {
		toSerialize["bytes_processed"] = o.BytesProcessed
	}
	if !IsNil(o.BytesTotal) {
		toSerialize["bytes_total"] = o.BytesTotal
	}
	if !IsNil(o.StartTime) {
		toSerialize["start_time"] = o.StartTime
	}
	if !IsNil(o.EndTime) {
		toSerialize["end_time"] = o.EndTime
	}
	if !IsNil(o.NonConformingDataCount) {
		toSerialize["non_conforming_data_count"] = o.NonConformingDataCount
	}
	return toSerialize, nil
}

type NullableExecutionComponent struct {
	value *ExecutionComponent
	isSet bool
}

func (v NullableExecutionComponent) Get() *ExecutionComponent {
	return v.value
}

func (v *NullableExecutionComponent) Set(val *ExecutionComponent) {
	v.value = val
	v.isSet = true
}

func (v NullableExecutionComponent) IsSet() bool {
	return v.isSet
}

func (v *NullableExecutionComponent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExecutionComponent(val *ExecutionComponent) *NullableExecutionComponent {
	return &NullableExecutionComponent{value: val, isSet: true}
}

func (v NullableExecutionComponent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExecutionComponent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


