/*
Delphix DCT API

Delphix DCT API

API version: 3.17.0
Contact: support@delphix.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package delphix_dct_api

import (
	"encoding/json"
)

// checks if the ApiUsageReportResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ApiUsageReportResponse{}

// ApiUsageReportResponse struct for ApiUsageReportResponse
type ApiUsageReportResponse struct {
	Items []ApiUsageData `json:"items,omitempty"`
	// Total count of automation API calls over the requested timeframe.
	TotalAutomationApiCount *int64 `json:"total_automation_api_count,omitempty"`
	// Total count of governance API calls over the requested timeframe.
	TotalGovernanceApiCount *int64 `json:"total_governance_api_count,omitempty"`
}

// NewApiUsageReportResponse instantiates a new ApiUsageReportResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApiUsageReportResponse() *ApiUsageReportResponse {
	this := ApiUsageReportResponse{}
	return &this
}

// NewApiUsageReportResponseWithDefaults instantiates a new ApiUsageReportResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApiUsageReportResponseWithDefaults() *ApiUsageReportResponse {
	this := ApiUsageReportResponse{}
	return &this
}

// GetItems returns the Items field value if set, zero value otherwise.
func (o *ApiUsageReportResponse) GetItems() []ApiUsageData {
	if o == nil || IsNil(o.Items) {
		var ret []ApiUsageData
		return ret
	}
	return o.Items
}

// GetItemsOk returns a tuple with the Items field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiUsageReportResponse) GetItemsOk() ([]ApiUsageData, bool) {
	if o == nil || IsNil(o.Items) {
		return nil, false
	}
	return o.Items, true
}

// HasItems returns a boolean if a field has been set.
func (o *ApiUsageReportResponse) HasItems() bool {
	if o != nil && !IsNil(o.Items) {
		return true
	}

	return false
}

// SetItems gets a reference to the given []ApiUsageData and assigns it to the Items field.
func (o *ApiUsageReportResponse) SetItems(v []ApiUsageData) {
	o.Items = v
}

// GetTotalAutomationApiCount returns the TotalAutomationApiCount field value if set, zero value otherwise.
func (o *ApiUsageReportResponse) GetTotalAutomationApiCount() int64 {
	if o == nil || IsNil(o.TotalAutomationApiCount) {
		var ret int64
		return ret
	}
	return *o.TotalAutomationApiCount
}

// GetTotalAutomationApiCountOk returns a tuple with the TotalAutomationApiCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiUsageReportResponse) GetTotalAutomationApiCountOk() (*int64, bool) {
	if o == nil || IsNil(o.TotalAutomationApiCount) {
		return nil, false
	}
	return o.TotalAutomationApiCount, true
}

// HasTotalAutomationApiCount returns a boolean if a field has been set.
func (o *ApiUsageReportResponse) HasTotalAutomationApiCount() bool {
	if o != nil && !IsNil(o.TotalAutomationApiCount) {
		return true
	}

	return false
}

// SetTotalAutomationApiCount gets a reference to the given int64 and assigns it to the TotalAutomationApiCount field.
func (o *ApiUsageReportResponse) SetTotalAutomationApiCount(v int64) {
	o.TotalAutomationApiCount = &v
}

// GetTotalGovernanceApiCount returns the TotalGovernanceApiCount field value if set, zero value otherwise.
func (o *ApiUsageReportResponse) GetTotalGovernanceApiCount() int64 {
	if o == nil || IsNil(o.TotalGovernanceApiCount) {
		var ret int64
		return ret
	}
	return *o.TotalGovernanceApiCount
}

// GetTotalGovernanceApiCountOk returns a tuple with the TotalGovernanceApiCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiUsageReportResponse) GetTotalGovernanceApiCountOk() (*int64, bool) {
	if o == nil || IsNil(o.TotalGovernanceApiCount) {
		return nil, false
	}
	return o.TotalGovernanceApiCount, true
}

// HasTotalGovernanceApiCount returns a boolean if a field has been set.
func (o *ApiUsageReportResponse) HasTotalGovernanceApiCount() bool {
	if o != nil && !IsNil(o.TotalGovernanceApiCount) {
		return true
	}

	return false
}

// SetTotalGovernanceApiCount gets a reference to the given int64 and assigns it to the TotalGovernanceApiCount field.
func (o *ApiUsageReportResponse) SetTotalGovernanceApiCount(v int64) {
	o.TotalGovernanceApiCount = &v
}

func (o ApiUsageReportResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ApiUsageReportResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Items) {
		toSerialize["items"] = o.Items
	}
	if !IsNil(o.TotalAutomationApiCount) {
		toSerialize["total_automation_api_count"] = o.TotalAutomationApiCount
	}
	if !IsNil(o.TotalGovernanceApiCount) {
		toSerialize["total_governance_api_count"] = o.TotalGovernanceApiCount
	}
	return toSerialize, nil
}

type NullableApiUsageReportResponse struct {
	value *ApiUsageReportResponse
	isSet bool
}

func (v NullableApiUsageReportResponse) Get() *ApiUsageReportResponse {
	return v.value
}

func (v *NullableApiUsageReportResponse) Set(val *ApiUsageReportResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableApiUsageReportResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableApiUsageReportResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApiUsageReportResponse(val *ApiUsageReportResponse) *NullableApiUsageReportResponse {
	return &NullableApiUsageReportResponse{value: val, isSet: true}
}

func (v NullableApiUsageReportResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApiUsageReportResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


