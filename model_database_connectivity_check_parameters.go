/*
Delphix DCT API

Delphix DCT API

API version: 3.18.0
Contact: support@delphix.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package delphix_dct_api

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the DatabaseConnectivityCheckParameters type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DatabaseConnectivityCheckParameters{}

// DatabaseConnectivityCheckParameters Parameters to test JDBC connectivity to source configs.
type DatabaseConnectivityCheckParameters struct {
	// The type of credentials.
	CredentialsType string `json:"credentials_type"`
	// Source database config Id.
	SourceId string `json:"source_id"`
	// Database username (Not applicable for MSSQL_ENVIRONMENT_USER).
	Username *string `json:"username,omitempty"`
	// Database password (Not applicable for MSSQL_ENVIRONMENT_USER and mutually exclusive with vault attributes).
	Password *string `json:"password,omitempty"`
	// The name or reference of the vault from which to read the database credentials (ORACLE, ASE and MSSQL_DOMAIN_USER only).
	Vault *string `json:"vault,omitempty"`
	// Vault engine name where the credential is stored (ORACLE, ASE and MSSQL_DOMAIN_USER only).
	HashicorpVaultEngine *string `json:"hashicorp_vault_engine,omitempty"`
	// Path in the vault engine where the credential is stored (ORACLE, ASE and MSSQL_DOMAIN_USER only).
	HashicorpVaultSecretPath *string `json:"hashicorp_vault_secret_path,omitempty"`
	// Hashicorp vault key for the username in the key-value store (ORACLE, ASE and MSSQL_DOMAIN_USER only).
	HashicorpVaultUsernameKey *string `json:"hashicorp_vault_username_key,omitempty"`
	// Hashicorp vault key for the password in the key-value store (ORACLE, ASE and MSSQL_DOMAIN_USER only).
	HashicorpVaultSecretKey *string `json:"hashicorp_vault_secret_key,omitempty"`
	// Azure key vault name (ORACLE, ASE and MSSQL_DOMAIN_USER only).
	AzureVaultName *string `json:"azure_vault_name,omitempty"`
	// Azure vault key for the username in the key-value store (ORACLE, ASE and MSSQL_DOMAIN_USER only).
	AzureVaultUsernameKey *string `json:"azure_vault_username_key,omitempty"`
	// Azure vault key for the password in the key-value store (ORACLE, ASE and MSSQL_DOMAIN_USER only).
	AzureVaultSecretKey *string `json:"azure_vault_secret_key,omitempty"`
	// Query to find a credential in the CyberArk vault (ORACLE, ASE and MSSQL_DOMAIN_USER only).
	CyberarkVaultQueryString *string `json:"cyberark_vault_query_string,omitempty"`
	// Id of the environment to which environment user belongs (MSSQL_ENVIRONMENT_USER only).
	EnvironmentId *string `json:"environment_id,omitempty"`
	// Reference to the environment user (MSSQL_ENVIRONMENT_USER only).
	EnvironmentUser *string `json:"environment_user,omitempty"`
}

type _DatabaseConnectivityCheckParameters DatabaseConnectivityCheckParameters

// NewDatabaseConnectivityCheckParameters instantiates a new DatabaseConnectivityCheckParameters object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDatabaseConnectivityCheckParameters(credentialsType string, sourceId string) *DatabaseConnectivityCheckParameters {
	this := DatabaseConnectivityCheckParameters{}
	this.CredentialsType = credentialsType
	this.SourceId = sourceId
	return &this
}

// NewDatabaseConnectivityCheckParametersWithDefaults instantiates a new DatabaseConnectivityCheckParameters object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDatabaseConnectivityCheckParametersWithDefaults() *DatabaseConnectivityCheckParameters {
	this := DatabaseConnectivityCheckParameters{}
	return &this
}

// GetCredentialsType returns the CredentialsType field value
func (o *DatabaseConnectivityCheckParameters) GetCredentialsType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CredentialsType
}

// GetCredentialsTypeOk returns a tuple with the CredentialsType field value
// and a boolean to check if the value has been set.
func (o *DatabaseConnectivityCheckParameters) GetCredentialsTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CredentialsType, true
}

// SetCredentialsType sets field value
func (o *DatabaseConnectivityCheckParameters) SetCredentialsType(v string) {
	o.CredentialsType = v
}

// GetSourceId returns the SourceId field value
func (o *DatabaseConnectivityCheckParameters) GetSourceId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SourceId
}

// GetSourceIdOk returns a tuple with the SourceId field value
// and a boolean to check if the value has been set.
func (o *DatabaseConnectivityCheckParameters) GetSourceIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SourceId, true
}

// SetSourceId sets field value
func (o *DatabaseConnectivityCheckParameters) SetSourceId(v string) {
	o.SourceId = v
}

// GetUsername returns the Username field value if set, zero value otherwise.
func (o *DatabaseConnectivityCheckParameters) GetUsername() string {
	if o == nil || IsNil(o.Username) {
		var ret string
		return ret
	}
	return *o.Username
}

// GetUsernameOk returns a tuple with the Username field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatabaseConnectivityCheckParameters) GetUsernameOk() (*string, bool) {
	if o == nil || IsNil(o.Username) {
		return nil, false
	}
	return o.Username, true
}

// HasUsername returns a boolean if a field has been set.
func (o *DatabaseConnectivityCheckParameters) HasUsername() bool {
	if o != nil && !IsNil(o.Username) {
		return true
	}

	return false
}

// SetUsername gets a reference to the given string and assigns it to the Username field.
func (o *DatabaseConnectivityCheckParameters) SetUsername(v string) {
	o.Username = &v
}

// GetPassword returns the Password field value if set, zero value otherwise.
func (o *DatabaseConnectivityCheckParameters) GetPassword() string {
	if o == nil || IsNil(o.Password) {
		var ret string
		return ret
	}
	return *o.Password
}

// GetPasswordOk returns a tuple with the Password field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatabaseConnectivityCheckParameters) GetPasswordOk() (*string, bool) {
	if o == nil || IsNil(o.Password) {
		return nil, false
	}
	return o.Password, true
}

// HasPassword returns a boolean if a field has been set.
func (o *DatabaseConnectivityCheckParameters) HasPassword() bool {
	if o != nil && !IsNil(o.Password) {
		return true
	}

	return false
}

// SetPassword gets a reference to the given string and assigns it to the Password field.
func (o *DatabaseConnectivityCheckParameters) SetPassword(v string) {
	o.Password = &v
}

// GetVault returns the Vault field value if set, zero value otherwise.
func (o *DatabaseConnectivityCheckParameters) GetVault() string {
	if o == nil || IsNil(o.Vault) {
		var ret string
		return ret
	}
	return *o.Vault
}

// GetVaultOk returns a tuple with the Vault field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatabaseConnectivityCheckParameters) GetVaultOk() (*string, bool) {
	if o == nil || IsNil(o.Vault) {
		return nil, false
	}
	return o.Vault, true
}

// HasVault returns a boolean if a field has been set.
func (o *DatabaseConnectivityCheckParameters) HasVault() bool {
	if o != nil && !IsNil(o.Vault) {
		return true
	}

	return false
}

// SetVault gets a reference to the given string and assigns it to the Vault field.
func (o *DatabaseConnectivityCheckParameters) SetVault(v string) {
	o.Vault = &v
}

// GetHashicorpVaultEngine returns the HashicorpVaultEngine field value if set, zero value otherwise.
func (o *DatabaseConnectivityCheckParameters) GetHashicorpVaultEngine() string {
	if o == nil || IsNil(o.HashicorpVaultEngine) {
		var ret string
		return ret
	}
	return *o.HashicorpVaultEngine
}

// GetHashicorpVaultEngineOk returns a tuple with the HashicorpVaultEngine field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatabaseConnectivityCheckParameters) GetHashicorpVaultEngineOk() (*string, bool) {
	if o == nil || IsNil(o.HashicorpVaultEngine) {
		return nil, false
	}
	return o.HashicorpVaultEngine, true
}

// HasHashicorpVaultEngine returns a boolean if a field has been set.
func (o *DatabaseConnectivityCheckParameters) HasHashicorpVaultEngine() bool {
	if o != nil && !IsNil(o.HashicorpVaultEngine) {
		return true
	}

	return false
}

// SetHashicorpVaultEngine gets a reference to the given string and assigns it to the HashicorpVaultEngine field.
func (o *DatabaseConnectivityCheckParameters) SetHashicorpVaultEngine(v string) {
	o.HashicorpVaultEngine = &v
}

// GetHashicorpVaultSecretPath returns the HashicorpVaultSecretPath field value if set, zero value otherwise.
func (o *DatabaseConnectivityCheckParameters) GetHashicorpVaultSecretPath() string {
	if o == nil || IsNil(o.HashicorpVaultSecretPath) {
		var ret string
		return ret
	}
	return *o.HashicorpVaultSecretPath
}

// GetHashicorpVaultSecretPathOk returns a tuple with the HashicorpVaultSecretPath field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatabaseConnectivityCheckParameters) GetHashicorpVaultSecretPathOk() (*string, bool) {
	if o == nil || IsNil(o.HashicorpVaultSecretPath) {
		return nil, false
	}
	return o.HashicorpVaultSecretPath, true
}

// HasHashicorpVaultSecretPath returns a boolean if a field has been set.
func (o *DatabaseConnectivityCheckParameters) HasHashicorpVaultSecretPath() bool {
	if o != nil && !IsNil(o.HashicorpVaultSecretPath) {
		return true
	}

	return false
}

// SetHashicorpVaultSecretPath gets a reference to the given string and assigns it to the HashicorpVaultSecretPath field.
func (o *DatabaseConnectivityCheckParameters) SetHashicorpVaultSecretPath(v string) {
	o.HashicorpVaultSecretPath = &v
}

// GetHashicorpVaultUsernameKey returns the HashicorpVaultUsernameKey field value if set, zero value otherwise.
func (o *DatabaseConnectivityCheckParameters) GetHashicorpVaultUsernameKey() string {
	if o == nil || IsNil(o.HashicorpVaultUsernameKey) {
		var ret string
		return ret
	}
	return *o.HashicorpVaultUsernameKey
}

// GetHashicorpVaultUsernameKeyOk returns a tuple with the HashicorpVaultUsernameKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatabaseConnectivityCheckParameters) GetHashicorpVaultUsernameKeyOk() (*string, bool) {
	if o == nil || IsNil(o.HashicorpVaultUsernameKey) {
		return nil, false
	}
	return o.HashicorpVaultUsernameKey, true
}

// HasHashicorpVaultUsernameKey returns a boolean if a field has been set.
func (o *DatabaseConnectivityCheckParameters) HasHashicorpVaultUsernameKey() bool {
	if o != nil && !IsNil(o.HashicorpVaultUsernameKey) {
		return true
	}

	return false
}

// SetHashicorpVaultUsernameKey gets a reference to the given string and assigns it to the HashicorpVaultUsernameKey field.
func (o *DatabaseConnectivityCheckParameters) SetHashicorpVaultUsernameKey(v string) {
	o.HashicorpVaultUsernameKey = &v
}

// GetHashicorpVaultSecretKey returns the HashicorpVaultSecretKey field value if set, zero value otherwise.
func (o *DatabaseConnectivityCheckParameters) GetHashicorpVaultSecretKey() string {
	if o == nil || IsNil(o.HashicorpVaultSecretKey) {
		var ret string
		return ret
	}
	return *o.HashicorpVaultSecretKey
}

// GetHashicorpVaultSecretKeyOk returns a tuple with the HashicorpVaultSecretKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatabaseConnectivityCheckParameters) GetHashicorpVaultSecretKeyOk() (*string, bool) {
	if o == nil || IsNil(o.HashicorpVaultSecretKey) {
		return nil, false
	}
	return o.HashicorpVaultSecretKey, true
}

// HasHashicorpVaultSecretKey returns a boolean if a field has been set.
func (o *DatabaseConnectivityCheckParameters) HasHashicorpVaultSecretKey() bool {
	if o != nil && !IsNil(o.HashicorpVaultSecretKey) {
		return true
	}

	return false
}

// SetHashicorpVaultSecretKey gets a reference to the given string and assigns it to the HashicorpVaultSecretKey field.
func (o *DatabaseConnectivityCheckParameters) SetHashicorpVaultSecretKey(v string) {
	o.HashicorpVaultSecretKey = &v
}

// GetAzureVaultName returns the AzureVaultName field value if set, zero value otherwise.
func (o *DatabaseConnectivityCheckParameters) GetAzureVaultName() string {
	if o == nil || IsNil(o.AzureVaultName) {
		var ret string
		return ret
	}
	return *o.AzureVaultName
}

// GetAzureVaultNameOk returns a tuple with the AzureVaultName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatabaseConnectivityCheckParameters) GetAzureVaultNameOk() (*string, bool) {
	if o == nil || IsNil(o.AzureVaultName) {
		return nil, false
	}
	return o.AzureVaultName, true
}

// HasAzureVaultName returns a boolean if a field has been set.
func (o *DatabaseConnectivityCheckParameters) HasAzureVaultName() bool {
	if o != nil && !IsNil(o.AzureVaultName) {
		return true
	}

	return false
}

// SetAzureVaultName gets a reference to the given string and assigns it to the AzureVaultName field.
func (o *DatabaseConnectivityCheckParameters) SetAzureVaultName(v string) {
	o.AzureVaultName = &v
}

// GetAzureVaultUsernameKey returns the AzureVaultUsernameKey field value if set, zero value otherwise.
func (o *DatabaseConnectivityCheckParameters) GetAzureVaultUsernameKey() string {
	if o == nil || IsNil(o.AzureVaultUsernameKey) {
		var ret string
		return ret
	}
	return *o.AzureVaultUsernameKey
}

// GetAzureVaultUsernameKeyOk returns a tuple with the AzureVaultUsernameKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatabaseConnectivityCheckParameters) GetAzureVaultUsernameKeyOk() (*string, bool) {
	if o == nil || IsNil(o.AzureVaultUsernameKey) {
		return nil, false
	}
	return o.AzureVaultUsernameKey, true
}

// HasAzureVaultUsernameKey returns a boolean if a field has been set.
func (o *DatabaseConnectivityCheckParameters) HasAzureVaultUsernameKey() bool {
	if o != nil && !IsNil(o.AzureVaultUsernameKey) {
		return true
	}

	return false
}

// SetAzureVaultUsernameKey gets a reference to the given string and assigns it to the AzureVaultUsernameKey field.
func (o *DatabaseConnectivityCheckParameters) SetAzureVaultUsernameKey(v string) {
	o.AzureVaultUsernameKey = &v
}

// GetAzureVaultSecretKey returns the AzureVaultSecretKey field value if set, zero value otherwise.
func (o *DatabaseConnectivityCheckParameters) GetAzureVaultSecretKey() string {
	if o == nil || IsNil(o.AzureVaultSecretKey) {
		var ret string
		return ret
	}
	return *o.AzureVaultSecretKey
}

// GetAzureVaultSecretKeyOk returns a tuple with the AzureVaultSecretKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatabaseConnectivityCheckParameters) GetAzureVaultSecretKeyOk() (*string, bool) {
	if o == nil || IsNil(o.AzureVaultSecretKey) {
		return nil, false
	}
	return o.AzureVaultSecretKey, true
}

// HasAzureVaultSecretKey returns a boolean if a field has been set.
func (o *DatabaseConnectivityCheckParameters) HasAzureVaultSecretKey() bool {
	if o != nil && !IsNil(o.AzureVaultSecretKey) {
		return true
	}

	return false
}

// SetAzureVaultSecretKey gets a reference to the given string and assigns it to the AzureVaultSecretKey field.
func (o *DatabaseConnectivityCheckParameters) SetAzureVaultSecretKey(v string) {
	o.AzureVaultSecretKey = &v
}

// GetCyberarkVaultQueryString returns the CyberarkVaultQueryString field value if set, zero value otherwise.
func (o *DatabaseConnectivityCheckParameters) GetCyberarkVaultQueryString() string {
	if o == nil || IsNil(o.CyberarkVaultQueryString) {
		var ret string
		return ret
	}
	return *o.CyberarkVaultQueryString
}

// GetCyberarkVaultQueryStringOk returns a tuple with the CyberarkVaultQueryString field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatabaseConnectivityCheckParameters) GetCyberarkVaultQueryStringOk() (*string, bool) {
	if o == nil || IsNil(o.CyberarkVaultQueryString) {
		return nil, false
	}
	return o.CyberarkVaultQueryString, true
}

// HasCyberarkVaultQueryString returns a boolean if a field has been set.
func (o *DatabaseConnectivityCheckParameters) HasCyberarkVaultQueryString() bool {
	if o != nil && !IsNil(o.CyberarkVaultQueryString) {
		return true
	}

	return false
}

// SetCyberarkVaultQueryString gets a reference to the given string and assigns it to the CyberarkVaultQueryString field.
func (o *DatabaseConnectivityCheckParameters) SetCyberarkVaultQueryString(v string) {
	o.CyberarkVaultQueryString = &v
}

// GetEnvironmentId returns the EnvironmentId field value if set, zero value otherwise.
func (o *DatabaseConnectivityCheckParameters) GetEnvironmentId() string {
	if o == nil || IsNil(o.EnvironmentId) {
		var ret string
		return ret
	}
	return *o.EnvironmentId
}

// GetEnvironmentIdOk returns a tuple with the EnvironmentId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatabaseConnectivityCheckParameters) GetEnvironmentIdOk() (*string, bool) {
	if o == nil || IsNil(o.EnvironmentId) {
		return nil, false
	}
	return o.EnvironmentId, true
}

// HasEnvironmentId returns a boolean if a field has been set.
func (o *DatabaseConnectivityCheckParameters) HasEnvironmentId() bool {
	if o != nil && !IsNil(o.EnvironmentId) {
		return true
	}

	return false
}

// SetEnvironmentId gets a reference to the given string and assigns it to the EnvironmentId field.
func (o *DatabaseConnectivityCheckParameters) SetEnvironmentId(v string) {
	o.EnvironmentId = &v
}

// GetEnvironmentUser returns the EnvironmentUser field value if set, zero value otherwise.
func (o *DatabaseConnectivityCheckParameters) GetEnvironmentUser() string {
	if o == nil || IsNil(o.EnvironmentUser) {
		var ret string
		return ret
	}
	return *o.EnvironmentUser
}

// GetEnvironmentUserOk returns a tuple with the EnvironmentUser field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatabaseConnectivityCheckParameters) GetEnvironmentUserOk() (*string, bool) {
	if o == nil || IsNil(o.EnvironmentUser) {
		return nil, false
	}
	return o.EnvironmentUser, true
}

// HasEnvironmentUser returns a boolean if a field has been set.
func (o *DatabaseConnectivityCheckParameters) HasEnvironmentUser() bool {
	if o != nil && !IsNil(o.EnvironmentUser) {
		return true
	}

	return false
}

// SetEnvironmentUser gets a reference to the given string and assigns it to the EnvironmentUser field.
func (o *DatabaseConnectivityCheckParameters) SetEnvironmentUser(v string) {
	o.EnvironmentUser = &v
}

func (o DatabaseConnectivityCheckParameters) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DatabaseConnectivityCheckParameters) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["credentials_type"] = o.CredentialsType
	toSerialize["source_id"] = o.SourceId
	if !IsNil(o.Username) {
		toSerialize["username"] = o.Username
	}
	if !IsNil(o.Password) {
		toSerialize["password"] = o.Password
	}
	if !IsNil(o.Vault) {
		toSerialize["vault"] = o.Vault
	}
	if !IsNil(o.HashicorpVaultEngine) {
		toSerialize["hashicorp_vault_engine"] = o.HashicorpVaultEngine
	}
	if !IsNil(o.HashicorpVaultSecretPath) {
		toSerialize["hashicorp_vault_secret_path"] = o.HashicorpVaultSecretPath
	}
	if !IsNil(o.HashicorpVaultUsernameKey) {
		toSerialize["hashicorp_vault_username_key"] = o.HashicorpVaultUsernameKey
	}
	if !IsNil(o.HashicorpVaultSecretKey) {
		toSerialize["hashicorp_vault_secret_key"] = o.HashicorpVaultSecretKey
	}
	if !IsNil(o.AzureVaultName) {
		toSerialize["azure_vault_name"] = o.AzureVaultName
	}
	if !IsNil(o.AzureVaultUsernameKey) {
		toSerialize["azure_vault_username_key"] = o.AzureVaultUsernameKey
	}
	if !IsNil(o.AzureVaultSecretKey) {
		toSerialize["azure_vault_secret_key"] = o.AzureVaultSecretKey
	}
	if !IsNil(o.CyberarkVaultQueryString) {
		toSerialize["cyberark_vault_query_string"] = o.CyberarkVaultQueryString
	}
	if !IsNil(o.EnvironmentId) {
		toSerialize["environment_id"] = o.EnvironmentId
	}
	if !IsNil(o.EnvironmentUser) {
		toSerialize["environment_user"] = o.EnvironmentUser
	}
	return toSerialize, nil
}

func (o *DatabaseConnectivityCheckParameters) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"credentials_type",
		"source_id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDatabaseConnectivityCheckParameters := _DatabaseConnectivityCheckParameters{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDatabaseConnectivityCheckParameters)

	if err != nil {
		return err
	}

	*o = DatabaseConnectivityCheckParameters(varDatabaseConnectivityCheckParameters)

	return err
}

type NullableDatabaseConnectivityCheckParameters struct {
	value *DatabaseConnectivityCheckParameters
	isSet bool
}

func (v NullableDatabaseConnectivityCheckParameters) Get() *DatabaseConnectivityCheckParameters {
	return v.value
}

func (v *NullableDatabaseConnectivityCheckParameters) Set(val *DatabaseConnectivityCheckParameters) {
	v.value = val
	v.isSet = true
}

func (v NullableDatabaseConnectivityCheckParameters) IsSet() bool {
	return v.isSet
}

func (v *NullableDatabaseConnectivityCheckParameters) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDatabaseConnectivityCheckParameters(val *DatabaseConnectivityCheckParameters) *NullableDatabaseConnectivityCheckParameters {
	return &NullableDatabaseConnectivityCheckParameters{value: val, isSet: true}
}

func (v NullableDatabaseConnectivityCheckParameters) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDatabaseConnectivityCheckParameters) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


