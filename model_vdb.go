/*
Delphix DCT API

Delphix DCT API

API version: 3.18.0
Contact: support@delphix.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package delphix_dct_api

import (
	"encoding/json"
	"time"
)

// checks if the VDB type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VDB{}

// VDB A Delphix virtual database or dataset.
type VDB struct {
	// The VDB object entity ID.
	Id *string `json:"id,omitempty"`
	// The database type of this VDB.
	DatabaseType NullableString `json:"database_type,omitempty"`
	// The logical name of this VDB.
	Name NullableString `json:"name,omitempty"`
	// The name of the database on the target environment or in the database management system.
	DatabaseName *string `json:"database_name,omitempty"`
	// The namespace id of this VDB.
	NamespaceId *string `json:"namespace_id,omitempty"`
	// The namespace name of this VDB.
	NamespaceName *string `json:"namespace_name,omitempty"`
	// Is this a replicated object.
	IsReplica *bool `json:"is_replica,omitempty"`
	// Is this VDB locked.
	IsLocked *bool `json:"is_locked,omitempty"`
	// The ID of the account that locked this VDB.
	LockedBy *int64 `json:"locked_by,omitempty"`
	// The name of the account that locked this VDB.
	LockedByName *string `json:"locked_by_name,omitempty"`
	// The database version of this VDB.
	DatabaseVersion NullableString `json:"database_version,omitempty"`
	// The JDBC connection URL for this VDB.
	// Deprecated
	JdbcConnectionString *string `json:"jdbc_connection_string,omitempty"`
	// The total size of this VDB, in bytes.
	Size NullableInt64 `json:"size,omitempty"`
	// The actual space used by this VDB, in bytes.
	StorageSize NullableInt64 `json:"storage_size,omitempty"`
	// A reference to the Engine that this VDB belongs to.
	EngineId *string `json:"engine_id,omitempty"`
	// The runtime status of the VDB. 'Unknown' if all attempts to connect to the dataset failed.
	Status NullableString `json:"status,omitempty"`
	// The VDB is masked or not.
	Masked NullableBool `json:"masked,omitempty"`
	// The content type of the vdb.
	ContentType NullableString `json:"content_type,omitempty"`
	// The timestamp for parent timeflow.
	ParentTimeflowTimestamp NullableTime `json:"parent_timeflow_timestamp,omitempty"`
	// The timezone for parent timeflow.
	ParentTimeflowTimezone NullableString `json:"parent_timeflow_timezone,omitempty"`
	// A reference to the Environment that hosts this VDB.
	EnvironmentId NullableString `json:"environment_id,omitempty"`
	// The IP address of the VDB's host.
	IpAddress NullableString `json:"ip_address,omitempty"`
	// The FQDN of the VDB's host.
	Fqdn NullableString `json:"fqdn,omitempty"`
	// A reference to the parent dataset of this VDB.
	ParentId NullableString `json:"parent_id,omitempty"`
	// A reference to the parent dSource of this VDB.
	ParentDsourceId NullableString `json:"parent_dsource_id,omitempty"`
	// A reference to the root parent dataset of this VDB which could be a VDB or a dSource.
	RootParentId NullableString `json:"root_parent_id,omitempty"`
	// The name of the group containing this VDB.
	GroupName NullableString `json:"group_name,omitempty"`
	// Name of the Engine where this VDB is hosted
	EngineName NullableString `json:"engine_name,omitempty"`
	// A reference to the CDB or VCDB associated with this VDB.
	CdbId NullableString `json:"cdb_id,omitempty"`
	Tags []Tag `json:"tags,omitempty"`
	// The date this VDB was created.
	CreationDate NullableTime `json:"creation_date,omitempty"`
	Hooks *VirtualDatasetHooks `json:"hooks,omitempty"`
	// The JSON payload conforming to the DraftV4 schema based on the type of application data being manipulated.
	AppdataSourceParams map[string]interface{} `json:"appdata_source_params,omitempty"`
	// A reference to the Database Template.
	TemplateId NullableString `json:"template_id,omitempty"`
	// Database configuration parameter overrides.
	ConfigParams map[string]interface{} `json:"config_params,omitempty"`
	// Specifies additional locations on which to mount a subdirectory of an AppData container. Can only be updated while the VDB is disabled.
	AdditionalMountPoints []AdditionalMountPoint `json:"additional_mount_points,omitempty"`
	// The parameters specified by the source config schema in the toolkit
	AppdataConfigParams map[string]interface{} `json:"appdata_config_params,omitempty"`
	// Mount point for the VDB (Oracle, ASE, AppData).
	MountPoint *string `json:"mount_point,omitempty"`
	// A reference to the currently active timeflow for this VDB.
	CurrentTimeflowId *string `json:"current_timeflow_id,omitempty"`
	// A reference to the previous timeflow for this VDB.
	PreviousTimeflowId *string `json:"previous_timeflow_id,omitempty"`
	// The date this VDB was last refreshed.
	LastRefreshedDate NullableTime `json:"last_refreshed_date,omitempty"`
	// Indicates whether the Engine should automatically restart this vdb when target host reboot is detected.
	VdbRestart *bool `json:"vdb_restart,omitempty"`
	// Indicates whether this VDB has an AppData database.
	IsAppdata *bool `json:"is_appdata,omitempty"`
	// ZFS exported data directory path.
	ExportedDataDirectory *string `json:"exported_data_directory,omitempty"`
	// ZFS exported data directory path of the virtual CDB container (vCDB).
	VcdbExportedDataDirectory *string `json:"vcdb_exported_data_directory,omitempty"`
	// The ID of the toolkit associated with this VDB.
	ToolkitId *string `json:"toolkit_id,omitempty"`
	// The version of the plugin associated with this VDB.
	PluginVersion NullableString `json:"plugin_version,omitempty"`
	// The ID of the parent object from which replication was done.
	PrimaryObjectId *string `json:"primary_object_id,omitempty"`
	// The ID of the parent engine from which replication was done.
	PrimaryEngineId *string `json:"primary_engine_id,omitempty"`
	// The name of the parent engine from which replication was done.
	PrimaryEngineName *string `json:"primary_engine_name,omitempty"`
	// The list of replicas replicated from this object.
	Replicas []Replica `json:"replicas,omitempty"`
	// Indicates whether datapatch should be invoked.
	InvokeDatapatch *bool `json:"invoke_datapatch,omitempty"`
	// True if VDB is enabled false if VDB is disabled.
	Enabled *bool `json:"enabled,omitempty"`
	// The list of node listeners for this VDB.
	NodeListeners []string `json:"node_listeners,omitempty"`
	// The instance name name of this single instance VDB.
	InstanceName *string `json:"instance_name,omitempty"`
	// The instance number of this single instance VDB.
	InstanceNumber *int32 `json:"instance_number,omitempty"`
	Instances []OracleRACDatabaseInstance `json:"instances,omitempty"`
	OracleServices []OracleService `json:"oracle_services,omitempty"`
	// The repository id of this VDB.
	RepositoryId *string `json:"repository_id,omitempty"`
}

// NewVDB instantiates a new VDB object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVDB() *VDB {
	this := VDB{}
	return &this
}

// NewVDBWithDefaults instantiates a new VDB object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVDBWithDefaults() *VDB {
	this := VDB{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *VDB) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VDB) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *VDB) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *VDB) SetId(v string) {
	o.Id = &v
}

// GetDatabaseType returns the DatabaseType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VDB) GetDatabaseType() string {
	if o == nil || IsNil(o.DatabaseType.Get()) {
		var ret string
		return ret
	}
	return *o.DatabaseType.Get()
}

// GetDatabaseTypeOk returns a tuple with the DatabaseType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VDB) GetDatabaseTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.DatabaseType.Get(), o.DatabaseType.IsSet()
}

// HasDatabaseType returns a boolean if a field has been set.
func (o *VDB) HasDatabaseType() bool {
	if o != nil && o.DatabaseType.IsSet() {
		return true
	}

	return false
}

// SetDatabaseType gets a reference to the given NullableString and assigns it to the DatabaseType field.
func (o *VDB) SetDatabaseType(v string) {
	o.DatabaseType.Set(&v)
}
// SetDatabaseTypeNil sets the value for DatabaseType to be an explicit nil
func (o *VDB) SetDatabaseTypeNil() {
	o.DatabaseType.Set(nil)
}

// UnsetDatabaseType ensures that no value is present for DatabaseType, not even an explicit nil
func (o *VDB) UnsetDatabaseType() {
	o.DatabaseType.Unset()
}

// GetName returns the Name field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VDB) GetName() string {
	if o == nil || IsNil(o.Name.Get()) {
		var ret string
		return ret
	}
	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VDB) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// HasName returns a boolean if a field has been set.
func (o *VDB) HasName() bool {
	if o != nil && o.Name.IsSet() {
		return true
	}

	return false
}

// SetName gets a reference to the given NullableString and assigns it to the Name field.
func (o *VDB) SetName(v string) {
	o.Name.Set(&v)
}
// SetNameNil sets the value for Name to be an explicit nil
func (o *VDB) SetNameNil() {
	o.Name.Set(nil)
}

// UnsetName ensures that no value is present for Name, not even an explicit nil
func (o *VDB) UnsetName() {
	o.Name.Unset()
}

// GetDatabaseName returns the DatabaseName field value if set, zero value otherwise.
func (o *VDB) GetDatabaseName() string {
	if o == nil || IsNil(o.DatabaseName) {
		var ret string
		return ret
	}
	return *o.DatabaseName
}

// GetDatabaseNameOk returns a tuple with the DatabaseName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VDB) GetDatabaseNameOk() (*string, bool) {
	if o == nil || IsNil(o.DatabaseName) {
		return nil, false
	}
	return o.DatabaseName, true
}

// HasDatabaseName returns a boolean if a field has been set.
func (o *VDB) HasDatabaseName() bool {
	if o != nil && !IsNil(o.DatabaseName) {
		return true
	}

	return false
}

// SetDatabaseName gets a reference to the given string and assigns it to the DatabaseName field.
func (o *VDB) SetDatabaseName(v string) {
	o.DatabaseName = &v
}

// GetNamespaceId returns the NamespaceId field value if set, zero value otherwise.
func (o *VDB) GetNamespaceId() string {
	if o == nil || IsNil(o.NamespaceId) {
		var ret string
		return ret
	}
	return *o.NamespaceId
}

// GetNamespaceIdOk returns a tuple with the NamespaceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VDB) GetNamespaceIdOk() (*string, bool) {
	if o == nil || IsNil(o.NamespaceId) {
		return nil, false
	}
	return o.NamespaceId, true
}

// HasNamespaceId returns a boolean if a field has been set.
func (o *VDB) HasNamespaceId() bool {
	if o != nil && !IsNil(o.NamespaceId) {
		return true
	}

	return false
}

// SetNamespaceId gets a reference to the given string and assigns it to the NamespaceId field.
func (o *VDB) SetNamespaceId(v string) {
	o.NamespaceId = &v
}

// GetNamespaceName returns the NamespaceName field value if set, zero value otherwise.
func (o *VDB) GetNamespaceName() string {
	if o == nil || IsNil(o.NamespaceName) {
		var ret string
		return ret
	}
	return *o.NamespaceName
}

// GetNamespaceNameOk returns a tuple with the NamespaceName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VDB) GetNamespaceNameOk() (*string, bool) {
	if o == nil || IsNil(o.NamespaceName) {
		return nil, false
	}
	return o.NamespaceName, true
}

// HasNamespaceName returns a boolean if a field has been set.
func (o *VDB) HasNamespaceName() bool {
	if o != nil && !IsNil(o.NamespaceName) {
		return true
	}

	return false
}

// SetNamespaceName gets a reference to the given string and assigns it to the NamespaceName field.
func (o *VDB) SetNamespaceName(v string) {
	o.NamespaceName = &v
}

// GetIsReplica returns the IsReplica field value if set, zero value otherwise.
func (o *VDB) GetIsReplica() bool {
	if o == nil || IsNil(o.IsReplica) {
		var ret bool
		return ret
	}
	return *o.IsReplica
}

// GetIsReplicaOk returns a tuple with the IsReplica field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VDB) GetIsReplicaOk() (*bool, bool) {
	if o == nil || IsNil(o.IsReplica) {
		return nil, false
	}
	return o.IsReplica, true
}

// HasIsReplica returns a boolean if a field has been set.
func (o *VDB) HasIsReplica() bool {
	if o != nil && !IsNil(o.IsReplica) {
		return true
	}

	return false
}

// SetIsReplica gets a reference to the given bool and assigns it to the IsReplica field.
func (o *VDB) SetIsReplica(v bool) {
	o.IsReplica = &v
}

// GetIsLocked returns the IsLocked field value if set, zero value otherwise.
func (o *VDB) GetIsLocked() bool {
	if o == nil || IsNil(o.IsLocked) {
		var ret bool
		return ret
	}
	return *o.IsLocked
}

// GetIsLockedOk returns a tuple with the IsLocked field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VDB) GetIsLockedOk() (*bool, bool) {
	if o == nil || IsNil(o.IsLocked) {
		return nil, false
	}
	return o.IsLocked, true
}

// HasIsLocked returns a boolean if a field has been set.
func (o *VDB) HasIsLocked() bool {
	if o != nil && !IsNil(o.IsLocked) {
		return true
	}

	return false
}

// SetIsLocked gets a reference to the given bool and assigns it to the IsLocked field.
func (o *VDB) SetIsLocked(v bool) {
	o.IsLocked = &v
}

// GetLockedBy returns the LockedBy field value if set, zero value otherwise.
func (o *VDB) GetLockedBy() int64 {
	if o == nil || IsNil(o.LockedBy) {
		var ret int64
		return ret
	}
	return *o.LockedBy
}

// GetLockedByOk returns a tuple with the LockedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VDB) GetLockedByOk() (*int64, bool) {
	if o == nil || IsNil(o.LockedBy) {
		return nil, false
	}
	return o.LockedBy, true
}

// HasLockedBy returns a boolean if a field has been set.
func (o *VDB) HasLockedBy() bool {
	if o != nil && !IsNil(o.LockedBy) {
		return true
	}

	return false
}

// SetLockedBy gets a reference to the given int64 and assigns it to the LockedBy field.
func (o *VDB) SetLockedBy(v int64) {
	o.LockedBy = &v
}

// GetLockedByName returns the LockedByName field value if set, zero value otherwise.
func (o *VDB) GetLockedByName() string {
	if o == nil || IsNil(o.LockedByName) {
		var ret string
		return ret
	}
	return *o.LockedByName
}

// GetLockedByNameOk returns a tuple with the LockedByName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VDB) GetLockedByNameOk() (*string, bool) {
	if o == nil || IsNil(o.LockedByName) {
		return nil, false
	}
	return o.LockedByName, true
}

// HasLockedByName returns a boolean if a field has been set.
func (o *VDB) HasLockedByName() bool {
	if o != nil && !IsNil(o.LockedByName) {
		return true
	}

	return false
}

// SetLockedByName gets a reference to the given string and assigns it to the LockedByName field.
func (o *VDB) SetLockedByName(v string) {
	o.LockedByName = &v
}

// GetDatabaseVersion returns the DatabaseVersion field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VDB) GetDatabaseVersion() string {
	if o == nil || IsNil(o.DatabaseVersion.Get()) {
		var ret string
		return ret
	}
	return *o.DatabaseVersion.Get()
}

// GetDatabaseVersionOk returns a tuple with the DatabaseVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VDB) GetDatabaseVersionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.DatabaseVersion.Get(), o.DatabaseVersion.IsSet()
}

// HasDatabaseVersion returns a boolean if a field has been set.
func (o *VDB) HasDatabaseVersion() bool {
	if o != nil && o.DatabaseVersion.IsSet() {
		return true
	}

	return false
}

// SetDatabaseVersion gets a reference to the given NullableString and assigns it to the DatabaseVersion field.
func (o *VDB) SetDatabaseVersion(v string) {
	o.DatabaseVersion.Set(&v)
}
// SetDatabaseVersionNil sets the value for DatabaseVersion to be an explicit nil
func (o *VDB) SetDatabaseVersionNil() {
	o.DatabaseVersion.Set(nil)
}

// UnsetDatabaseVersion ensures that no value is present for DatabaseVersion, not even an explicit nil
func (o *VDB) UnsetDatabaseVersion() {
	o.DatabaseVersion.Unset()
}

// GetJdbcConnectionString returns the JdbcConnectionString field value if set, zero value otherwise.
// Deprecated
func (o *VDB) GetJdbcConnectionString() string {
	if o == nil || IsNil(o.JdbcConnectionString) {
		var ret string
		return ret
	}
	return *o.JdbcConnectionString
}

// GetJdbcConnectionStringOk returns a tuple with the JdbcConnectionString field value if set, nil otherwise
// and a boolean to check if the value has been set.
// Deprecated
func (o *VDB) GetJdbcConnectionStringOk() (*string, bool) {
	if o == nil || IsNil(o.JdbcConnectionString) {
		return nil, false
	}
	return o.JdbcConnectionString, true
}

// HasJdbcConnectionString returns a boolean if a field has been set.
func (o *VDB) HasJdbcConnectionString() bool {
	if o != nil && !IsNil(o.JdbcConnectionString) {
		return true
	}

	return false
}

// SetJdbcConnectionString gets a reference to the given string and assigns it to the JdbcConnectionString field.
// Deprecated
func (o *VDB) SetJdbcConnectionString(v string) {
	o.JdbcConnectionString = &v
}

// GetSize returns the Size field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VDB) GetSize() int64 {
	if o == nil || IsNil(o.Size.Get()) {
		var ret int64
		return ret
	}
	return *o.Size.Get()
}

// GetSizeOk returns a tuple with the Size field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VDB) GetSizeOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.Size.Get(), o.Size.IsSet()
}

// HasSize returns a boolean if a field has been set.
func (o *VDB) HasSize() bool {
	if o != nil && o.Size.IsSet() {
		return true
	}

	return false
}

// SetSize gets a reference to the given NullableInt64 and assigns it to the Size field.
func (o *VDB) SetSize(v int64) {
	o.Size.Set(&v)
}
// SetSizeNil sets the value for Size to be an explicit nil
func (o *VDB) SetSizeNil() {
	o.Size.Set(nil)
}

// UnsetSize ensures that no value is present for Size, not even an explicit nil
func (o *VDB) UnsetSize() {
	o.Size.Unset()
}

// GetStorageSize returns the StorageSize field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VDB) GetStorageSize() int64 {
	if o == nil || IsNil(o.StorageSize.Get()) {
		var ret int64
		return ret
	}
	return *o.StorageSize.Get()
}

// GetStorageSizeOk returns a tuple with the StorageSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VDB) GetStorageSizeOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.StorageSize.Get(), o.StorageSize.IsSet()
}

// HasStorageSize returns a boolean if a field has been set.
func (o *VDB) HasStorageSize() bool {
	if o != nil && o.StorageSize.IsSet() {
		return true
	}

	return false
}

// SetStorageSize gets a reference to the given NullableInt64 and assigns it to the StorageSize field.
func (o *VDB) SetStorageSize(v int64) {
	o.StorageSize.Set(&v)
}
// SetStorageSizeNil sets the value for StorageSize to be an explicit nil
func (o *VDB) SetStorageSizeNil() {
	o.StorageSize.Set(nil)
}

// UnsetStorageSize ensures that no value is present for StorageSize, not even an explicit nil
func (o *VDB) UnsetStorageSize() {
	o.StorageSize.Unset()
}

// GetEngineId returns the EngineId field value if set, zero value otherwise.
func (o *VDB) GetEngineId() string {
	if o == nil || IsNil(o.EngineId) {
		var ret string
		return ret
	}
	return *o.EngineId
}

// GetEngineIdOk returns a tuple with the EngineId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VDB) GetEngineIdOk() (*string, bool) {
	if o == nil || IsNil(o.EngineId) {
		return nil, false
	}
	return o.EngineId, true
}

// HasEngineId returns a boolean if a field has been set.
func (o *VDB) HasEngineId() bool {
	if o != nil && !IsNil(o.EngineId) {
		return true
	}

	return false
}

// SetEngineId gets a reference to the given string and assigns it to the EngineId field.
func (o *VDB) SetEngineId(v string) {
	o.EngineId = &v
}

// GetStatus returns the Status field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VDB) GetStatus() string {
	if o == nil || IsNil(o.Status.Get()) {
		var ret string
		return ret
	}
	return *o.Status.Get()
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VDB) GetStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Status.Get(), o.Status.IsSet()
}

// HasStatus returns a boolean if a field has been set.
func (o *VDB) HasStatus() bool {
	if o != nil && o.Status.IsSet() {
		return true
	}

	return false
}

// SetStatus gets a reference to the given NullableString and assigns it to the Status field.
func (o *VDB) SetStatus(v string) {
	o.Status.Set(&v)
}
// SetStatusNil sets the value for Status to be an explicit nil
func (o *VDB) SetStatusNil() {
	o.Status.Set(nil)
}

// UnsetStatus ensures that no value is present for Status, not even an explicit nil
func (o *VDB) UnsetStatus() {
	o.Status.Unset()
}

// GetMasked returns the Masked field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VDB) GetMasked() bool {
	if o == nil || IsNil(o.Masked.Get()) {
		var ret bool
		return ret
	}
	return *o.Masked.Get()
}

// GetMaskedOk returns a tuple with the Masked field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VDB) GetMaskedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.Masked.Get(), o.Masked.IsSet()
}

// HasMasked returns a boolean if a field has been set.
func (o *VDB) HasMasked() bool {
	if o != nil && o.Masked.IsSet() {
		return true
	}

	return false
}

// SetMasked gets a reference to the given NullableBool and assigns it to the Masked field.
func (o *VDB) SetMasked(v bool) {
	o.Masked.Set(&v)
}
// SetMaskedNil sets the value for Masked to be an explicit nil
func (o *VDB) SetMaskedNil() {
	o.Masked.Set(nil)
}

// UnsetMasked ensures that no value is present for Masked, not even an explicit nil
func (o *VDB) UnsetMasked() {
	o.Masked.Unset()
}

// GetContentType returns the ContentType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VDB) GetContentType() string {
	if o == nil || IsNil(o.ContentType.Get()) {
		var ret string
		return ret
	}
	return *o.ContentType.Get()
}

// GetContentTypeOk returns a tuple with the ContentType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VDB) GetContentTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ContentType.Get(), o.ContentType.IsSet()
}

// HasContentType returns a boolean if a field has been set.
func (o *VDB) HasContentType() bool {
	if o != nil && o.ContentType.IsSet() {
		return true
	}

	return false
}

// SetContentType gets a reference to the given NullableString and assigns it to the ContentType field.
func (o *VDB) SetContentType(v string) {
	o.ContentType.Set(&v)
}
// SetContentTypeNil sets the value for ContentType to be an explicit nil
func (o *VDB) SetContentTypeNil() {
	o.ContentType.Set(nil)
}

// UnsetContentType ensures that no value is present for ContentType, not even an explicit nil
func (o *VDB) UnsetContentType() {
	o.ContentType.Unset()
}

// GetParentTimeflowTimestamp returns the ParentTimeflowTimestamp field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VDB) GetParentTimeflowTimestamp() time.Time {
	if o == nil || IsNil(o.ParentTimeflowTimestamp.Get()) {
		var ret time.Time
		return ret
	}
	return *o.ParentTimeflowTimestamp.Get()
}

// GetParentTimeflowTimestampOk returns a tuple with the ParentTimeflowTimestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VDB) GetParentTimeflowTimestampOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.ParentTimeflowTimestamp.Get(), o.ParentTimeflowTimestamp.IsSet()
}

// HasParentTimeflowTimestamp returns a boolean if a field has been set.
func (o *VDB) HasParentTimeflowTimestamp() bool {
	if o != nil && o.ParentTimeflowTimestamp.IsSet() {
		return true
	}

	return false
}

// SetParentTimeflowTimestamp gets a reference to the given NullableTime and assigns it to the ParentTimeflowTimestamp field.
func (o *VDB) SetParentTimeflowTimestamp(v time.Time) {
	o.ParentTimeflowTimestamp.Set(&v)
}
// SetParentTimeflowTimestampNil sets the value for ParentTimeflowTimestamp to be an explicit nil
func (o *VDB) SetParentTimeflowTimestampNil() {
	o.ParentTimeflowTimestamp.Set(nil)
}

// UnsetParentTimeflowTimestamp ensures that no value is present for ParentTimeflowTimestamp, not even an explicit nil
func (o *VDB) UnsetParentTimeflowTimestamp() {
	o.ParentTimeflowTimestamp.Unset()
}

// GetParentTimeflowTimezone returns the ParentTimeflowTimezone field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VDB) GetParentTimeflowTimezone() string {
	if o == nil || IsNil(o.ParentTimeflowTimezone.Get()) {
		var ret string
		return ret
	}
	return *o.ParentTimeflowTimezone.Get()
}

// GetParentTimeflowTimezoneOk returns a tuple with the ParentTimeflowTimezone field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VDB) GetParentTimeflowTimezoneOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ParentTimeflowTimezone.Get(), o.ParentTimeflowTimezone.IsSet()
}

// HasParentTimeflowTimezone returns a boolean if a field has been set.
func (o *VDB) HasParentTimeflowTimezone() bool {
	if o != nil && o.ParentTimeflowTimezone.IsSet() {
		return true
	}

	return false
}

// SetParentTimeflowTimezone gets a reference to the given NullableString and assigns it to the ParentTimeflowTimezone field.
func (o *VDB) SetParentTimeflowTimezone(v string) {
	o.ParentTimeflowTimezone.Set(&v)
}
// SetParentTimeflowTimezoneNil sets the value for ParentTimeflowTimezone to be an explicit nil
func (o *VDB) SetParentTimeflowTimezoneNil() {
	o.ParentTimeflowTimezone.Set(nil)
}

// UnsetParentTimeflowTimezone ensures that no value is present for ParentTimeflowTimezone, not even an explicit nil
func (o *VDB) UnsetParentTimeflowTimezone() {
	o.ParentTimeflowTimezone.Unset()
}

// GetEnvironmentId returns the EnvironmentId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VDB) GetEnvironmentId() string {
	if o == nil || IsNil(o.EnvironmentId.Get()) {
		var ret string
		return ret
	}
	return *o.EnvironmentId.Get()
}

// GetEnvironmentIdOk returns a tuple with the EnvironmentId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VDB) GetEnvironmentIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.EnvironmentId.Get(), o.EnvironmentId.IsSet()
}

// HasEnvironmentId returns a boolean if a field has been set.
func (o *VDB) HasEnvironmentId() bool {
	if o != nil && o.EnvironmentId.IsSet() {
		return true
	}

	return false
}

// SetEnvironmentId gets a reference to the given NullableString and assigns it to the EnvironmentId field.
func (o *VDB) SetEnvironmentId(v string) {
	o.EnvironmentId.Set(&v)
}
// SetEnvironmentIdNil sets the value for EnvironmentId to be an explicit nil
func (o *VDB) SetEnvironmentIdNil() {
	o.EnvironmentId.Set(nil)
}

// UnsetEnvironmentId ensures that no value is present for EnvironmentId, not even an explicit nil
func (o *VDB) UnsetEnvironmentId() {
	o.EnvironmentId.Unset()
}

// GetIpAddress returns the IpAddress field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VDB) GetIpAddress() string {
	if o == nil || IsNil(o.IpAddress.Get()) {
		var ret string
		return ret
	}
	return *o.IpAddress.Get()
}

// GetIpAddressOk returns a tuple with the IpAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VDB) GetIpAddressOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.IpAddress.Get(), o.IpAddress.IsSet()
}

// HasIpAddress returns a boolean if a field has been set.
func (o *VDB) HasIpAddress() bool {
	if o != nil && o.IpAddress.IsSet() {
		return true
	}

	return false
}

// SetIpAddress gets a reference to the given NullableString and assigns it to the IpAddress field.
func (o *VDB) SetIpAddress(v string) {
	o.IpAddress.Set(&v)
}
// SetIpAddressNil sets the value for IpAddress to be an explicit nil
func (o *VDB) SetIpAddressNil() {
	o.IpAddress.Set(nil)
}

// UnsetIpAddress ensures that no value is present for IpAddress, not even an explicit nil
func (o *VDB) UnsetIpAddress() {
	o.IpAddress.Unset()
}

// GetFqdn returns the Fqdn field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VDB) GetFqdn() string {
	if o == nil || IsNil(o.Fqdn.Get()) {
		var ret string
		return ret
	}
	return *o.Fqdn.Get()
}

// GetFqdnOk returns a tuple with the Fqdn field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VDB) GetFqdnOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Fqdn.Get(), o.Fqdn.IsSet()
}

// HasFqdn returns a boolean if a field has been set.
func (o *VDB) HasFqdn() bool {
	if o != nil && o.Fqdn.IsSet() {
		return true
	}

	return false
}

// SetFqdn gets a reference to the given NullableString and assigns it to the Fqdn field.
func (o *VDB) SetFqdn(v string) {
	o.Fqdn.Set(&v)
}
// SetFqdnNil sets the value for Fqdn to be an explicit nil
func (o *VDB) SetFqdnNil() {
	o.Fqdn.Set(nil)
}

// UnsetFqdn ensures that no value is present for Fqdn, not even an explicit nil
func (o *VDB) UnsetFqdn() {
	o.Fqdn.Unset()
}

// GetParentId returns the ParentId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VDB) GetParentId() string {
	if o == nil || IsNil(o.ParentId.Get()) {
		var ret string
		return ret
	}
	return *o.ParentId.Get()
}

// GetParentIdOk returns a tuple with the ParentId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VDB) GetParentIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ParentId.Get(), o.ParentId.IsSet()
}

// HasParentId returns a boolean if a field has been set.
func (o *VDB) HasParentId() bool {
	if o != nil && o.ParentId.IsSet() {
		return true
	}

	return false
}

// SetParentId gets a reference to the given NullableString and assigns it to the ParentId field.
func (o *VDB) SetParentId(v string) {
	o.ParentId.Set(&v)
}
// SetParentIdNil sets the value for ParentId to be an explicit nil
func (o *VDB) SetParentIdNil() {
	o.ParentId.Set(nil)
}

// UnsetParentId ensures that no value is present for ParentId, not even an explicit nil
func (o *VDB) UnsetParentId() {
	o.ParentId.Unset()
}

// GetParentDsourceId returns the ParentDsourceId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VDB) GetParentDsourceId() string {
	if o == nil || IsNil(o.ParentDsourceId.Get()) {
		var ret string
		return ret
	}
	return *o.ParentDsourceId.Get()
}

// GetParentDsourceIdOk returns a tuple with the ParentDsourceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VDB) GetParentDsourceIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ParentDsourceId.Get(), o.ParentDsourceId.IsSet()
}

// HasParentDsourceId returns a boolean if a field has been set.
func (o *VDB) HasParentDsourceId() bool {
	if o != nil && o.ParentDsourceId.IsSet() {
		return true
	}

	return false
}

// SetParentDsourceId gets a reference to the given NullableString and assigns it to the ParentDsourceId field.
func (o *VDB) SetParentDsourceId(v string) {
	o.ParentDsourceId.Set(&v)
}
// SetParentDsourceIdNil sets the value for ParentDsourceId to be an explicit nil
func (o *VDB) SetParentDsourceIdNil() {
	o.ParentDsourceId.Set(nil)
}

// UnsetParentDsourceId ensures that no value is present for ParentDsourceId, not even an explicit nil
func (o *VDB) UnsetParentDsourceId() {
	o.ParentDsourceId.Unset()
}

// GetRootParentId returns the RootParentId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VDB) GetRootParentId() string {
	if o == nil || IsNil(o.RootParentId.Get()) {
		var ret string
		return ret
	}
	return *o.RootParentId.Get()
}

// GetRootParentIdOk returns a tuple with the RootParentId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VDB) GetRootParentIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.RootParentId.Get(), o.RootParentId.IsSet()
}

// HasRootParentId returns a boolean if a field has been set.
func (o *VDB) HasRootParentId() bool {
	if o != nil && o.RootParentId.IsSet() {
		return true
	}

	return false
}

// SetRootParentId gets a reference to the given NullableString and assigns it to the RootParentId field.
func (o *VDB) SetRootParentId(v string) {
	o.RootParentId.Set(&v)
}
// SetRootParentIdNil sets the value for RootParentId to be an explicit nil
func (o *VDB) SetRootParentIdNil() {
	o.RootParentId.Set(nil)
}

// UnsetRootParentId ensures that no value is present for RootParentId, not even an explicit nil
func (o *VDB) UnsetRootParentId() {
	o.RootParentId.Unset()
}

// GetGroupName returns the GroupName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VDB) GetGroupName() string {
	if o == nil || IsNil(o.GroupName.Get()) {
		var ret string
		return ret
	}
	return *o.GroupName.Get()
}

// GetGroupNameOk returns a tuple with the GroupName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VDB) GetGroupNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.GroupName.Get(), o.GroupName.IsSet()
}

// HasGroupName returns a boolean if a field has been set.
func (o *VDB) HasGroupName() bool {
	if o != nil && o.GroupName.IsSet() {
		return true
	}

	return false
}

// SetGroupName gets a reference to the given NullableString and assigns it to the GroupName field.
func (o *VDB) SetGroupName(v string) {
	o.GroupName.Set(&v)
}
// SetGroupNameNil sets the value for GroupName to be an explicit nil
func (o *VDB) SetGroupNameNil() {
	o.GroupName.Set(nil)
}

// UnsetGroupName ensures that no value is present for GroupName, not even an explicit nil
func (o *VDB) UnsetGroupName() {
	o.GroupName.Unset()
}

// GetEngineName returns the EngineName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VDB) GetEngineName() string {
	if o == nil || IsNil(o.EngineName.Get()) {
		var ret string
		return ret
	}
	return *o.EngineName.Get()
}

// GetEngineNameOk returns a tuple with the EngineName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VDB) GetEngineNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.EngineName.Get(), o.EngineName.IsSet()
}

// HasEngineName returns a boolean if a field has been set.
func (o *VDB) HasEngineName() bool {
	if o != nil && o.EngineName.IsSet() {
		return true
	}

	return false
}

// SetEngineName gets a reference to the given NullableString and assigns it to the EngineName field.
func (o *VDB) SetEngineName(v string) {
	o.EngineName.Set(&v)
}
// SetEngineNameNil sets the value for EngineName to be an explicit nil
func (o *VDB) SetEngineNameNil() {
	o.EngineName.Set(nil)
}

// UnsetEngineName ensures that no value is present for EngineName, not even an explicit nil
func (o *VDB) UnsetEngineName() {
	o.EngineName.Unset()
}

// GetCdbId returns the CdbId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VDB) GetCdbId() string {
	if o == nil || IsNil(o.CdbId.Get()) {
		var ret string
		return ret
	}
	return *o.CdbId.Get()
}

// GetCdbIdOk returns a tuple with the CdbId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VDB) GetCdbIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.CdbId.Get(), o.CdbId.IsSet()
}

// HasCdbId returns a boolean if a field has been set.
func (o *VDB) HasCdbId() bool {
	if o != nil && o.CdbId.IsSet() {
		return true
	}

	return false
}

// SetCdbId gets a reference to the given NullableString and assigns it to the CdbId field.
func (o *VDB) SetCdbId(v string) {
	o.CdbId.Set(&v)
}
// SetCdbIdNil sets the value for CdbId to be an explicit nil
func (o *VDB) SetCdbIdNil() {
	o.CdbId.Set(nil)
}

// UnsetCdbId ensures that no value is present for CdbId, not even an explicit nil
func (o *VDB) UnsetCdbId() {
	o.CdbId.Unset()
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *VDB) GetTags() []Tag {
	if o == nil || IsNil(o.Tags) {
		var ret []Tag
		return ret
	}
	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VDB) GetTagsOk() ([]Tag, bool) {
	if o == nil || IsNil(o.Tags) {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *VDB) HasTags() bool {
	if o != nil && !IsNil(o.Tags) {
		return true
	}

	return false
}

// SetTags gets a reference to the given []Tag and assigns it to the Tags field.
func (o *VDB) SetTags(v []Tag) {
	o.Tags = v
}

// GetCreationDate returns the CreationDate field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VDB) GetCreationDate() time.Time {
	if o == nil || IsNil(o.CreationDate.Get()) {
		var ret time.Time
		return ret
	}
	return *o.CreationDate.Get()
}

// GetCreationDateOk returns a tuple with the CreationDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VDB) GetCreationDateOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.CreationDate.Get(), o.CreationDate.IsSet()
}

// HasCreationDate returns a boolean if a field has been set.
func (o *VDB) HasCreationDate() bool {
	if o != nil && o.CreationDate.IsSet() {
		return true
	}

	return false
}

// SetCreationDate gets a reference to the given NullableTime and assigns it to the CreationDate field.
func (o *VDB) SetCreationDate(v time.Time) {
	o.CreationDate.Set(&v)
}
// SetCreationDateNil sets the value for CreationDate to be an explicit nil
func (o *VDB) SetCreationDateNil() {
	o.CreationDate.Set(nil)
}

// UnsetCreationDate ensures that no value is present for CreationDate, not even an explicit nil
func (o *VDB) UnsetCreationDate() {
	o.CreationDate.Unset()
}

// GetHooks returns the Hooks field value if set, zero value otherwise.
func (o *VDB) GetHooks() VirtualDatasetHooks {
	if o == nil || IsNil(o.Hooks) {
		var ret VirtualDatasetHooks
		return ret
	}
	return *o.Hooks
}

// GetHooksOk returns a tuple with the Hooks field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VDB) GetHooksOk() (*VirtualDatasetHooks, bool) {
	if o == nil || IsNil(o.Hooks) {
		return nil, false
	}
	return o.Hooks, true
}

// HasHooks returns a boolean if a field has been set.
func (o *VDB) HasHooks() bool {
	if o != nil && !IsNil(o.Hooks) {
		return true
	}

	return false
}

// SetHooks gets a reference to the given VirtualDatasetHooks and assigns it to the Hooks field.
func (o *VDB) SetHooks(v VirtualDatasetHooks) {
	o.Hooks = &v
}

// GetAppdataSourceParams returns the AppdataSourceParams field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VDB) GetAppdataSourceParams() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}
	return o.AppdataSourceParams
}

// GetAppdataSourceParamsOk returns a tuple with the AppdataSourceParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VDB) GetAppdataSourceParamsOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.AppdataSourceParams) {
		return map[string]interface{}{}, false
	}
	return o.AppdataSourceParams, true
}

// HasAppdataSourceParams returns a boolean if a field has been set.
func (o *VDB) HasAppdataSourceParams() bool {
	if o != nil && !IsNil(o.AppdataSourceParams) {
		return true
	}

	return false
}

// SetAppdataSourceParams gets a reference to the given map[string]interface{} and assigns it to the AppdataSourceParams field.
func (o *VDB) SetAppdataSourceParams(v map[string]interface{}) {
	o.AppdataSourceParams = v
}

// GetTemplateId returns the TemplateId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VDB) GetTemplateId() string {
	if o == nil || IsNil(o.TemplateId.Get()) {
		var ret string
		return ret
	}
	return *o.TemplateId.Get()
}

// GetTemplateIdOk returns a tuple with the TemplateId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VDB) GetTemplateIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.TemplateId.Get(), o.TemplateId.IsSet()
}

// HasTemplateId returns a boolean if a field has been set.
func (o *VDB) HasTemplateId() bool {
	if o != nil && o.TemplateId.IsSet() {
		return true
	}

	return false
}

// SetTemplateId gets a reference to the given NullableString and assigns it to the TemplateId field.
func (o *VDB) SetTemplateId(v string) {
	o.TemplateId.Set(&v)
}
// SetTemplateIdNil sets the value for TemplateId to be an explicit nil
func (o *VDB) SetTemplateIdNil() {
	o.TemplateId.Set(nil)
}

// UnsetTemplateId ensures that no value is present for TemplateId, not even an explicit nil
func (o *VDB) UnsetTemplateId() {
	o.TemplateId.Unset()
}

// GetConfigParams returns the ConfigParams field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VDB) GetConfigParams() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}
	return o.ConfigParams
}

// GetConfigParamsOk returns a tuple with the ConfigParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VDB) GetConfigParamsOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.ConfigParams) {
		return map[string]interface{}{}, false
	}
	return o.ConfigParams, true
}

// HasConfigParams returns a boolean if a field has been set.
func (o *VDB) HasConfigParams() bool {
	if o != nil && !IsNil(o.ConfigParams) {
		return true
	}

	return false
}

// SetConfigParams gets a reference to the given map[string]interface{} and assigns it to the ConfigParams field.
func (o *VDB) SetConfigParams(v map[string]interface{}) {
	o.ConfigParams = v
}

// GetAdditionalMountPoints returns the AdditionalMountPoints field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VDB) GetAdditionalMountPoints() []AdditionalMountPoint {
	if o == nil {
		var ret []AdditionalMountPoint
		return ret
	}
	return o.AdditionalMountPoints
}

// GetAdditionalMountPointsOk returns a tuple with the AdditionalMountPoints field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VDB) GetAdditionalMountPointsOk() ([]AdditionalMountPoint, bool) {
	if o == nil || IsNil(o.AdditionalMountPoints) {
		return nil, false
	}
	return o.AdditionalMountPoints, true
}

// HasAdditionalMountPoints returns a boolean if a field has been set.
func (o *VDB) HasAdditionalMountPoints() bool {
	if o != nil && !IsNil(o.AdditionalMountPoints) {
		return true
	}

	return false
}

// SetAdditionalMountPoints gets a reference to the given []AdditionalMountPoint and assigns it to the AdditionalMountPoints field.
func (o *VDB) SetAdditionalMountPoints(v []AdditionalMountPoint) {
	o.AdditionalMountPoints = v
}

// GetAppdataConfigParams returns the AppdataConfigParams field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VDB) GetAppdataConfigParams() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}
	return o.AppdataConfigParams
}

// GetAppdataConfigParamsOk returns a tuple with the AppdataConfigParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VDB) GetAppdataConfigParamsOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.AppdataConfigParams) {
		return map[string]interface{}{}, false
	}
	return o.AppdataConfigParams, true
}

// HasAppdataConfigParams returns a boolean if a field has been set.
func (o *VDB) HasAppdataConfigParams() bool {
	if o != nil && !IsNil(o.AppdataConfigParams) {
		return true
	}

	return false
}

// SetAppdataConfigParams gets a reference to the given map[string]interface{} and assigns it to the AppdataConfigParams field.
func (o *VDB) SetAppdataConfigParams(v map[string]interface{}) {
	o.AppdataConfigParams = v
}

// GetMountPoint returns the MountPoint field value if set, zero value otherwise.
func (o *VDB) GetMountPoint() string {
	if o == nil || IsNil(o.MountPoint) {
		var ret string
		return ret
	}
	return *o.MountPoint
}

// GetMountPointOk returns a tuple with the MountPoint field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VDB) GetMountPointOk() (*string, bool) {
	if o == nil || IsNil(o.MountPoint) {
		return nil, false
	}
	return o.MountPoint, true
}

// HasMountPoint returns a boolean if a field has been set.
func (o *VDB) HasMountPoint() bool {
	if o != nil && !IsNil(o.MountPoint) {
		return true
	}

	return false
}

// SetMountPoint gets a reference to the given string and assigns it to the MountPoint field.
func (o *VDB) SetMountPoint(v string) {
	o.MountPoint = &v
}

// GetCurrentTimeflowId returns the CurrentTimeflowId field value if set, zero value otherwise.
func (o *VDB) GetCurrentTimeflowId() string {
	if o == nil || IsNil(o.CurrentTimeflowId) {
		var ret string
		return ret
	}
	return *o.CurrentTimeflowId
}

// GetCurrentTimeflowIdOk returns a tuple with the CurrentTimeflowId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VDB) GetCurrentTimeflowIdOk() (*string, bool) {
	if o == nil || IsNil(o.CurrentTimeflowId) {
		return nil, false
	}
	return o.CurrentTimeflowId, true
}

// HasCurrentTimeflowId returns a boolean if a field has been set.
func (o *VDB) HasCurrentTimeflowId() bool {
	if o != nil && !IsNil(o.CurrentTimeflowId) {
		return true
	}

	return false
}

// SetCurrentTimeflowId gets a reference to the given string and assigns it to the CurrentTimeflowId field.
func (o *VDB) SetCurrentTimeflowId(v string) {
	o.CurrentTimeflowId = &v
}

// GetPreviousTimeflowId returns the PreviousTimeflowId field value if set, zero value otherwise.
func (o *VDB) GetPreviousTimeflowId() string {
	if o == nil || IsNil(o.PreviousTimeflowId) {
		var ret string
		return ret
	}
	return *o.PreviousTimeflowId
}

// GetPreviousTimeflowIdOk returns a tuple with the PreviousTimeflowId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VDB) GetPreviousTimeflowIdOk() (*string, bool) {
	if o == nil || IsNil(o.PreviousTimeflowId) {
		return nil, false
	}
	return o.PreviousTimeflowId, true
}

// HasPreviousTimeflowId returns a boolean if a field has been set.
func (o *VDB) HasPreviousTimeflowId() bool {
	if o != nil && !IsNil(o.PreviousTimeflowId) {
		return true
	}

	return false
}

// SetPreviousTimeflowId gets a reference to the given string and assigns it to the PreviousTimeflowId field.
func (o *VDB) SetPreviousTimeflowId(v string) {
	o.PreviousTimeflowId = &v
}

// GetLastRefreshedDate returns the LastRefreshedDate field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VDB) GetLastRefreshedDate() time.Time {
	if o == nil || IsNil(o.LastRefreshedDate.Get()) {
		var ret time.Time
		return ret
	}
	return *o.LastRefreshedDate.Get()
}

// GetLastRefreshedDateOk returns a tuple with the LastRefreshedDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VDB) GetLastRefreshedDateOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.LastRefreshedDate.Get(), o.LastRefreshedDate.IsSet()
}

// HasLastRefreshedDate returns a boolean if a field has been set.
func (o *VDB) HasLastRefreshedDate() bool {
	if o != nil && o.LastRefreshedDate.IsSet() {
		return true
	}

	return false
}

// SetLastRefreshedDate gets a reference to the given NullableTime and assigns it to the LastRefreshedDate field.
func (o *VDB) SetLastRefreshedDate(v time.Time) {
	o.LastRefreshedDate.Set(&v)
}
// SetLastRefreshedDateNil sets the value for LastRefreshedDate to be an explicit nil
func (o *VDB) SetLastRefreshedDateNil() {
	o.LastRefreshedDate.Set(nil)
}

// UnsetLastRefreshedDate ensures that no value is present for LastRefreshedDate, not even an explicit nil
func (o *VDB) UnsetLastRefreshedDate() {
	o.LastRefreshedDate.Unset()
}

// GetVdbRestart returns the VdbRestart field value if set, zero value otherwise.
func (o *VDB) GetVdbRestart() bool {
	if o == nil || IsNil(o.VdbRestart) {
		var ret bool
		return ret
	}
	return *o.VdbRestart
}

// GetVdbRestartOk returns a tuple with the VdbRestart field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VDB) GetVdbRestartOk() (*bool, bool) {
	if o == nil || IsNil(o.VdbRestart) {
		return nil, false
	}
	return o.VdbRestart, true
}

// HasVdbRestart returns a boolean if a field has been set.
func (o *VDB) HasVdbRestart() bool {
	if o != nil && !IsNil(o.VdbRestart) {
		return true
	}

	return false
}

// SetVdbRestart gets a reference to the given bool and assigns it to the VdbRestart field.
func (o *VDB) SetVdbRestart(v bool) {
	o.VdbRestart = &v
}

// GetIsAppdata returns the IsAppdata field value if set, zero value otherwise.
func (o *VDB) GetIsAppdata() bool {
	if o == nil || IsNil(o.IsAppdata) {
		var ret bool
		return ret
	}
	return *o.IsAppdata
}

// GetIsAppdataOk returns a tuple with the IsAppdata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VDB) GetIsAppdataOk() (*bool, bool) {
	if o == nil || IsNil(o.IsAppdata) {
		return nil, false
	}
	return o.IsAppdata, true
}

// HasIsAppdata returns a boolean if a field has been set.
func (o *VDB) HasIsAppdata() bool {
	if o != nil && !IsNil(o.IsAppdata) {
		return true
	}

	return false
}

// SetIsAppdata gets a reference to the given bool and assigns it to the IsAppdata field.
func (o *VDB) SetIsAppdata(v bool) {
	o.IsAppdata = &v
}

// GetExportedDataDirectory returns the ExportedDataDirectory field value if set, zero value otherwise.
func (o *VDB) GetExportedDataDirectory() string {
	if o == nil || IsNil(o.ExportedDataDirectory) {
		var ret string
		return ret
	}
	return *o.ExportedDataDirectory
}

// GetExportedDataDirectoryOk returns a tuple with the ExportedDataDirectory field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VDB) GetExportedDataDirectoryOk() (*string, bool) {
	if o == nil || IsNil(o.ExportedDataDirectory) {
		return nil, false
	}
	return o.ExportedDataDirectory, true
}

// HasExportedDataDirectory returns a boolean if a field has been set.
func (o *VDB) HasExportedDataDirectory() bool {
	if o != nil && !IsNil(o.ExportedDataDirectory) {
		return true
	}

	return false
}

// SetExportedDataDirectory gets a reference to the given string and assigns it to the ExportedDataDirectory field.
func (o *VDB) SetExportedDataDirectory(v string) {
	o.ExportedDataDirectory = &v
}

// GetVcdbExportedDataDirectory returns the VcdbExportedDataDirectory field value if set, zero value otherwise.
func (o *VDB) GetVcdbExportedDataDirectory() string {
	if o == nil || IsNil(o.VcdbExportedDataDirectory) {
		var ret string
		return ret
	}
	return *o.VcdbExportedDataDirectory
}

// GetVcdbExportedDataDirectoryOk returns a tuple with the VcdbExportedDataDirectory field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VDB) GetVcdbExportedDataDirectoryOk() (*string, bool) {
	if o == nil || IsNil(o.VcdbExportedDataDirectory) {
		return nil, false
	}
	return o.VcdbExportedDataDirectory, true
}

// HasVcdbExportedDataDirectory returns a boolean if a field has been set.
func (o *VDB) HasVcdbExportedDataDirectory() bool {
	if o != nil && !IsNil(o.VcdbExportedDataDirectory) {
		return true
	}

	return false
}

// SetVcdbExportedDataDirectory gets a reference to the given string and assigns it to the VcdbExportedDataDirectory field.
func (o *VDB) SetVcdbExportedDataDirectory(v string) {
	o.VcdbExportedDataDirectory = &v
}

// GetToolkitId returns the ToolkitId field value if set, zero value otherwise.
func (o *VDB) GetToolkitId() string {
	if o == nil || IsNil(o.ToolkitId) {
		var ret string
		return ret
	}
	return *o.ToolkitId
}

// GetToolkitIdOk returns a tuple with the ToolkitId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VDB) GetToolkitIdOk() (*string, bool) {
	if o == nil || IsNil(o.ToolkitId) {
		return nil, false
	}
	return o.ToolkitId, true
}

// HasToolkitId returns a boolean if a field has been set.
func (o *VDB) HasToolkitId() bool {
	if o != nil && !IsNil(o.ToolkitId) {
		return true
	}

	return false
}

// SetToolkitId gets a reference to the given string and assigns it to the ToolkitId field.
func (o *VDB) SetToolkitId(v string) {
	o.ToolkitId = &v
}

// GetPluginVersion returns the PluginVersion field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VDB) GetPluginVersion() string {
	if o == nil || IsNil(o.PluginVersion.Get()) {
		var ret string
		return ret
	}
	return *o.PluginVersion.Get()
}

// GetPluginVersionOk returns a tuple with the PluginVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VDB) GetPluginVersionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.PluginVersion.Get(), o.PluginVersion.IsSet()
}

// HasPluginVersion returns a boolean if a field has been set.
func (o *VDB) HasPluginVersion() bool {
	if o != nil && o.PluginVersion.IsSet() {
		return true
	}

	return false
}

// SetPluginVersion gets a reference to the given NullableString and assigns it to the PluginVersion field.
func (o *VDB) SetPluginVersion(v string) {
	o.PluginVersion.Set(&v)
}
// SetPluginVersionNil sets the value for PluginVersion to be an explicit nil
func (o *VDB) SetPluginVersionNil() {
	o.PluginVersion.Set(nil)
}

// UnsetPluginVersion ensures that no value is present for PluginVersion, not even an explicit nil
func (o *VDB) UnsetPluginVersion() {
	o.PluginVersion.Unset()
}

// GetPrimaryObjectId returns the PrimaryObjectId field value if set, zero value otherwise.
func (o *VDB) GetPrimaryObjectId() string {
	if o == nil || IsNil(o.PrimaryObjectId) {
		var ret string
		return ret
	}
	return *o.PrimaryObjectId
}

// GetPrimaryObjectIdOk returns a tuple with the PrimaryObjectId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VDB) GetPrimaryObjectIdOk() (*string, bool) {
	if o == nil || IsNil(o.PrimaryObjectId) {
		return nil, false
	}
	return o.PrimaryObjectId, true
}

// HasPrimaryObjectId returns a boolean if a field has been set.
func (o *VDB) HasPrimaryObjectId() bool {
	if o != nil && !IsNil(o.PrimaryObjectId) {
		return true
	}

	return false
}

// SetPrimaryObjectId gets a reference to the given string and assigns it to the PrimaryObjectId field.
func (o *VDB) SetPrimaryObjectId(v string) {
	o.PrimaryObjectId = &v
}

// GetPrimaryEngineId returns the PrimaryEngineId field value if set, zero value otherwise.
func (o *VDB) GetPrimaryEngineId() string {
	if o == nil || IsNil(o.PrimaryEngineId) {
		var ret string
		return ret
	}
	return *o.PrimaryEngineId
}

// GetPrimaryEngineIdOk returns a tuple with the PrimaryEngineId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VDB) GetPrimaryEngineIdOk() (*string, bool) {
	if o == nil || IsNil(o.PrimaryEngineId) {
		return nil, false
	}
	return o.PrimaryEngineId, true
}

// HasPrimaryEngineId returns a boolean if a field has been set.
func (o *VDB) HasPrimaryEngineId() bool {
	if o != nil && !IsNil(o.PrimaryEngineId) {
		return true
	}

	return false
}

// SetPrimaryEngineId gets a reference to the given string and assigns it to the PrimaryEngineId field.
func (o *VDB) SetPrimaryEngineId(v string) {
	o.PrimaryEngineId = &v
}

// GetPrimaryEngineName returns the PrimaryEngineName field value if set, zero value otherwise.
func (o *VDB) GetPrimaryEngineName() string {
	if o == nil || IsNil(o.PrimaryEngineName) {
		var ret string
		return ret
	}
	return *o.PrimaryEngineName
}

// GetPrimaryEngineNameOk returns a tuple with the PrimaryEngineName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VDB) GetPrimaryEngineNameOk() (*string, bool) {
	if o == nil || IsNil(o.PrimaryEngineName) {
		return nil, false
	}
	return o.PrimaryEngineName, true
}

// HasPrimaryEngineName returns a boolean if a field has been set.
func (o *VDB) HasPrimaryEngineName() bool {
	if o != nil && !IsNil(o.PrimaryEngineName) {
		return true
	}

	return false
}

// SetPrimaryEngineName gets a reference to the given string and assigns it to the PrimaryEngineName field.
func (o *VDB) SetPrimaryEngineName(v string) {
	o.PrimaryEngineName = &v
}

// GetReplicas returns the Replicas field value if set, zero value otherwise.
func (o *VDB) GetReplicas() []Replica {
	if o == nil || IsNil(o.Replicas) {
		var ret []Replica
		return ret
	}
	return o.Replicas
}

// GetReplicasOk returns a tuple with the Replicas field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VDB) GetReplicasOk() ([]Replica, bool) {
	if o == nil || IsNil(o.Replicas) {
		return nil, false
	}
	return o.Replicas, true
}

// HasReplicas returns a boolean if a field has been set.
func (o *VDB) HasReplicas() bool {
	if o != nil && !IsNil(o.Replicas) {
		return true
	}

	return false
}

// SetReplicas gets a reference to the given []Replica and assigns it to the Replicas field.
func (o *VDB) SetReplicas(v []Replica) {
	o.Replicas = v
}

// GetInvokeDatapatch returns the InvokeDatapatch field value if set, zero value otherwise.
func (o *VDB) GetInvokeDatapatch() bool {
	if o == nil || IsNil(o.InvokeDatapatch) {
		var ret bool
		return ret
	}
	return *o.InvokeDatapatch
}

// GetInvokeDatapatchOk returns a tuple with the InvokeDatapatch field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VDB) GetInvokeDatapatchOk() (*bool, bool) {
	if o == nil || IsNil(o.InvokeDatapatch) {
		return nil, false
	}
	return o.InvokeDatapatch, true
}

// HasInvokeDatapatch returns a boolean if a field has been set.
func (o *VDB) HasInvokeDatapatch() bool {
	if o != nil && !IsNil(o.InvokeDatapatch) {
		return true
	}

	return false
}

// SetInvokeDatapatch gets a reference to the given bool and assigns it to the InvokeDatapatch field.
func (o *VDB) SetInvokeDatapatch(v bool) {
	o.InvokeDatapatch = &v
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *VDB) GetEnabled() bool {
	if o == nil || IsNil(o.Enabled) {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VDB) GetEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Enabled) {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *VDB) HasEnabled() bool {
	if o != nil && !IsNil(o.Enabled) {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *VDB) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetNodeListeners returns the NodeListeners field value if set, zero value otherwise.
func (o *VDB) GetNodeListeners() []string {
	if o == nil || IsNil(o.NodeListeners) {
		var ret []string
		return ret
	}
	return o.NodeListeners
}

// GetNodeListenersOk returns a tuple with the NodeListeners field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VDB) GetNodeListenersOk() ([]string, bool) {
	if o == nil || IsNil(o.NodeListeners) {
		return nil, false
	}
	return o.NodeListeners, true
}

// HasNodeListeners returns a boolean if a field has been set.
func (o *VDB) HasNodeListeners() bool {
	if o != nil && !IsNil(o.NodeListeners) {
		return true
	}

	return false
}

// SetNodeListeners gets a reference to the given []string and assigns it to the NodeListeners field.
func (o *VDB) SetNodeListeners(v []string) {
	o.NodeListeners = v
}

// GetInstanceName returns the InstanceName field value if set, zero value otherwise.
func (o *VDB) GetInstanceName() string {
	if o == nil || IsNil(o.InstanceName) {
		var ret string
		return ret
	}
	return *o.InstanceName
}

// GetInstanceNameOk returns a tuple with the InstanceName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VDB) GetInstanceNameOk() (*string, bool) {
	if o == nil || IsNil(o.InstanceName) {
		return nil, false
	}
	return o.InstanceName, true
}

// HasInstanceName returns a boolean if a field has been set.
func (o *VDB) HasInstanceName() bool {
	if o != nil && !IsNil(o.InstanceName) {
		return true
	}

	return false
}

// SetInstanceName gets a reference to the given string and assigns it to the InstanceName field.
func (o *VDB) SetInstanceName(v string) {
	o.InstanceName = &v
}

// GetInstanceNumber returns the InstanceNumber field value if set, zero value otherwise.
func (o *VDB) GetInstanceNumber() int32 {
	if o == nil || IsNil(o.InstanceNumber) {
		var ret int32
		return ret
	}
	return *o.InstanceNumber
}

// GetInstanceNumberOk returns a tuple with the InstanceNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VDB) GetInstanceNumberOk() (*int32, bool) {
	if o == nil || IsNil(o.InstanceNumber) {
		return nil, false
	}
	return o.InstanceNumber, true
}

// HasInstanceNumber returns a boolean if a field has been set.
func (o *VDB) HasInstanceNumber() bool {
	if o != nil && !IsNil(o.InstanceNumber) {
		return true
	}

	return false
}

// SetInstanceNumber gets a reference to the given int32 and assigns it to the InstanceNumber field.
func (o *VDB) SetInstanceNumber(v int32) {
	o.InstanceNumber = &v
}

// GetInstances returns the Instances field value if set, zero value otherwise.
func (o *VDB) GetInstances() []OracleRACDatabaseInstance {
	if o == nil || IsNil(o.Instances) {
		var ret []OracleRACDatabaseInstance
		return ret
	}
	return o.Instances
}

// GetInstancesOk returns a tuple with the Instances field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VDB) GetInstancesOk() ([]OracleRACDatabaseInstance, bool) {
	if o == nil || IsNil(o.Instances) {
		return nil, false
	}
	return o.Instances, true
}

// HasInstances returns a boolean if a field has been set.
func (o *VDB) HasInstances() bool {
	if o != nil && !IsNil(o.Instances) {
		return true
	}

	return false
}

// SetInstances gets a reference to the given []OracleRACDatabaseInstance and assigns it to the Instances field.
func (o *VDB) SetInstances(v []OracleRACDatabaseInstance) {
	o.Instances = v
}

// GetOracleServices returns the OracleServices field value if set, zero value otherwise.
func (o *VDB) GetOracleServices() []OracleService {
	if o == nil || IsNil(o.OracleServices) {
		var ret []OracleService
		return ret
	}
	return o.OracleServices
}

// GetOracleServicesOk returns a tuple with the OracleServices field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VDB) GetOracleServicesOk() ([]OracleService, bool) {
	if o == nil || IsNil(o.OracleServices) {
		return nil, false
	}
	return o.OracleServices, true
}

// HasOracleServices returns a boolean if a field has been set.
func (o *VDB) HasOracleServices() bool {
	if o != nil && !IsNil(o.OracleServices) {
		return true
	}

	return false
}

// SetOracleServices gets a reference to the given []OracleService and assigns it to the OracleServices field.
func (o *VDB) SetOracleServices(v []OracleService) {
	o.OracleServices = v
}

// GetRepositoryId returns the RepositoryId field value if set, zero value otherwise.
func (o *VDB) GetRepositoryId() string {
	if o == nil || IsNil(o.RepositoryId) {
		var ret string
		return ret
	}
	return *o.RepositoryId
}

// GetRepositoryIdOk returns a tuple with the RepositoryId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VDB) GetRepositoryIdOk() (*string, bool) {
	if o == nil || IsNil(o.RepositoryId) {
		return nil, false
	}
	return o.RepositoryId, true
}

// HasRepositoryId returns a boolean if a field has been set.
func (o *VDB) HasRepositoryId() bool {
	if o != nil && !IsNil(o.RepositoryId) {
		return true
	}

	return false
}

// SetRepositoryId gets a reference to the given string and assigns it to the RepositoryId field.
func (o *VDB) SetRepositoryId(v string) {
	o.RepositoryId = &v
}

func (o VDB) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VDB) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if o.DatabaseType.IsSet() {
		toSerialize["database_type"] = o.DatabaseType.Get()
	}
	if o.Name.IsSet() {
		toSerialize["name"] = o.Name.Get()
	}
	if !IsNil(o.DatabaseName) {
		toSerialize["database_name"] = o.DatabaseName
	}
	if !IsNil(o.NamespaceId) {
		toSerialize["namespace_id"] = o.NamespaceId
	}
	if !IsNil(o.NamespaceName) {
		toSerialize["namespace_name"] = o.NamespaceName
	}
	if !IsNil(o.IsReplica) {
		toSerialize["is_replica"] = o.IsReplica
	}
	if !IsNil(o.IsLocked) {
		toSerialize["is_locked"] = o.IsLocked
	}
	if !IsNil(o.LockedBy) {
		toSerialize["locked_by"] = o.LockedBy
	}
	if !IsNil(o.LockedByName) {
		toSerialize["locked_by_name"] = o.LockedByName
	}
	if o.DatabaseVersion.IsSet() {
		toSerialize["database_version"] = o.DatabaseVersion.Get()
	}
	if !IsNil(o.JdbcConnectionString) {
		toSerialize["jdbc_connection_string"] = o.JdbcConnectionString
	}
	if o.Size.IsSet() {
		toSerialize["size"] = o.Size.Get()
	}
	if o.StorageSize.IsSet() {
		toSerialize["storage_size"] = o.StorageSize.Get()
	}
	if !IsNil(o.EngineId) {
		toSerialize["engine_id"] = o.EngineId
	}
	if o.Status.IsSet() {
		toSerialize["status"] = o.Status.Get()
	}
	if o.Masked.IsSet() {
		toSerialize["masked"] = o.Masked.Get()
	}
	if o.ContentType.IsSet() {
		toSerialize["content_type"] = o.ContentType.Get()
	}
	if o.ParentTimeflowTimestamp.IsSet() {
		toSerialize["parent_timeflow_timestamp"] = o.ParentTimeflowTimestamp.Get()
	}
	if o.ParentTimeflowTimezone.IsSet() {
		toSerialize["parent_timeflow_timezone"] = o.ParentTimeflowTimezone.Get()
	}
	if o.EnvironmentId.IsSet() {
		toSerialize["environment_id"] = o.EnvironmentId.Get()
	}
	if o.IpAddress.IsSet() {
		toSerialize["ip_address"] = o.IpAddress.Get()
	}
	if o.Fqdn.IsSet() {
		toSerialize["fqdn"] = o.Fqdn.Get()
	}
	if o.ParentId.IsSet() {
		toSerialize["parent_id"] = o.ParentId.Get()
	}
	if o.ParentDsourceId.IsSet() {
		toSerialize["parent_dsource_id"] = o.ParentDsourceId.Get()
	}
	if o.RootParentId.IsSet() {
		toSerialize["root_parent_id"] = o.RootParentId.Get()
	}
	if o.GroupName.IsSet() {
		toSerialize["group_name"] = o.GroupName.Get()
	}
	if o.EngineName.IsSet() {
		toSerialize["engine_name"] = o.EngineName.Get()
	}
	if o.CdbId.IsSet() {
		toSerialize["cdb_id"] = o.CdbId.Get()
	}
	if !IsNil(o.Tags) {
		toSerialize["tags"] = o.Tags
	}
	if o.CreationDate.IsSet() {
		toSerialize["creation_date"] = o.CreationDate.Get()
	}
	if !IsNil(o.Hooks) {
		toSerialize["hooks"] = o.Hooks
	}
	if o.AppdataSourceParams != nil {
		toSerialize["appdata_source_params"] = o.AppdataSourceParams
	}
	if o.TemplateId.IsSet() {
		toSerialize["template_id"] = o.TemplateId.Get()
	}
	if o.ConfigParams != nil {
		toSerialize["config_params"] = o.ConfigParams
	}
	if o.AdditionalMountPoints != nil {
		toSerialize["additional_mount_points"] = o.AdditionalMountPoints
	}
	if o.AppdataConfigParams != nil {
		toSerialize["appdata_config_params"] = o.AppdataConfigParams
	}
	if !IsNil(o.MountPoint) {
		toSerialize["mount_point"] = o.MountPoint
	}
	if !IsNil(o.CurrentTimeflowId) {
		toSerialize["current_timeflow_id"] = o.CurrentTimeflowId
	}
	if !IsNil(o.PreviousTimeflowId) {
		toSerialize["previous_timeflow_id"] = o.PreviousTimeflowId
	}
	if o.LastRefreshedDate.IsSet() {
		toSerialize["last_refreshed_date"] = o.LastRefreshedDate.Get()
	}
	if !IsNil(o.VdbRestart) {
		toSerialize["vdb_restart"] = o.VdbRestart
	}
	if !IsNil(o.IsAppdata) {
		toSerialize["is_appdata"] = o.IsAppdata
	}
	if !IsNil(o.ExportedDataDirectory) {
		toSerialize["exported_data_directory"] = o.ExportedDataDirectory
	}
	if !IsNil(o.VcdbExportedDataDirectory) {
		toSerialize["vcdb_exported_data_directory"] = o.VcdbExportedDataDirectory
	}
	if !IsNil(o.ToolkitId) {
		toSerialize["toolkit_id"] = o.ToolkitId
	}
	if o.PluginVersion.IsSet() {
		toSerialize["plugin_version"] = o.PluginVersion.Get()
	}
	if !IsNil(o.PrimaryObjectId) {
		toSerialize["primary_object_id"] = o.PrimaryObjectId
	}
	if !IsNil(o.PrimaryEngineId) {
		toSerialize["primary_engine_id"] = o.PrimaryEngineId
	}
	if !IsNil(o.PrimaryEngineName) {
		toSerialize["primary_engine_name"] = o.PrimaryEngineName
	}
	if !IsNil(o.Replicas) {
		toSerialize["replicas"] = o.Replicas
	}
	if !IsNil(o.InvokeDatapatch) {
		toSerialize["invoke_datapatch"] = o.InvokeDatapatch
	}
	if !IsNil(o.Enabled) {
		toSerialize["enabled"] = o.Enabled
	}
	if !IsNil(o.NodeListeners) {
		toSerialize["node_listeners"] = o.NodeListeners
	}
	if !IsNil(o.InstanceName) {
		toSerialize["instance_name"] = o.InstanceName
	}
	if !IsNil(o.InstanceNumber) {
		toSerialize["instance_number"] = o.InstanceNumber
	}
	if !IsNil(o.Instances) {
		toSerialize["instances"] = o.Instances
	}
	if !IsNil(o.OracleServices) {
		toSerialize["oracle_services"] = o.OracleServices
	}
	if !IsNil(o.RepositoryId) {
		toSerialize["repository_id"] = o.RepositoryId
	}
	return toSerialize, nil
}

type NullableVDB struct {
	value *VDB
	isSet bool
}

func (v NullableVDB) Get() *VDB {
	return v.value
}

func (v *NullableVDB) Set(val *VDB) {
	v.value = val
	v.isSet = true
}

func (v NullableVDB) IsSet() bool {
	return v.isSet
}

func (v *NullableVDB) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVDB(val *VDB) *NullableVDB {
	return &NullableVDB{value: val, isSet: true}
}

func (v NullableVDB) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVDB) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


