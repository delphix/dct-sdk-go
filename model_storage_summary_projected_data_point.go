/*
Delphix DCT API

Delphix DCT API

API version: 3.18.0
Contact: support@delphix.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package delphix_dct_api

import (
	"encoding/json"
)

// checks if the StorageSummaryProjectedDataPoint type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &StorageSummaryProjectedDataPoint{}

// StorageSummaryProjectedDataPoint struct for StorageSummaryProjectedDataPoint
type StorageSummaryProjectedDataPoint struct {
	Timestamp *string `json:"timestamp,omitempty"`
	// The projected amount of storage used by engine objects and reserved space, in bytes.
	UsedStorage *int64 `json:"used_storage,omitempty"`
}

// NewStorageSummaryProjectedDataPoint instantiates a new StorageSummaryProjectedDataPoint object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStorageSummaryProjectedDataPoint() *StorageSummaryProjectedDataPoint {
	this := StorageSummaryProjectedDataPoint{}
	return &this
}

// NewStorageSummaryProjectedDataPointWithDefaults instantiates a new StorageSummaryProjectedDataPoint object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStorageSummaryProjectedDataPointWithDefaults() *StorageSummaryProjectedDataPoint {
	this := StorageSummaryProjectedDataPoint{}
	return &this
}

// GetTimestamp returns the Timestamp field value if set, zero value otherwise.
func (o *StorageSummaryProjectedDataPoint) GetTimestamp() string {
	if o == nil || IsNil(o.Timestamp) {
		var ret string
		return ret
	}
	return *o.Timestamp
}

// GetTimestampOk returns a tuple with the Timestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageSummaryProjectedDataPoint) GetTimestampOk() (*string, bool) {
	if o == nil || IsNil(o.Timestamp) {
		return nil, false
	}
	return o.Timestamp, true
}

// HasTimestamp returns a boolean if a field has been set.
func (o *StorageSummaryProjectedDataPoint) HasTimestamp() bool {
	if o != nil && !IsNil(o.Timestamp) {
		return true
	}

	return false
}

// SetTimestamp gets a reference to the given string and assigns it to the Timestamp field.
func (o *StorageSummaryProjectedDataPoint) SetTimestamp(v string) {
	o.Timestamp = &v
}

// GetUsedStorage returns the UsedStorage field value if set, zero value otherwise.
func (o *StorageSummaryProjectedDataPoint) GetUsedStorage() int64 {
	if o == nil || IsNil(o.UsedStorage) {
		var ret int64
		return ret
	}
	return *o.UsedStorage
}

// GetUsedStorageOk returns a tuple with the UsedStorage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageSummaryProjectedDataPoint) GetUsedStorageOk() (*int64, bool) {
	if o == nil || IsNil(o.UsedStorage) {
		return nil, false
	}
	return o.UsedStorage, true
}

// HasUsedStorage returns a boolean if a field has been set.
func (o *StorageSummaryProjectedDataPoint) HasUsedStorage() bool {
	if o != nil && !IsNil(o.UsedStorage) {
		return true
	}

	return false
}

// SetUsedStorage gets a reference to the given int64 and assigns it to the UsedStorage field.
func (o *StorageSummaryProjectedDataPoint) SetUsedStorage(v int64) {
	o.UsedStorage = &v
}

func (o StorageSummaryProjectedDataPoint) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o StorageSummaryProjectedDataPoint) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Timestamp) {
		toSerialize["timestamp"] = o.Timestamp
	}
	if !IsNil(o.UsedStorage) {
		toSerialize["used_storage"] = o.UsedStorage
	}
	return toSerialize, nil
}

type NullableStorageSummaryProjectedDataPoint struct {
	value *StorageSummaryProjectedDataPoint
	isSet bool
}

func (v NullableStorageSummaryProjectedDataPoint) Get() *StorageSummaryProjectedDataPoint {
	return v.value
}

func (v *NullableStorageSummaryProjectedDataPoint) Set(val *StorageSummaryProjectedDataPoint) {
	v.value = val
	v.isSet = true
}

func (v NullableStorageSummaryProjectedDataPoint) IsSet() bool {
	return v.isSet
}

func (v *NullableStorageSummaryProjectedDataPoint) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStorageSummaryProjectedDataPoint(val *StorageSummaryProjectedDataPoint) *NullableStorageSummaryProjectedDataPoint {
	return &NullableStorageSummaryProjectedDataPoint{value: val, isSet: true}
}

func (v NullableStorageSummaryProjectedDataPoint) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStorageSummaryProjectedDataPoint) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


