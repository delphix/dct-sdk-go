/*
Delphix DCT API

Delphix DCT API

API version: 3.18.0
Contact: support@delphix.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package delphix_dct_api

import (
	"encoding/json"
	"time"
)

// checks if the VirtualizationAlert type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VirtualizationAlert{}

// VirtualizationAlert An alert on a virtualization engine.
type VirtualizationAlert struct {
	// ID of the virtualization engine alert.
	Id *string `json:"id,omitempty"`
	// ID of the RegisteredEngine.
	EngineId *string `json:"engine_id,omitempty"`
	// The time the alert occurred.
	AlertTimestamp *time.Time `json:"alert_timestamp,omitempty"`
	// The event that caused the alert.
	Event *string `json:"event,omitempty"`
	// The severity of the alert.
	EventSeverity *string `json:"event_severity,omitempty"`
	// The title of the event.
	EventTitle *string `json:"event_title,omitempty"`
	// The response needed to address the event.
	EventResponse *string `json:"event_response,omitempty"`
	// Action(s) to be taken to address the event.
	EventAction *string `json:"event_action,omitempty"`
	// Command output associated with the event.
	EventCommandOutput *string `json:"event_command_output,omitempty"`
	// Description of the event.
	EventDescription *string `json:"event_description,omitempty"`
	// The type of the target object for the event.
	TargetObjectType *string `json:"target_object_type,omitempty"`
	// The ID of the target object.
	TargetObjectId *string `json:"target_object_id,omitempty"`
	// The name of the target object.
	TargetName *string `json:"target_name,omitempty"`
}

// NewVirtualizationAlert instantiates a new VirtualizationAlert object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVirtualizationAlert() *VirtualizationAlert {
	this := VirtualizationAlert{}
	return &this
}

// NewVirtualizationAlertWithDefaults instantiates a new VirtualizationAlert object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVirtualizationAlertWithDefaults() *VirtualizationAlert {
	this := VirtualizationAlert{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *VirtualizationAlert) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualizationAlert) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *VirtualizationAlert) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *VirtualizationAlert) SetId(v string) {
	o.Id = &v
}

// GetEngineId returns the EngineId field value if set, zero value otherwise.
func (o *VirtualizationAlert) GetEngineId() string {
	if o == nil || IsNil(o.EngineId) {
		var ret string
		return ret
	}
	return *o.EngineId
}

// GetEngineIdOk returns a tuple with the EngineId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualizationAlert) GetEngineIdOk() (*string, bool) {
	if o == nil || IsNil(o.EngineId) {
		return nil, false
	}
	return o.EngineId, true
}

// HasEngineId returns a boolean if a field has been set.
func (o *VirtualizationAlert) HasEngineId() bool {
	if o != nil && !IsNil(o.EngineId) {
		return true
	}

	return false
}

// SetEngineId gets a reference to the given string and assigns it to the EngineId field.
func (o *VirtualizationAlert) SetEngineId(v string) {
	o.EngineId = &v
}

// GetAlertTimestamp returns the AlertTimestamp field value if set, zero value otherwise.
func (o *VirtualizationAlert) GetAlertTimestamp() time.Time {
	if o == nil || IsNil(o.AlertTimestamp) {
		var ret time.Time
		return ret
	}
	return *o.AlertTimestamp
}

// GetAlertTimestampOk returns a tuple with the AlertTimestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualizationAlert) GetAlertTimestampOk() (*time.Time, bool) {
	if o == nil || IsNil(o.AlertTimestamp) {
		return nil, false
	}
	return o.AlertTimestamp, true
}

// HasAlertTimestamp returns a boolean if a field has been set.
func (o *VirtualizationAlert) HasAlertTimestamp() bool {
	if o != nil && !IsNil(o.AlertTimestamp) {
		return true
	}

	return false
}

// SetAlertTimestamp gets a reference to the given time.Time and assigns it to the AlertTimestamp field.
func (o *VirtualizationAlert) SetAlertTimestamp(v time.Time) {
	o.AlertTimestamp = &v
}

// GetEvent returns the Event field value if set, zero value otherwise.
func (o *VirtualizationAlert) GetEvent() string {
	if o == nil || IsNil(o.Event) {
		var ret string
		return ret
	}
	return *o.Event
}

// GetEventOk returns a tuple with the Event field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualizationAlert) GetEventOk() (*string, bool) {
	if o == nil || IsNil(o.Event) {
		return nil, false
	}
	return o.Event, true
}

// HasEvent returns a boolean if a field has been set.
func (o *VirtualizationAlert) HasEvent() bool {
	if o != nil && !IsNil(o.Event) {
		return true
	}

	return false
}

// SetEvent gets a reference to the given string and assigns it to the Event field.
func (o *VirtualizationAlert) SetEvent(v string) {
	o.Event = &v
}

// GetEventSeverity returns the EventSeverity field value if set, zero value otherwise.
func (o *VirtualizationAlert) GetEventSeverity() string {
	if o == nil || IsNil(o.EventSeverity) {
		var ret string
		return ret
	}
	return *o.EventSeverity
}

// GetEventSeverityOk returns a tuple with the EventSeverity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualizationAlert) GetEventSeverityOk() (*string, bool) {
	if o == nil || IsNil(o.EventSeverity) {
		return nil, false
	}
	return o.EventSeverity, true
}

// HasEventSeverity returns a boolean if a field has been set.
func (o *VirtualizationAlert) HasEventSeverity() bool {
	if o != nil && !IsNil(o.EventSeverity) {
		return true
	}

	return false
}

// SetEventSeverity gets a reference to the given string and assigns it to the EventSeverity field.
func (o *VirtualizationAlert) SetEventSeverity(v string) {
	o.EventSeverity = &v
}

// GetEventTitle returns the EventTitle field value if set, zero value otherwise.
func (o *VirtualizationAlert) GetEventTitle() string {
	if o == nil || IsNil(o.EventTitle) {
		var ret string
		return ret
	}
	return *o.EventTitle
}

// GetEventTitleOk returns a tuple with the EventTitle field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualizationAlert) GetEventTitleOk() (*string, bool) {
	if o == nil || IsNil(o.EventTitle) {
		return nil, false
	}
	return o.EventTitle, true
}

// HasEventTitle returns a boolean if a field has been set.
func (o *VirtualizationAlert) HasEventTitle() bool {
	if o != nil && !IsNil(o.EventTitle) {
		return true
	}

	return false
}

// SetEventTitle gets a reference to the given string and assigns it to the EventTitle field.
func (o *VirtualizationAlert) SetEventTitle(v string) {
	o.EventTitle = &v
}

// GetEventResponse returns the EventResponse field value if set, zero value otherwise.
func (o *VirtualizationAlert) GetEventResponse() string {
	if o == nil || IsNil(o.EventResponse) {
		var ret string
		return ret
	}
	return *o.EventResponse
}

// GetEventResponseOk returns a tuple with the EventResponse field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualizationAlert) GetEventResponseOk() (*string, bool) {
	if o == nil || IsNil(o.EventResponse) {
		return nil, false
	}
	return o.EventResponse, true
}

// HasEventResponse returns a boolean if a field has been set.
func (o *VirtualizationAlert) HasEventResponse() bool {
	if o != nil && !IsNil(o.EventResponse) {
		return true
	}

	return false
}

// SetEventResponse gets a reference to the given string and assigns it to the EventResponse field.
func (o *VirtualizationAlert) SetEventResponse(v string) {
	o.EventResponse = &v
}

// GetEventAction returns the EventAction field value if set, zero value otherwise.
func (o *VirtualizationAlert) GetEventAction() string {
	if o == nil || IsNil(o.EventAction) {
		var ret string
		return ret
	}
	return *o.EventAction
}

// GetEventActionOk returns a tuple with the EventAction field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualizationAlert) GetEventActionOk() (*string, bool) {
	if o == nil || IsNil(o.EventAction) {
		return nil, false
	}
	return o.EventAction, true
}

// HasEventAction returns a boolean if a field has been set.
func (o *VirtualizationAlert) HasEventAction() bool {
	if o != nil && !IsNil(o.EventAction) {
		return true
	}

	return false
}

// SetEventAction gets a reference to the given string and assigns it to the EventAction field.
func (o *VirtualizationAlert) SetEventAction(v string) {
	o.EventAction = &v
}

// GetEventCommandOutput returns the EventCommandOutput field value if set, zero value otherwise.
func (o *VirtualizationAlert) GetEventCommandOutput() string {
	if o == nil || IsNil(o.EventCommandOutput) {
		var ret string
		return ret
	}
	return *o.EventCommandOutput
}

// GetEventCommandOutputOk returns a tuple with the EventCommandOutput field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualizationAlert) GetEventCommandOutputOk() (*string, bool) {
	if o == nil || IsNil(o.EventCommandOutput) {
		return nil, false
	}
	return o.EventCommandOutput, true
}

// HasEventCommandOutput returns a boolean if a field has been set.
func (o *VirtualizationAlert) HasEventCommandOutput() bool {
	if o != nil && !IsNil(o.EventCommandOutput) {
		return true
	}

	return false
}

// SetEventCommandOutput gets a reference to the given string and assigns it to the EventCommandOutput field.
func (o *VirtualizationAlert) SetEventCommandOutput(v string) {
	o.EventCommandOutput = &v
}

// GetEventDescription returns the EventDescription field value if set, zero value otherwise.
func (o *VirtualizationAlert) GetEventDescription() string {
	if o == nil || IsNil(o.EventDescription) {
		var ret string
		return ret
	}
	return *o.EventDescription
}

// GetEventDescriptionOk returns a tuple with the EventDescription field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualizationAlert) GetEventDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.EventDescription) {
		return nil, false
	}
	return o.EventDescription, true
}

// HasEventDescription returns a boolean if a field has been set.
func (o *VirtualizationAlert) HasEventDescription() bool {
	if o != nil && !IsNil(o.EventDescription) {
		return true
	}

	return false
}

// SetEventDescription gets a reference to the given string and assigns it to the EventDescription field.
func (o *VirtualizationAlert) SetEventDescription(v string) {
	o.EventDescription = &v
}

// GetTargetObjectType returns the TargetObjectType field value if set, zero value otherwise.
func (o *VirtualizationAlert) GetTargetObjectType() string {
	if o == nil || IsNil(o.TargetObjectType) {
		var ret string
		return ret
	}
	return *o.TargetObjectType
}

// GetTargetObjectTypeOk returns a tuple with the TargetObjectType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualizationAlert) GetTargetObjectTypeOk() (*string, bool) {
	if o == nil || IsNil(o.TargetObjectType) {
		return nil, false
	}
	return o.TargetObjectType, true
}

// HasTargetObjectType returns a boolean if a field has been set.
func (o *VirtualizationAlert) HasTargetObjectType() bool {
	if o != nil && !IsNil(o.TargetObjectType) {
		return true
	}

	return false
}

// SetTargetObjectType gets a reference to the given string and assigns it to the TargetObjectType field.
func (o *VirtualizationAlert) SetTargetObjectType(v string) {
	o.TargetObjectType = &v
}

// GetTargetObjectId returns the TargetObjectId field value if set, zero value otherwise.
func (o *VirtualizationAlert) GetTargetObjectId() string {
	if o == nil || IsNil(o.TargetObjectId) {
		var ret string
		return ret
	}
	return *o.TargetObjectId
}

// GetTargetObjectIdOk returns a tuple with the TargetObjectId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualizationAlert) GetTargetObjectIdOk() (*string, bool) {
	if o == nil || IsNil(o.TargetObjectId) {
		return nil, false
	}
	return o.TargetObjectId, true
}

// HasTargetObjectId returns a boolean if a field has been set.
func (o *VirtualizationAlert) HasTargetObjectId() bool {
	if o != nil && !IsNil(o.TargetObjectId) {
		return true
	}

	return false
}

// SetTargetObjectId gets a reference to the given string and assigns it to the TargetObjectId field.
func (o *VirtualizationAlert) SetTargetObjectId(v string) {
	o.TargetObjectId = &v
}

// GetTargetName returns the TargetName field value if set, zero value otherwise.
func (o *VirtualizationAlert) GetTargetName() string {
	if o == nil || IsNil(o.TargetName) {
		var ret string
		return ret
	}
	return *o.TargetName
}

// GetTargetNameOk returns a tuple with the TargetName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualizationAlert) GetTargetNameOk() (*string, bool) {
	if o == nil || IsNil(o.TargetName) {
		return nil, false
	}
	return o.TargetName, true
}

// HasTargetName returns a boolean if a field has been set.
func (o *VirtualizationAlert) HasTargetName() bool {
	if o != nil && !IsNil(o.TargetName) {
		return true
	}

	return false
}

// SetTargetName gets a reference to the given string and assigns it to the TargetName field.
func (o *VirtualizationAlert) SetTargetName(v string) {
	o.TargetName = &v
}

func (o VirtualizationAlert) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VirtualizationAlert) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.EngineId) {
		toSerialize["engine_id"] = o.EngineId
	}
	if !IsNil(o.AlertTimestamp) {
		toSerialize["alert_timestamp"] = o.AlertTimestamp
	}
	if !IsNil(o.Event) {
		toSerialize["event"] = o.Event
	}
	if !IsNil(o.EventSeverity) {
		toSerialize["event_severity"] = o.EventSeverity
	}
	if !IsNil(o.EventTitle) {
		toSerialize["event_title"] = o.EventTitle
	}
	if !IsNil(o.EventResponse) {
		toSerialize["event_response"] = o.EventResponse
	}
	if !IsNil(o.EventAction) {
		toSerialize["event_action"] = o.EventAction
	}
	if !IsNil(o.EventCommandOutput) {
		toSerialize["event_command_output"] = o.EventCommandOutput
	}
	if !IsNil(o.EventDescription) {
		toSerialize["event_description"] = o.EventDescription
	}
	if !IsNil(o.TargetObjectType) {
		toSerialize["target_object_type"] = o.TargetObjectType
	}
	if !IsNil(o.TargetObjectId) {
		toSerialize["target_object_id"] = o.TargetObjectId
	}
	if !IsNil(o.TargetName) {
		toSerialize["target_name"] = o.TargetName
	}
	return toSerialize, nil
}

type NullableVirtualizationAlert struct {
	value *VirtualizationAlert
	isSet bool
}

func (v NullableVirtualizationAlert) Get() *VirtualizationAlert {
	return v.value
}

func (v *NullableVirtualizationAlert) Set(val *VirtualizationAlert) {
	v.value = val
	v.isSet = true
}

func (v NullableVirtualizationAlert) IsSet() bool {
	return v.isSet
}

func (v *NullableVirtualizationAlert) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVirtualizationAlert(val *VirtualizationAlert) *NullableVirtualizationAlert {
	return &NullableVirtualizationAlert{value: val, isSet: true}
}

func (v NullableVirtualizationAlert) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVirtualizationAlert) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


