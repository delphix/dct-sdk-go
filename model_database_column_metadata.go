/*
Delphix DCT API

Delphix DCT API

API version: 3.18.0
Contact: support@delphix.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package delphix_dct_api

import (
	"encoding/json"
)

// checks if the DatabaseColumnMetadata type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DatabaseColumnMetadata{}

// DatabaseColumnMetadata An object describing a database column metadata with some settings.
type DatabaseColumnMetadata struct {
	// The id of this column metadata.
	Id *int64 `json:"id,omitempty"`
	// The name of the column.
	ColumnName *string `json:"column_name,omitempty"`
	// The id of the database table metadata that this column belongs to.
	DatabaseTableMetadataId *int64 `json:"database_table_metadata_id,omitempty"`
	// The name of the table that this column belongs to.
	TableName *string `json:"table_name,omitempty"`
	// The id of the rule set that this column metadata belongs to.
	RuleSetId *string `json:"rule_set_id,omitempty"`
	// The name of the rule set that this table metadata belongs to.
	RuleSetName *string `json:"rule_set_name,omitempty"`
	// The id of the engine associated with this column.
	EngineId *string `json:"engine_id,omitempty"`
	// The name of the engine associated with this column.
	EngineName *string `json:"engine_name,omitempty"`
	// The id of the algorithm associated with this column.
	AlgorithmId *string `json:"algorithm_id,omitempty"`
	// The name of the algorithm associated with this column.
	AlgorithmName *string `json:"algorithm_name,omitempty"`
	// The id of the data class associated with this column.
	DataClassId *string `json:"data_class_id,omitempty"`
	// The name of the data class associated with this column.
	DataClassName *string `json:"data_class_name,omitempty"`
	// The data type of the column.
	DataType *string `json:"data_type,omitempty"`
	// The format of the date stored in the column.
	DateFormat *string `json:"date_format,omitempty"`
	// The length of the column.
	ColumnLength *int32 `json:"column_length,omitempty"`
	// This field indicates whether or not a column has sensitive data.
	IsSensitive *bool `json:"is_sensitive,omitempty"`
	// Indicates whether this column is writable by the profiler.
	IsProfilerWritable *bool `json:"is_profiler_writable,omitempty"`
	// Indicates whether this column is a primary key.
	IsPrimaryKey *bool `json:"is_primary_key,omitempty"`
	// Indicates whether this column is an identity column.
	IsIdentity *bool `json:"is_identity,omitempty"`
	// Indicates whether this column is indexed.
	IsIndex *bool `json:"is_index,omitempty"`
	// Indicates whether this column is a foreign key.
	IsForeignKey *bool `json:"is_foreign_key,omitempty"`
}

// NewDatabaseColumnMetadata instantiates a new DatabaseColumnMetadata object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDatabaseColumnMetadata() *DatabaseColumnMetadata {
	this := DatabaseColumnMetadata{}
	return &this
}

// NewDatabaseColumnMetadataWithDefaults instantiates a new DatabaseColumnMetadata object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDatabaseColumnMetadataWithDefaults() *DatabaseColumnMetadata {
	this := DatabaseColumnMetadata{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *DatabaseColumnMetadata) GetId() int64 {
	if o == nil || IsNil(o.Id) {
		var ret int64
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatabaseColumnMetadata) GetIdOk() (*int64, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *DatabaseColumnMetadata) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int64 and assigns it to the Id field.
func (o *DatabaseColumnMetadata) SetId(v int64) {
	o.Id = &v
}

// GetColumnName returns the ColumnName field value if set, zero value otherwise.
func (o *DatabaseColumnMetadata) GetColumnName() string {
	if o == nil || IsNil(o.ColumnName) {
		var ret string
		return ret
	}
	return *o.ColumnName
}

// GetColumnNameOk returns a tuple with the ColumnName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatabaseColumnMetadata) GetColumnNameOk() (*string, bool) {
	if o == nil || IsNil(o.ColumnName) {
		return nil, false
	}
	return o.ColumnName, true
}

// HasColumnName returns a boolean if a field has been set.
func (o *DatabaseColumnMetadata) HasColumnName() bool {
	if o != nil && !IsNil(o.ColumnName) {
		return true
	}

	return false
}

// SetColumnName gets a reference to the given string and assigns it to the ColumnName field.
func (o *DatabaseColumnMetadata) SetColumnName(v string) {
	o.ColumnName = &v
}

// GetDatabaseTableMetadataId returns the DatabaseTableMetadataId field value if set, zero value otherwise.
func (o *DatabaseColumnMetadata) GetDatabaseTableMetadataId() int64 {
	if o == nil || IsNil(o.DatabaseTableMetadataId) {
		var ret int64
		return ret
	}
	return *o.DatabaseTableMetadataId
}

// GetDatabaseTableMetadataIdOk returns a tuple with the DatabaseTableMetadataId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatabaseColumnMetadata) GetDatabaseTableMetadataIdOk() (*int64, bool) {
	if o == nil || IsNil(o.DatabaseTableMetadataId) {
		return nil, false
	}
	return o.DatabaseTableMetadataId, true
}

// HasDatabaseTableMetadataId returns a boolean if a field has been set.
func (o *DatabaseColumnMetadata) HasDatabaseTableMetadataId() bool {
	if o != nil && !IsNil(o.DatabaseTableMetadataId) {
		return true
	}

	return false
}

// SetDatabaseTableMetadataId gets a reference to the given int64 and assigns it to the DatabaseTableMetadataId field.
func (o *DatabaseColumnMetadata) SetDatabaseTableMetadataId(v int64) {
	o.DatabaseTableMetadataId = &v
}

// GetTableName returns the TableName field value if set, zero value otherwise.
func (o *DatabaseColumnMetadata) GetTableName() string {
	if o == nil || IsNil(o.TableName) {
		var ret string
		return ret
	}
	return *o.TableName
}

// GetTableNameOk returns a tuple with the TableName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatabaseColumnMetadata) GetTableNameOk() (*string, bool) {
	if o == nil || IsNil(o.TableName) {
		return nil, false
	}
	return o.TableName, true
}

// HasTableName returns a boolean if a field has been set.
func (o *DatabaseColumnMetadata) HasTableName() bool {
	if o != nil && !IsNil(o.TableName) {
		return true
	}

	return false
}

// SetTableName gets a reference to the given string and assigns it to the TableName field.
func (o *DatabaseColumnMetadata) SetTableName(v string) {
	o.TableName = &v
}

// GetRuleSetId returns the RuleSetId field value if set, zero value otherwise.
func (o *DatabaseColumnMetadata) GetRuleSetId() string {
	if o == nil || IsNil(o.RuleSetId) {
		var ret string
		return ret
	}
	return *o.RuleSetId
}

// GetRuleSetIdOk returns a tuple with the RuleSetId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatabaseColumnMetadata) GetRuleSetIdOk() (*string, bool) {
	if o == nil || IsNil(o.RuleSetId) {
		return nil, false
	}
	return o.RuleSetId, true
}

// HasRuleSetId returns a boolean if a field has been set.
func (o *DatabaseColumnMetadata) HasRuleSetId() bool {
	if o != nil && !IsNil(o.RuleSetId) {
		return true
	}

	return false
}

// SetRuleSetId gets a reference to the given string and assigns it to the RuleSetId field.
func (o *DatabaseColumnMetadata) SetRuleSetId(v string) {
	o.RuleSetId = &v
}

// GetRuleSetName returns the RuleSetName field value if set, zero value otherwise.
func (o *DatabaseColumnMetadata) GetRuleSetName() string {
	if o == nil || IsNil(o.RuleSetName) {
		var ret string
		return ret
	}
	return *o.RuleSetName
}

// GetRuleSetNameOk returns a tuple with the RuleSetName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatabaseColumnMetadata) GetRuleSetNameOk() (*string, bool) {
	if o == nil || IsNil(o.RuleSetName) {
		return nil, false
	}
	return o.RuleSetName, true
}

// HasRuleSetName returns a boolean if a field has been set.
func (o *DatabaseColumnMetadata) HasRuleSetName() bool {
	if o != nil && !IsNil(o.RuleSetName) {
		return true
	}

	return false
}

// SetRuleSetName gets a reference to the given string and assigns it to the RuleSetName field.
func (o *DatabaseColumnMetadata) SetRuleSetName(v string) {
	o.RuleSetName = &v
}

// GetEngineId returns the EngineId field value if set, zero value otherwise.
func (o *DatabaseColumnMetadata) GetEngineId() string {
	if o == nil || IsNil(o.EngineId) {
		var ret string
		return ret
	}
	return *o.EngineId
}

// GetEngineIdOk returns a tuple with the EngineId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatabaseColumnMetadata) GetEngineIdOk() (*string, bool) {
	if o == nil || IsNil(o.EngineId) {
		return nil, false
	}
	return o.EngineId, true
}

// HasEngineId returns a boolean if a field has been set.
func (o *DatabaseColumnMetadata) HasEngineId() bool {
	if o != nil && !IsNil(o.EngineId) {
		return true
	}

	return false
}

// SetEngineId gets a reference to the given string and assigns it to the EngineId field.
func (o *DatabaseColumnMetadata) SetEngineId(v string) {
	o.EngineId = &v
}

// GetEngineName returns the EngineName field value if set, zero value otherwise.
func (o *DatabaseColumnMetadata) GetEngineName() string {
	if o == nil || IsNil(o.EngineName) {
		var ret string
		return ret
	}
	return *o.EngineName
}

// GetEngineNameOk returns a tuple with the EngineName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatabaseColumnMetadata) GetEngineNameOk() (*string, bool) {
	if o == nil || IsNil(o.EngineName) {
		return nil, false
	}
	return o.EngineName, true
}

// HasEngineName returns a boolean if a field has been set.
func (o *DatabaseColumnMetadata) HasEngineName() bool {
	if o != nil && !IsNil(o.EngineName) {
		return true
	}

	return false
}

// SetEngineName gets a reference to the given string and assigns it to the EngineName field.
func (o *DatabaseColumnMetadata) SetEngineName(v string) {
	o.EngineName = &v
}

// GetAlgorithmId returns the AlgorithmId field value if set, zero value otherwise.
func (o *DatabaseColumnMetadata) GetAlgorithmId() string {
	if o == nil || IsNil(o.AlgorithmId) {
		var ret string
		return ret
	}
	return *o.AlgorithmId
}

// GetAlgorithmIdOk returns a tuple with the AlgorithmId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatabaseColumnMetadata) GetAlgorithmIdOk() (*string, bool) {
	if o == nil || IsNil(o.AlgorithmId) {
		return nil, false
	}
	return o.AlgorithmId, true
}

// HasAlgorithmId returns a boolean if a field has been set.
func (o *DatabaseColumnMetadata) HasAlgorithmId() bool {
	if o != nil && !IsNil(o.AlgorithmId) {
		return true
	}

	return false
}

// SetAlgorithmId gets a reference to the given string and assigns it to the AlgorithmId field.
func (o *DatabaseColumnMetadata) SetAlgorithmId(v string) {
	o.AlgorithmId = &v
}

// GetAlgorithmName returns the AlgorithmName field value if set, zero value otherwise.
func (o *DatabaseColumnMetadata) GetAlgorithmName() string {
	if o == nil || IsNil(o.AlgorithmName) {
		var ret string
		return ret
	}
	return *o.AlgorithmName
}

// GetAlgorithmNameOk returns a tuple with the AlgorithmName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatabaseColumnMetadata) GetAlgorithmNameOk() (*string, bool) {
	if o == nil || IsNil(o.AlgorithmName) {
		return nil, false
	}
	return o.AlgorithmName, true
}

// HasAlgorithmName returns a boolean if a field has been set.
func (o *DatabaseColumnMetadata) HasAlgorithmName() bool {
	if o != nil && !IsNil(o.AlgorithmName) {
		return true
	}

	return false
}

// SetAlgorithmName gets a reference to the given string and assigns it to the AlgorithmName field.
func (o *DatabaseColumnMetadata) SetAlgorithmName(v string) {
	o.AlgorithmName = &v
}

// GetDataClassId returns the DataClassId field value if set, zero value otherwise.
func (o *DatabaseColumnMetadata) GetDataClassId() string {
	if o == nil || IsNil(o.DataClassId) {
		var ret string
		return ret
	}
	return *o.DataClassId
}

// GetDataClassIdOk returns a tuple with the DataClassId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatabaseColumnMetadata) GetDataClassIdOk() (*string, bool) {
	if o == nil || IsNil(o.DataClassId) {
		return nil, false
	}
	return o.DataClassId, true
}

// HasDataClassId returns a boolean if a field has been set.
func (o *DatabaseColumnMetadata) HasDataClassId() bool {
	if o != nil && !IsNil(o.DataClassId) {
		return true
	}

	return false
}

// SetDataClassId gets a reference to the given string and assigns it to the DataClassId field.
func (o *DatabaseColumnMetadata) SetDataClassId(v string) {
	o.DataClassId = &v
}

// GetDataClassName returns the DataClassName field value if set, zero value otherwise.
func (o *DatabaseColumnMetadata) GetDataClassName() string {
	if o == nil || IsNil(o.DataClassName) {
		var ret string
		return ret
	}
	return *o.DataClassName
}

// GetDataClassNameOk returns a tuple with the DataClassName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatabaseColumnMetadata) GetDataClassNameOk() (*string, bool) {
	if o == nil || IsNil(o.DataClassName) {
		return nil, false
	}
	return o.DataClassName, true
}

// HasDataClassName returns a boolean if a field has been set.
func (o *DatabaseColumnMetadata) HasDataClassName() bool {
	if o != nil && !IsNil(o.DataClassName) {
		return true
	}

	return false
}

// SetDataClassName gets a reference to the given string and assigns it to the DataClassName field.
func (o *DatabaseColumnMetadata) SetDataClassName(v string) {
	o.DataClassName = &v
}

// GetDataType returns the DataType field value if set, zero value otherwise.
func (o *DatabaseColumnMetadata) GetDataType() string {
	if o == nil || IsNil(o.DataType) {
		var ret string
		return ret
	}
	return *o.DataType
}

// GetDataTypeOk returns a tuple with the DataType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatabaseColumnMetadata) GetDataTypeOk() (*string, bool) {
	if o == nil || IsNil(o.DataType) {
		return nil, false
	}
	return o.DataType, true
}

// HasDataType returns a boolean if a field has been set.
func (o *DatabaseColumnMetadata) HasDataType() bool {
	if o != nil && !IsNil(o.DataType) {
		return true
	}

	return false
}

// SetDataType gets a reference to the given string and assigns it to the DataType field.
func (o *DatabaseColumnMetadata) SetDataType(v string) {
	o.DataType = &v
}

// GetDateFormat returns the DateFormat field value if set, zero value otherwise.
func (o *DatabaseColumnMetadata) GetDateFormat() string {
	if o == nil || IsNil(o.DateFormat) {
		var ret string
		return ret
	}
	return *o.DateFormat
}

// GetDateFormatOk returns a tuple with the DateFormat field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatabaseColumnMetadata) GetDateFormatOk() (*string, bool) {
	if o == nil || IsNil(o.DateFormat) {
		return nil, false
	}
	return o.DateFormat, true
}

// HasDateFormat returns a boolean if a field has been set.
func (o *DatabaseColumnMetadata) HasDateFormat() bool {
	if o != nil && !IsNil(o.DateFormat) {
		return true
	}

	return false
}

// SetDateFormat gets a reference to the given string and assigns it to the DateFormat field.
func (o *DatabaseColumnMetadata) SetDateFormat(v string) {
	o.DateFormat = &v
}

// GetColumnLength returns the ColumnLength field value if set, zero value otherwise.
func (o *DatabaseColumnMetadata) GetColumnLength() int32 {
	if o == nil || IsNil(o.ColumnLength) {
		var ret int32
		return ret
	}
	return *o.ColumnLength
}

// GetColumnLengthOk returns a tuple with the ColumnLength field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatabaseColumnMetadata) GetColumnLengthOk() (*int32, bool) {
	if o == nil || IsNil(o.ColumnLength) {
		return nil, false
	}
	return o.ColumnLength, true
}

// HasColumnLength returns a boolean if a field has been set.
func (o *DatabaseColumnMetadata) HasColumnLength() bool {
	if o != nil && !IsNil(o.ColumnLength) {
		return true
	}

	return false
}

// SetColumnLength gets a reference to the given int32 and assigns it to the ColumnLength field.
func (o *DatabaseColumnMetadata) SetColumnLength(v int32) {
	o.ColumnLength = &v
}

// GetIsSensitive returns the IsSensitive field value if set, zero value otherwise.
func (o *DatabaseColumnMetadata) GetIsSensitive() bool {
	if o == nil || IsNil(o.IsSensitive) {
		var ret bool
		return ret
	}
	return *o.IsSensitive
}

// GetIsSensitiveOk returns a tuple with the IsSensitive field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatabaseColumnMetadata) GetIsSensitiveOk() (*bool, bool) {
	if o == nil || IsNil(o.IsSensitive) {
		return nil, false
	}
	return o.IsSensitive, true
}

// HasIsSensitive returns a boolean if a field has been set.
func (o *DatabaseColumnMetadata) HasIsSensitive() bool {
	if o != nil && !IsNil(o.IsSensitive) {
		return true
	}

	return false
}

// SetIsSensitive gets a reference to the given bool and assigns it to the IsSensitive field.
func (o *DatabaseColumnMetadata) SetIsSensitive(v bool) {
	o.IsSensitive = &v
}

// GetIsProfilerWritable returns the IsProfilerWritable field value if set, zero value otherwise.
func (o *DatabaseColumnMetadata) GetIsProfilerWritable() bool {
	if o == nil || IsNil(o.IsProfilerWritable) {
		var ret bool
		return ret
	}
	return *o.IsProfilerWritable
}

// GetIsProfilerWritableOk returns a tuple with the IsProfilerWritable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatabaseColumnMetadata) GetIsProfilerWritableOk() (*bool, bool) {
	if o == nil || IsNil(o.IsProfilerWritable) {
		return nil, false
	}
	return o.IsProfilerWritable, true
}

// HasIsProfilerWritable returns a boolean if a field has been set.
func (o *DatabaseColumnMetadata) HasIsProfilerWritable() bool {
	if o != nil && !IsNil(o.IsProfilerWritable) {
		return true
	}

	return false
}

// SetIsProfilerWritable gets a reference to the given bool and assigns it to the IsProfilerWritable field.
func (o *DatabaseColumnMetadata) SetIsProfilerWritable(v bool) {
	o.IsProfilerWritable = &v
}

// GetIsPrimaryKey returns the IsPrimaryKey field value if set, zero value otherwise.
func (o *DatabaseColumnMetadata) GetIsPrimaryKey() bool {
	if o == nil || IsNil(o.IsPrimaryKey) {
		var ret bool
		return ret
	}
	return *o.IsPrimaryKey
}

// GetIsPrimaryKeyOk returns a tuple with the IsPrimaryKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatabaseColumnMetadata) GetIsPrimaryKeyOk() (*bool, bool) {
	if o == nil || IsNil(o.IsPrimaryKey) {
		return nil, false
	}
	return o.IsPrimaryKey, true
}

// HasIsPrimaryKey returns a boolean if a field has been set.
func (o *DatabaseColumnMetadata) HasIsPrimaryKey() bool {
	if o != nil && !IsNil(o.IsPrimaryKey) {
		return true
	}

	return false
}

// SetIsPrimaryKey gets a reference to the given bool and assigns it to the IsPrimaryKey field.
func (o *DatabaseColumnMetadata) SetIsPrimaryKey(v bool) {
	o.IsPrimaryKey = &v
}

// GetIsIdentity returns the IsIdentity field value if set, zero value otherwise.
func (o *DatabaseColumnMetadata) GetIsIdentity() bool {
	if o == nil || IsNil(o.IsIdentity) {
		var ret bool
		return ret
	}
	return *o.IsIdentity
}

// GetIsIdentityOk returns a tuple with the IsIdentity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatabaseColumnMetadata) GetIsIdentityOk() (*bool, bool) {
	if o == nil || IsNil(o.IsIdentity) {
		return nil, false
	}
	return o.IsIdentity, true
}

// HasIsIdentity returns a boolean if a field has been set.
func (o *DatabaseColumnMetadata) HasIsIdentity() bool {
	if o != nil && !IsNil(o.IsIdentity) {
		return true
	}

	return false
}

// SetIsIdentity gets a reference to the given bool and assigns it to the IsIdentity field.
func (o *DatabaseColumnMetadata) SetIsIdentity(v bool) {
	o.IsIdentity = &v
}

// GetIsIndex returns the IsIndex field value if set, zero value otherwise.
func (o *DatabaseColumnMetadata) GetIsIndex() bool {
	if o == nil || IsNil(o.IsIndex) {
		var ret bool
		return ret
	}
	return *o.IsIndex
}

// GetIsIndexOk returns a tuple with the IsIndex field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatabaseColumnMetadata) GetIsIndexOk() (*bool, bool) {
	if o == nil || IsNil(o.IsIndex) {
		return nil, false
	}
	return o.IsIndex, true
}

// HasIsIndex returns a boolean if a field has been set.
func (o *DatabaseColumnMetadata) HasIsIndex() bool {
	if o != nil && !IsNil(o.IsIndex) {
		return true
	}

	return false
}

// SetIsIndex gets a reference to the given bool and assigns it to the IsIndex field.
func (o *DatabaseColumnMetadata) SetIsIndex(v bool) {
	o.IsIndex = &v
}

// GetIsForeignKey returns the IsForeignKey field value if set, zero value otherwise.
func (o *DatabaseColumnMetadata) GetIsForeignKey() bool {
	if o == nil || IsNil(o.IsForeignKey) {
		var ret bool
		return ret
	}
	return *o.IsForeignKey
}

// GetIsForeignKeyOk returns a tuple with the IsForeignKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatabaseColumnMetadata) GetIsForeignKeyOk() (*bool, bool) {
	if o == nil || IsNil(o.IsForeignKey) {
		return nil, false
	}
	return o.IsForeignKey, true
}

// HasIsForeignKey returns a boolean if a field has been set.
func (o *DatabaseColumnMetadata) HasIsForeignKey() bool {
	if o != nil && !IsNil(o.IsForeignKey) {
		return true
	}

	return false
}

// SetIsForeignKey gets a reference to the given bool and assigns it to the IsForeignKey field.
func (o *DatabaseColumnMetadata) SetIsForeignKey(v bool) {
	o.IsForeignKey = &v
}

func (o DatabaseColumnMetadata) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DatabaseColumnMetadata) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.ColumnName) {
		toSerialize["column_name"] = o.ColumnName
	}
	if !IsNil(o.DatabaseTableMetadataId) {
		toSerialize["database_table_metadata_id"] = o.DatabaseTableMetadataId
	}
	if !IsNil(o.TableName) {
		toSerialize["table_name"] = o.TableName
	}
	if !IsNil(o.RuleSetId) {
		toSerialize["rule_set_id"] = o.RuleSetId
	}
	if !IsNil(o.RuleSetName) {
		toSerialize["rule_set_name"] = o.RuleSetName
	}
	if !IsNil(o.EngineId) {
		toSerialize["engine_id"] = o.EngineId
	}
	if !IsNil(o.EngineName) {
		toSerialize["engine_name"] = o.EngineName
	}
	if !IsNil(o.AlgorithmId) {
		toSerialize["algorithm_id"] = o.AlgorithmId
	}
	if !IsNil(o.AlgorithmName) {
		toSerialize["algorithm_name"] = o.AlgorithmName
	}
	if !IsNil(o.DataClassId) {
		toSerialize["data_class_id"] = o.DataClassId
	}
	if !IsNil(o.DataClassName) {
		toSerialize["data_class_name"] = o.DataClassName
	}
	if !IsNil(o.DataType) {
		toSerialize["data_type"] = o.DataType
	}
	if !IsNil(o.DateFormat) {
		toSerialize["date_format"] = o.DateFormat
	}
	if !IsNil(o.ColumnLength) {
		toSerialize["column_length"] = o.ColumnLength
	}
	if !IsNil(o.IsSensitive) {
		toSerialize["is_sensitive"] = o.IsSensitive
	}
	if !IsNil(o.IsProfilerWritable) {
		toSerialize["is_profiler_writable"] = o.IsProfilerWritable
	}
	if !IsNil(o.IsPrimaryKey) {
		toSerialize["is_primary_key"] = o.IsPrimaryKey
	}
	if !IsNil(o.IsIdentity) {
		toSerialize["is_identity"] = o.IsIdentity
	}
	if !IsNil(o.IsIndex) {
		toSerialize["is_index"] = o.IsIndex
	}
	if !IsNil(o.IsForeignKey) {
		toSerialize["is_foreign_key"] = o.IsForeignKey
	}
	return toSerialize, nil
}

type NullableDatabaseColumnMetadata struct {
	value *DatabaseColumnMetadata
	isSet bool
}

func (v NullableDatabaseColumnMetadata) Get() *DatabaseColumnMetadata {
	return v.value
}

func (v *NullableDatabaseColumnMetadata) Set(val *DatabaseColumnMetadata) {
	v.value = val
	v.isSet = true
}

func (v NullableDatabaseColumnMetadata) IsSet() bool {
	return v.isSet
}

func (v *NullableDatabaseColumnMetadata) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDatabaseColumnMetadata(val *DatabaseColumnMetadata) *NullableDatabaseColumnMetadata {
	return &NullableDatabaseColumnMetadata{value: val, isSet: true}
}

func (v NullableDatabaseColumnMetadata) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDatabaseColumnMetadata) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


