/*
Delphix DCT API

Delphix DCT API

API version: 3.17.0
Contact: support@delphix.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package delphix_dct_api

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the VDBStartParametersMapping type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VDBStartParametersMapping{}

// VDBStartParametersMapping Parameters to start a VDB.
type VDBStartParametersMapping struct {
	// List of specific Oracle Virtual Database Instances to start.
	Instances []int32 `json:"instances,omitempty"`
	// ID of the VDB to start.
	VdbId string `json:"vdb_id"`
}

type _VDBStartParametersMapping VDBStartParametersMapping

// NewVDBStartParametersMapping instantiates a new VDBStartParametersMapping object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVDBStartParametersMapping(vdbId string) *VDBStartParametersMapping {
	this := VDBStartParametersMapping{}
	this.VdbId = vdbId
	return &this
}

// NewVDBStartParametersMappingWithDefaults instantiates a new VDBStartParametersMapping object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVDBStartParametersMappingWithDefaults() *VDBStartParametersMapping {
	this := VDBStartParametersMapping{}
	return &this
}

// GetInstances returns the Instances field value if set, zero value otherwise.
func (o *VDBStartParametersMapping) GetInstances() []int32 {
	if o == nil || IsNil(o.Instances) {
		var ret []int32
		return ret
	}
	return o.Instances
}

// GetInstancesOk returns a tuple with the Instances field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VDBStartParametersMapping) GetInstancesOk() ([]int32, bool) {
	if o == nil || IsNil(o.Instances) {
		return nil, false
	}
	return o.Instances, true
}

// HasInstances returns a boolean if a field has been set.
func (o *VDBStartParametersMapping) HasInstances() bool {
	if o != nil && !IsNil(o.Instances) {
		return true
	}

	return false
}

// SetInstances gets a reference to the given []int32 and assigns it to the Instances field.
func (o *VDBStartParametersMapping) SetInstances(v []int32) {
	o.Instances = v
}

// GetVdbId returns the VdbId field value
func (o *VDBStartParametersMapping) GetVdbId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.VdbId
}

// GetVdbIdOk returns a tuple with the VdbId field value
// and a boolean to check if the value has been set.
func (o *VDBStartParametersMapping) GetVdbIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.VdbId, true
}

// SetVdbId sets field value
func (o *VDBStartParametersMapping) SetVdbId(v string) {
	o.VdbId = v
}

func (o VDBStartParametersMapping) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VDBStartParametersMapping) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Instances) {
		toSerialize["instances"] = o.Instances
	}
	toSerialize["vdb_id"] = o.VdbId
	return toSerialize, nil
}

func (o *VDBStartParametersMapping) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"vdb_id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varVDBStartParametersMapping := _VDBStartParametersMapping{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varVDBStartParametersMapping)

	if err != nil {
		return err
	}

	*o = VDBStartParametersMapping(varVDBStartParametersMapping)

	return err
}

type NullableVDBStartParametersMapping struct {
	value *VDBStartParametersMapping
	isSet bool
}

func (v NullableVDBStartParametersMapping) Get() *VDBStartParametersMapping {
	return v.value
}

func (v *NullableVDBStartParametersMapping) Set(val *VDBStartParametersMapping) {
	v.value = val
	v.isSet = true
}

func (v NullableVDBStartParametersMapping) IsSet() bool {
	return v.isSet
}

func (v *NullableVDBStartParametersMapping) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVDBStartParametersMapping(val *VDBStartParametersMapping) *NullableVDBStartParametersMapping {
	return &NullableVDBStartParametersMapping{value: val, isSet: true}
}

func (v NullableVDBStartParametersMapping) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVDBStartParametersMapping) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


