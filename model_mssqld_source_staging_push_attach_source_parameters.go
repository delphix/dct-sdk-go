/*
Delphix DCT API

Delphix DCT API

API version: 3.18.0
Contact: support@delphix.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package delphix_dct_api

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the MSSQLDSourceStagingPushAttachSourceParameters type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MSSQLDSourceStagingPushAttachSourceParameters{}

// MSSQLDSourceStagingPushAttachSourceParameters struct for MSSQLDSourceStagingPushAttachSourceParameters
type MSSQLDSourceStagingPushAttachSourceParameters struct {
	// The encryption key to use when restoring encrypted backups.
	EncryptionKey *string `json:"encryption_key,omitempty"`
	// Reference of the SQL instance on the PPT environment that we want to use for pre-provisioning.
	PptRepository string `json:"ppt_repository"`
	// Reference of the host OS user on the PPT host to use for linking.
	PptHostUser *string `json:"ppt_host_user,omitempty"`
	// A user-provided PowerShell script or executable to run prior to restoring from a backup during pre-provisioning.
	StagingPreScript *string `json:"staging_pre_script,omitempty"`
	// A user-provided PowerShell script or executable to run after restoring from a backup during pre-provisioning.
	StagingPostScript *string `json:"staging_post_script,omitempty"`
	// The name of the database to create on the staging environment. This property is mutually exclusive to sync_strategy_managed_type
	StagingDatabaseName string `json:"staging_database_name"`
	// User provided db state that will be used to create staging push db. Default is RESTORING
	DbState *string `json:"db_state,omitempty"`
	// Operations to perform before syncing the created dSource. These operations can quiesce any data prior to syncing.
	OpsPreSync []SourceOperation `json:"ops_pre_sync,omitempty"`
	// Operations to perform after syncing a created dSource.
	OpsPostSync []SourceOperation `json:"ops_post_sync,omitempty"`
}

type _MSSQLDSourceStagingPushAttachSourceParameters MSSQLDSourceStagingPushAttachSourceParameters

// NewMSSQLDSourceStagingPushAttachSourceParameters instantiates a new MSSQLDSourceStagingPushAttachSourceParameters object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMSSQLDSourceStagingPushAttachSourceParameters(pptRepository string, stagingDatabaseName string) *MSSQLDSourceStagingPushAttachSourceParameters {
	this := MSSQLDSourceStagingPushAttachSourceParameters{}
	this.PptRepository = pptRepository
	this.StagingDatabaseName = stagingDatabaseName
	var dbState string = "RESTORING"
	this.DbState = &dbState
	return &this
}

// NewMSSQLDSourceStagingPushAttachSourceParametersWithDefaults instantiates a new MSSQLDSourceStagingPushAttachSourceParameters object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMSSQLDSourceStagingPushAttachSourceParametersWithDefaults() *MSSQLDSourceStagingPushAttachSourceParameters {
	this := MSSQLDSourceStagingPushAttachSourceParameters{}
	var dbState string = "RESTORING"
	this.DbState = &dbState
	return &this
}

// GetEncryptionKey returns the EncryptionKey field value if set, zero value otherwise.
func (o *MSSQLDSourceStagingPushAttachSourceParameters) GetEncryptionKey() string {
	if o == nil || IsNil(o.EncryptionKey) {
		var ret string
		return ret
	}
	return *o.EncryptionKey
}

// GetEncryptionKeyOk returns a tuple with the EncryptionKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MSSQLDSourceStagingPushAttachSourceParameters) GetEncryptionKeyOk() (*string, bool) {
	if o == nil || IsNil(o.EncryptionKey) {
		return nil, false
	}
	return o.EncryptionKey, true
}

// HasEncryptionKey returns a boolean if a field has been set.
func (o *MSSQLDSourceStagingPushAttachSourceParameters) HasEncryptionKey() bool {
	if o != nil && !IsNil(o.EncryptionKey) {
		return true
	}

	return false
}

// SetEncryptionKey gets a reference to the given string and assigns it to the EncryptionKey field.
func (o *MSSQLDSourceStagingPushAttachSourceParameters) SetEncryptionKey(v string) {
	o.EncryptionKey = &v
}

// GetPptRepository returns the PptRepository field value
func (o *MSSQLDSourceStagingPushAttachSourceParameters) GetPptRepository() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PptRepository
}

// GetPptRepositoryOk returns a tuple with the PptRepository field value
// and a boolean to check if the value has been set.
func (o *MSSQLDSourceStagingPushAttachSourceParameters) GetPptRepositoryOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PptRepository, true
}

// SetPptRepository sets field value
func (o *MSSQLDSourceStagingPushAttachSourceParameters) SetPptRepository(v string) {
	o.PptRepository = v
}

// GetPptHostUser returns the PptHostUser field value if set, zero value otherwise.
func (o *MSSQLDSourceStagingPushAttachSourceParameters) GetPptHostUser() string {
	if o == nil || IsNil(o.PptHostUser) {
		var ret string
		return ret
	}
	return *o.PptHostUser
}

// GetPptHostUserOk returns a tuple with the PptHostUser field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MSSQLDSourceStagingPushAttachSourceParameters) GetPptHostUserOk() (*string, bool) {
	if o == nil || IsNil(o.PptHostUser) {
		return nil, false
	}
	return o.PptHostUser, true
}

// HasPptHostUser returns a boolean if a field has been set.
func (o *MSSQLDSourceStagingPushAttachSourceParameters) HasPptHostUser() bool {
	if o != nil && !IsNil(o.PptHostUser) {
		return true
	}

	return false
}

// SetPptHostUser gets a reference to the given string and assigns it to the PptHostUser field.
func (o *MSSQLDSourceStagingPushAttachSourceParameters) SetPptHostUser(v string) {
	o.PptHostUser = &v
}

// GetStagingPreScript returns the StagingPreScript field value if set, zero value otherwise.
func (o *MSSQLDSourceStagingPushAttachSourceParameters) GetStagingPreScript() string {
	if o == nil || IsNil(o.StagingPreScript) {
		var ret string
		return ret
	}
	return *o.StagingPreScript
}

// GetStagingPreScriptOk returns a tuple with the StagingPreScript field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MSSQLDSourceStagingPushAttachSourceParameters) GetStagingPreScriptOk() (*string, bool) {
	if o == nil || IsNil(o.StagingPreScript) {
		return nil, false
	}
	return o.StagingPreScript, true
}

// HasStagingPreScript returns a boolean if a field has been set.
func (o *MSSQLDSourceStagingPushAttachSourceParameters) HasStagingPreScript() bool {
	if o != nil && !IsNil(o.StagingPreScript) {
		return true
	}

	return false
}

// SetStagingPreScript gets a reference to the given string and assigns it to the StagingPreScript field.
func (o *MSSQLDSourceStagingPushAttachSourceParameters) SetStagingPreScript(v string) {
	o.StagingPreScript = &v
}

// GetStagingPostScript returns the StagingPostScript field value if set, zero value otherwise.
func (o *MSSQLDSourceStagingPushAttachSourceParameters) GetStagingPostScript() string {
	if o == nil || IsNil(o.StagingPostScript) {
		var ret string
		return ret
	}
	return *o.StagingPostScript
}

// GetStagingPostScriptOk returns a tuple with the StagingPostScript field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MSSQLDSourceStagingPushAttachSourceParameters) GetStagingPostScriptOk() (*string, bool) {
	if o == nil || IsNil(o.StagingPostScript) {
		return nil, false
	}
	return o.StagingPostScript, true
}

// HasStagingPostScript returns a boolean if a field has been set.
func (o *MSSQLDSourceStagingPushAttachSourceParameters) HasStagingPostScript() bool {
	if o != nil && !IsNil(o.StagingPostScript) {
		return true
	}

	return false
}

// SetStagingPostScript gets a reference to the given string and assigns it to the StagingPostScript field.
func (o *MSSQLDSourceStagingPushAttachSourceParameters) SetStagingPostScript(v string) {
	o.StagingPostScript = &v
}

// GetStagingDatabaseName returns the StagingDatabaseName field value
func (o *MSSQLDSourceStagingPushAttachSourceParameters) GetStagingDatabaseName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.StagingDatabaseName
}

// GetStagingDatabaseNameOk returns a tuple with the StagingDatabaseName field value
// and a boolean to check if the value has been set.
func (o *MSSQLDSourceStagingPushAttachSourceParameters) GetStagingDatabaseNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.StagingDatabaseName, true
}

// SetStagingDatabaseName sets field value
func (o *MSSQLDSourceStagingPushAttachSourceParameters) SetStagingDatabaseName(v string) {
	o.StagingDatabaseName = v
}

// GetDbState returns the DbState field value if set, zero value otherwise.
func (o *MSSQLDSourceStagingPushAttachSourceParameters) GetDbState() string {
	if o == nil || IsNil(o.DbState) {
		var ret string
		return ret
	}
	return *o.DbState
}

// GetDbStateOk returns a tuple with the DbState field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MSSQLDSourceStagingPushAttachSourceParameters) GetDbStateOk() (*string, bool) {
	if o == nil || IsNil(o.DbState) {
		return nil, false
	}
	return o.DbState, true
}

// HasDbState returns a boolean if a field has been set.
func (o *MSSQLDSourceStagingPushAttachSourceParameters) HasDbState() bool {
	if o != nil && !IsNil(o.DbState) {
		return true
	}

	return false
}

// SetDbState gets a reference to the given string and assigns it to the DbState field.
func (o *MSSQLDSourceStagingPushAttachSourceParameters) SetDbState(v string) {
	o.DbState = &v
}

// GetOpsPreSync returns the OpsPreSync field value if set, zero value otherwise.
func (o *MSSQLDSourceStagingPushAttachSourceParameters) GetOpsPreSync() []SourceOperation {
	if o == nil || IsNil(o.OpsPreSync) {
		var ret []SourceOperation
		return ret
	}
	return o.OpsPreSync
}

// GetOpsPreSyncOk returns a tuple with the OpsPreSync field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MSSQLDSourceStagingPushAttachSourceParameters) GetOpsPreSyncOk() ([]SourceOperation, bool) {
	if o == nil || IsNil(o.OpsPreSync) {
		return nil, false
	}
	return o.OpsPreSync, true
}

// HasOpsPreSync returns a boolean if a field has been set.
func (o *MSSQLDSourceStagingPushAttachSourceParameters) HasOpsPreSync() bool {
	if o != nil && !IsNil(o.OpsPreSync) {
		return true
	}

	return false
}

// SetOpsPreSync gets a reference to the given []SourceOperation and assigns it to the OpsPreSync field.
func (o *MSSQLDSourceStagingPushAttachSourceParameters) SetOpsPreSync(v []SourceOperation) {
	o.OpsPreSync = v
}

// GetOpsPostSync returns the OpsPostSync field value if set, zero value otherwise.
func (o *MSSQLDSourceStagingPushAttachSourceParameters) GetOpsPostSync() []SourceOperation {
	if o == nil || IsNil(o.OpsPostSync) {
		var ret []SourceOperation
		return ret
	}
	return o.OpsPostSync
}

// GetOpsPostSyncOk returns a tuple with the OpsPostSync field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MSSQLDSourceStagingPushAttachSourceParameters) GetOpsPostSyncOk() ([]SourceOperation, bool) {
	if o == nil || IsNil(o.OpsPostSync) {
		return nil, false
	}
	return o.OpsPostSync, true
}

// HasOpsPostSync returns a boolean if a field has been set.
func (o *MSSQLDSourceStagingPushAttachSourceParameters) HasOpsPostSync() bool {
	if o != nil && !IsNil(o.OpsPostSync) {
		return true
	}

	return false
}

// SetOpsPostSync gets a reference to the given []SourceOperation and assigns it to the OpsPostSync field.
func (o *MSSQLDSourceStagingPushAttachSourceParameters) SetOpsPostSync(v []SourceOperation) {
	o.OpsPostSync = v
}

func (o MSSQLDSourceStagingPushAttachSourceParameters) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MSSQLDSourceStagingPushAttachSourceParameters) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.EncryptionKey) {
		toSerialize["encryption_key"] = o.EncryptionKey
	}
	toSerialize["ppt_repository"] = o.PptRepository
	if !IsNil(o.PptHostUser) {
		toSerialize["ppt_host_user"] = o.PptHostUser
	}
	if !IsNil(o.StagingPreScript) {
		toSerialize["staging_pre_script"] = o.StagingPreScript
	}
	if !IsNil(o.StagingPostScript) {
		toSerialize["staging_post_script"] = o.StagingPostScript
	}
	toSerialize["staging_database_name"] = o.StagingDatabaseName
	if !IsNil(o.DbState) {
		toSerialize["db_state"] = o.DbState
	}
	if !IsNil(o.OpsPreSync) {
		toSerialize["ops_pre_sync"] = o.OpsPreSync
	}
	if !IsNil(o.OpsPostSync) {
		toSerialize["ops_post_sync"] = o.OpsPostSync
	}
	return toSerialize, nil
}

func (o *MSSQLDSourceStagingPushAttachSourceParameters) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"ppt_repository",
		"staging_database_name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varMSSQLDSourceStagingPushAttachSourceParameters := _MSSQLDSourceStagingPushAttachSourceParameters{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varMSSQLDSourceStagingPushAttachSourceParameters)

	if err != nil {
		return err
	}

	*o = MSSQLDSourceStagingPushAttachSourceParameters(varMSSQLDSourceStagingPushAttachSourceParameters)

	return err
}

type NullableMSSQLDSourceStagingPushAttachSourceParameters struct {
	value *MSSQLDSourceStagingPushAttachSourceParameters
	isSet bool
}

func (v NullableMSSQLDSourceStagingPushAttachSourceParameters) Get() *MSSQLDSourceStagingPushAttachSourceParameters {
	return v.value
}

func (v *NullableMSSQLDSourceStagingPushAttachSourceParameters) Set(val *MSSQLDSourceStagingPushAttachSourceParameters) {
	v.value = val
	v.isSet = true
}

func (v NullableMSSQLDSourceStagingPushAttachSourceParameters) IsSet() bool {
	return v.isSet
}

func (v *NullableMSSQLDSourceStagingPushAttachSourceParameters) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMSSQLDSourceStagingPushAttachSourceParameters(val *MSSQLDSourceStagingPushAttachSourceParameters) *NullableMSSQLDSourceStagingPushAttachSourceParameters {
	return &NullableMSSQLDSourceStagingPushAttachSourceParameters{value: val, isSet: true}
}

func (v NullableMSSQLDSourceStagingPushAttachSourceParameters) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMSSQLDSourceStagingPushAttachSourceParameters) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


