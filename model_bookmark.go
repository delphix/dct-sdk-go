/*
Delphix DCT API

Delphix DCT API

API version: 3.18.0
Contact: support@delphix.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package delphix_dct_api

import (
	"encoding/json"
	"time"
)

// checks if the Bookmark type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Bookmark{}

// Bookmark A Data Control Tower object that references points in time for one or more datasets.
type Bookmark struct {
	// The Bookmark object entity ID.
	Id *string `json:"id,omitempty"`
	// The user-defined name of this bookmark.
	Name *string `json:"name,omitempty"`
	// The date and time that this bookmark was created.
	CreationDate *time.Time `json:"creation_date,omitempty"`
	// The timestamp for the data that the bookmark refers to.
	DataTimestamp *time.Time `json:"data_timestamp,omitempty"`
	// The timeflow for the snapshot that the bookmark was created of.
	TimeflowId *string `json:"timeflow_id,omitempty"`
	// The location for the data that the bookmark refers to.
	Location *string `json:"location,omitempty"`
	// The list of VDB IDs associated with this bookmark.
	VdbIds []string `json:"vdb_ids,omitempty"`
	// The list of dSource IDs associated with this bookmark.
	DsourceIds []string `json:"dsource_ids,omitempty"`
	// The ID of the VDB group on which bookmark is created.
	VdbGroupId *string `json:"vdb_group_id,omitempty"`
	// The name of the VDB group on which bookmark is created.
	VdbGroupName *string `json:"vdb_group_name,omitempty"`
	// The list of VDB IDs and VDB names associated with this bookmark.
	Vdbs []BookmarkVDBs `json:"vdbs,omitempty"`
	// The list of dSource IDs and dSource names associated with this bookmark.
	Dsources []BookmarkDSources `json:"dsources,omitempty"`
	// The retention policy for this bookmark, in days. A value of -1 indicates the bookmark should be kept forever. Deprecated in favor of expiration.
	// Deprecated
	Retention *int64 `json:"retention,omitempty"`
	// The expiration for this bookmark. When unset, indicates the bookmark is kept forever except for bookmarks of replicated datasets. Expiration cannot be set for bookmarks of replicated datasets.
	Expiration *string `json:"expiration,omitempty"`
	// A message with details about operation progress or state of this bookmark.
	Status NullableString `json:"status,omitempty"`
	// Whether this bookmark is created from a replicated dataset or not.
	ReplicatedDataset *bool `json:"replicated_dataset,omitempty"`
	// Source of the bookmark, default is DCT. In case of self-service bookmarks, this value would be ENGINE.
	BookmarkSource *string `json:"bookmark_source,omitempty"`
	// Status of the bookmark. It can have INACTIVE value for engine bookmarks only. If this value is INACTIVE then ss_bookmark_errors would have the list of associated errors.
	BookmarkStatus *string `json:"bookmark_status,omitempty"`
	// Data-layout Id for engine-managed bookmarks.
	SsDataLayoutId *string `json:"ss_data_layout_id,omitempty"`
	// Engine reference of the self-service bookmark.
	SsBookmarkReference *string `json:"ss_bookmark_reference,omitempty"`
	// List of errors if any, during bookmark creation in DCT from self-service.
	SsBookmarkErrors []string `json:"ss_bookmark_errors,omitempty"`
	// Type of the bookmark, either PUBLIC or PRIVATE.
	BookmarkType *string `json:"bookmark_type,omitempty"`
	// The tags to be created for this Bookmark.
	Tags []Tag `json:"tags,omitempty"`
}

// NewBookmark instantiates a new Bookmark object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBookmark() *Bookmark {
	this := Bookmark{}
	var bookmarkType string = "PRIVATE"
	this.BookmarkType = &bookmarkType
	return &this
}

// NewBookmarkWithDefaults instantiates a new Bookmark object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBookmarkWithDefaults() *Bookmark {
	this := Bookmark{}
	var bookmarkType string = "PRIVATE"
	this.BookmarkType = &bookmarkType
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Bookmark) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Bookmark) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Bookmark) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *Bookmark) SetId(v string) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *Bookmark) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Bookmark) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *Bookmark) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *Bookmark) SetName(v string) {
	o.Name = &v
}

// GetCreationDate returns the CreationDate field value if set, zero value otherwise.
func (o *Bookmark) GetCreationDate() time.Time {
	if o == nil || IsNil(o.CreationDate) {
		var ret time.Time
		return ret
	}
	return *o.CreationDate
}

// GetCreationDateOk returns a tuple with the CreationDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Bookmark) GetCreationDateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CreationDate) {
		return nil, false
	}
	return o.CreationDate, true
}

// HasCreationDate returns a boolean if a field has been set.
func (o *Bookmark) HasCreationDate() bool {
	if o != nil && !IsNil(o.CreationDate) {
		return true
	}

	return false
}

// SetCreationDate gets a reference to the given time.Time and assigns it to the CreationDate field.
func (o *Bookmark) SetCreationDate(v time.Time) {
	o.CreationDate = &v
}

// GetDataTimestamp returns the DataTimestamp field value if set, zero value otherwise.
func (o *Bookmark) GetDataTimestamp() time.Time {
	if o == nil || IsNil(o.DataTimestamp) {
		var ret time.Time
		return ret
	}
	return *o.DataTimestamp
}

// GetDataTimestampOk returns a tuple with the DataTimestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Bookmark) GetDataTimestampOk() (*time.Time, bool) {
	if o == nil || IsNil(o.DataTimestamp) {
		return nil, false
	}
	return o.DataTimestamp, true
}

// HasDataTimestamp returns a boolean if a field has been set.
func (o *Bookmark) HasDataTimestamp() bool {
	if o != nil && !IsNil(o.DataTimestamp) {
		return true
	}

	return false
}

// SetDataTimestamp gets a reference to the given time.Time and assigns it to the DataTimestamp field.
func (o *Bookmark) SetDataTimestamp(v time.Time) {
	o.DataTimestamp = &v
}

// GetTimeflowId returns the TimeflowId field value if set, zero value otherwise.
func (o *Bookmark) GetTimeflowId() string {
	if o == nil || IsNil(o.TimeflowId) {
		var ret string
		return ret
	}
	return *o.TimeflowId
}

// GetTimeflowIdOk returns a tuple with the TimeflowId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Bookmark) GetTimeflowIdOk() (*string, bool) {
	if o == nil || IsNil(o.TimeflowId) {
		return nil, false
	}
	return o.TimeflowId, true
}

// HasTimeflowId returns a boolean if a field has been set.
func (o *Bookmark) HasTimeflowId() bool {
	if o != nil && !IsNil(o.TimeflowId) {
		return true
	}

	return false
}

// SetTimeflowId gets a reference to the given string and assigns it to the TimeflowId field.
func (o *Bookmark) SetTimeflowId(v string) {
	o.TimeflowId = &v
}

// GetLocation returns the Location field value if set, zero value otherwise.
func (o *Bookmark) GetLocation() string {
	if o == nil || IsNil(o.Location) {
		var ret string
		return ret
	}
	return *o.Location
}

// GetLocationOk returns a tuple with the Location field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Bookmark) GetLocationOk() (*string, bool) {
	if o == nil || IsNil(o.Location) {
		return nil, false
	}
	return o.Location, true
}

// HasLocation returns a boolean if a field has been set.
func (o *Bookmark) HasLocation() bool {
	if o != nil && !IsNil(o.Location) {
		return true
	}

	return false
}

// SetLocation gets a reference to the given string and assigns it to the Location field.
func (o *Bookmark) SetLocation(v string) {
	o.Location = &v
}

// GetVdbIds returns the VdbIds field value if set, zero value otherwise.
func (o *Bookmark) GetVdbIds() []string {
	if o == nil || IsNil(o.VdbIds) {
		var ret []string
		return ret
	}
	return o.VdbIds
}

// GetVdbIdsOk returns a tuple with the VdbIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Bookmark) GetVdbIdsOk() ([]string, bool) {
	if o == nil || IsNil(o.VdbIds) {
		return nil, false
	}
	return o.VdbIds, true
}

// HasVdbIds returns a boolean if a field has been set.
func (o *Bookmark) HasVdbIds() bool {
	if o != nil && !IsNil(o.VdbIds) {
		return true
	}

	return false
}

// SetVdbIds gets a reference to the given []string and assigns it to the VdbIds field.
func (o *Bookmark) SetVdbIds(v []string) {
	o.VdbIds = v
}

// GetDsourceIds returns the DsourceIds field value if set, zero value otherwise.
func (o *Bookmark) GetDsourceIds() []string {
	if o == nil || IsNil(o.DsourceIds) {
		var ret []string
		return ret
	}
	return o.DsourceIds
}

// GetDsourceIdsOk returns a tuple with the DsourceIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Bookmark) GetDsourceIdsOk() ([]string, bool) {
	if o == nil || IsNil(o.DsourceIds) {
		return nil, false
	}
	return o.DsourceIds, true
}

// HasDsourceIds returns a boolean if a field has been set.
func (o *Bookmark) HasDsourceIds() bool {
	if o != nil && !IsNil(o.DsourceIds) {
		return true
	}

	return false
}

// SetDsourceIds gets a reference to the given []string and assigns it to the DsourceIds field.
func (o *Bookmark) SetDsourceIds(v []string) {
	o.DsourceIds = v
}

// GetVdbGroupId returns the VdbGroupId field value if set, zero value otherwise.
func (o *Bookmark) GetVdbGroupId() string {
	if o == nil || IsNil(o.VdbGroupId) {
		var ret string
		return ret
	}
	return *o.VdbGroupId
}

// GetVdbGroupIdOk returns a tuple with the VdbGroupId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Bookmark) GetVdbGroupIdOk() (*string, bool) {
	if o == nil || IsNil(o.VdbGroupId) {
		return nil, false
	}
	return o.VdbGroupId, true
}

// HasVdbGroupId returns a boolean if a field has been set.
func (o *Bookmark) HasVdbGroupId() bool {
	if o != nil && !IsNil(o.VdbGroupId) {
		return true
	}

	return false
}

// SetVdbGroupId gets a reference to the given string and assigns it to the VdbGroupId field.
func (o *Bookmark) SetVdbGroupId(v string) {
	o.VdbGroupId = &v
}

// GetVdbGroupName returns the VdbGroupName field value if set, zero value otherwise.
func (o *Bookmark) GetVdbGroupName() string {
	if o == nil || IsNil(o.VdbGroupName) {
		var ret string
		return ret
	}
	return *o.VdbGroupName
}

// GetVdbGroupNameOk returns a tuple with the VdbGroupName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Bookmark) GetVdbGroupNameOk() (*string, bool) {
	if o == nil || IsNil(o.VdbGroupName) {
		return nil, false
	}
	return o.VdbGroupName, true
}

// HasVdbGroupName returns a boolean if a field has been set.
func (o *Bookmark) HasVdbGroupName() bool {
	if o != nil && !IsNil(o.VdbGroupName) {
		return true
	}

	return false
}

// SetVdbGroupName gets a reference to the given string and assigns it to the VdbGroupName field.
func (o *Bookmark) SetVdbGroupName(v string) {
	o.VdbGroupName = &v
}

// GetVdbs returns the Vdbs field value if set, zero value otherwise.
func (o *Bookmark) GetVdbs() []BookmarkVDBs {
	if o == nil || IsNil(o.Vdbs) {
		var ret []BookmarkVDBs
		return ret
	}
	return o.Vdbs
}

// GetVdbsOk returns a tuple with the Vdbs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Bookmark) GetVdbsOk() ([]BookmarkVDBs, bool) {
	if o == nil || IsNil(o.Vdbs) {
		return nil, false
	}
	return o.Vdbs, true
}

// HasVdbs returns a boolean if a field has been set.
func (o *Bookmark) HasVdbs() bool {
	if o != nil && !IsNil(o.Vdbs) {
		return true
	}

	return false
}

// SetVdbs gets a reference to the given []BookmarkVDBs and assigns it to the Vdbs field.
func (o *Bookmark) SetVdbs(v []BookmarkVDBs) {
	o.Vdbs = v
}

// GetDsources returns the Dsources field value if set, zero value otherwise.
func (o *Bookmark) GetDsources() []BookmarkDSources {
	if o == nil || IsNil(o.Dsources) {
		var ret []BookmarkDSources
		return ret
	}
	return o.Dsources
}

// GetDsourcesOk returns a tuple with the Dsources field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Bookmark) GetDsourcesOk() ([]BookmarkDSources, bool) {
	if o == nil || IsNil(o.Dsources) {
		return nil, false
	}
	return o.Dsources, true
}

// HasDsources returns a boolean if a field has been set.
func (o *Bookmark) HasDsources() bool {
	if o != nil && !IsNil(o.Dsources) {
		return true
	}

	return false
}

// SetDsources gets a reference to the given []BookmarkDSources and assigns it to the Dsources field.
func (o *Bookmark) SetDsources(v []BookmarkDSources) {
	o.Dsources = v
}

// GetRetention returns the Retention field value if set, zero value otherwise.
// Deprecated
func (o *Bookmark) GetRetention() int64 {
	if o == nil || IsNil(o.Retention) {
		var ret int64
		return ret
	}
	return *o.Retention
}

// GetRetentionOk returns a tuple with the Retention field value if set, nil otherwise
// and a boolean to check if the value has been set.
// Deprecated
func (o *Bookmark) GetRetentionOk() (*int64, bool) {
	if o == nil || IsNil(o.Retention) {
		return nil, false
	}
	return o.Retention, true
}

// HasRetention returns a boolean if a field has been set.
func (o *Bookmark) HasRetention() bool {
	if o != nil && !IsNil(o.Retention) {
		return true
	}

	return false
}

// SetRetention gets a reference to the given int64 and assigns it to the Retention field.
// Deprecated
func (o *Bookmark) SetRetention(v int64) {
	o.Retention = &v
}

// GetExpiration returns the Expiration field value if set, zero value otherwise.
func (o *Bookmark) GetExpiration() string {
	if o == nil || IsNil(o.Expiration) {
		var ret string
		return ret
	}
	return *o.Expiration
}

// GetExpirationOk returns a tuple with the Expiration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Bookmark) GetExpirationOk() (*string, bool) {
	if o == nil || IsNil(o.Expiration) {
		return nil, false
	}
	return o.Expiration, true
}

// HasExpiration returns a boolean if a field has been set.
func (o *Bookmark) HasExpiration() bool {
	if o != nil && !IsNil(o.Expiration) {
		return true
	}

	return false
}

// SetExpiration gets a reference to the given string and assigns it to the Expiration field.
func (o *Bookmark) SetExpiration(v string) {
	o.Expiration = &v
}

// GetStatus returns the Status field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Bookmark) GetStatus() string {
	if o == nil || IsNil(o.Status.Get()) {
		var ret string
		return ret
	}
	return *o.Status.Get()
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Bookmark) GetStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Status.Get(), o.Status.IsSet()
}

// HasStatus returns a boolean if a field has been set.
func (o *Bookmark) HasStatus() bool {
	if o != nil && o.Status.IsSet() {
		return true
	}

	return false
}

// SetStatus gets a reference to the given NullableString and assigns it to the Status field.
func (o *Bookmark) SetStatus(v string) {
	o.Status.Set(&v)
}
// SetStatusNil sets the value for Status to be an explicit nil
func (o *Bookmark) SetStatusNil() {
	o.Status.Set(nil)
}

// UnsetStatus ensures that no value is present for Status, not even an explicit nil
func (o *Bookmark) UnsetStatus() {
	o.Status.Unset()
}

// GetReplicatedDataset returns the ReplicatedDataset field value if set, zero value otherwise.
func (o *Bookmark) GetReplicatedDataset() bool {
	if o == nil || IsNil(o.ReplicatedDataset) {
		var ret bool
		return ret
	}
	return *o.ReplicatedDataset
}

// GetReplicatedDatasetOk returns a tuple with the ReplicatedDataset field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Bookmark) GetReplicatedDatasetOk() (*bool, bool) {
	if o == nil || IsNil(o.ReplicatedDataset) {
		return nil, false
	}
	return o.ReplicatedDataset, true
}

// HasReplicatedDataset returns a boolean if a field has been set.
func (o *Bookmark) HasReplicatedDataset() bool {
	if o != nil && !IsNil(o.ReplicatedDataset) {
		return true
	}

	return false
}

// SetReplicatedDataset gets a reference to the given bool and assigns it to the ReplicatedDataset field.
func (o *Bookmark) SetReplicatedDataset(v bool) {
	o.ReplicatedDataset = &v
}

// GetBookmarkSource returns the BookmarkSource field value if set, zero value otherwise.
func (o *Bookmark) GetBookmarkSource() string {
	if o == nil || IsNil(o.BookmarkSource) {
		var ret string
		return ret
	}
	return *o.BookmarkSource
}

// GetBookmarkSourceOk returns a tuple with the BookmarkSource field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Bookmark) GetBookmarkSourceOk() (*string, bool) {
	if o == nil || IsNil(o.BookmarkSource) {
		return nil, false
	}
	return o.BookmarkSource, true
}

// HasBookmarkSource returns a boolean if a field has been set.
func (o *Bookmark) HasBookmarkSource() bool {
	if o != nil && !IsNil(o.BookmarkSource) {
		return true
	}

	return false
}

// SetBookmarkSource gets a reference to the given string and assigns it to the BookmarkSource field.
func (o *Bookmark) SetBookmarkSource(v string) {
	o.BookmarkSource = &v
}

// GetBookmarkStatus returns the BookmarkStatus field value if set, zero value otherwise.
func (o *Bookmark) GetBookmarkStatus() string {
	if o == nil || IsNil(o.BookmarkStatus) {
		var ret string
		return ret
	}
	return *o.BookmarkStatus
}

// GetBookmarkStatusOk returns a tuple with the BookmarkStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Bookmark) GetBookmarkStatusOk() (*string, bool) {
	if o == nil || IsNil(o.BookmarkStatus) {
		return nil, false
	}
	return o.BookmarkStatus, true
}

// HasBookmarkStatus returns a boolean if a field has been set.
func (o *Bookmark) HasBookmarkStatus() bool {
	if o != nil && !IsNil(o.BookmarkStatus) {
		return true
	}

	return false
}

// SetBookmarkStatus gets a reference to the given string and assigns it to the BookmarkStatus field.
func (o *Bookmark) SetBookmarkStatus(v string) {
	o.BookmarkStatus = &v
}

// GetSsDataLayoutId returns the SsDataLayoutId field value if set, zero value otherwise.
func (o *Bookmark) GetSsDataLayoutId() string {
	if o == nil || IsNil(o.SsDataLayoutId) {
		var ret string
		return ret
	}
	return *o.SsDataLayoutId
}

// GetSsDataLayoutIdOk returns a tuple with the SsDataLayoutId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Bookmark) GetSsDataLayoutIdOk() (*string, bool) {
	if o == nil || IsNil(o.SsDataLayoutId) {
		return nil, false
	}
	return o.SsDataLayoutId, true
}

// HasSsDataLayoutId returns a boolean if a field has been set.
func (o *Bookmark) HasSsDataLayoutId() bool {
	if o != nil && !IsNil(o.SsDataLayoutId) {
		return true
	}

	return false
}

// SetSsDataLayoutId gets a reference to the given string and assigns it to the SsDataLayoutId field.
func (o *Bookmark) SetSsDataLayoutId(v string) {
	o.SsDataLayoutId = &v
}

// GetSsBookmarkReference returns the SsBookmarkReference field value if set, zero value otherwise.
func (o *Bookmark) GetSsBookmarkReference() string {
	if o == nil || IsNil(o.SsBookmarkReference) {
		var ret string
		return ret
	}
	return *o.SsBookmarkReference
}

// GetSsBookmarkReferenceOk returns a tuple with the SsBookmarkReference field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Bookmark) GetSsBookmarkReferenceOk() (*string, bool) {
	if o == nil || IsNil(o.SsBookmarkReference) {
		return nil, false
	}
	return o.SsBookmarkReference, true
}

// HasSsBookmarkReference returns a boolean if a field has been set.
func (o *Bookmark) HasSsBookmarkReference() bool {
	if o != nil && !IsNil(o.SsBookmarkReference) {
		return true
	}

	return false
}

// SetSsBookmarkReference gets a reference to the given string and assigns it to the SsBookmarkReference field.
func (o *Bookmark) SetSsBookmarkReference(v string) {
	o.SsBookmarkReference = &v
}

// GetSsBookmarkErrors returns the SsBookmarkErrors field value if set, zero value otherwise.
func (o *Bookmark) GetSsBookmarkErrors() []string {
	if o == nil || IsNil(o.SsBookmarkErrors) {
		var ret []string
		return ret
	}
	return o.SsBookmarkErrors
}

// GetSsBookmarkErrorsOk returns a tuple with the SsBookmarkErrors field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Bookmark) GetSsBookmarkErrorsOk() ([]string, bool) {
	if o == nil || IsNil(o.SsBookmarkErrors) {
		return nil, false
	}
	return o.SsBookmarkErrors, true
}

// HasSsBookmarkErrors returns a boolean if a field has been set.
func (o *Bookmark) HasSsBookmarkErrors() bool {
	if o != nil && !IsNil(o.SsBookmarkErrors) {
		return true
	}

	return false
}

// SetSsBookmarkErrors gets a reference to the given []string and assigns it to the SsBookmarkErrors field.
func (o *Bookmark) SetSsBookmarkErrors(v []string) {
	o.SsBookmarkErrors = v
}

// GetBookmarkType returns the BookmarkType field value if set, zero value otherwise.
func (o *Bookmark) GetBookmarkType() string {
	if o == nil || IsNil(o.BookmarkType) {
		var ret string
		return ret
	}
	return *o.BookmarkType
}

// GetBookmarkTypeOk returns a tuple with the BookmarkType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Bookmark) GetBookmarkTypeOk() (*string, bool) {
	if o == nil || IsNil(o.BookmarkType) {
		return nil, false
	}
	return o.BookmarkType, true
}

// HasBookmarkType returns a boolean if a field has been set.
func (o *Bookmark) HasBookmarkType() bool {
	if o != nil && !IsNil(o.BookmarkType) {
		return true
	}

	return false
}

// SetBookmarkType gets a reference to the given string and assigns it to the BookmarkType field.
func (o *Bookmark) SetBookmarkType(v string) {
	o.BookmarkType = &v
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *Bookmark) GetTags() []Tag {
	if o == nil || IsNil(o.Tags) {
		var ret []Tag
		return ret
	}
	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Bookmark) GetTagsOk() ([]Tag, bool) {
	if o == nil || IsNil(o.Tags) {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *Bookmark) HasTags() bool {
	if o != nil && !IsNil(o.Tags) {
		return true
	}

	return false
}

// SetTags gets a reference to the given []Tag and assigns it to the Tags field.
func (o *Bookmark) SetTags(v []Tag) {
	o.Tags = v
}

func (o Bookmark) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Bookmark) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.CreationDate) {
		toSerialize["creation_date"] = o.CreationDate
	}
	if !IsNil(o.DataTimestamp) {
		toSerialize["data_timestamp"] = o.DataTimestamp
	}
	if !IsNil(o.TimeflowId) {
		toSerialize["timeflow_id"] = o.TimeflowId
	}
	if !IsNil(o.Location) {
		toSerialize["location"] = o.Location
	}
	if !IsNil(o.VdbIds) {
		toSerialize["vdb_ids"] = o.VdbIds
	}
	if !IsNil(o.DsourceIds) {
		toSerialize["dsource_ids"] = o.DsourceIds
	}
	if !IsNil(o.VdbGroupId) {
		toSerialize["vdb_group_id"] = o.VdbGroupId
	}
	if !IsNil(o.VdbGroupName) {
		toSerialize["vdb_group_name"] = o.VdbGroupName
	}
	if !IsNil(o.Vdbs) {
		toSerialize["vdbs"] = o.Vdbs
	}
	if !IsNil(o.Dsources) {
		toSerialize["dsources"] = o.Dsources
	}
	if !IsNil(o.Retention) {
		toSerialize["retention"] = o.Retention
	}
	if !IsNil(o.Expiration) {
		toSerialize["expiration"] = o.Expiration
	}
	if o.Status.IsSet() {
		toSerialize["status"] = o.Status.Get()
	}
	if !IsNil(o.ReplicatedDataset) {
		toSerialize["replicated_dataset"] = o.ReplicatedDataset
	}
	if !IsNil(o.BookmarkSource) {
		toSerialize["bookmark_source"] = o.BookmarkSource
	}
	if !IsNil(o.BookmarkStatus) {
		toSerialize["bookmark_status"] = o.BookmarkStatus
	}
	if !IsNil(o.SsDataLayoutId) {
		toSerialize["ss_data_layout_id"] = o.SsDataLayoutId
	}
	if !IsNil(o.SsBookmarkReference) {
		toSerialize["ss_bookmark_reference"] = o.SsBookmarkReference
	}
	if !IsNil(o.SsBookmarkErrors) {
		toSerialize["ss_bookmark_errors"] = o.SsBookmarkErrors
	}
	if !IsNil(o.BookmarkType) {
		toSerialize["bookmark_type"] = o.BookmarkType
	}
	if !IsNil(o.Tags) {
		toSerialize["tags"] = o.Tags
	}
	return toSerialize, nil
}

type NullableBookmark struct {
	value *Bookmark
	isSet bool
}

func (v NullableBookmark) Get() *Bookmark {
	return v.value
}

func (v *NullableBookmark) Set(val *Bookmark) {
	v.value = val
	v.isSet = true
}

func (v NullableBookmark) IsSet() bool {
	return v.isSet
}

func (v *NullableBookmark) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBookmark(val *Bookmark) *NullableBookmark {
	return &NullableBookmark{value: val, isSet: true}
}

func (v NullableBookmark) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBookmark) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


