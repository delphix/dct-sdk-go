/*
Delphix DCT API

Delphix DCT API

API version: 3.18.0
Contact: support@delphix.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package delphix_dct_api

import (
	"encoding/json"
)

// checks if the StopVDBParameters type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &StopVDBParameters{}

// StopVDBParameters Parameters to stop a VDB.
type StopVDBParameters struct {
	// List of specific Oracle Virtual Database Instances to stop.
	Instances []int32 `json:"instances,omitempty"`
	// Whether to issue 'shutdown abort' to shutdown Oracle Virtual DB instances.
	Abort *bool `json:"abort,omitempty"`
}

// NewStopVDBParameters instantiates a new StopVDBParameters object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStopVDBParameters() *StopVDBParameters {
	this := StopVDBParameters{}
	var abort bool = false
	this.Abort = &abort
	return &this
}

// NewStopVDBParametersWithDefaults instantiates a new StopVDBParameters object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStopVDBParametersWithDefaults() *StopVDBParameters {
	this := StopVDBParameters{}
	var abort bool = false
	this.Abort = &abort
	return &this
}

// GetInstances returns the Instances field value if set, zero value otherwise.
func (o *StopVDBParameters) GetInstances() []int32 {
	if o == nil || IsNil(o.Instances) {
		var ret []int32
		return ret
	}
	return o.Instances
}

// GetInstancesOk returns a tuple with the Instances field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StopVDBParameters) GetInstancesOk() ([]int32, bool) {
	if o == nil || IsNil(o.Instances) {
		return nil, false
	}
	return o.Instances, true
}

// HasInstances returns a boolean if a field has been set.
func (o *StopVDBParameters) HasInstances() bool {
	if o != nil && !IsNil(o.Instances) {
		return true
	}

	return false
}

// SetInstances gets a reference to the given []int32 and assigns it to the Instances field.
func (o *StopVDBParameters) SetInstances(v []int32) {
	o.Instances = v
}

// GetAbort returns the Abort field value if set, zero value otherwise.
func (o *StopVDBParameters) GetAbort() bool {
	if o == nil || IsNil(o.Abort) {
		var ret bool
		return ret
	}
	return *o.Abort
}

// GetAbortOk returns a tuple with the Abort field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StopVDBParameters) GetAbortOk() (*bool, bool) {
	if o == nil || IsNil(o.Abort) {
		return nil, false
	}
	return o.Abort, true
}

// HasAbort returns a boolean if a field has been set.
func (o *StopVDBParameters) HasAbort() bool {
	if o != nil && !IsNil(o.Abort) {
		return true
	}

	return false
}

// SetAbort gets a reference to the given bool and assigns it to the Abort field.
func (o *StopVDBParameters) SetAbort(v bool) {
	o.Abort = &v
}

func (o StopVDBParameters) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o StopVDBParameters) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Instances) {
		toSerialize["instances"] = o.Instances
	}
	if !IsNil(o.Abort) {
		toSerialize["abort"] = o.Abort
	}
	return toSerialize, nil
}

type NullableStopVDBParameters struct {
	value *StopVDBParameters
	isSet bool
}

func (v NullableStopVDBParameters) Get() *StopVDBParameters {
	return v.value
}

func (v *NullableStopVDBParameters) Set(val *StopVDBParameters) {
	v.value = val
	v.isSet = true
}

func (v NullableStopVDBParameters) IsSet() bool {
	return v.isSet
}

func (v *NullableStopVDBParameters) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStopVDBParameters(val *StopVDBParameters) *NullableStopVDBParameters {
	return &NullableStopVDBParameters{value: val, isSet: true}
}

func (v NullableStopVDBParameters) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStopVDBParameters) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


