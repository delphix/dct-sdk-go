/*
Delphix DCT API

Delphix DCT API

API version: 3.18.0
Contact: support@delphix.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package delphix_dct_api

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the OracleSourceCreateParameters type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OracleSourceCreateParameters{}

// OracleSourceCreateParameters struct for OracleSourceCreateParameters
type OracleSourceCreateParameters struct {
	OracleConfigType OracleConfigTypeEnum `json:"oracle_config_type"`
	// The ID of the engine to create the source on.
	EngineId *string `json:"engine_id,omitempty"`
	// The ID of the environment to create the source on.
	EnvironmentId *string `json:"environment_id,omitempty"`
	// The name of the database.
	DatabaseName *string `json:"database_name,omitempty"`
	// The id of the containing repository where this database is created.
	RepositoryId string `json:"repository_id"`
	// The instances of this RAC database.
	Instances []OracleRACDatabaseInstance `json:"instances,omitempty"`
	// The unique name of this database.
	UniqueName *string `json:"unique_name,omitempty"`
	// The instance name of this single instance database.
	InstanceName *string `json:"instance_name,omitempty"`
}

type _OracleSourceCreateParameters OracleSourceCreateParameters

// NewOracleSourceCreateParameters instantiates a new OracleSourceCreateParameters object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOracleSourceCreateParameters(oracleConfigType OracleConfigTypeEnum, repositoryId string) *OracleSourceCreateParameters {
	this := OracleSourceCreateParameters{}
	this.OracleConfigType = oracleConfigType
	this.RepositoryId = repositoryId
	return &this
}

// NewOracleSourceCreateParametersWithDefaults instantiates a new OracleSourceCreateParameters object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOracleSourceCreateParametersWithDefaults() *OracleSourceCreateParameters {
	this := OracleSourceCreateParameters{}
	return &this
}

// GetOracleConfigType returns the OracleConfigType field value
func (o *OracleSourceCreateParameters) GetOracleConfigType() OracleConfigTypeEnum {
	if o == nil {
		var ret OracleConfigTypeEnum
		return ret
	}

	return o.OracleConfigType
}

// GetOracleConfigTypeOk returns a tuple with the OracleConfigType field value
// and a boolean to check if the value has been set.
func (o *OracleSourceCreateParameters) GetOracleConfigTypeOk() (*OracleConfigTypeEnum, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OracleConfigType, true
}

// SetOracleConfigType sets field value
func (o *OracleSourceCreateParameters) SetOracleConfigType(v OracleConfigTypeEnum) {
	o.OracleConfigType = v
}

// GetEngineId returns the EngineId field value if set, zero value otherwise.
func (o *OracleSourceCreateParameters) GetEngineId() string {
	if o == nil || IsNil(o.EngineId) {
		var ret string
		return ret
	}
	return *o.EngineId
}

// GetEngineIdOk returns a tuple with the EngineId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OracleSourceCreateParameters) GetEngineIdOk() (*string, bool) {
	if o == nil || IsNil(o.EngineId) {
		return nil, false
	}
	return o.EngineId, true
}

// HasEngineId returns a boolean if a field has been set.
func (o *OracleSourceCreateParameters) HasEngineId() bool {
	if o != nil && !IsNil(o.EngineId) {
		return true
	}

	return false
}

// SetEngineId gets a reference to the given string and assigns it to the EngineId field.
func (o *OracleSourceCreateParameters) SetEngineId(v string) {
	o.EngineId = &v
}

// GetEnvironmentId returns the EnvironmentId field value if set, zero value otherwise.
func (o *OracleSourceCreateParameters) GetEnvironmentId() string {
	if o == nil || IsNil(o.EnvironmentId) {
		var ret string
		return ret
	}
	return *o.EnvironmentId
}

// GetEnvironmentIdOk returns a tuple with the EnvironmentId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OracleSourceCreateParameters) GetEnvironmentIdOk() (*string, bool) {
	if o == nil || IsNil(o.EnvironmentId) {
		return nil, false
	}
	return o.EnvironmentId, true
}

// HasEnvironmentId returns a boolean if a field has been set.
func (o *OracleSourceCreateParameters) HasEnvironmentId() bool {
	if o != nil && !IsNil(o.EnvironmentId) {
		return true
	}

	return false
}

// SetEnvironmentId gets a reference to the given string and assigns it to the EnvironmentId field.
func (o *OracleSourceCreateParameters) SetEnvironmentId(v string) {
	o.EnvironmentId = &v
}

// GetDatabaseName returns the DatabaseName field value if set, zero value otherwise.
func (o *OracleSourceCreateParameters) GetDatabaseName() string {
	if o == nil || IsNil(o.DatabaseName) {
		var ret string
		return ret
	}
	return *o.DatabaseName
}

// GetDatabaseNameOk returns a tuple with the DatabaseName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OracleSourceCreateParameters) GetDatabaseNameOk() (*string, bool) {
	if o == nil || IsNil(o.DatabaseName) {
		return nil, false
	}
	return o.DatabaseName, true
}

// HasDatabaseName returns a boolean if a field has been set.
func (o *OracleSourceCreateParameters) HasDatabaseName() bool {
	if o != nil && !IsNil(o.DatabaseName) {
		return true
	}

	return false
}

// SetDatabaseName gets a reference to the given string and assigns it to the DatabaseName field.
func (o *OracleSourceCreateParameters) SetDatabaseName(v string) {
	o.DatabaseName = &v
}

// GetRepositoryId returns the RepositoryId field value
func (o *OracleSourceCreateParameters) GetRepositoryId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RepositoryId
}

// GetRepositoryIdOk returns a tuple with the RepositoryId field value
// and a boolean to check if the value has been set.
func (o *OracleSourceCreateParameters) GetRepositoryIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RepositoryId, true
}

// SetRepositoryId sets field value
func (o *OracleSourceCreateParameters) SetRepositoryId(v string) {
	o.RepositoryId = v
}

// GetInstances returns the Instances field value if set, zero value otherwise.
func (o *OracleSourceCreateParameters) GetInstances() []OracleRACDatabaseInstance {
	if o == nil || IsNil(o.Instances) {
		var ret []OracleRACDatabaseInstance
		return ret
	}
	return o.Instances
}

// GetInstancesOk returns a tuple with the Instances field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OracleSourceCreateParameters) GetInstancesOk() ([]OracleRACDatabaseInstance, bool) {
	if o == nil || IsNil(o.Instances) {
		return nil, false
	}
	return o.Instances, true
}

// HasInstances returns a boolean if a field has been set.
func (o *OracleSourceCreateParameters) HasInstances() bool {
	if o != nil && !IsNil(o.Instances) {
		return true
	}

	return false
}

// SetInstances gets a reference to the given []OracleRACDatabaseInstance and assigns it to the Instances field.
func (o *OracleSourceCreateParameters) SetInstances(v []OracleRACDatabaseInstance) {
	o.Instances = v
}

// GetUniqueName returns the UniqueName field value if set, zero value otherwise.
func (o *OracleSourceCreateParameters) GetUniqueName() string {
	if o == nil || IsNil(o.UniqueName) {
		var ret string
		return ret
	}
	return *o.UniqueName
}

// GetUniqueNameOk returns a tuple with the UniqueName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OracleSourceCreateParameters) GetUniqueNameOk() (*string, bool) {
	if o == nil || IsNil(o.UniqueName) {
		return nil, false
	}
	return o.UniqueName, true
}

// HasUniqueName returns a boolean if a field has been set.
func (o *OracleSourceCreateParameters) HasUniqueName() bool {
	if o != nil && !IsNil(o.UniqueName) {
		return true
	}

	return false
}

// SetUniqueName gets a reference to the given string and assigns it to the UniqueName field.
func (o *OracleSourceCreateParameters) SetUniqueName(v string) {
	o.UniqueName = &v
}

// GetInstanceName returns the InstanceName field value if set, zero value otherwise.
func (o *OracleSourceCreateParameters) GetInstanceName() string {
	if o == nil || IsNil(o.InstanceName) {
		var ret string
		return ret
	}
	return *o.InstanceName
}

// GetInstanceNameOk returns a tuple with the InstanceName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OracleSourceCreateParameters) GetInstanceNameOk() (*string, bool) {
	if o == nil || IsNil(o.InstanceName) {
		return nil, false
	}
	return o.InstanceName, true
}

// HasInstanceName returns a boolean if a field has been set.
func (o *OracleSourceCreateParameters) HasInstanceName() bool {
	if o != nil && !IsNil(o.InstanceName) {
		return true
	}

	return false
}

// SetInstanceName gets a reference to the given string and assigns it to the InstanceName field.
func (o *OracleSourceCreateParameters) SetInstanceName(v string) {
	o.InstanceName = &v
}

func (o OracleSourceCreateParameters) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OracleSourceCreateParameters) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["oracle_config_type"] = o.OracleConfigType
	if !IsNil(o.EngineId) {
		toSerialize["engine_id"] = o.EngineId
	}
	if !IsNil(o.EnvironmentId) {
		toSerialize["environment_id"] = o.EnvironmentId
	}
	if !IsNil(o.DatabaseName) {
		toSerialize["database_name"] = o.DatabaseName
	}
	toSerialize["repository_id"] = o.RepositoryId
	if !IsNil(o.Instances) {
		toSerialize["instances"] = o.Instances
	}
	if !IsNil(o.UniqueName) {
		toSerialize["unique_name"] = o.UniqueName
	}
	if !IsNil(o.InstanceName) {
		toSerialize["instance_name"] = o.InstanceName
	}
	return toSerialize, nil
}

func (o *OracleSourceCreateParameters) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"oracle_config_type",
		"repository_id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varOracleSourceCreateParameters := _OracleSourceCreateParameters{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varOracleSourceCreateParameters)

	if err != nil {
		return err
	}

	*o = OracleSourceCreateParameters(varOracleSourceCreateParameters)

	return err
}

type NullableOracleSourceCreateParameters struct {
	value *OracleSourceCreateParameters
	isSet bool
}

func (v NullableOracleSourceCreateParameters) Get() *OracleSourceCreateParameters {
	return v.value
}

func (v *NullableOracleSourceCreateParameters) Set(val *OracleSourceCreateParameters) {
	v.value = val
	v.isSet = true
}

func (v NullableOracleSourceCreateParameters) IsSet() bool {
	return v.isSet
}

func (v *NullableOracleSourceCreateParameters) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOracleSourceCreateParameters(val *OracleSourceCreateParameters) *NullableOracleSourceCreateParameters {
	return &NullableOracleSourceCreateParameters{value: val, isSet: true}
}

func (v NullableOracleSourceCreateParameters) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOracleSourceCreateParameters) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


