/*
Delphix DCT API

Delphix DCT API

API version: 3.18.0
Contact: support@delphix.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package delphix_dct_api

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ReportingSchedule type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ReportingSchedule{}

// ReportingSchedule struct for ReportingSchedule
type ReportingSchedule struct {
	ReportId *int32 `json:"report_id,omitempty"`
	ReportType string `json:"report_type"`
	// Standard cron expressions are supported e.g. 0 15 10 L * ?  - Schedule at 10:15 AM on the last day of every month, 0 0 2 ? * Mon-Fri - Schedule at 2:00 AM every Monday, Tuesday, Wednesday, Thursday and Friday. For more details kindly refer- \"http://www.quartz-scheduler.org/documentation/\"
	CronExpression string `json:"cron_expression"`
	// Timezones are specified according to the Olson tzinfo database - \"https://en.wikipedia.org/wiki/List_of_tz_database_time_zones\".
	TimeZone *string `json:"time_zone,omitempty"`
	Message string `json:"message"`
	FileFormat string `json:"file_format"`
	Enabled bool `json:"enabled"`
	Recipients []string `json:"recipients"`
	Tags []Tag `json:"tags,omitempty"`
	SortColumn *string `json:"sort_column,omitempty"`
	RowCount *int32 `json:"row_count,omitempty"`
}

type _ReportingSchedule ReportingSchedule

// NewReportingSchedule instantiates a new ReportingSchedule object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewReportingSchedule(reportType string, cronExpression string, message string, fileFormat string, enabled bool, recipients []string) *ReportingSchedule {
	this := ReportingSchedule{}
	this.ReportType = reportType
	this.CronExpression = cronExpression
	this.Message = message
	this.FileFormat = fileFormat
	this.Enabled = enabled
	this.Recipients = recipients
	return &this
}

// NewReportingScheduleWithDefaults instantiates a new ReportingSchedule object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewReportingScheduleWithDefaults() *ReportingSchedule {
	this := ReportingSchedule{}
	var enabled bool = true
	this.Enabled = enabled
	return &this
}

// GetReportId returns the ReportId field value if set, zero value otherwise.
func (o *ReportingSchedule) GetReportId() int32 {
	if o == nil || IsNil(o.ReportId) {
		var ret int32
		return ret
	}
	return *o.ReportId
}

// GetReportIdOk returns a tuple with the ReportId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReportingSchedule) GetReportIdOk() (*int32, bool) {
	if o == nil || IsNil(o.ReportId) {
		return nil, false
	}
	return o.ReportId, true
}

// HasReportId returns a boolean if a field has been set.
func (o *ReportingSchedule) HasReportId() bool {
	if o != nil && !IsNil(o.ReportId) {
		return true
	}

	return false
}

// SetReportId gets a reference to the given int32 and assigns it to the ReportId field.
func (o *ReportingSchedule) SetReportId(v int32) {
	o.ReportId = &v
}

// GetReportType returns the ReportType field value
func (o *ReportingSchedule) GetReportType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ReportType
}

// GetReportTypeOk returns a tuple with the ReportType field value
// and a boolean to check if the value has been set.
func (o *ReportingSchedule) GetReportTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ReportType, true
}

// SetReportType sets field value
func (o *ReportingSchedule) SetReportType(v string) {
	o.ReportType = v
}

// GetCronExpression returns the CronExpression field value
func (o *ReportingSchedule) GetCronExpression() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CronExpression
}

// GetCronExpressionOk returns a tuple with the CronExpression field value
// and a boolean to check if the value has been set.
func (o *ReportingSchedule) GetCronExpressionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CronExpression, true
}

// SetCronExpression sets field value
func (o *ReportingSchedule) SetCronExpression(v string) {
	o.CronExpression = v
}

// GetTimeZone returns the TimeZone field value if set, zero value otherwise.
func (o *ReportingSchedule) GetTimeZone() string {
	if o == nil || IsNil(o.TimeZone) {
		var ret string
		return ret
	}
	return *o.TimeZone
}

// GetTimeZoneOk returns a tuple with the TimeZone field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReportingSchedule) GetTimeZoneOk() (*string, bool) {
	if o == nil || IsNil(o.TimeZone) {
		return nil, false
	}
	return o.TimeZone, true
}

// HasTimeZone returns a boolean if a field has been set.
func (o *ReportingSchedule) HasTimeZone() bool {
	if o != nil && !IsNil(o.TimeZone) {
		return true
	}

	return false
}

// SetTimeZone gets a reference to the given string and assigns it to the TimeZone field.
func (o *ReportingSchedule) SetTimeZone(v string) {
	o.TimeZone = &v
}

// GetMessage returns the Message field value
func (o *ReportingSchedule) GetMessage() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Message
}

// GetMessageOk returns a tuple with the Message field value
// and a boolean to check if the value has been set.
func (o *ReportingSchedule) GetMessageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Message, true
}

// SetMessage sets field value
func (o *ReportingSchedule) SetMessage(v string) {
	o.Message = v
}

// GetFileFormat returns the FileFormat field value
func (o *ReportingSchedule) GetFileFormat() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FileFormat
}

// GetFileFormatOk returns a tuple with the FileFormat field value
// and a boolean to check if the value has been set.
func (o *ReportingSchedule) GetFileFormatOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FileFormat, true
}

// SetFileFormat sets field value
func (o *ReportingSchedule) SetFileFormat(v string) {
	o.FileFormat = v
}

// GetEnabled returns the Enabled field value
func (o *ReportingSchedule) GetEnabled() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value
// and a boolean to check if the value has been set.
func (o *ReportingSchedule) GetEnabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Enabled, true
}

// SetEnabled sets field value
func (o *ReportingSchedule) SetEnabled(v bool) {
	o.Enabled = v
}

// GetRecipients returns the Recipients field value
func (o *ReportingSchedule) GetRecipients() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Recipients
}

// GetRecipientsOk returns a tuple with the Recipients field value
// and a boolean to check if the value has been set.
func (o *ReportingSchedule) GetRecipientsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Recipients, true
}

// SetRecipients sets field value
func (o *ReportingSchedule) SetRecipients(v []string) {
	o.Recipients = v
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *ReportingSchedule) GetTags() []Tag {
	if o == nil || IsNil(o.Tags) {
		var ret []Tag
		return ret
	}
	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReportingSchedule) GetTagsOk() ([]Tag, bool) {
	if o == nil || IsNil(o.Tags) {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *ReportingSchedule) HasTags() bool {
	if o != nil && !IsNil(o.Tags) {
		return true
	}

	return false
}

// SetTags gets a reference to the given []Tag and assigns it to the Tags field.
func (o *ReportingSchedule) SetTags(v []Tag) {
	o.Tags = v
}

// GetSortColumn returns the SortColumn field value if set, zero value otherwise.
func (o *ReportingSchedule) GetSortColumn() string {
	if o == nil || IsNil(o.SortColumn) {
		var ret string
		return ret
	}
	return *o.SortColumn
}

// GetSortColumnOk returns a tuple with the SortColumn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReportingSchedule) GetSortColumnOk() (*string, bool) {
	if o == nil || IsNil(o.SortColumn) {
		return nil, false
	}
	return o.SortColumn, true
}

// HasSortColumn returns a boolean if a field has been set.
func (o *ReportingSchedule) HasSortColumn() bool {
	if o != nil && !IsNil(o.SortColumn) {
		return true
	}

	return false
}

// SetSortColumn gets a reference to the given string and assigns it to the SortColumn field.
func (o *ReportingSchedule) SetSortColumn(v string) {
	o.SortColumn = &v
}

// GetRowCount returns the RowCount field value if set, zero value otherwise.
func (o *ReportingSchedule) GetRowCount() int32 {
	if o == nil || IsNil(o.RowCount) {
		var ret int32
		return ret
	}
	return *o.RowCount
}

// GetRowCountOk returns a tuple with the RowCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReportingSchedule) GetRowCountOk() (*int32, bool) {
	if o == nil || IsNil(o.RowCount) {
		return nil, false
	}
	return o.RowCount, true
}

// HasRowCount returns a boolean if a field has been set.
func (o *ReportingSchedule) HasRowCount() bool {
	if o != nil && !IsNil(o.RowCount) {
		return true
	}

	return false
}

// SetRowCount gets a reference to the given int32 and assigns it to the RowCount field.
func (o *ReportingSchedule) SetRowCount(v int32) {
	o.RowCount = &v
}

func (o ReportingSchedule) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ReportingSchedule) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ReportId) {
		toSerialize["report_id"] = o.ReportId
	}
	toSerialize["report_type"] = o.ReportType
	toSerialize["cron_expression"] = o.CronExpression
	if !IsNil(o.TimeZone) {
		toSerialize["time_zone"] = o.TimeZone
	}
	toSerialize["message"] = o.Message
	toSerialize["file_format"] = o.FileFormat
	toSerialize["enabled"] = o.Enabled
	toSerialize["recipients"] = o.Recipients
	if !IsNil(o.Tags) {
		toSerialize["tags"] = o.Tags
	}
	if !IsNil(o.SortColumn) {
		toSerialize["sort_column"] = o.SortColumn
	}
	if !IsNil(o.RowCount) {
		toSerialize["row_count"] = o.RowCount
	}
	return toSerialize, nil
}

func (o *ReportingSchedule) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"report_type",
		"cron_expression",
		"message",
		"file_format",
		"enabled",
		"recipients",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varReportingSchedule := _ReportingSchedule{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varReportingSchedule)

	if err != nil {
		return err
	}

	*o = ReportingSchedule(varReportingSchedule)

	return err
}

type NullableReportingSchedule struct {
	value *ReportingSchedule
	isSet bool
}

func (v NullableReportingSchedule) Get() *ReportingSchedule {
	return v.value
}

func (v *NullableReportingSchedule) Set(val *ReportingSchedule) {
	v.value = val
	v.isSet = true
}

func (v NullableReportingSchedule) IsSet() bool {
	return v.isSet
}

func (v *NullableReportingSchedule) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReportingSchedule(val *ReportingSchedule) *NullableReportingSchedule {
	return &NullableReportingSchedule{value: val, isSet: true}
}

func (v NullableReportingSchedule) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReportingSchedule) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


