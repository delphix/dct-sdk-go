/*
Delphix DCT API

Delphix DCT API

API version: 3.18.0
Contact: support@delphix.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package delphix_dct_api

import (
	"encoding/json"
)

// checks if the UpdateOracleDsourceParameters type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateOracleDsourceParameters{}

// UpdateOracleDsourceParameters Parameters to update a dSource.
type UpdateOracleDsourceParameters struct {
	// The unique name of the dSource within a group.
	Name *string `json:"name,omitempty"`
	// The username of the database user.
	DbUsername *string `json:"db_username,omitempty"`
	// The password of the database user.
	DbPassword *string `json:"db_password,omitempty"`
	// Whether db_username and db_password must be validated, if present, against the dSource. This must be set to false when credentials validation is not possible, for instance if the dSource is known to be disabled.
	ValidateDbCredentials *bool `json:"validate_db_credentials,omitempty"`
	// The environment user ID to use to connect to the target environment.
	EnvironmentUserId *string `json:"environment_user_id,omitempty"`
	// Boolean value indicates whether LEVEL-based incremental backups can be used on the source database.
	BackupLevelEnabled *bool `json:"backup_level_enabled,omitempty"`
	// Number of parallel channels to use.
	RmanChannels *int32 `json:"rman_channels,omitempty"`
	// Number of data files to include in each RMAN backup set.
	FilesPerSet *int32 `json:"files_per_set,omitempty"`
	// True if extended block checking should be used for this dSource.
	CheckLogical *bool `json:"check_logical,omitempty"`
	// True if SnapSync data from the source should be retrieved through an encrypted connection. Enabling this feature can decrease the performance of SnapSync from the source but has no impact on the performance of VDBs created from the retrieved data.
	EncryptedLinkingEnabled *bool `json:"encrypted_linking_enabled,omitempty"`
	// True if SnapSync data from the source should be compressed over the network. Enabling this feature will reduce network bandwidth consumption and may significantly improve throughput, especially over slow network.
	CompressedLinkingEnabled *bool `json:"compressed_linking_enabled,omitempty"`
	// Bandwidth limit (MB/s) for SnapSync and LogSync network traffic. A value of 0 means no limit.
	BandwidthLimit *int32 `json:"bandwidth_limit,omitempty"`
	// Total number of transport connections to use during SnapSync.
	NumberOfConnections *int32 `json:"number_of_connections,omitempty"`
	// Whether the snaphots of this dSource's staging database will be validated by opening it in read-only mode.
	ValidateByOpeningDbInReadOnlyMode *bool `json:"validate_by_opening_db_in_read_only_mode,omitempty"`
	// Boolean flag indicating whether or not pre-provisioning is turned on for this dSource.
	PreProvisioningEnabled *bool `json:"pre_provisioning_enabled,omitempty"`
	// If true, NOLOGGING operations on this dSource are treated as faults and cannot be resolved manually.
	DiagnoseNoLoggingFaults *bool `json:"diagnose_no_logging_faults,omitempty"`
	// Maximum number of log sequences to allow a RAC instance to lag before considering the instance offline.
	RacMaxInstanceLag *int32 `json:"rac_max_instance_lag,omitempty"`
	// Allow auto restart of staging source on host reboot.
	AllowAutoStagingRestartOnHostReboot *bool `json:"allow_auto_staging_restart_on_host_reboot,omitempty"`
	// If true, convert this dSource's staging database to a physical standby.
	PhysicalStandby *bool `json:"physical_standby,omitempty"`
	// External file path.
	ExternalFilePath *string `json:"external_file_path,omitempty"`
	Hooks *DSourceHooks `json:"hooks,omitempty"`
	// An array of name value pair of environment variables.
	CustomEnvVariablesPairs []NameValuePair `json:"custom_env_variables_pairs,omitempty"`
	// An array of strings of whitespace-separated parameters to be passed to the source command. The first parameter must be an absolute path to a file that exists on the target environment. Every subsequent parameter will be treated as an argument interpreted by the environment file.
	CustomEnvVariablesPaths []string `json:"custom_env_variables_paths,omitempty"`
	// Database configuration parameter overrides.
	StagingDatabaseConfigParams map[string]interface{} `json:"staging_database_config_params,omitempty"`
	// The template ID of the target Oracle Staging Push dSource.
	TemplateId *string `json:"template_id,omitempty"`
}

// NewUpdateOracleDsourceParameters instantiates a new UpdateOracleDsourceParameters object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateOracleDsourceParameters() *UpdateOracleDsourceParameters {
	this := UpdateOracleDsourceParameters{}
	var validateDbCredentials bool = true
	this.ValidateDbCredentials = &validateDbCredentials
	return &this
}

// NewUpdateOracleDsourceParametersWithDefaults instantiates a new UpdateOracleDsourceParameters object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateOracleDsourceParametersWithDefaults() *UpdateOracleDsourceParameters {
	this := UpdateOracleDsourceParameters{}
	var validateDbCredentials bool = true
	this.ValidateDbCredentials = &validateDbCredentials
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *UpdateOracleDsourceParameters) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateOracleDsourceParameters) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *UpdateOracleDsourceParameters) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *UpdateOracleDsourceParameters) SetName(v string) {
	o.Name = &v
}

// GetDbUsername returns the DbUsername field value if set, zero value otherwise.
func (o *UpdateOracleDsourceParameters) GetDbUsername() string {
	if o == nil || IsNil(o.DbUsername) {
		var ret string
		return ret
	}
	return *o.DbUsername
}

// GetDbUsernameOk returns a tuple with the DbUsername field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateOracleDsourceParameters) GetDbUsernameOk() (*string, bool) {
	if o == nil || IsNil(o.DbUsername) {
		return nil, false
	}
	return o.DbUsername, true
}

// HasDbUsername returns a boolean if a field has been set.
func (o *UpdateOracleDsourceParameters) HasDbUsername() bool {
	if o != nil && !IsNil(o.DbUsername) {
		return true
	}

	return false
}

// SetDbUsername gets a reference to the given string and assigns it to the DbUsername field.
func (o *UpdateOracleDsourceParameters) SetDbUsername(v string) {
	o.DbUsername = &v
}

// GetDbPassword returns the DbPassword field value if set, zero value otherwise.
func (o *UpdateOracleDsourceParameters) GetDbPassword() string {
	if o == nil || IsNil(o.DbPassword) {
		var ret string
		return ret
	}
	return *o.DbPassword
}

// GetDbPasswordOk returns a tuple with the DbPassword field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateOracleDsourceParameters) GetDbPasswordOk() (*string, bool) {
	if o == nil || IsNil(o.DbPassword) {
		return nil, false
	}
	return o.DbPassword, true
}

// HasDbPassword returns a boolean if a field has been set.
func (o *UpdateOracleDsourceParameters) HasDbPassword() bool {
	if o != nil && !IsNil(o.DbPassword) {
		return true
	}

	return false
}

// SetDbPassword gets a reference to the given string and assigns it to the DbPassword field.
func (o *UpdateOracleDsourceParameters) SetDbPassword(v string) {
	o.DbPassword = &v
}

// GetValidateDbCredentials returns the ValidateDbCredentials field value if set, zero value otherwise.
func (o *UpdateOracleDsourceParameters) GetValidateDbCredentials() bool {
	if o == nil || IsNil(o.ValidateDbCredentials) {
		var ret bool
		return ret
	}
	return *o.ValidateDbCredentials
}

// GetValidateDbCredentialsOk returns a tuple with the ValidateDbCredentials field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateOracleDsourceParameters) GetValidateDbCredentialsOk() (*bool, bool) {
	if o == nil || IsNil(o.ValidateDbCredentials) {
		return nil, false
	}
	return o.ValidateDbCredentials, true
}

// HasValidateDbCredentials returns a boolean if a field has been set.
func (o *UpdateOracleDsourceParameters) HasValidateDbCredentials() bool {
	if o != nil && !IsNil(o.ValidateDbCredentials) {
		return true
	}

	return false
}

// SetValidateDbCredentials gets a reference to the given bool and assigns it to the ValidateDbCredentials field.
func (o *UpdateOracleDsourceParameters) SetValidateDbCredentials(v bool) {
	o.ValidateDbCredentials = &v
}

// GetEnvironmentUserId returns the EnvironmentUserId field value if set, zero value otherwise.
func (o *UpdateOracleDsourceParameters) GetEnvironmentUserId() string {
	if o == nil || IsNil(o.EnvironmentUserId) {
		var ret string
		return ret
	}
	return *o.EnvironmentUserId
}

// GetEnvironmentUserIdOk returns a tuple with the EnvironmentUserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateOracleDsourceParameters) GetEnvironmentUserIdOk() (*string, bool) {
	if o == nil || IsNil(o.EnvironmentUserId) {
		return nil, false
	}
	return o.EnvironmentUserId, true
}

// HasEnvironmentUserId returns a boolean if a field has been set.
func (o *UpdateOracleDsourceParameters) HasEnvironmentUserId() bool {
	if o != nil && !IsNil(o.EnvironmentUserId) {
		return true
	}

	return false
}

// SetEnvironmentUserId gets a reference to the given string and assigns it to the EnvironmentUserId field.
func (o *UpdateOracleDsourceParameters) SetEnvironmentUserId(v string) {
	o.EnvironmentUserId = &v
}

// GetBackupLevelEnabled returns the BackupLevelEnabled field value if set, zero value otherwise.
func (o *UpdateOracleDsourceParameters) GetBackupLevelEnabled() bool {
	if o == nil || IsNil(o.BackupLevelEnabled) {
		var ret bool
		return ret
	}
	return *o.BackupLevelEnabled
}

// GetBackupLevelEnabledOk returns a tuple with the BackupLevelEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateOracleDsourceParameters) GetBackupLevelEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.BackupLevelEnabled) {
		return nil, false
	}
	return o.BackupLevelEnabled, true
}

// HasBackupLevelEnabled returns a boolean if a field has been set.
func (o *UpdateOracleDsourceParameters) HasBackupLevelEnabled() bool {
	if o != nil && !IsNil(o.BackupLevelEnabled) {
		return true
	}

	return false
}

// SetBackupLevelEnabled gets a reference to the given bool and assigns it to the BackupLevelEnabled field.
func (o *UpdateOracleDsourceParameters) SetBackupLevelEnabled(v bool) {
	o.BackupLevelEnabled = &v
}

// GetRmanChannels returns the RmanChannels field value if set, zero value otherwise.
func (o *UpdateOracleDsourceParameters) GetRmanChannels() int32 {
	if o == nil || IsNil(o.RmanChannels) {
		var ret int32
		return ret
	}
	return *o.RmanChannels
}

// GetRmanChannelsOk returns a tuple with the RmanChannels field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateOracleDsourceParameters) GetRmanChannelsOk() (*int32, bool) {
	if o == nil || IsNil(o.RmanChannels) {
		return nil, false
	}
	return o.RmanChannels, true
}

// HasRmanChannels returns a boolean if a field has been set.
func (o *UpdateOracleDsourceParameters) HasRmanChannels() bool {
	if o != nil && !IsNil(o.RmanChannels) {
		return true
	}

	return false
}

// SetRmanChannels gets a reference to the given int32 and assigns it to the RmanChannels field.
func (o *UpdateOracleDsourceParameters) SetRmanChannels(v int32) {
	o.RmanChannels = &v
}

// GetFilesPerSet returns the FilesPerSet field value if set, zero value otherwise.
func (o *UpdateOracleDsourceParameters) GetFilesPerSet() int32 {
	if o == nil || IsNil(o.FilesPerSet) {
		var ret int32
		return ret
	}
	return *o.FilesPerSet
}

// GetFilesPerSetOk returns a tuple with the FilesPerSet field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateOracleDsourceParameters) GetFilesPerSetOk() (*int32, bool) {
	if o == nil || IsNil(o.FilesPerSet) {
		return nil, false
	}
	return o.FilesPerSet, true
}

// HasFilesPerSet returns a boolean if a field has been set.
func (o *UpdateOracleDsourceParameters) HasFilesPerSet() bool {
	if o != nil && !IsNil(o.FilesPerSet) {
		return true
	}

	return false
}

// SetFilesPerSet gets a reference to the given int32 and assigns it to the FilesPerSet field.
func (o *UpdateOracleDsourceParameters) SetFilesPerSet(v int32) {
	o.FilesPerSet = &v
}

// GetCheckLogical returns the CheckLogical field value if set, zero value otherwise.
func (o *UpdateOracleDsourceParameters) GetCheckLogical() bool {
	if o == nil || IsNil(o.CheckLogical) {
		var ret bool
		return ret
	}
	return *o.CheckLogical
}

// GetCheckLogicalOk returns a tuple with the CheckLogical field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateOracleDsourceParameters) GetCheckLogicalOk() (*bool, bool) {
	if o == nil || IsNil(o.CheckLogical) {
		return nil, false
	}
	return o.CheckLogical, true
}

// HasCheckLogical returns a boolean if a field has been set.
func (o *UpdateOracleDsourceParameters) HasCheckLogical() bool {
	if o != nil && !IsNil(o.CheckLogical) {
		return true
	}

	return false
}

// SetCheckLogical gets a reference to the given bool and assigns it to the CheckLogical field.
func (o *UpdateOracleDsourceParameters) SetCheckLogical(v bool) {
	o.CheckLogical = &v
}

// GetEncryptedLinkingEnabled returns the EncryptedLinkingEnabled field value if set, zero value otherwise.
func (o *UpdateOracleDsourceParameters) GetEncryptedLinkingEnabled() bool {
	if o == nil || IsNil(o.EncryptedLinkingEnabled) {
		var ret bool
		return ret
	}
	return *o.EncryptedLinkingEnabled
}

// GetEncryptedLinkingEnabledOk returns a tuple with the EncryptedLinkingEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateOracleDsourceParameters) GetEncryptedLinkingEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.EncryptedLinkingEnabled) {
		return nil, false
	}
	return o.EncryptedLinkingEnabled, true
}

// HasEncryptedLinkingEnabled returns a boolean if a field has been set.
func (o *UpdateOracleDsourceParameters) HasEncryptedLinkingEnabled() bool {
	if o != nil && !IsNil(o.EncryptedLinkingEnabled) {
		return true
	}

	return false
}

// SetEncryptedLinkingEnabled gets a reference to the given bool and assigns it to the EncryptedLinkingEnabled field.
func (o *UpdateOracleDsourceParameters) SetEncryptedLinkingEnabled(v bool) {
	o.EncryptedLinkingEnabled = &v
}

// GetCompressedLinkingEnabled returns the CompressedLinkingEnabled field value if set, zero value otherwise.
func (o *UpdateOracleDsourceParameters) GetCompressedLinkingEnabled() bool {
	if o == nil || IsNil(o.CompressedLinkingEnabled) {
		var ret bool
		return ret
	}
	return *o.CompressedLinkingEnabled
}

// GetCompressedLinkingEnabledOk returns a tuple with the CompressedLinkingEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateOracleDsourceParameters) GetCompressedLinkingEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.CompressedLinkingEnabled) {
		return nil, false
	}
	return o.CompressedLinkingEnabled, true
}

// HasCompressedLinkingEnabled returns a boolean if a field has been set.
func (o *UpdateOracleDsourceParameters) HasCompressedLinkingEnabled() bool {
	if o != nil && !IsNil(o.CompressedLinkingEnabled) {
		return true
	}

	return false
}

// SetCompressedLinkingEnabled gets a reference to the given bool and assigns it to the CompressedLinkingEnabled field.
func (o *UpdateOracleDsourceParameters) SetCompressedLinkingEnabled(v bool) {
	o.CompressedLinkingEnabled = &v
}

// GetBandwidthLimit returns the BandwidthLimit field value if set, zero value otherwise.
func (o *UpdateOracleDsourceParameters) GetBandwidthLimit() int32 {
	if o == nil || IsNil(o.BandwidthLimit) {
		var ret int32
		return ret
	}
	return *o.BandwidthLimit
}

// GetBandwidthLimitOk returns a tuple with the BandwidthLimit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateOracleDsourceParameters) GetBandwidthLimitOk() (*int32, bool) {
	if o == nil || IsNil(o.BandwidthLimit) {
		return nil, false
	}
	return o.BandwidthLimit, true
}

// HasBandwidthLimit returns a boolean if a field has been set.
func (o *UpdateOracleDsourceParameters) HasBandwidthLimit() bool {
	if o != nil && !IsNil(o.BandwidthLimit) {
		return true
	}

	return false
}

// SetBandwidthLimit gets a reference to the given int32 and assigns it to the BandwidthLimit field.
func (o *UpdateOracleDsourceParameters) SetBandwidthLimit(v int32) {
	o.BandwidthLimit = &v
}

// GetNumberOfConnections returns the NumberOfConnections field value if set, zero value otherwise.
func (o *UpdateOracleDsourceParameters) GetNumberOfConnections() int32 {
	if o == nil || IsNil(o.NumberOfConnections) {
		var ret int32
		return ret
	}
	return *o.NumberOfConnections
}

// GetNumberOfConnectionsOk returns a tuple with the NumberOfConnections field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateOracleDsourceParameters) GetNumberOfConnectionsOk() (*int32, bool) {
	if o == nil || IsNil(o.NumberOfConnections) {
		return nil, false
	}
	return o.NumberOfConnections, true
}

// HasNumberOfConnections returns a boolean if a field has been set.
func (o *UpdateOracleDsourceParameters) HasNumberOfConnections() bool {
	if o != nil && !IsNil(o.NumberOfConnections) {
		return true
	}

	return false
}

// SetNumberOfConnections gets a reference to the given int32 and assigns it to the NumberOfConnections field.
func (o *UpdateOracleDsourceParameters) SetNumberOfConnections(v int32) {
	o.NumberOfConnections = &v
}

// GetValidateByOpeningDbInReadOnlyMode returns the ValidateByOpeningDbInReadOnlyMode field value if set, zero value otherwise.
func (o *UpdateOracleDsourceParameters) GetValidateByOpeningDbInReadOnlyMode() bool {
	if o == nil || IsNil(o.ValidateByOpeningDbInReadOnlyMode) {
		var ret bool
		return ret
	}
	return *o.ValidateByOpeningDbInReadOnlyMode
}

// GetValidateByOpeningDbInReadOnlyModeOk returns a tuple with the ValidateByOpeningDbInReadOnlyMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateOracleDsourceParameters) GetValidateByOpeningDbInReadOnlyModeOk() (*bool, bool) {
	if o == nil || IsNil(o.ValidateByOpeningDbInReadOnlyMode) {
		return nil, false
	}
	return o.ValidateByOpeningDbInReadOnlyMode, true
}

// HasValidateByOpeningDbInReadOnlyMode returns a boolean if a field has been set.
func (o *UpdateOracleDsourceParameters) HasValidateByOpeningDbInReadOnlyMode() bool {
	if o != nil && !IsNil(o.ValidateByOpeningDbInReadOnlyMode) {
		return true
	}

	return false
}

// SetValidateByOpeningDbInReadOnlyMode gets a reference to the given bool and assigns it to the ValidateByOpeningDbInReadOnlyMode field.
func (o *UpdateOracleDsourceParameters) SetValidateByOpeningDbInReadOnlyMode(v bool) {
	o.ValidateByOpeningDbInReadOnlyMode = &v
}

// GetPreProvisioningEnabled returns the PreProvisioningEnabled field value if set, zero value otherwise.
func (o *UpdateOracleDsourceParameters) GetPreProvisioningEnabled() bool {
	if o == nil || IsNil(o.PreProvisioningEnabled) {
		var ret bool
		return ret
	}
	return *o.PreProvisioningEnabled
}

// GetPreProvisioningEnabledOk returns a tuple with the PreProvisioningEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateOracleDsourceParameters) GetPreProvisioningEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.PreProvisioningEnabled) {
		return nil, false
	}
	return o.PreProvisioningEnabled, true
}

// HasPreProvisioningEnabled returns a boolean if a field has been set.
func (o *UpdateOracleDsourceParameters) HasPreProvisioningEnabled() bool {
	if o != nil && !IsNil(o.PreProvisioningEnabled) {
		return true
	}

	return false
}

// SetPreProvisioningEnabled gets a reference to the given bool and assigns it to the PreProvisioningEnabled field.
func (o *UpdateOracleDsourceParameters) SetPreProvisioningEnabled(v bool) {
	o.PreProvisioningEnabled = &v
}

// GetDiagnoseNoLoggingFaults returns the DiagnoseNoLoggingFaults field value if set, zero value otherwise.
func (o *UpdateOracleDsourceParameters) GetDiagnoseNoLoggingFaults() bool {
	if o == nil || IsNil(o.DiagnoseNoLoggingFaults) {
		var ret bool
		return ret
	}
	return *o.DiagnoseNoLoggingFaults
}

// GetDiagnoseNoLoggingFaultsOk returns a tuple with the DiagnoseNoLoggingFaults field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateOracleDsourceParameters) GetDiagnoseNoLoggingFaultsOk() (*bool, bool) {
	if o == nil || IsNil(o.DiagnoseNoLoggingFaults) {
		return nil, false
	}
	return o.DiagnoseNoLoggingFaults, true
}

// HasDiagnoseNoLoggingFaults returns a boolean if a field has been set.
func (o *UpdateOracleDsourceParameters) HasDiagnoseNoLoggingFaults() bool {
	if o != nil && !IsNil(o.DiagnoseNoLoggingFaults) {
		return true
	}

	return false
}

// SetDiagnoseNoLoggingFaults gets a reference to the given bool and assigns it to the DiagnoseNoLoggingFaults field.
func (o *UpdateOracleDsourceParameters) SetDiagnoseNoLoggingFaults(v bool) {
	o.DiagnoseNoLoggingFaults = &v
}

// GetRacMaxInstanceLag returns the RacMaxInstanceLag field value if set, zero value otherwise.
func (o *UpdateOracleDsourceParameters) GetRacMaxInstanceLag() int32 {
	if o == nil || IsNil(o.RacMaxInstanceLag) {
		var ret int32
		return ret
	}
	return *o.RacMaxInstanceLag
}

// GetRacMaxInstanceLagOk returns a tuple with the RacMaxInstanceLag field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateOracleDsourceParameters) GetRacMaxInstanceLagOk() (*int32, bool) {
	if o == nil || IsNil(o.RacMaxInstanceLag) {
		return nil, false
	}
	return o.RacMaxInstanceLag, true
}

// HasRacMaxInstanceLag returns a boolean if a field has been set.
func (o *UpdateOracleDsourceParameters) HasRacMaxInstanceLag() bool {
	if o != nil && !IsNil(o.RacMaxInstanceLag) {
		return true
	}

	return false
}

// SetRacMaxInstanceLag gets a reference to the given int32 and assigns it to the RacMaxInstanceLag field.
func (o *UpdateOracleDsourceParameters) SetRacMaxInstanceLag(v int32) {
	o.RacMaxInstanceLag = &v
}

// GetAllowAutoStagingRestartOnHostReboot returns the AllowAutoStagingRestartOnHostReboot field value if set, zero value otherwise.
func (o *UpdateOracleDsourceParameters) GetAllowAutoStagingRestartOnHostReboot() bool {
	if o == nil || IsNil(o.AllowAutoStagingRestartOnHostReboot) {
		var ret bool
		return ret
	}
	return *o.AllowAutoStagingRestartOnHostReboot
}

// GetAllowAutoStagingRestartOnHostRebootOk returns a tuple with the AllowAutoStagingRestartOnHostReboot field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateOracleDsourceParameters) GetAllowAutoStagingRestartOnHostRebootOk() (*bool, bool) {
	if o == nil || IsNil(o.AllowAutoStagingRestartOnHostReboot) {
		return nil, false
	}
	return o.AllowAutoStagingRestartOnHostReboot, true
}

// HasAllowAutoStagingRestartOnHostReboot returns a boolean if a field has been set.
func (o *UpdateOracleDsourceParameters) HasAllowAutoStagingRestartOnHostReboot() bool {
	if o != nil && !IsNil(o.AllowAutoStagingRestartOnHostReboot) {
		return true
	}

	return false
}

// SetAllowAutoStagingRestartOnHostReboot gets a reference to the given bool and assigns it to the AllowAutoStagingRestartOnHostReboot field.
func (o *UpdateOracleDsourceParameters) SetAllowAutoStagingRestartOnHostReboot(v bool) {
	o.AllowAutoStagingRestartOnHostReboot = &v
}

// GetPhysicalStandby returns the PhysicalStandby field value if set, zero value otherwise.
func (o *UpdateOracleDsourceParameters) GetPhysicalStandby() bool {
	if o == nil || IsNil(o.PhysicalStandby) {
		var ret bool
		return ret
	}
	return *o.PhysicalStandby
}

// GetPhysicalStandbyOk returns a tuple with the PhysicalStandby field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateOracleDsourceParameters) GetPhysicalStandbyOk() (*bool, bool) {
	if o == nil || IsNil(o.PhysicalStandby) {
		return nil, false
	}
	return o.PhysicalStandby, true
}

// HasPhysicalStandby returns a boolean if a field has been set.
func (o *UpdateOracleDsourceParameters) HasPhysicalStandby() bool {
	if o != nil && !IsNil(o.PhysicalStandby) {
		return true
	}

	return false
}

// SetPhysicalStandby gets a reference to the given bool and assigns it to the PhysicalStandby field.
func (o *UpdateOracleDsourceParameters) SetPhysicalStandby(v bool) {
	o.PhysicalStandby = &v
}

// GetExternalFilePath returns the ExternalFilePath field value if set, zero value otherwise.
func (o *UpdateOracleDsourceParameters) GetExternalFilePath() string {
	if o == nil || IsNil(o.ExternalFilePath) {
		var ret string
		return ret
	}
	return *o.ExternalFilePath
}

// GetExternalFilePathOk returns a tuple with the ExternalFilePath field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateOracleDsourceParameters) GetExternalFilePathOk() (*string, bool) {
	if o == nil || IsNil(o.ExternalFilePath) {
		return nil, false
	}
	return o.ExternalFilePath, true
}

// HasExternalFilePath returns a boolean if a field has been set.
func (o *UpdateOracleDsourceParameters) HasExternalFilePath() bool {
	if o != nil && !IsNil(o.ExternalFilePath) {
		return true
	}

	return false
}

// SetExternalFilePath gets a reference to the given string and assigns it to the ExternalFilePath field.
func (o *UpdateOracleDsourceParameters) SetExternalFilePath(v string) {
	o.ExternalFilePath = &v
}

// GetHooks returns the Hooks field value if set, zero value otherwise.
func (o *UpdateOracleDsourceParameters) GetHooks() DSourceHooks {
	if o == nil || IsNil(o.Hooks) {
		var ret DSourceHooks
		return ret
	}
	return *o.Hooks
}

// GetHooksOk returns a tuple with the Hooks field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateOracleDsourceParameters) GetHooksOk() (*DSourceHooks, bool) {
	if o == nil || IsNil(o.Hooks) {
		return nil, false
	}
	return o.Hooks, true
}

// HasHooks returns a boolean if a field has been set.
func (o *UpdateOracleDsourceParameters) HasHooks() bool {
	if o != nil && !IsNil(o.Hooks) {
		return true
	}

	return false
}

// SetHooks gets a reference to the given DSourceHooks and assigns it to the Hooks field.
func (o *UpdateOracleDsourceParameters) SetHooks(v DSourceHooks) {
	o.Hooks = &v
}

// GetCustomEnvVariablesPairs returns the CustomEnvVariablesPairs field value if set, zero value otherwise.
func (o *UpdateOracleDsourceParameters) GetCustomEnvVariablesPairs() []NameValuePair {
	if o == nil || IsNil(o.CustomEnvVariablesPairs) {
		var ret []NameValuePair
		return ret
	}
	return o.CustomEnvVariablesPairs
}

// GetCustomEnvVariablesPairsOk returns a tuple with the CustomEnvVariablesPairs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateOracleDsourceParameters) GetCustomEnvVariablesPairsOk() ([]NameValuePair, bool) {
	if o == nil || IsNil(o.CustomEnvVariablesPairs) {
		return nil, false
	}
	return o.CustomEnvVariablesPairs, true
}

// HasCustomEnvVariablesPairs returns a boolean if a field has been set.
func (o *UpdateOracleDsourceParameters) HasCustomEnvVariablesPairs() bool {
	if o != nil && !IsNil(o.CustomEnvVariablesPairs) {
		return true
	}

	return false
}

// SetCustomEnvVariablesPairs gets a reference to the given []NameValuePair and assigns it to the CustomEnvVariablesPairs field.
func (o *UpdateOracleDsourceParameters) SetCustomEnvVariablesPairs(v []NameValuePair) {
	o.CustomEnvVariablesPairs = v
}

// GetCustomEnvVariablesPaths returns the CustomEnvVariablesPaths field value if set, zero value otherwise.
func (o *UpdateOracleDsourceParameters) GetCustomEnvVariablesPaths() []string {
	if o == nil || IsNil(o.CustomEnvVariablesPaths) {
		var ret []string
		return ret
	}
	return o.CustomEnvVariablesPaths
}

// GetCustomEnvVariablesPathsOk returns a tuple with the CustomEnvVariablesPaths field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateOracleDsourceParameters) GetCustomEnvVariablesPathsOk() ([]string, bool) {
	if o == nil || IsNil(o.CustomEnvVariablesPaths) {
		return nil, false
	}
	return o.CustomEnvVariablesPaths, true
}

// HasCustomEnvVariablesPaths returns a boolean if a field has been set.
func (o *UpdateOracleDsourceParameters) HasCustomEnvVariablesPaths() bool {
	if o != nil && !IsNil(o.CustomEnvVariablesPaths) {
		return true
	}

	return false
}

// SetCustomEnvVariablesPaths gets a reference to the given []string and assigns it to the CustomEnvVariablesPaths field.
func (o *UpdateOracleDsourceParameters) SetCustomEnvVariablesPaths(v []string) {
	o.CustomEnvVariablesPaths = v
}

// GetStagingDatabaseConfigParams returns the StagingDatabaseConfigParams field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdateOracleDsourceParameters) GetStagingDatabaseConfigParams() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}
	return o.StagingDatabaseConfigParams
}

// GetStagingDatabaseConfigParamsOk returns a tuple with the StagingDatabaseConfigParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateOracleDsourceParameters) GetStagingDatabaseConfigParamsOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.StagingDatabaseConfigParams) {
		return map[string]interface{}{}, false
	}
	return o.StagingDatabaseConfigParams, true
}

// HasStagingDatabaseConfigParams returns a boolean if a field has been set.
func (o *UpdateOracleDsourceParameters) HasStagingDatabaseConfigParams() bool {
	if o != nil && !IsNil(o.StagingDatabaseConfigParams) {
		return true
	}

	return false
}

// SetStagingDatabaseConfigParams gets a reference to the given map[string]interface{} and assigns it to the StagingDatabaseConfigParams field.
func (o *UpdateOracleDsourceParameters) SetStagingDatabaseConfigParams(v map[string]interface{}) {
	o.StagingDatabaseConfigParams = v
}

// GetTemplateId returns the TemplateId field value if set, zero value otherwise.
func (o *UpdateOracleDsourceParameters) GetTemplateId() string {
	if o == nil || IsNil(o.TemplateId) {
		var ret string
		return ret
	}
	return *o.TemplateId
}

// GetTemplateIdOk returns a tuple with the TemplateId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateOracleDsourceParameters) GetTemplateIdOk() (*string, bool) {
	if o == nil || IsNil(o.TemplateId) {
		return nil, false
	}
	return o.TemplateId, true
}

// HasTemplateId returns a boolean if a field has been set.
func (o *UpdateOracleDsourceParameters) HasTemplateId() bool {
	if o != nil && !IsNil(o.TemplateId) {
		return true
	}

	return false
}

// SetTemplateId gets a reference to the given string and assigns it to the TemplateId field.
func (o *UpdateOracleDsourceParameters) SetTemplateId(v string) {
	o.TemplateId = &v
}

func (o UpdateOracleDsourceParameters) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateOracleDsourceParameters) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.DbUsername) {
		toSerialize["db_username"] = o.DbUsername
	}
	if !IsNil(o.DbPassword) {
		toSerialize["db_password"] = o.DbPassword
	}
	if !IsNil(o.ValidateDbCredentials) {
		toSerialize["validate_db_credentials"] = o.ValidateDbCredentials
	}
	if !IsNil(o.EnvironmentUserId) {
		toSerialize["environment_user_id"] = o.EnvironmentUserId
	}
	if !IsNil(o.BackupLevelEnabled) {
		toSerialize["backup_level_enabled"] = o.BackupLevelEnabled
	}
	if !IsNil(o.RmanChannels) {
		toSerialize["rman_channels"] = o.RmanChannels
	}
	if !IsNil(o.FilesPerSet) {
		toSerialize["files_per_set"] = o.FilesPerSet
	}
	if !IsNil(o.CheckLogical) {
		toSerialize["check_logical"] = o.CheckLogical
	}
	if !IsNil(o.EncryptedLinkingEnabled) {
		toSerialize["encrypted_linking_enabled"] = o.EncryptedLinkingEnabled
	}
	if !IsNil(o.CompressedLinkingEnabled) {
		toSerialize["compressed_linking_enabled"] = o.CompressedLinkingEnabled
	}
	if !IsNil(o.BandwidthLimit) {
		toSerialize["bandwidth_limit"] = o.BandwidthLimit
	}
	if !IsNil(o.NumberOfConnections) {
		toSerialize["number_of_connections"] = o.NumberOfConnections
	}
	if !IsNil(o.ValidateByOpeningDbInReadOnlyMode) {
		toSerialize["validate_by_opening_db_in_read_only_mode"] = o.ValidateByOpeningDbInReadOnlyMode
	}
	if !IsNil(o.PreProvisioningEnabled) {
		toSerialize["pre_provisioning_enabled"] = o.PreProvisioningEnabled
	}
	if !IsNil(o.DiagnoseNoLoggingFaults) {
		toSerialize["diagnose_no_logging_faults"] = o.DiagnoseNoLoggingFaults
	}
	if !IsNil(o.RacMaxInstanceLag) {
		toSerialize["rac_max_instance_lag"] = o.RacMaxInstanceLag
	}
	if !IsNil(o.AllowAutoStagingRestartOnHostReboot) {
		toSerialize["allow_auto_staging_restart_on_host_reboot"] = o.AllowAutoStagingRestartOnHostReboot
	}
	if !IsNil(o.PhysicalStandby) {
		toSerialize["physical_standby"] = o.PhysicalStandby
	}
	if !IsNil(o.ExternalFilePath) {
		toSerialize["external_file_path"] = o.ExternalFilePath
	}
	if !IsNil(o.Hooks) {
		toSerialize["hooks"] = o.Hooks
	}
	if !IsNil(o.CustomEnvVariablesPairs) {
		toSerialize["custom_env_variables_pairs"] = o.CustomEnvVariablesPairs
	}
	if !IsNil(o.CustomEnvVariablesPaths) {
		toSerialize["custom_env_variables_paths"] = o.CustomEnvVariablesPaths
	}
	if o.StagingDatabaseConfigParams != nil {
		toSerialize["staging_database_config_params"] = o.StagingDatabaseConfigParams
	}
	if !IsNil(o.TemplateId) {
		toSerialize["template_id"] = o.TemplateId
	}
	return toSerialize, nil
}

type NullableUpdateOracleDsourceParameters struct {
	value *UpdateOracleDsourceParameters
	isSet bool
}

func (v NullableUpdateOracleDsourceParameters) Get() *UpdateOracleDsourceParameters {
	return v.value
}

func (v *NullableUpdateOracleDsourceParameters) Set(val *UpdateOracleDsourceParameters) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateOracleDsourceParameters) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateOracleDsourceParameters) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateOracleDsourceParameters(val *UpdateOracleDsourceParameters) *NullableUpdateOracleDsourceParameters {
	return &NullableUpdateOracleDsourceParameters{value: val, isSet: true}
}

func (v NullableUpdateOracleDsourceParameters) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateOracleDsourceParameters) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


