/*
Delphix DCT API

Delphix DCT API

API version: 3.17.0
Contact: support@delphix.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package delphix_dct_api

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the MSSQLDSourceAttachSourceParameters type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MSSQLDSourceAttachSourceParameters{}

// MSSQLDSourceAttachSourceParameters struct for MSSQLDSourceAttachSourceParameters
type MSSQLDSourceAttachSourceParameters struct {
	// Id of the source to link.
	SourceId string `json:"source_id"`
	// Id of the SQL instance on the PPT environment that we want to use for pre-provisioning.
	PptRepository string `json:"ppt_repository"`
	// MSSQL specific parameters for source based sync strategy.: * `external` - MSSQL specific parameters for externally managed source based sync strategy. * `delphix` - MSSQL specific parameters for delphix managed source based sync strategy. 
	SyncStrategyManagedType *string `json:"sync_strategy_managed_type,omitempty"`
	// Reference to the source environment user to use for linking.
	MssqlUserEnvironmentReference *string `json:"mssql_user_environment_reference,omitempty"`
	// The username for the source DB user.
	MssqlUserDomainUsername *string `json:"mssql_user_domain_username,omitempty"`
	// Password for the database user.
	MssqlUserDomainPassword *string `json:"mssql_user_domain_password,omitempty"`
	// Delphix display name for the vault user.
	MssqlUserDomainVaultUsername *string `json:"mssql_user_domain_vault_username,omitempty"`
	// The name or reference of the vault from which to read the database credentials.
	MssqlUserDomainVault *string `json:"mssql_user_domain_vault,omitempty"`
	// Vault engine name where the credential is stored.
	MssqlUserDomainHashicorpVaultEngine *string `json:"mssql_user_domain_hashicorp_vault_engine,omitempty"`
	// Path in the vault engine where the credential is stored.
	MssqlUserDomainHashicorpVaultSecretPath *string `json:"mssql_user_domain_hashicorp_vault_secret_path,omitempty"`
	// Hashicorp vault key for the username in the key-value store.
	MssqlUserDomainHashicorpVaultUsernameKey *string `json:"mssql_user_domain_hashicorp_vault_username_key,omitempty"`
	// Hashicorp vault key for the password in the key-value store.
	MssqlUserDomainHashicorpVaultSecretKey *string `json:"mssql_user_domain_hashicorp_vault_secret_key,omitempty"`
	// Azure key vault name.
	MssqlUserDomainAzureVaultName *string `json:"mssql_user_domain_azure_vault_name,omitempty"`
	// Azure vault key for the username in the key-value store.
	MssqlUserDomainAzureVaultUsernameKey *string `json:"mssql_user_domain_azure_vault_username_key,omitempty"`
	// Azure vault key for the password in the key-value store.
	MssqlUserDomainAzureVaultSecretKey *string `json:"mssql_user_domain_azure_vault_secret_key,omitempty"`
	// Query to find a credential in the CyberArk vault.
	MssqlUserDomainCyberarkVaultQueryString *string `json:"mssql_user_domain_cyberark_vault_query_string,omitempty"`
	// The username for the source DB user.
	MssqlDatabaseUsername *string `json:"mssql_database_username,omitempty"`
	// Password for the database user.
	MssqlDatabasePassword *string `json:"mssql_database_password,omitempty"`
	// Specify whether the backups taken should be compressed or uncompressed when Delphix managed option is selected.
	DelphixManagedBackupCompressionEnabled *bool `json:"delphix_managed_backup_compression_enabled,omitempty"`
	// Specify which node of an availability group to run the copy-only full backup on: * `primary` - Backups only go to the primary node. * `secondary_only` - Backups only go to secondary nodes. If secondary nodes are down, backups will fail. * `prefer_secondary` - Backups go to secondary nodes, but if secondary nodes are down, backups will go to the primary node. 
	DelphixManagedBackupPolicy *string `json:"delphix_managed_backup_policy,omitempty"`
	// Specifies the backup types ValidatedSync will use to synchronize the dSource with the source database
	ExternalManagedValidateSyncMode *string `json:"external_managed_validate_sync_mode,omitempty"`
	// Shared source database backup locations.
	ExternalManagedSharedBackupLocations []string `json:"external_managed_shared_backup_locations,omitempty"`
	// The master server name of this NetBackup configuration.
	ExternalNetbackupConfigMasterName *string `json:"external_netbackup_config_master_name,omitempty"`
	// The source's client server name of this NetBackup configuration.
	ExternalNetbackupConfigSourceClientName *string `json:"external_netbackup_config_source_client_name,omitempty"`
	// NetBackup configuration parameter overrides.
	ExternalNetbackupConfigParams map[string]interface{} `json:"external_netbackup_config_params,omitempty"`
	// Optional config template selection for NetBackup configurations. If set, external_netbackup_config_params will be ignored.
	ExternalNetbackupConfigTemplates *string `json:"external_netbackup_config_templates,omitempty"`
	// The commserve host name of this Commvault configuration.
	ExternalCommserveHostName *string `json:"external_commserve_host_name,omitempty"`
	// The source client name of this Commvault configuration.
	ExternalCommvaultConfigSourceClientName *string `json:"external_commvault_config_source_client_name,omitempty"`
	// The staging client name of this Commvault configuration.
	ExternalCommvaultConfigStagingClientName *string `json:"external_commvault_config_staging_client_name,omitempty"`
	// Commvault configuration parameter overrides.
	ExternalCommvaultConfigParams map[string]interface{} `json:"external_commvault_config_params,omitempty"`
	// Optional config template selection for Commvault configurations. If set, configParams will be ignored.
	ExternalCommvaultConfigTemplates *string `json:"external_commvault_config_templates,omitempty"`
	// The encryption key to use when restoring encrypted backups.
	EncryptionKey *string `json:"encryption_key,omitempty"`
	// ID or user reference of the host OS user to use for linking.
	SourceHostUser *string `json:"source_host_user,omitempty"`
	// Reference of the host OS user on the PPT host to use for linking.
	PptHostUser *string `json:"ppt_host_user,omitempty"`
	// A user-provided PowerShell script or executable to run prior to restoring from a backup during pre-provisioning.
	StagingPreScript *string `json:"staging_pre_script,omitempty"`
	// A user-provided PowerShell script or executable to run after restoring from a backup during pre-provisioning.
	StagingPostScript *string `json:"staging_post_script,omitempty"`
	// Operations to perform before syncing the created dSource. These operations can quiesce any data prior to syncing.
	OpsPreSync []SourceOperation `json:"ops_pre_sync,omitempty"`
	// Operations to perform after syncing a created dSource.
	OpsPostSync []SourceOperation `json:"ops_post_sync,omitempty"`
}

type _MSSQLDSourceAttachSourceParameters MSSQLDSourceAttachSourceParameters

// NewMSSQLDSourceAttachSourceParameters instantiates a new MSSQLDSourceAttachSourceParameters object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMSSQLDSourceAttachSourceParameters(sourceId string, pptRepository string) *MSSQLDSourceAttachSourceParameters {
	this := MSSQLDSourceAttachSourceParameters{}
	this.SourceId = sourceId
	this.PptRepository = pptRepository
	var syncStrategyManagedType string = "external"
	this.SyncStrategyManagedType = &syncStrategyManagedType
	var delphixManagedBackupCompressionEnabled bool = false
	this.DelphixManagedBackupCompressionEnabled = &delphixManagedBackupCompressionEnabled
	var delphixManagedBackupPolicy string = "primary"
	this.DelphixManagedBackupPolicy = &delphixManagedBackupPolicy
	var externalManagedValidateSyncMode string = "TRANSACTION_LOG"
	this.ExternalManagedValidateSyncMode = &externalManagedValidateSyncMode
	return &this
}

// NewMSSQLDSourceAttachSourceParametersWithDefaults instantiates a new MSSQLDSourceAttachSourceParameters object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMSSQLDSourceAttachSourceParametersWithDefaults() *MSSQLDSourceAttachSourceParameters {
	this := MSSQLDSourceAttachSourceParameters{}
	var syncStrategyManagedType string = "external"
	this.SyncStrategyManagedType = &syncStrategyManagedType
	var delphixManagedBackupCompressionEnabled bool = false
	this.DelphixManagedBackupCompressionEnabled = &delphixManagedBackupCompressionEnabled
	var delphixManagedBackupPolicy string = "primary"
	this.DelphixManagedBackupPolicy = &delphixManagedBackupPolicy
	var externalManagedValidateSyncMode string = "TRANSACTION_LOG"
	this.ExternalManagedValidateSyncMode = &externalManagedValidateSyncMode
	return &this
}

// GetSourceId returns the SourceId field value
func (o *MSSQLDSourceAttachSourceParameters) GetSourceId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SourceId
}

// GetSourceIdOk returns a tuple with the SourceId field value
// and a boolean to check if the value has been set.
func (o *MSSQLDSourceAttachSourceParameters) GetSourceIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SourceId, true
}

// SetSourceId sets field value
func (o *MSSQLDSourceAttachSourceParameters) SetSourceId(v string) {
	o.SourceId = v
}

// GetPptRepository returns the PptRepository field value
func (o *MSSQLDSourceAttachSourceParameters) GetPptRepository() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PptRepository
}

// GetPptRepositoryOk returns a tuple with the PptRepository field value
// and a boolean to check if the value has been set.
func (o *MSSQLDSourceAttachSourceParameters) GetPptRepositoryOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PptRepository, true
}

// SetPptRepository sets field value
func (o *MSSQLDSourceAttachSourceParameters) SetPptRepository(v string) {
	o.PptRepository = v
}

// GetSyncStrategyManagedType returns the SyncStrategyManagedType field value if set, zero value otherwise.
func (o *MSSQLDSourceAttachSourceParameters) GetSyncStrategyManagedType() string {
	if o == nil || IsNil(o.SyncStrategyManagedType) {
		var ret string
		return ret
	}
	return *o.SyncStrategyManagedType
}

// GetSyncStrategyManagedTypeOk returns a tuple with the SyncStrategyManagedType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MSSQLDSourceAttachSourceParameters) GetSyncStrategyManagedTypeOk() (*string, bool) {
	if o == nil || IsNil(o.SyncStrategyManagedType) {
		return nil, false
	}
	return o.SyncStrategyManagedType, true
}

// HasSyncStrategyManagedType returns a boolean if a field has been set.
func (o *MSSQLDSourceAttachSourceParameters) HasSyncStrategyManagedType() bool {
	if o != nil && !IsNil(o.SyncStrategyManagedType) {
		return true
	}

	return false
}

// SetSyncStrategyManagedType gets a reference to the given string and assigns it to the SyncStrategyManagedType field.
func (o *MSSQLDSourceAttachSourceParameters) SetSyncStrategyManagedType(v string) {
	o.SyncStrategyManagedType = &v
}

// GetMssqlUserEnvironmentReference returns the MssqlUserEnvironmentReference field value if set, zero value otherwise.
func (o *MSSQLDSourceAttachSourceParameters) GetMssqlUserEnvironmentReference() string {
	if o == nil || IsNil(o.MssqlUserEnvironmentReference) {
		var ret string
		return ret
	}
	return *o.MssqlUserEnvironmentReference
}

// GetMssqlUserEnvironmentReferenceOk returns a tuple with the MssqlUserEnvironmentReference field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MSSQLDSourceAttachSourceParameters) GetMssqlUserEnvironmentReferenceOk() (*string, bool) {
	if o == nil || IsNil(o.MssqlUserEnvironmentReference) {
		return nil, false
	}
	return o.MssqlUserEnvironmentReference, true
}

// HasMssqlUserEnvironmentReference returns a boolean if a field has been set.
func (o *MSSQLDSourceAttachSourceParameters) HasMssqlUserEnvironmentReference() bool {
	if o != nil && !IsNil(o.MssqlUserEnvironmentReference) {
		return true
	}

	return false
}

// SetMssqlUserEnvironmentReference gets a reference to the given string and assigns it to the MssqlUserEnvironmentReference field.
func (o *MSSQLDSourceAttachSourceParameters) SetMssqlUserEnvironmentReference(v string) {
	o.MssqlUserEnvironmentReference = &v
}

// GetMssqlUserDomainUsername returns the MssqlUserDomainUsername field value if set, zero value otherwise.
func (o *MSSQLDSourceAttachSourceParameters) GetMssqlUserDomainUsername() string {
	if o == nil || IsNil(o.MssqlUserDomainUsername) {
		var ret string
		return ret
	}
	return *o.MssqlUserDomainUsername
}

// GetMssqlUserDomainUsernameOk returns a tuple with the MssqlUserDomainUsername field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MSSQLDSourceAttachSourceParameters) GetMssqlUserDomainUsernameOk() (*string, bool) {
	if o == nil || IsNil(o.MssqlUserDomainUsername) {
		return nil, false
	}
	return o.MssqlUserDomainUsername, true
}

// HasMssqlUserDomainUsername returns a boolean if a field has been set.
func (o *MSSQLDSourceAttachSourceParameters) HasMssqlUserDomainUsername() bool {
	if o != nil && !IsNil(o.MssqlUserDomainUsername) {
		return true
	}

	return false
}

// SetMssqlUserDomainUsername gets a reference to the given string and assigns it to the MssqlUserDomainUsername field.
func (o *MSSQLDSourceAttachSourceParameters) SetMssqlUserDomainUsername(v string) {
	o.MssqlUserDomainUsername = &v
}

// GetMssqlUserDomainPassword returns the MssqlUserDomainPassword field value if set, zero value otherwise.
func (o *MSSQLDSourceAttachSourceParameters) GetMssqlUserDomainPassword() string {
	if o == nil || IsNil(o.MssqlUserDomainPassword) {
		var ret string
		return ret
	}
	return *o.MssqlUserDomainPassword
}

// GetMssqlUserDomainPasswordOk returns a tuple with the MssqlUserDomainPassword field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MSSQLDSourceAttachSourceParameters) GetMssqlUserDomainPasswordOk() (*string, bool) {
	if o == nil || IsNil(o.MssqlUserDomainPassword) {
		return nil, false
	}
	return o.MssqlUserDomainPassword, true
}

// HasMssqlUserDomainPassword returns a boolean if a field has been set.
func (o *MSSQLDSourceAttachSourceParameters) HasMssqlUserDomainPassword() bool {
	if o != nil && !IsNil(o.MssqlUserDomainPassword) {
		return true
	}

	return false
}

// SetMssqlUserDomainPassword gets a reference to the given string and assigns it to the MssqlUserDomainPassword field.
func (o *MSSQLDSourceAttachSourceParameters) SetMssqlUserDomainPassword(v string) {
	o.MssqlUserDomainPassword = &v
}

// GetMssqlUserDomainVaultUsername returns the MssqlUserDomainVaultUsername field value if set, zero value otherwise.
func (o *MSSQLDSourceAttachSourceParameters) GetMssqlUserDomainVaultUsername() string {
	if o == nil || IsNil(o.MssqlUserDomainVaultUsername) {
		var ret string
		return ret
	}
	return *o.MssqlUserDomainVaultUsername
}

// GetMssqlUserDomainVaultUsernameOk returns a tuple with the MssqlUserDomainVaultUsername field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MSSQLDSourceAttachSourceParameters) GetMssqlUserDomainVaultUsernameOk() (*string, bool) {
	if o == nil || IsNil(o.MssqlUserDomainVaultUsername) {
		return nil, false
	}
	return o.MssqlUserDomainVaultUsername, true
}

// HasMssqlUserDomainVaultUsername returns a boolean if a field has been set.
func (o *MSSQLDSourceAttachSourceParameters) HasMssqlUserDomainVaultUsername() bool {
	if o != nil && !IsNil(o.MssqlUserDomainVaultUsername) {
		return true
	}

	return false
}

// SetMssqlUserDomainVaultUsername gets a reference to the given string and assigns it to the MssqlUserDomainVaultUsername field.
func (o *MSSQLDSourceAttachSourceParameters) SetMssqlUserDomainVaultUsername(v string) {
	o.MssqlUserDomainVaultUsername = &v
}

// GetMssqlUserDomainVault returns the MssqlUserDomainVault field value if set, zero value otherwise.
func (o *MSSQLDSourceAttachSourceParameters) GetMssqlUserDomainVault() string {
	if o == nil || IsNil(o.MssqlUserDomainVault) {
		var ret string
		return ret
	}
	return *o.MssqlUserDomainVault
}

// GetMssqlUserDomainVaultOk returns a tuple with the MssqlUserDomainVault field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MSSQLDSourceAttachSourceParameters) GetMssqlUserDomainVaultOk() (*string, bool) {
	if o == nil || IsNil(o.MssqlUserDomainVault) {
		return nil, false
	}
	return o.MssqlUserDomainVault, true
}

// HasMssqlUserDomainVault returns a boolean if a field has been set.
func (o *MSSQLDSourceAttachSourceParameters) HasMssqlUserDomainVault() bool {
	if o != nil && !IsNil(o.MssqlUserDomainVault) {
		return true
	}

	return false
}

// SetMssqlUserDomainVault gets a reference to the given string and assigns it to the MssqlUserDomainVault field.
func (o *MSSQLDSourceAttachSourceParameters) SetMssqlUserDomainVault(v string) {
	o.MssqlUserDomainVault = &v
}

// GetMssqlUserDomainHashicorpVaultEngine returns the MssqlUserDomainHashicorpVaultEngine field value if set, zero value otherwise.
func (o *MSSQLDSourceAttachSourceParameters) GetMssqlUserDomainHashicorpVaultEngine() string {
	if o == nil || IsNil(o.MssqlUserDomainHashicorpVaultEngine) {
		var ret string
		return ret
	}
	return *o.MssqlUserDomainHashicorpVaultEngine
}

// GetMssqlUserDomainHashicorpVaultEngineOk returns a tuple with the MssqlUserDomainHashicorpVaultEngine field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MSSQLDSourceAttachSourceParameters) GetMssqlUserDomainHashicorpVaultEngineOk() (*string, bool) {
	if o == nil || IsNil(o.MssqlUserDomainHashicorpVaultEngine) {
		return nil, false
	}
	return o.MssqlUserDomainHashicorpVaultEngine, true
}

// HasMssqlUserDomainHashicorpVaultEngine returns a boolean if a field has been set.
func (o *MSSQLDSourceAttachSourceParameters) HasMssqlUserDomainHashicorpVaultEngine() bool {
	if o != nil && !IsNil(o.MssqlUserDomainHashicorpVaultEngine) {
		return true
	}

	return false
}

// SetMssqlUserDomainHashicorpVaultEngine gets a reference to the given string and assigns it to the MssqlUserDomainHashicorpVaultEngine field.
func (o *MSSQLDSourceAttachSourceParameters) SetMssqlUserDomainHashicorpVaultEngine(v string) {
	o.MssqlUserDomainHashicorpVaultEngine = &v
}

// GetMssqlUserDomainHashicorpVaultSecretPath returns the MssqlUserDomainHashicorpVaultSecretPath field value if set, zero value otherwise.
func (o *MSSQLDSourceAttachSourceParameters) GetMssqlUserDomainHashicorpVaultSecretPath() string {
	if o == nil || IsNil(o.MssqlUserDomainHashicorpVaultSecretPath) {
		var ret string
		return ret
	}
	return *o.MssqlUserDomainHashicorpVaultSecretPath
}

// GetMssqlUserDomainHashicorpVaultSecretPathOk returns a tuple with the MssqlUserDomainHashicorpVaultSecretPath field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MSSQLDSourceAttachSourceParameters) GetMssqlUserDomainHashicorpVaultSecretPathOk() (*string, bool) {
	if o == nil || IsNil(o.MssqlUserDomainHashicorpVaultSecretPath) {
		return nil, false
	}
	return o.MssqlUserDomainHashicorpVaultSecretPath, true
}

// HasMssqlUserDomainHashicorpVaultSecretPath returns a boolean if a field has been set.
func (o *MSSQLDSourceAttachSourceParameters) HasMssqlUserDomainHashicorpVaultSecretPath() bool {
	if o != nil && !IsNil(o.MssqlUserDomainHashicorpVaultSecretPath) {
		return true
	}

	return false
}

// SetMssqlUserDomainHashicorpVaultSecretPath gets a reference to the given string and assigns it to the MssqlUserDomainHashicorpVaultSecretPath field.
func (o *MSSQLDSourceAttachSourceParameters) SetMssqlUserDomainHashicorpVaultSecretPath(v string) {
	o.MssqlUserDomainHashicorpVaultSecretPath = &v
}

// GetMssqlUserDomainHashicorpVaultUsernameKey returns the MssqlUserDomainHashicorpVaultUsernameKey field value if set, zero value otherwise.
func (o *MSSQLDSourceAttachSourceParameters) GetMssqlUserDomainHashicorpVaultUsernameKey() string {
	if o == nil || IsNil(o.MssqlUserDomainHashicorpVaultUsernameKey) {
		var ret string
		return ret
	}
	return *o.MssqlUserDomainHashicorpVaultUsernameKey
}

// GetMssqlUserDomainHashicorpVaultUsernameKeyOk returns a tuple with the MssqlUserDomainHashicorpVaultUsernameKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MSSQLDSourceAttachSourceParameters) GetMssqlUserDomainHashicorpVaultUsernameKeyOk() (*string, bool) {
	if o == nil || IsNil(o.MssqlUserDomainHashicorpVaultUsernameKey) {
		return nil, false
	}
	return o.MssqlUserDomainHashicorpVaultUsernameKey, true
}

// HasMssqlUserDomainHashicorpVaultUsernameKey returns a boolean if a field has been set.
func (o *MSSQLDSourceAttachSourceParameters) HasMssqlUserDomainHashicorpVaultUsernameKey() bool {
	if o != nil && !IsNil(o.MssqlUserDomainHashicorpVaultUsernameKey) {
		return true
	}

	return false
}

// SetMssqlUserDomainHashicorpVaultUsernameKey gets a reference to the given string and assigns it to the MssqlUserDomainHashicorpVaultUsernameKey field.
func (o *MSSQLDSourceAttachSourceParameters) SetMssqlUserDomainHashicorpVaultUsernameKey(v string) {
	o.MssqlUserDomainHashicorpVaultUsernameKey = &v
}

// GetMssqlUserDomainHashicorpVaultSecretKey returns the MssqlUserDomainHashicorpVaultSecretKey field value if set, zero value otherwise.
func (o *MSSQLDSourceAttachSourceParameters) GetMssqlUserDomainHashicorpVaultSecretKey() string {
	if o == nil || IsNil(o.MssqlUserDomainHashicorpVaultSecretKey) {
		var ret string
		return ret
	}
	return *o.MssqlUserDomainHashicorpVaultSecretKey
}

// GetMssqlUserDomainHashicorpVaultSecretKeyOk returns a tuple with the MssqlUserDomainHashicorpVaultSecretKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MSSQLDSourceAttachSourceParameters) GetMssqlUserDomainHashicorpVaultSecretKeyOk() (*string, bool) {
	if o == nil || IsNil(o.MssqlUserDomainHashicorpVaultSecretKey) {
		return nil, false
	}
	return o.MssqlUserDomainHashicorpVaultSecretKey, true
}

// HasMssqlUserDomainHashicorpVaultSecretKey returns a boolean if a field has been set.
func (o *MSSQLDSourceAttachSourceParameters) HasMssqlUserDomainHashicorpVaultSecretKey() bool {
	if o != nil && !IsNil(o.MssqlUserDomainHashicorpVaultSecretKey) {
		return true
	}

	return false
}

// SetMssqlUserDomainHashicorpVaultSecretKey gets a reference to the given string and assigns it to the MssqlUserDomainHashicorpVaultSecretKey field.
func (o *MSSQLDSourceAttachSourceParameters) SetMssqlUserDomainHashicorpVaultSecretKey(v string) {
	o.MssqlUserDomainHashicorpVaultSecretKey = &v
}

// GetMssqlUserDomainAzureVaultName returns the MssqlUserDomainAzureVaultName field value if set, zero value otherwise.
func (o *MSSQLDSourceAttachSourceParameters) GetMssqlUserDomainAzureVaultName() string {
	if o == nil || IsNil(o.MssqlUserDomainAzureVaultName) {
		var ret string
		return ret
	}
	return *o.MssqlUserDomainAzureVaultName
}

// GetMssqlUserDomainAzureVaultNameOk returns a tuple with the MssqlUserDomainAzureVaultName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MSSQLDSourceAttachSourceParameters) GetMssqlUserDomainAzureVaultNameOk() (*string, bool) {
	if o == nil || IsNil(o.MssqlUserDomainAzureVaultName) {
		return nil, false
	}
	return o.MssqlUserDomainAzureVaultName, true
}

// HasMssqlUserDomainAzureVaultName returns a boolean if a field has been set.
func (o *MSSQLDSourceAttachSourceParameters) HasMssqlUserDomainAzureVaultName() bool {
	if o != nil && !IsNil(o.MssqlUserDomainAzureVaultName) {
		return true
	}

	return false
}

// SetMssqlUserDomainAzureVaultName gets a reference to the given string and assigns it to the MssqlUserDomainAzureVaultName field.
func (o *MSSQLDSourceAttachSourceParameters) SetMssqlUserDomainAzureVaultName(v string) {
	o.MssqlUserDomainAzureVaultName = &v
}

// GetMssqlUserDomainAzureVaultUsernameKey returns the MssqlUserDomainAzureVaultUsernameKey field value if set, zero value otherwise.
func (o *MSSQLDSourceAttachSourceParameters) GetMssqlUserDomainAzureVaultUsernameKey() string {
	if o == nil || IsNil(o.MssqlUserDomainAzureVaultUsernameKey) {
		var ret string
		return ret
	}
	return *o.MssqlUserDomainAzureVaultUsernameKey
}

// GetMssqlUserDomainAzureVaultUsernameKeyOk returns a tuple with the MssqlUserDomainAzureVaultUsernameKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MSSQLDSourceAttachSourceParameters) GetMssqlUserDomainAzureVaultUsernameKeyOk() (*string, bool) {
	if o == nil || IsNil(o.MssqlUserDomainAzureVaultUsernameKey) {
		return nil, false
	}
	return o.MssqlUserDomainAzureVaultUsernameKey, true
}

// HasMssqlUserDomainAzureVaultUsernameKey returns a boolean if a field has been set.
func (o *MSSQLDSourceAttachSourceParameters) HasMssqlUserDomainAzureVaultUsernameKey() bool {
	if o != nil && !IsNil(o.MssqlUserDomainAzureVaultUsernameKey) {
		return true
	}

	return false
}

// SetMssqlUserDomainAzureVaultUsernameKey gets a reference to the given string and assigns it to the MssqlUserDomainAzureVaultUsernameKey field.
func (o *MSSQLDSourceAttachSourceParameters) SetMssqlUserDomainAzureVaultUsernameKey(v string) {
	o.MssqlUserDomainAzureVaultUsernameKey = &v
}

// GetMssqlUserDomainAzureVaultSecretKey returns the MssqlUserDomainAzureVaultSecretKey field value if set, zero value otherwise.
func (o *MSSQLDSourceAttachSourceParameters) GetMssqlUserDomainAzureVaultSecretKey() string {
	if o == nil || IsNil(o.MssqlUserDomainAzureVaultSecretKey) {
		var ret string
		return ret
	}
	return *o.MssqlUserDomainAzureVaultSecretKey
}

// GetMssqlUserDomainAzureVaultSecretKeyOk returns a tuple with the MssqlUserDomainAzureVaultSecretKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MSSQLDSourceAttachSourceParameters) GetMssqlUserDomainAzureVaultSecretKeyOk() (*string, bool) {
	if o == nil || IsNil(o.MssqlUserDomainAzureVaultSecretKey) {
		return nil, false
	}
	return o.MssqlUserDomainAzureVaultSecretKey, true
}

// HasMssqlUserDomainAzureVaultSecretKey returns a boolean if a field has been set.
func (o *MSSQLDSourceAttachSourceParameters) HasMssqlUserDomainAzureVaultSecretKey() bool {
	if o != nil && !IsNil(o.MssqlUserDomainAzureVaultSecretKey) {
		return true
	}

	return false
}

// SetMssqlUserDomainAzureVaultSecretKey gets a reference to the given string and assigns it to the MssqlUserDomainAzureVaultSecretKey field.
func (o *MSSQLDSourceAttachSourceParameters) SetMssqlUserDomainAzureVaultSecretKey(v string) {
	o.MssqlUserDomainAzureVaultSecretKey = &v
}

// GetMssqlUserDomainCyberarkVaultQueryString returns the MssqlUserDomainCyberarkVaultQueryString field value if set, zero value otherwise.
func (o *MSSQLDSourceAttachSourceParameters) GetMssqlUserDomainCyberarkVaultQueryString() string {
	if o == nil || IsNil(o.MssqlUserDomainCyberarkVaultQueryString) {
		var ret string
		return ret
	}
	return *o.MssqlUserDomainCyberarkVaultQueryString
}

// GetMssqlUserDomainCyberarkVaultQueryStringOk returns a tuple with the MssqlUserDomainCyberarkVaultQueryString field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MSSQLDSourceAttachSourceParameters) GetMssqlUserDomainCyberarkVaultQueryStringOk() (*string, bool) {
	if o == nil || IsNil(o.MssqlUserDomainCyberarkVaultQueryString) {
		return nil, false
	}
	return o.MssqlUserDomainCyberarkVaultQueryString, true
}

// HasMssqlUserDomainCyberarkVaultQueryString returns a boolean if a field has been set.
func (o *MSSQLDSourceAttachSourceParameters) HasMssqlUserDomainCyberarkVaultQueryString() bool {
	if o != nil && !IsNil(o.MssqlUserDomainCyberarkVaultQueryString) {
		return true
	}

	return false
}

// SetMssqlUserDomainCyberarkVaultQueryString gets a reference to the given string and assigns it to the MssqlUserDomainCyberarkVaultQueryString field.
func (o *MSSQLDSourceAttachSourceParameters) SetMssqlUserDomainCyberarkVaultQueryString(v string) {
	o.MssqlUserDomainCyberarkVaultQueryString = &v
}

// GetMssqlDatabaseUsername returns the MssqlDatabaseUsername field value if set, zero value otherwise.
func (o *MSSQLDSourceAttachSourceParameters) GetMssqlDatabaseUsername() string {
	if o == nil || IsNil(o.MssqlDatabaseUsername) {
		var ret string
		return ret
	}
	return *o.MssqlDatabaseUsername
}

// GetMssqlDatabaseUsernameOk returns a tuple with the MssqlDatabaseUsername field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MSSQLDSourceAttachSourceParameters) GetMssqlDatabaseUsernameOk() (*string, bool) {
	if o == nil || IsNil(o.MssqlDatabaseUsername) {
		return nil, false
	}
	return o.MssqlDatabaseUsername, true
}

// HasMssqlDatabaseUsername returns a boolean if a field has been set.
func (o *MSSQLDSourceAttachSourceParameters) HasMssqlDatabaseUsername() bool {
	if o != nil && !IsNil(o.MssqlDatabaseUsername) {
		return true
	}

	return false
}

// SetMssqlDatabaseUsername gets a reference to the given string and assigns it to the MssqlDatabaseUsername field.
func (o *MSSQLDSourceAttachSourceParameters) SetMssqlDatabaseUsername(v string) {
	o.MssqlDatabaseUsername = &v
}

// GetMssqlDatabasePassword returns the MssqlDatabasePassword field value if set, zero value otherwise.
func (o *MSSQLDSourceAttachSourceParameters) GetMssqlDatabasePassword() string {
	if o == nil || IsNil(o.MssqlDatabasePassword) {
		var ret string
		return ret
	}
	return *o.MssqlDatabasePassword
}

// GetMssqlDatabasePasswordOk returns a tuple with the MssqlDatabasePassword field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MSSQLDSourceAttachSourceParameters) GetMssqlDatabasePasswordOk() (*string, bool) {
	if o == nil || IsNil(o.MssqlDatabasePassword) {
		return nil, false
	}
	return o.MssqlDatabasePassword, true
}

// HasMssqlDatabasePassword returns a boolean if a field has been set.
func (o *MSSQLDSourceAttachSourceParameters) HasMssqlDatabasePassword() bool {
	if o != nil && !IsNil(o.MssqlDatabasePassword) {
		return true
	}

	return false
}

// SetMssqlDatabasePassword gets a reference to the given string and assigns it to the MssqlDatabasePassword field.
func (o *MSSQLDSourceAttachSourceParameters) SetMssqlDatabasePassword(v string) {
	o.MssqlDatabasePassword = &v
}

// GetDelphixManagedBackupCompressionEnabled returns the DelphixManagedBackupCompressionEnabled field value if set, zero value otherwise.
func (o *MSSQLDSourceAttachSourceParameters) GetDelphixManagedBackupCompressionEnabled() bool {
	if o == nil || IsNil(o.DelphixManagedBackupCompressionEnabled) {
		var ret bool
		return ret
	}
	return *o.DelphixManagedBackupCompressionEnabled
}

// GetDelphixManagedBackupCompressionEnabledOk returns a tuple with the DelphixManagedBackupCompressionEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MSSQLDSourceAttachSourceParameters) GetDelphixManagedBackupCompressionEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.DelphixManagedBackupCompressionEnabled) {
		return nil, false
	}
	return o.DelphixManagedBackupCompressionEnabled, true
}

// HasDelphixManagedBackupCompressionEnabled returns a boolean if a field has been set.
func (o *MSSQLDSourceAttachSourceParameters) HasDelphixManagedBackupCompressionEnabled() bool {
	if o != nil && !IsNil(o.DelphixManagedBackupCompressionEnabled) {
		return true
	}

	return false
}

// SetDelphixManagedBackupCompressionEnabled gets a reference to the given bool and assigns it to the DelphixManagedBackupCompressionEnabled field.
func (o *MSSQLDSourceAttachSourceParameters) SetDelphixManagedBackupCompressionEnabled(v bool) {
	o.DelphixManagedBackupCompressionEnabled = &v
}

// GetDelphixManagedBackupPolicy returns the DelphixManagedBackupPolicy field value if set, zero value otherwise.
func (o *MSSQLDSourceAttachSourceParameters) GetDelphixManagedBackupPolicy() string {
	if o == nil || IsNil(o.DelphixManagedBackupPolicy) {
		var ret string
		return ret
	}
	return *o.DelphixManagedBackupPolicy
}

// GetDelphixManagedBackupPolicyOk returns a tuple with the DelphixManagedBackupPolicy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MSSQLDSourceAttachSourceParameters) GetDelphixManagedBackupPolicyOk() (*string, bool) {
	if o == nil || IsNil(o.DelphixManagedBackupPolicy) {
		return nil, false
	}
	return o.DelphixManagedBackupPolicy, true
}

// HasDelphixManagedBackupPolicy returns a boolean if a field has been set.
func (o *MSSQLDSourceAttachSourceParameters) HasDelphixManagedBackupPolicy() bool {
	if o != nil && !IsNil(o.DelphixManagedBackupPolicy) {
		return true
	}

	return false
}

// SetDelphixManagedBackupPolicy gets a reference to the given string and assigns it to the DelphixManagedBackupPolicy field.
func (o *MSSQLDSourceAttachSourceParameters) SetDelphixManagedBackupPolicy(v string) {
	o.DelphixManagedBackupPolicy = &v
}

// GetExternalManagedValidateSyncMode returns the ExternalManagedValidateSyncMode field value if set, zero value otherwise.
func (o *MSSQLDSourceAttachSourceParameters) GetExternalManagedValidateSyncMode() string {
	if o == nil || IsNil(o.ExternalManagedValidateSyncMode) {
		var ret string
		return ret
	}
	return *o.ExternalManagedValidateSyncMode
}

// GetExternalManagedValidateSyncModeOk returns a tuple with the ExternalManagedValidateSyncMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MSSQLDSourceAttachSourceParameters) GetExternalManagedValidateSyncModeOk() (*string, bool) {
	if o == nil || IsNil(o.ExternalManagedValidateSyncMode) {
		return nil, false
	}
	return o.ExternalManagedValidateSyncMode, true
}

// HasExternalManagedValidateSyncMode returns a boolean if a field has been set.
func (o *MSSQLDSourceAttachSourceParameters) HasExternalManagedValidateSyncMode() bool {
	if o != nil && !IsNil(o.ExternalManagedValidateSyncMode) {
		return true
	}

	return false
}

// SetExternalManagedValidateSyncMode gets a reference to the given string and assigns it to the ExternalManagedValidateSyncMode field.
func (o *MSSQLDSourceAttachSourceParameters) SetExternalManagedValidateSyncMode(v string) {
	o.ExternalManagedValidateSyncMode = &v
}

// GetExternalManagedSharedBackupLocations returns the ExternalManagedSharedBackupLocations field value if set, zero value otherwise.
func (o *MSSQLDSourceAttachSourceParameters) GetExternalManagedSharedBackupLocations() []string {
	if o == nil || IsNil(o.ExternalManagedSharedBackupLocations) {
		var ret []string
		return ret
	}
	return o.ExternalManagedSharedBackupLocations
}

// GetExternalManagedSharedBackupLocationsOk returns a tuple with the ExternalManagedSharedBackupLocations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MSSQLDSourceAttachSourceParameters) GetExternalManagedSharedBackupLocationsOk() ([]string, bool) {
	if o == nil || IsNil(o.ExternalManagedSharedBackupLocations) {
		return nil, false
	}
	return o.ExternalManagedSharedBackupLocations, true
}

// HasExternalManagedSharedBackupLocations returns a boolean if a field has been set.
func (o *MSSQLDSourceAttachSourceParameters) HasExternalManagedSharedBackupLocations() bool {
	if o != nil && !IsNil(o.ExternalManagedSharedBackupLocations) {
		return true
	}

	return false
}

// SetExternalManagedSharedBackupLocations gets a reference to the given []string and assigns it to the ExternalManagedSharedBackupLocations field.
func (o *MSSQLDSourceAttachSourceParameters) SetExternalManagedSharedBackupLocations(v []string) {
	o.ExternalManagedSharedBackupLocations = v
}

// GetExternalNetbackupConfigMasterName returns the ExternalNetbackupConfigMasterName field value if set, zero value otherwise.
func (o *MSSQLDSourceAttachSourceParameters) GetExternalNetbackupConfigMasterName() string {
	if o == nil || IsNil(o.ExternalNetbackupConfigMasterName) {
		var ret string
		return ret
	}
	return *o.ExternalNetbackupConfigMasterName
}

// GetExternalNetbackupConfigMasterNameOk returns a tuple with the ExternalNetbackupConfigMasterName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MSSQLDSourceAttachSourceParameters) GetExternalNetbackupConfigMasterNameOk() (*string, bool) {
	if o == nil || IsNil(o.ExternalNetbackupConfigMasterName) {
		return nil, false
	}
	return o.ExternalNetbackupConfigMasterName, true
}

// HasExternalNetbackupConfigMasterName returns a boolean if a field has been set.
func (o *MSSQLDSourceAttachSourceParameters) HasExternalNetbackupConfigMasterName() bool {
	if o != nil && !IsNil(o.ExternalNetbackupConfigMasterName) {
		return true
	}

	return false
}

// SetExternalNetbackupConfigMasterName gets a reference to the given string and assigns it to the ExternalNetbackupConfigMasterName field.
func (o *MSSQLDSourceAttachSourceParameters) SetExternalNetbackupConfigMasterName(v string) {
	o.ExternalNetbackupConfigMasterName = &v
}

// GetExternalNetbackupConfigSourceClientName returns the ExternalNetbackupConfigSourceClientName field value if set, zero value otherwise.
func (o *MSSQLDSourceAttachSourceParameters) GetExternalNetbackupConfigSourceClientName() string {
	if o == nil || IsNil(o.ExternalNetbackupConfigSourceClientName) {
		var ret string
		return ret
	}
	return *o.ExternalNetbackupConfigSourceClientName
}

// GetExternalNetbackupConfigSourceClientNameOk returns a tuple with the ExternalNetbackupConfigSourceClientName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MSSQLDSourceAttachSourceParameters) GetExternalNetbackupConfigSourceClientNameOk() (*string, bool) {
	if o == nil || IsNil(o.ExternalNetbackupConfigSourceClientName) {
		return nil, false
	}
	return o.ExternalNetbackupConfigSourceClientName, true
}

// HasExternalNetbackupConfigSourceClientName returns a boolean if a field has been set.
func (o *MSSQLDSourceAttachSourceParameters) HasExternalNetbackupConfigSourceClientName() bool {
	if o != nil && !IsNil(o.ExternalNetbackupConfigSourceClientName) {
		return true
	}

	return false
}

// SetExternalNetbackupConfigSourceClientName gets a reference to the given string and assigns it to the ExternalNetbackupConfigSourceClientName field.
func (o *MSSQLDSourceAttachSourceParameters) SetExternalNetbackupConfigSourceClientName(v string) {
	o.ExternalNetbackupConfigSourceClientName = &v
}

// GetExternalNetbackupConfigParams returns the ExternalNetbackupConfigParams field value if set, zero value otherwise.
func (o *MSSQLDSourceAttachSourceParameters) GetExternalNetbackupConfigParams() map[string]interface{} {
	if o == nil || IsNil(o.ExternalNetbackupConfigParams) {
		var ret map[string]interface{}
		return ret
	}
	return o.ExternalNetbackupConfigParams
}

// GetExternalNetbackupConfigParamsOk returns a tuple with the ExternalNetbackupConfigParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MSSQLDSourceAttachSourceParameters) GetExternalNetbackupConfigParamsOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.ExternalNetbackupConfigParams) {
		return map[string]interface{}{}, false
	}
	return o.ExternalNetbackupConfigParams, true
}

// HasExternalNetbackupConfigParams returns a boolean if a field has been set.
func (o *MSSQLDSourceAttachSourceParameters) HasExternalNetbackupConfigParams() bool {
	if o != nil && !IsNil(o.ExternalNetbackupConfigParams) {
		return true
	}

	return false
}

// SetExternalNetbackupConfigParams gets a reference to the given map[string]interface{} and assigns it to the ExternalNetbackupConfigParams field.
func (o *MSSQLDSourceAttachSourceParameters) SetExternalNetbackupConfigParams(v map[string]interface{}) {
	o.ExternalNetbackupConfigParams = v
}

// GetExternalNetbackupConfigTemplates returns the ExternalNetbackupConfigTemplates field value if set, zero value otherwise.
func (o *MSSQLDSourceAttachSourceParameters) GetExternalNetbackupConfigTemplates() string {
	if o == nil || IsNil(o.ExternalNetbackupConfigTemplates) {
		var ret string
		return ret
	}
	return *o.ExternalNetbackupConfigTemplates
}

// GetExternalNetbackupConfigTemplatesOk returns a tuple with the ExternalNetbackupConfigTemplates field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MSSQLDSourceAttachSourceParameters) GetExternalNetbackupConfigTemplatesOk() (*string, bool) {
	if o == nil || IsNil(o.ExternalNetbackupConfigTemplates) {
		return nil, false
	}
	return o.ExternalNetbackupConfigTemplates, true
}

// HasExternalNetbackupConfigTemplates returns a boolean if a field has been set.
func (o *MSSQLDSourceAttachSourceParameters) HasExternalNetbackupConfigTemplates() bool {
	if o != nil && !IsNil(o.ExternalNetbackupConfigTemplates) {
		return true
	}

	return false
}

// SetExternalNetbackupConfigTemplates gets a reference to the given string and assigns it to the ExternalNetbackupConfigTemplates field.
func (o *MSSQLDSourceAttachSourceParameters) SetExternalNetbackupConfigTemplates(v string) {
	o.ExternalNetbackupConfigTemplates = &v
}

// GetExternalCommserveHostName returns the ExternalCommserveHostName field value if set, zero value otherwise.
func (o *MSSQLDSourceAttachSourceParameters) GetExternalCommserveHostName() string {
	if o == nil || IsNil(o.ExternalCommserveHostName) {
		var ret string
		return ret
	}
	return *o.ExternalCommserveHostName
}

// GetExternalCommserveHostNameOk returns a tuple with the ExternalCommserveHostName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MSSQLDSourceAttachSourceParameters) GetExternalCommserveHostNameOk() (*string, bool) {
	if o == nil || IsNil(o.ExternalCommserveHostName) {
		return nil, false
	}
	return o.ExternalCommserveHostName, true
}

// HasExternalCommserveHostName returns a boolean if a field has been set.
func (o *MSSQLDSourceAttachSourceParameters) HasExternalCommserveHostName() bool {
	if o != nil && !IsNil(o.ExternalCommserveHostName) {
		return true
	}

	return false
}

// SetExternalCommserveHostName gets a reference to the given string and assigns it to the ExternalCommserveHostName field.
func (o *MSSQLDSourceAttachSourceParameters) SetExternalCommserveHostName(v string) {
	o.ExternalCommserveHostName = &v
}

// GetExternalCommvaultConfigSourceClientName returns the ExternalCommvaultConfigSourceClientName field value if set, zero value otherwise.
func (o *MSSQLDSourceAttachSourceParameters) GetExternalCommvaultConfigSourceClientName() string {
	if o == nil || IsNil(o.ExternalCommvaultConfigSourceClientName) {
		var ret string
		return ret
	}
	return *o.ExternalCommvaultConfigSourceClientName
}

// GetExternalCommvaultConfigSourceClientNameOk returns a tuple with the ExternalCommvaultConfigSourceClientName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MSSQLDSourceAttachSourceParameters) GetExternalCommvaultConfigSourceClientNameOk() (*string, bool) {
	if o == nil || IsNil(o.ExternalCommvaultConfigSourceClientName) {
		return nil, false
	}
	return o.ExternalCommvaultConfigSourceClientName, true
}

// HasExternalCommvaultConfigSourceClientName returns a boolean if a field has been set.
func (o *MSSQLDSourceAttachSourceParameters) HasExternalCommvaultConfigSourceClientName() bool {
	if o != nil && !IsNil(o.ExternalCommvaultConfigSourceClientName) {
		return true
	}

	return false
}

// SetExternalCommvaultConfigSourceClientName gets a reference to the given string and assigns it to the ExternalCommvaultConfigSourceClientName field.
func (o *MSSQLDSourceAttachSourceParameters) SetExternalCommvaultConfigSourceClientName(v string) {
	o.ExternalCommvaultConfigSourceClientName = &v
}

// GetExternalCommvaultConfigStagingClientName returns the ExternalCommvaultConfigStagingClientName field value if set, zero value otherwise.
func (o *MSSQLDSourceAttachSourceParameters) GetExternalCommvaultConfigStagingClientName() string {
	if o == nil || IsNil(o.ExternalCommvaultConfigStagingClientName) {
		var ret string
		return ret
	}
	return *o.ExternalCommvaultConfigStagingClientName
}

// GetExternalCommvaultConfigStagingClientNameOk returns a tuple with the ExternalCommvaultConfigStagingClientName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MSSQLDSourceAttachSourceParameters) GetExternalCommvaultConfigStagingClientNameOk() (*string, bool) {
	if o == nil || IsNil(o.ExternalCommvaultConfigStagingClientName) {
		return nil, false
	}
	return o.ExternalCommvaultConfigStagingClientName, true
}

// HasExternalCommvaultConfigStagingClientName returns a boolean if a field has been set.
func (o *MSSQLDSourceAttachSourceParameters) HasExternalCommvaultConfigStagingClientName() bool {
	if o != nil && !IsNil(o.ExternalCommvaultConfigStagingClientName) {
		return true
	}

	return false
}

// SetExternalCommvaultConfigStagingClientName gets a reference to the given string and assigns it to the ExternalCommvaultConfigStagingClientName field.
func (o *MSSQLDSourceAttachSourceParameters) SetExternalCommvaultConfigStagingClientName(v string) {
	o.ExternalCommvaultConfigStagingClientName = &v
}

// GetExternalCommvaultConfigParams returns the ExternalCommvaultConfigParams field value if set, zero value otherwise.
func (o *MSSQLDSourceAttachSourceParameters) GetExternalCommvaultConfigParams() map[string]interface{} {
	if o == nil || IsNil(o.ExternalCommvaultConfigParams) {
		var ret map[string]interface{}
		return ret
	}
	return o.ExternalCommvaultConfigParams
}

// GetExternalCommvaultConfigParamsOk returns a tuple with the ExternalCommvaultConfigParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MSSQLDSourceAttachSourceParameters) GetExternalCommvaultConfigParamsOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.ExternalCommvaultConfigParams) {
		return map[string]interface{}{}, false
	}
	return o.ExternalCommvaultConfigParams, true
}

// HasExternalCommvaultConfigParams returns a boolean if a field has been set.
func (o *MSSQLDSourceAttachSourceParameters) HasExternalCommvaultConfigParams() bool {
	if o != nil && !IsNil(o.ExternalCommvaultConfigParams) {
		return true
	}

	return false
}

// SetExternalCommvaultConfigParams gets a reference to the given map[string]interface{} and assigns it to the ExternalCommvaultConfigParams field.
func (o *MSSQLDSourceAttachSourceParameters) SetExternalCommvaultConfigParams(v map[string]interface{}) {
	o.ExternalCommvaultConfigParams = v
}

// GetExternalCommvaultConfigTemplates returns the ExternalCommvaultConfigTemplates field value if set, zero value otherwise.
func (o *MSSQLDSourceAttachSourceParameters) GetExternalCommvaultConfigTemplates() string {
	if o == nil || IsNil(o.ExternalCommvaultConfigTemplates) {
		var ret string
		return ret
	}
	return *o.ExternalCommvaultConfigTemplates
}

// GetExternalCommvaultConfigTemplatesOk returns a tuple with the ExternalCommvaultConfigTemplates field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MSSQLDSourceAttachSourceParameters) GetExternalCommvaultConfigTemplatesOk() (*string, bool) {
	if o == nil || IsNil(o.ExternalCommvaultConfigTemplates) {
		return nil, false
	}
	return o.ExternalCommvaultConfigTemplates, true
}

// HasExternalCommvaultConfigTemplates returns a boolean if a field has been set.
func (o *MSSQLDSourceAttachSourceParameters) HasExternalCommvaultConfigTemplates() bool {
	if o != nil && !IsNil(o.ExternalCommvaultConfigTemplates) {
		return true
	}

	return false
}

// SetExternalCommvaultConfigTemplates gets a reference to the given string and assigns it to the ExternalCommvaultConfigTemplates field.
func (o *MSSQLDSourceAttachSourceParameters) SetExternalCommvaultConfigTemplates(v string) {
	o.ExternalCommvaultConfigTemplates = &v
}

// GetEncryptionKey returns the EncryptionKey field value if set, zero value otherwise.
func (o *MSSQLDSourceAttachSourceParameters) GetEncryptionKey() string {
	if o == nil || IsNil(o.EncryptionKey) {
		var ret string
		return ret
	}
	return *o.EncryptionKey
}

// GetEncryptionKeyOk returns a tuple with the EncryptionKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MSSQLDSourceAttachSourceParameters) GetEncryptionKeyOk() (*string, bool) {
	if o == nil || IsNil(o.EncryptionKey) {
		return nil, false
	}
	return o.EncryptionKey, true
}

// HasEncryptionKey returns a boolean if a field has been set.
func (o *MSSQLDSourceAttachSourceParameters) HasEncryptionKey() bool {
	if o != nil && !IsNil(o.EncryptionKey) {
		return true
	}

	return false
}

// SetEncryptionKey gets a reference to the given string and assigns it to the EncryptionKey field.
func (o *MSSQLDSourceAttachSourceParameters) SetEncryptionKey(v string) {
	o.EncryptionKey = &v
}

// GetSourceHostUser returns the SourceHostUser field value if set, zero value otherwise.
func (o *MSSQLDSourceAttachSourceParameters) GetSourceHostUser() string {
	if o == nil || IsNil(o.SourceHostUser) {
		var ret string
		return ret
	}
	return *o.SourceHostUser
}

// GetSourceHostUserOk returns a tuple with the SourceHostUser field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MSSQLDSourceAttachSourceParameters) GetSourceHostUserOk() (*string, bool) {
	if o == nil || IsNil(o.SourceHostUser) {
		return nil, false
	}
	return o.SourceHostUser, true
}

// HasSourceHostUser returns a boolean if a field has been set.
func (o *MSSQLDSourceAttachSourceParameters) HasSourceHostUser() bool {
	if o != nil && !IsNil(o.SourceHostUser) {
		return true
	}

	return false
}

// SetSourceHostUser gets a reference to the given string and assigns it to the SourceHostUser field.
func (o *MSSQLDSourceAttachSourceParameters) SetSourceHostUser(v string) {
	o.SourceHostUser = &v
}

// GetPptHostUser returns the PptHostUser field value if set, zero value otherwise.
func (o *MSSQLDSourceAttachSourceParameters) GetPptHostUser() string {
	if o == nil || IsNil(o.PptHostUser) {
		var ret string
		return ret
	}
	return *o.PptHostUser
}

// GetPptHostUserOk returns a tuple with the PptHostUser field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MSSQLDSourceAttachSourceParameters) GetPptHostUserOk() (*string, bool) {
	if o == nil || IsNil(o.PptHostUser) {
		return nil, false
	}
	return o.PptHostUser, true
}

// HasPptHostUser returns a boolean if a field has been set.
func (o *MSSQLDSourceAttachSourceParameters) HasPptHostUser() bool {
	if o != nil && !IsNil(o.PptHostUser) {
		return true
	}

	return false
}

// SetPptHostUser gets a reference to the given string and assigns it to the PptHostUser field.
func (o *MSSQLDSourceAttachSourceParameters) SetPptHostUser(v string) {
	o.PptHostUser = &v
}

// GetStagingPreScript returns the StagingPreScript field value if set, zero value otherwise.
func (o *MSSQLDSourceAttachSourceParameters) GetStagingPreScript() string {
	if o == nil || IsNil(o.StagingPreScript) {
		var ret string
		return ret
	}
	return *o.StagingPreScript
}

// GetStagingPreScriptOk returns a tuple with the StagingPreScript field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MSSQLDSourceAttachSourceParameters) GetStagingPreScriptOk() (*string, bool) {
	if o == nil || IsNil(o.StagingPreScript) {
		return nil, false
	}
	return o.StagingPreScript, true
}

// HasStagingPreScript returns a boolean if a field has been set.
func (o *MSSQLDSourceAttachSourceParameters) HasStagingPreScript() bool {
	if o != nil && !IsNil(o.StagingPreScript) {
		return true
	}

	return false
}

// SetStagingPreScript gets a reference to the given string and assigns it to the StagingPreScript field.
func (o *MSSQLDSourceAttachSourceParameters) SetStagingPreScript(v string) {
	o.StagingPreScript = &v
}

// GetStagingPostScript returns the StagingPostScript field value if set, zero value otherwise.
func (o *MSSQLDSourceAttachSourceParameters) GetStagingPostScript() string {
	if o == nil || IsNil(o.StagingPostScript) {
		var ret string
		return ret
	}
	return *o.StagingPostScript
}

// GetStagingPostScriptOk returns a tuple with the StagingPostScript field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MSSQLDSourceAttachSourceParameters) GetStagingPostScriptOk() (*string, bool) {
	if o == nil || IsNil(o.StagingPostScript) {
		return nil, false
	}
	return o.StagingPostScript, true
}

// HasStagingPostScript returns a boolean if a field has been set.
func (o *MSSQLDSourceAttachSourceParameters) HasStagingPostScript() bool {
	if o != nil && !IsNil(o.StagingPostScript) {
		return true
	}

	return false
}

// SetStagingPostScript gets a reference to the given string and assigns it to the StagingPostScript field.
func (o *MSSQLDSourceAttachSourceParameters) SetStagingPostScript(v string) {
	o.StagingPostScript = &v
}

// GetOpsPreSync returns the OpsPreSync field value if set, zero value otherwise.
func (o *MSSQLDSourceAttachSourceParameters) GetOpsPreSync() []SourceOperation {
	if o == nil || IsNil(o.OpsPreSync) {
		var ret []SourceOperation
		return ret
	}
	return o.OpsPreSync
}

// GetOpsPreSyncOk returns a tuple with the OpsPreSync field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MSSQLDSourceAttachSourceParameters) GetOpsPreSyncOk() ([]SourceOperation, bool) {
	if o == nil || IsNil(o.OpsPreSync) {
		return nil, false
	}
	return o.OpsPreSync, true
}

// HasOpsPreSync returns a boolean if a field has been set.
func (o *MSSQLDSourceAttachSourceParameters) HasOpsPreSync() bool {
	if o != nil && !IsNil(o.OpsPreSync) {
		return true
	}

	return false
}

// SetOpsPreSync gets a reference to the given []SourceOperation and assigns it to the OpsPreSync field.
func (o *MSSQLDSourceAttachSourceParameters) SetOpsPreSync(v []SourceOperation) {
	o.OpsPreSync = v
}

// GetOpsPostSync returns the OpsPostSync field value if set, zero value otherwise.
func (o *MSSQLDSourceAttachSourceParameters) GetOpsPostSync() []SourceOperation {
	if o == nil || IsNil(o.OpsPostSync) {
		var ret []SourceOperation
		return ret
	}
	return o.OpsPostSync
}

// GetOpsPostSyncOk returns a tuple with the OpsPostSync field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MSSQLDSourceAttachSourceParameters) GetOpsPostSyncOk() ([]SourceOperation, bool) {
	if o == nil || IsNil(o.OpsPostSync) {
		return nil, false
	}
	return o.OpsPostSync, true
}

// HasOpsPostSync returns a boolean if a field has been set.
func (o *MSSQLDSourceAttachSourceParameters) HasOpsPostSync() bool {
	if o != nil && !IsNil(o.OpsPostSync) {
		return true
	}

	return false
}

// SetOpsPostSync gets a reference to the given []SourceOperation and assigns it to the OpsPostSync field.
func (o *MSSQLDSourceAttachSourceParameters) SetOpsPostSync(v []SourceOperation) {
	o.OpsPostSync = v
}

func (o MSSQLDSourceAttachSourceParameters) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MSSQLDSourceAttachSourceParameters) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["source_id"] = o.SourceId
	toSerialize["ppt_repository"] = o.PptRepository
	if !IsNil(o.SyncStrategyManagedType) {
		toSerialize["sync_strategy_managed_type"] = o.SyncStrategyManagedType
	}
	if !IsNil(o.MssqlUserEnvironmentReference) {
		toSerialize["mssql_user_environment_reference"] = o.MssqlUserEnvironmentReference
	}
	if !IsNil(o.MssqlUserDomainUsername) {
		toSerialize["mssql_user_domain_username"] = o.MssqlUserDomainUsername
	}
	if !IsNil(o.MssqlUserDomainPassword) {
		toSerialize["mssql_user_domain_password"] = o.MssqlUserDomainPassword
	}
	if !IsNil(o.MssqlUserDomainVaultUsername) {
		toSerialize["mssql_user_domain_vault_username"] = o.MssqlUserDomainVaultUsername
	}
	if !IsNil(o.MssqlUserDomainVault) {
		toSerialize["mssql_user_domain_vault"] = o.MssqlUserDomainVault
	}
	if !IsNil(o.MssqlUserDomainHashicorpVaultEngine) {
		toSerialize["mssql_user_domain_hashicorp_vault_engine"] = o.MssqlUserDomainHashicorpVaultEngine
	}
	if !IsNil(o.MssqlUserDomainHashicorpVaultSecretPath) {
		toSerialize["mssql_user_domain_hashicorp_vault_secret_path"] = o.MssqlUserDomainHashicorpVaultSecretPath
	}
	if !IsNil(o.MssqlUserDomainHashicorpVaultUsernameKey) {
		toSerialize["mssql_user_domain_hashicorp_vault_username_key"] = o.MssqlUserDomainHashicorpVaultUsernameKey
	}
	if !IsNil(o.MssqlUserDomainHashicorpVaultSecretKey) {
		toSerialize["mssql_user_domain_hashicorp_vault_secret_key"] = o.MssqlUserDomainHashicorpVaultSecretKey
	}
	if !IsNil(o.MssqlUserDomainAzureVaultName) {
		toSerialize["mssql_user_domain_azure_vault_name"] = o.MssqlUserDomainAzureVaultName
	}
	if !IsNil(o.MssqlUserDomainAzureVaultUsernameKey) {
		toSerialize["mssql_user_domain_azure_vault_username_key"] = o.MssqlUserDomainAzureVaultUsernameKey
	}
	if !IsNil(o.MssqlUserDomainAzureVaultSecretKey) {
		toSerialize["mssql_user_domain_azure_vault_secret_key"] = o.MssqlUserDomainAzureVaultSecretKey
	}
	if !IsNil(o.MssqlUserDomainCyberarkVaultQueryString) {
		toSerialize["mssql_user_domain_cyberark_vault_query_string"] = o.MssqlUserDomainCyberarkVaultQueryString
	}
	if !IsNil(o.MssqlDatabaseUsername) {
		toSerialize["mssql_database_username"] = o.MssqlDatabaseUsername
	}
	if !IsNil(o.MssqlDatabasePassword) {
		toSerialize["mssql_database_password"] = o.MssqlDatabasePassword
	}
	if !IsNil(o.DelphixManagedBackupCompressionEnabled) {
		toSerialize["delphix_managed_backup_compression_enabled"] = o.DelphixManagedBackupCompressionEnabled
	}
	if !IsNil(o.DelphixManagedBackupPolicy) {
		toSerialize["delphix_managed_backup_policy"] = o.DelphixManagedBackupPolicy
	}
	if !IsNil(o.ExternalManagedValidateSyncMode) {
		toSerialize["external_managed_validate_sync_mode"] = o.ExternalManagedValidateSyncMode
	}
	if !IsNil(o.ExternalManagedSharedBackupLocations) {
		toSerialize["external_managed_shared_backup_locations"] = o.ExternalManagedSharedBackupLocations
	}
	if !IsNil(o.ExternalNetbackupConfigMasterName) {
		toSerialize["external_netbackup_config_master_name"] = o.ExternalNetbackupConfigMasterName
	}
	if !IsNil(o.ExternalNetbackupConfigSourceClientName) {
		toSerialize["external_netbackup_config_source_client_name"] = o.ExternalNetbackupConfigSourceClientName
	}
	if !IsNil(o.ExternalNetbackupConfigParams) {
		toSerialize["external_netbackup_config_params"] = o.ExternalNetbackupConfigParams
	}
	if !IsNil(o.ExternalNetbackupConfigTemplates) {
		toSerialize["external_netbackup_config_templates"] = o.ExternalNetbackupConfigTemplates
	}
	if !IsNil(o.ExternalCommserveHostName) {
		toSerialize["external_commserve_host_name"] = o.ExternalCommserveHostName
	}
	if !IsNil(o.ExternalCommvaultConfigSourceClientName) {
		toSerialize["external_commvault_config_source_client_name"] = o.ExternalCommvaultConfigSourceClientName
	}
	if !IsNil(o.ExternalCommvaultConfigStagingClientName) {
		toSerialize["external_commvault_config_staging_client_name"] = o.ExternalCommvaultConfigStagingClientName
	}
	if !IsNil(o.ExternalCommvaultConfigParams) {
		toSerialize["external_commvault_config_params"] = o.ExternalCommvaultConfigParams
	}
	if !IsNil(o.ExternalCommvaultConfigTemplates) {
		toSerialize["external_commvault_config_templates"] = o.ExternalCommvaultConfigTemplates
	}
	if !IsNil(o.EncryptionKey) {
		toSerialize["encryption_key"] = o.EncryptionKey
	}
	if !IsNil(o.SourceHostUser) {
		toSerialize["source_host_user"] = o.SourceHostUser
	}
	if !IsNil(o.PptHostUser) {
		toSerialize["ppt_host_user"] = o.PptHostUser
	}
	if !IsNil(o.StagingPreScript) {
		toSerialize["staging_pre_script"] = o.StagingPreScript
	}
	if !IsNil(o.StagingPostScript) {
		toSerialize["staging_post_script"] = o.StagingPostScript
	}
	if !IsNil(o.OpsPreSync) {
		toSerialize["ops_pre_sync"] = o.OpsPreSync
	}
	if !IsNil(o.OpsPostSync) {
		toSerialize["ops_post_sync"] = o.OpsPostSync
	}
	return toSerialize, nil
}

func (o *MSSQLDSourceAttachSourceParameters) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"source_id",
		"ppt_repository",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varMSSQLDSourceAttachSourceParameters := _MSSQLDSourceAttachSourceParameters{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varMSSQLDSourceAttachSourceParameters)

	if err != nil {
		return err
	}

	*o = MSSQLDSourceAttachSourceParameters(varMSSQLDSourceAttachSourceParameters)

	return err
}

type NullableMSSQLDSourceAttachSourceParameters struct {
	value *MSSQLDSourceAttachSourceParameters
	isSet bool
}

func (v NullableMSSQLDSourceAttachSourceParameters) Get() *MSSQLDSourceAttachSourceParameters {
	return v.value
}

func (v *NullableMSSQLDSourceAttachSourceParameters) Set(val *MSSQLDSourceAttachSourceParameters) {
	v.value = val
	v.isSet = true
}

func (v NullableMSSQLDSourceAttachSourceParameters) IsSet() bool {
	return v.isSet
}

func (v *NullableMSSQLDSourceAttachSourceParameters) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMSSQLDSourceAttachSourceParameters(val *MSSQLDSourceAttachSourceParameters) *NullableMSSQLDSourceAttachSourceParameters {
	return &NullableMSSQLDSourceAttachSourceParameters{value: val, isSet: true}
}

func (v NullableMSSQLDSourceAttachSourceParameters) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMSSQLDSourceAttachSourceParameters) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


