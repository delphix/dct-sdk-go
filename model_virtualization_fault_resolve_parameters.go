/*
Delphix DCT API

Delphix DCT API

API version: 3.17.0
Contact: support@delphix.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package delphix_dct_api

import (
	"encoding/json"
)

// checks if the VirtualizationFaultResolveParameters type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VirtualizationFaultResolveParameters{}

// VirtualizationFaultResolveParameters The parameters to use as input when marking a fault as resolved.
type VirtualizationFaultResolveParameters struct {
	// Flag indicating whether to ignore this fault if it is detected on the same object in the future.
	Ignore *bool `json:"ignore,omitempty"`
	// The comments describing the steps taken to resolve a fault.
	ResolutionComments *string `json:"resolution_comments,omitempty"`
}

// NewVirtualizationFaultResolveParameters instantiates a new VirtualizationFaultResolveParameters object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVirtualizationFaultResolveParameters() *VirtualizationFaultResolveParameters {
	this := VirtualizationFaultResolveParameters{}
	var ignore bool = false
	this.Ignore = &ignore
	return &this
}

// NewVirtualizationFaultResolveParametersWithDefaults instantiates a new VirtualizationFaultResolveParameters object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVirtualizationFaultResolveParametersWithDefaults() *VirtualizationFaultResolveParameters {
	this := VirtualizationFaultResolveParameters{}
	var ignore bool = false
	this.Ignore = &ignore
	return &this
}

// GetIgnore returns the Ignore field value if set, zero value otherwise.
func (o *VirtualizationFaultResolveParameters) GetIgnore() bool {
	if o == nil || IsNil(o.Ignore) {
		var ret bool
		return ret
	}
	return *o.Ignore
}

// GetIgnoreOk returns a tuple with the Ignore field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualizationFaultResolveParameters) GetIgnoreOk() (*bool, bool) {
	if o == nil || IsNil(o.Ignore) {
		return nil, false
	}
	return o.Ignore, true
}

// HasIgnore returns a boolean if a field has been set.
func (o *VirtualizationFaultResolveParameters) HasIgnore() bool {
	if o != nil && !IsNil(o.Ignore) {
		return true
	}

	return false
}

// SetIgnore gets a reference to the given bool and assigns it to the Ignore field.
func (o *VirtualizationFaultResolveParameters) SetIgnore(v bool) {
	o.Ignore = &v
}

// GetResolutionComments returns the ResolutionComments field value if set, zero value otherwise.
func (o *VirtualizationFaultResolveParameters) GetResolutionComments() string {
	if o == nil || IsNil(o.ResolutionComments) {
		var ret string
		return ret
	}
	return *o.ResolutionComments
}

// GetResolutionCommentsOk returns a tuple with the ResolutionComments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualizationFaultResolveParameters) GetResolutionCommentsOk() (*string, bool) {
	if o == nil || IsNil(o.ResolutionComments) {
		return nil, false
	}
	return o.ResolutionComments, true
}

// HasResolutionComments returns a boolean if a field has been set.
func (o *VirtualizationFaultResolveParameters) HasResolutionComments() bool {
	if o != nil && !IsNil(o.ResolutionComments) {
		return true
	}

	return false
}

// SetResolutionComments gets a reference to the given string and assigns it to the ResolutionComments field.
func (o *VirtualizationFaultResolveParameters) SetResolutionComments(v string) {
	o.ResolutionComments = &v
}

func (o VirtualizationFaultResolveParameters) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VirtualizationFaultResolveParameters) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Ignore) {
		toSerialize["ignore"] = o.Ignore
	}
	if !IsNil(o.ResolutionComments) {
		toSerialize["resolution_comments"] = o.ResolutionComments
	}
	return toSerialize, nil
}

type NullableVirtualizationFaultResolveParameters struct {
	value *VirtualizationFaultResolveParameters
	isSet bool
}

func (v NullableVirtualizationFaultResolveParameters) Get() *VirtualizationFaultResolveParameters {
	return v.value
}

func (v *NullableVirtualizationFaultResolveParameters) Set(val *VirtualizationFaultResolveParameters) {
	v.value = val
	v.isSet = true
}

func (v NullableVirtualizationFaultResolveParameters) IsSet() bool {
	return v.isSet
}

func (v *NullableVirtualizationFaultResolveParameters) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVirtualizationFaultResolveParameters(val *VirtualizationFaultResolveParameters) *NullableVirtualizationFaultResolveParameters {
	return &NullableVirtualizationFaultResolveParameters{value: val, isSet: true}
}

func (v NullableVirtualizationFaultResolveParameters) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVirtualizationFaultResolveParameters) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


