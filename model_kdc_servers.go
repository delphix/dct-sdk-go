/*
Delphix DCT API

Delphix DCT API

API version: 3.18.0
Contact: support@delphix.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package delphix_dct_api

import (
	"encoding/json"
)

// checks if the KDCServers type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &KDCServers{}

// KDCServers struct for KDCServers
type KDCServers struct {
	// One of more KDC servers.
	Hostname *string `json:"hostname,omitempty"`
	// One of more KDC servers.
	Port *int32 `json:"port,omitempty"`
}

// NewKDCServers instantiates a new KDCServers object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewKDCServers() *KDCServers {
	this := KDCServers{}
	return &this
}

// NewKDCServersWithDefaults instantiates a new KDCServers object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewKDCServersWithDefaults() *KDCServers {
	this := KDCServers{}
	return &this
}

// GetHostname returns the Hostname field value if set, zero value otherwise.
func (o *KDCServers) GetHostname() string {
	if o == nil || IsNil(o.Hostname) {
		var ret string
		return ret
	}
	return *o.Hostname
}

// GetHostnameOk returns a tuple with the Hostname field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KDCServers) GetHostnameOk() (*string, bool) {
	if o == nil || IsNil(o.Hostname) {
		return nil, false
	}
	return o.Hostname, true
}

// HasHostname returns a boolean if a field has been set.
func (o *KDCServers) HasHostname() bool {
	if o != nil && !IsNil(o.Hostname) {
		return true
	}

	return false
}

// SetHostname gets a reference to the given string and assigns it to the Hostname field.
func (o *KDCServers) SetHostname(v string) {
	o.Hostname = &v
}

// GetPort returns the Port field value if set, zero value otherwise.
func (o *KDCServers) GetPort() int32 {
	if o == nil || IsNil(o.Port) {
		var ret int32
		return ret
	}
	return *o.Port
}

// GetPortOk returns a tuple with the Port field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KDCServers) GetPortOk() (*int32, bool) {
	if o == nil || IsNil(o.Port) {
		return nil, false
	}
	return o.Port, true
}

// HasPort returns a boolean if a field has been set.
func (o *KDCServers) HasPort() bool {
	if o != nil && !IsNil(o.Port) {
		return true
	}

	return false
}

// SetPort gets a reference to the given int32 and assigns it to the Port field.
func (o *KDCServers) SetPort(v int32) {
	o.Port = &v
}

func (o KDCServers) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o KDCServers) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Hostname) {
		toSerialize["hostname"] = o.Hostname
	}
	if !IsNil(o.Port) {
		toSerialize["port"] = o.Port
	}
	return toSerialize, nil
}

type NullableKDCServers struct {
	value *KDCServers
	isSet bool
}

func (v NullableKDCServers) Get() *KDCServers {
	return v.value
}

func (v *NullableKDCServers) Set(val *KDCServers) {
	v.value = val
	v.isSet = true
}

func (v NullableKDCServers) IsSet() bool {
	return v.isSet
}

func (v *NullableKDCServers) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableKDCServers(val *KDCServers) *NullableKDCServers {
	return &NullableKDCServers{value: val, isSet: true}
}

func (v NullableKDCServers) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableKDCServers) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


