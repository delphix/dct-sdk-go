/*
Delphix DCT API

Delphix DCT API

API version: 3.18.0
Contact: support@delphix.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package delphix_dct_api

import (
	"encoding/json"
)

// checks if the UpdateBookmarkParameters type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateBookmarkParameters{}

// UpdateBookmarkParameters Parameters to update a Bookmark.
type UpdateBookmarkParameters struct {
	// The user-defined name of this bookmark.
	Name *string `json:"name,omitempty"`
	// The expiration for this Bookmark. Mutually exclusive with retain_forever.
	Expiration *string `json:"expiration,omitempty"`
	// Indicates that the Bookmark should be retained forever.
	RetainForever *bool `json:"retain_forever,omitempty"`
	// Type of the bookmark, either PUBLIC or PRIVATE.
	BookmarkType *string `json:"bookmark_type,omitempty"`
}

// NewUpdateBookmarkParameters instantiates a new UpdateBookmarkParameters object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateBookmarkParameters() *UpdateBookmarkParameters {
	this := UpdateBookmarkParameters{}
	return &this
}

// NewUpdateBookmarkParametersWithDefaults instantiates a new UpdateBookmarkParameters object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateBookmarkParametersWithDefaults() *UpdateBookmarkParameters {
	this := UpdateBookmarkParameters{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *UpdateBookmarkParameters) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateBookmarkParameters) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *UpdateBookmarkParameters) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *UpdateBookmarkParameters) SetName(v string) {
	o.Name = &v
}

// GetExpiration returns the Expiration field value if set, zero value otherwise.
func (o *UpdateBookmarkParameters) GetExpiration() string {
	if o == nil || IsNil(o.Expiration) {
		var ret string
		return ret
	}
	return *o.Expiration
}

// GetExpirationOk returns a tuple with the Expiration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateBookmarkParameters) GetExpirationOk() (*string, bool) {
	if o == nil || IsNil(o.Expiration) {
		return nil, false
	}
	return o.Expiration, true
}

// HasExpiration returns a boolean if a field has been set.
func (o *UpdateBookmarkParameters) HasExpiration() bool {
	if o != nil && !IsNil(o.Expiration) {
		return true
	}

	return false
}

// SetExpiration gets a reference to the given string and assigns it to the Expiration field.
func (o *UpdateBookmarkParameters) SetExpiration(v string) {
	o.Expiration = &v
}

// GetRetainForever returns the RetainForever field value if set, zero value otherwise.
func (o *UpdateBookmarkParameters) GetRetainForever() bool {
	if o == nil || IsNil(o.RetainForever) {
		var ret bool
		return ret
	}
	return *o.RetainForever
}

// GetRetainForeverOk returns a tuple with the RetainForever field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateBookmarkParameters) GetRetainForeverOk() (*bool, bool) {
	if o == nil || IsNil(o.RetainForever) {
		return nil, false
	}
	return o.RetainForever, true
}

// HasRetainForever returns a boolean if a field has been set.
func (o *UpdateBookmarkParameters) HasRetainForever() bool {
	if o != nil && !IsNil(o.RetainForever) {
		return true
	}

	return false
}

// SetRetainForever gets a reference to the given bool and assigns it to the RetainForever field.
func (o *UpdateBookmarkParameters) SetRetainForever(v bool) {
	o.RetainForever = &v
}

// GetBookmarkType returns the BookmarkType field value if set, zero value otherwise.
func (o *UpdateBookmarkParameters) GetBookmarkType() string {
	if o == nil || IsNil(o.BookmarkType) {
		var ret string
		return ret
	}
	return *o.BookmarkType
}

// GetBookmarkTypeOk returns a tuple with the BookmarkType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateBookmarkParameters) GetBookmarkTypeOk() (*string, bool) {
	if o == nil || IsNil(o.BookmarkType) {
		return nil, false
	}
	return o.BookmarkType, true
}

// HasBookmarkType returns a boolean if a field has been set.
func (o *UpdateBookmarkParameters) HasBookmarkType() bool {
	if o != nil && !IsNil(o.BookmarkType) {
		return true
	}

	return false
}

// SetBookmarkType gets a reference to the given string and assigns it to the BookmarkType field.
func (o *UpdateBookmarkParameters) SetBookmarkType(v string) {
	o.BookmarkType = &v
}

func (o UpdateBookmarkParameters) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateBookmarkParameters) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Expiration) {
		toSerialize["expiration"] = o.Expiration
	}
	if !IsNil(o.RetainForever) {
		toSerialize["retain_forever"] = o.RetainForever
	}
	if !IsNil(o.BookmarkType) {
		toSerialize["bookmark_type"] = o.BookmarkType
	}
	return toSerialize, nil
}

type NullableUpdateBookmarkParameters struct {
	value *UpdateBookmarkParameters
	isSet bool
}

func (v NullableUpdateBookmarkParameters) Get() *UpdateBookmarkParameters {
	return v.value
}

func (v *NullableUpdateBookmarkParameters) Set(val *UpdateBookmarkParameters) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateBookmarkParameters) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateBookmarkParameters) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateBookmarkParameters(val *UpdateBookmarkParameters) *NullableUpdateBookmarkParameters {
	return &NullableUpdateBookmarkParameters{value: val, isSet: true}
}

func (v NullableUpdateBookmarkParameters) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateBookmarkParameters) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


