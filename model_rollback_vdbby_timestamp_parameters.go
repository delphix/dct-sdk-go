/*
Delphix DCT API

Delphix DCT API

API version: 3.17.0
Contact: support@delphix.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package delphix_dct_api

import (
	"encoding/json"
	"time"
)

// checks if the RollbackVDBByTimestampParameters type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RollbackVDBByTimestampParameters{}

// RollbackVDBByTimestampParameters struct for RollbackVDBByTimestampParameters
type RollbackVDBByTimestampParameters struct {
	// The point in time from which to execute the operation. Mutually exclusive with timestamp_in_database_timezone. If the timestamp is not set, selects the latest point.
	Timestamp *time.Time `json:"timestamp,omitempty"`
	// The point in time from which to execute the operation, expressed as a date-time in the timezone of the source database. Mutually exclusive with timestamp.
	TimestampInDatabaseTimezone *string `json:"timestamp_in_database_timezone,omitempty" validate:"regexp=[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}(.[0-9]{0,3})?"`
	// The Timeflow ID.
	TimeflowId *string `json:"timeflow_id,omitempty"`
}

// NewRollbackVDBByTimestampParameters instantiates a new RollbackVDBByTimestampParameters object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRollbackVDBByTimestampParameters() *RollbackVDBByTimestampParameters {
	this := RollbackVDBByTimestampParameters{}
	return &this
}

// NewRollbackVDBByTimestampParametersWithDefaults instantiates a new RollbackVDBByTimestampParameters object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRollbackVDBByTimestampParametersWithDefaults() *RollbackVDBByTimestampParameters {
	this := RollbackVDBByTimestampParameters{}
	return &this
}

// GetTimestamp returns the Timestamp field value if set, zero value otherwise.
func (o *RollbackVDBByTimestampParameters) GetTimestamp() time.Time {
	if o == nil || IsNil(o.Timestamp) {
		var ret time.Time
		return ret
	}
	return *o.Timestamp
}

// GetTimestampOk returns a tuple with the Timestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RollbackVDBByTimestampParameters) GetTimestampOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Timestamp) {
		return nil, false
	}
	return o.Timestamp, true
}

// HasTimestamp returns a boolean if a field has been set.
func (o *RollbackVDBByTimestampParameters) HasTimestamp() bool {
	if o != nil && !IsNil(o.Timestamp) {
		return true
	}

	return false
}

// SetTimestamp gets a reference to the given time.Time and assigns it to the Timestamp field.
func (o *RollbackVDBByTimestampParameters) SetTimestamp(v time.Time) {
	o.Timestamp = &v
}

// GetTimestampInDatabaseTimezone returns the TimestampInDatabaseTimezone field value if set, zero value otherwise.
func (o *RollbackVDBByTimestampParameters) GetTimestampInDatabaseTimezone() string {
	if o == nil || IsNil(o.TimestampInDatabaseTimezone) {
		var ret string
		return ret
	}
	return *o.TimestampInDatabaseTimezone
}

// GetTimestampInDatabaseTimezoneOk returns a tuple with the TimestampInDatabaseTimezone field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RollbackVDBByTimestampParameters) GetTimestampInDatabaseTimezoneOk() (*string, bool) {
	if o == nil || IsNil(o.TimestampInDatabaseTimezone) {
		return nil, false
	}
	return o.TimestampInDatabaseTimezone, true
}

// HasTimestampInDatabaseTimezone returns a boolean if a field has been set.
func (o *RollbackVDBByTimestampParameters) HasTimestampInDatabaseTimezone() bool {
	if o != nil && !IsNil(o.TimestampInDatabaseTimezone) {
		return true
	}

	return false
}

// SetTimestampInDatabaseTimezone gets a reference to the given string and assigns it to the TimestampInDatabaseTimezone field.
func (o *RollbackVDBByTimestampParameters) SetTimestampInDatabaseTimezone(v string) {
	o.TimestampInDatabaseTimezone = &v
}

// GetTimeflowId returns the TimeflowId field value if set, zero value otherwise.
func (o *RollbackVDBByTimestampParameters) GetTimeflowId() string {
	if o == nil || IsNil(o.TimeflowId) {
		var ret string
		return ret
	}
	return *o.TimeflowId
}

// GetTimeflowIdOk returns a tuple with the TimeflowId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RollbackVDBByTimestampParameters) GetTimeflowIdOk() (*string, bool) {
	if o == nil || IsNil(o.TimeflowId) {
		return nil, false
	}
	return o.TimeflowId, true
}

// HasTimeflowId returns a boolean if a field has been set.
func (o *RollbackVDBByTimestampParameters) HasTimeflowId() bool {
	if o != nil && !IsNil(o.TimeflowId) {
		return true
	}

	return false
}

// SetTimeflowId gets a reference to the given string and assigns it to the TimeflowId field.
func (o *RollbackVDBByTimestampParameters) SetTimeflowId(v string) {
	o.TimeflowId = &v
}

func (o RollbackVDBByTimestampParameters) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RollbackVDBByTimestampParameters) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Timestamp) {
		toSerialize["timestamp"] = o.Timestamp
	}
	if !IsNil(o.TimestampInDatabaseTimezone) {
		toSerialize["timestamp_in_database_timezone"] = o.TimestampInDatabaseTimezone
	}
	if !IsNil(o.TimeflowId) {
		toSerialize["timeflow_id"] = o.TimeflowId
	}
	return toSerialize, nil
}

type NullableRollbackVDBByTimestampParameters struct {
	value *RollbackVDBByTimestampParameters
	isSet bool
}

func (v NullableRollbackVDBByTimestampParameters) Get() *RollbackVDBByTimestampParameters {
	return v.value
}

func (v *NullableRollbackVDBByTimestampParameters) Set(val *RollbackVDBByTimestampParameters) {
	v.value = val
	v.isSet = true
}

func (v NullableRollbackVDBByTimestampParameters) IsSet() bool {
	return v.isSet
}

func (v *NullableRollbackVDBByTimestampParameters) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRollbackVDBByTimestampParameters(val *RollbackVDBByTimestampParameters) *NullableRollbackVDBByTimestampParameters {
	return &NullableRollbackVDBByTimestampParameters{value: val, isSet: true}
}

func (v NullableRollbackVDBByTimestampParameters) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRollbackVDBByTimestampParameters) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


