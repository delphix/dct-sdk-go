/*
Delphix DCT API

Delphix DCT API

API version: 3.17.0
Contact: support@delphix.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package delphix_dct_api

import (
	"encoding/json"
)

// checks if the UpgradeOracleCdbParameters type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpgradeOracleCdbParameters{}

// UpgradeOracleCdbParameters Parameters to upgrade an Oracle Container database.
type UpgradeOracleCdbParameters struct {
	// The object reference of the CDB repository to upgrade to.
	RepositoryId *string `json:"repository_id,omitempty"`
	// Reference of the environment user to use for CDB upgrade.
	EnvironmentUserId *string `json:"environment_user_id,omitempty"`
}

// NewUpgradeOracleCdbParameters instantiates a new UpgradeOracleCdbParameters object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpgradeOracleCdbParameters() *UpgradeOracleCdbParameters {
	this := UpgradeOracleCdbParameters{}
	return &this
}

// NewUpgradeOracleCdbParametersWithDefaults instantiates a new UpgradeOracleCdbParameters object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpgradeOracleCdbParametersWithDefaults() *UpgradeOracleCdbParameters {
	this := UpgradeOracleCdbParameters{}
	return &this
}

// GetRepositoryId returns the RepositoryId field value if set, zero value otherwise.
func (o *UpgradeOracleCdbParameters) GetRepositoryId() string {
	if o == nil || IsNil(o.RepositoryId) {
		var ret string
		return ret
	}
	return *o.RepositoryId
}

// GetRepositoryIdOk returns a tuple with the RepositoryId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpgradeOracleCdbParameters) GetRepositoryIdOk() (*string, bool) {
	if o == nil || IsNil(o.RepositoryId) {
		return nil, false
	}
	return o.RepositoryId, true
}

// HasRepositoryId returns a boolean if a field has been set.
func (o *UpgradeOracleCdbParameters) HasRepositoryId() bool {
	if o != nil && !IsNil(o.RepositoryId) {
		return true
	}

	return false
}

// SetRepositoryId gets a reference to the given string and assigns it to the RepositoryId field.
func (o *UpgradeOracleCdbParameters) SetRepositoryId(v string) {
	o.RepositoryId = &v
}

// GetEnvironmentUserId returns the EnvironmentUserId field value if set, zero value otherwise.
func (o *UpgradeOracleCdbParameters) GetEnvironmentUserId() string {
	if o == nil || IsNil(o.EnvironmentUserId) {
		var ret string
		return ret
	}
	return *o.EnvironmentUserId
}

// GetEnvironmentUserIdOk returns a tuple with the EnvironmentUserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpgradeOracleCdbParameters) GetEnvironmentUserIdOk() (*string, bool) {
	if o == nil || IsNil(o.EnvironmentUserId) {
		return nil, false
	}
	return o.EnvironmentUserId, true
}

// HasEnvironmentUserId returns a boolean if a field has been set.
func (o *UpgradeOracleCdbParameters) HasEnvironmentUserId() bool {
	if o != nil && !IsNil(o.EnvironmentUserId) {
		return true
	}

	return false
}

// SetEnvironmentUserId gets a reference to the given string and assigns it to the EnvironmentUserId field.
func (o *UpgradeOracleCdbParameters) SetEnvironmentUserId(v string) {
	o.EnvironmentUserId = &v
}

func (o UpgradeOracleCdbParameters) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpgradeOracleCdbParameters) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.RepositoryId) {
		toSerialize["repository_id"] = o.RepositoryId
	}
	if !IsNil(o.EnvironmentUserId) {
		toSerialize["environment_user_id"] = o.EnvironmentUserId
	}
	return toSerialize, nil
}

type NullableUpgradeOracleCdbParameters struct {
	value *UpgradeOracleCdbParameters
	isSet bool
}

func (v NullableUpgradeOracleCdbParameters) Get() *UpgradeOracleCdbParameters {
	return v.value
}

func (v *NullableUpgradeOracleCdbParameters) Set(val *UpgradeOracleCdbParameters) {
	v.value = val
	v.isSet = true
}

func (v NullableUpgradeOracleCdbParameters) IsSet() bool {
	return v.isSet
}

func (v *NullableUpgradeOracleCdbParameters) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpgradeOracleCdbParameters(val *UpgradeOracleCdbParameters) *NullableUpgradeOracleCdbParameters {
	return &NullableUpgradeOracleCdbParameters{value: val, isSet: true}
}

func (v NullableUpgradeOracleCdbParameters) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpgradeOracleCdbParameters) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


