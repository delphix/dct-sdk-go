/*
Delphix DCT API

Delphix DCT API

API version: 3.18.0
Contact: support@delphix.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package delphix_dct_api

import (
	"encoding/json"
)

// checks if the OracleRACDatabaseInstance type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OracleRACDatabaseInstance{}

// OracleRACDatabaseInstance struct for OracleRACDatabaseInstance
type OracleRACDatabaseInstance struct {
	// The name of this instance.
	InstanceName *string `json:"instance_name,omitempty"`
	// The number of this instance.
	InstanceNumber *int32 `json:"instance_number,omitempty"`
	// The reference to the cluster node which the instance is running on.
	NodeReference *string `json:"node_reference,omitempty"`
}

// NewOracleRACDatabaseInstance instantiates a new OracleRACDatabaseInstance object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOracleRACDatabaseInstance() *OracleRACDatabaseInstance {
	this := OracleRACDatabaseInstance{}
	return &this
}

// NewOracleRACDatabaseInstanceWithDefaults instantiates a new OracleRACDatabaseInstance object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOracleRACDatabaseInstanceWithDefaults() *OracleRACDatabaseInstance {
	this := OracleRACDatabaseInstance{}
	return &this
}

// GetInstanceName returns the InstanceName field value if set, zero value otherwise.
func (o *OracleRACDatabaseInstance) GetInstanceName() string {
	if o == nil || IsNil(o.InstanceName) {
		var ret string
		return ret
	}
	return *o.InstanceName
}

// GetInstanceNameOk returns a tuple with the InstanceName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OracleRACDatabaseInstance) GetInstanceNameOk() (*string, bool) {
	if o == nil || IsNil(o.InstanceName) {
		return nil, false
	}
	return o.InstanceName, true
}

// HasInstanceName returns a boolean if a field has been set.
func (o *OracleRACDatabaseInstance) HasInstanceName() bool {
	if o != nil && !IsNil(o.InstanceName) {
		return true
	}

	return false
}

// SetInstanceName gets a reference to the given string and assigns it to the InstanceName field.
func (o *OracleRACDatabaseInstance) SetInstanceName(v string) {
	o.InstanceName = &v
}

// GetInstanceNumber returns the InstanceNumber field value if set, zero value otherwise.
func (o *OracleRACDatabaseInstance) GetInstanceNumber() int32 {
	if o == nil || IsNil(o.InstanceNumber) {
		var ret int32
		return ret
	}
	return *o.InstanceNumber
}

// GetInstanceNumberOk returns a tuple with the InstanceNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OracleRACDatabaseInstance) GetInstanceNumberOk() (*int32, bool) {
	if o == nil || IsNil(o.InstanceNumber) {
		return nil, false
	}
	return o.InstanceNumber, true
}

// HasInstanceNumber returns a boolean if a field has been set.
func (o *OracleRACDatabaseInstance) HasInstanceNumber() bool {
	if o != nil && !IsNil(o.InstanceNumber) {
		return true
	}

	return false
}

// SetInstanceNumber gets a reference to the given int32 and assigns it to the InstanceNumber field.
func (o *OracleRACDatabaseInstance) SetInstanceNumber(v int32) {
	o.InstanceNumber = &v
}

// GetNodeReference returns the NodeReference field value if set, zero value otherwise.
func (o *OracleRACDatabaseInstance) GetNodeReference() string {
	if o == nil || IsNil(o.NodeReference) {
		var ret string
		return ret
	}
	return *o.NodeReference
}

// GetNodeReferenceOk returns a tuple with the NodeReference field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OracleRACDatabaseInstance) GetNodeReferenceOk() (*string, bool) {
	if o == nil || IsNil(o.NodeReference) {
		return nil, false
	}
	return o.NodeReference, true
}

// HasNodeReference returns a boolean if a field has been set.
func (o *OracleRACDatabaseInstance) HasNodeReference() bool {
	if o != nil && !IsNil(o.NodeReference) {
		return true
	}

	return false
}

// SetNodeReference gets a reference to the given string and assigns it to the NodeReference field.
func (o *OracleRACDatabaseInstance) SetNodeReference(v string) {
	o.NodeReference = &v
}

func (o OracleRACDatabaseInstance) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OracleRACDatabaseInstance) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.InstanceName) {
		toSerialize["instance_name"] = o.InstanceName
	}
	if !IsNil(o.InstanceNumber) {
		toSerialize["instance_number"] = o.InstanceNumber
	}
	if !IsNil(o.NodeReference) {
		toSerialize["node_reference"] = o.NodeReference
	}
	return toSerialize, nil
}

type NullableOracleRACDatabaseInstance struct {
	value *OracleRACDatabaseInstance
	isSet bool
}

func (v NullableOracleRACDatabaseInstance) Get() *OracleRACDatabaseInstance {
	return v.value
}

func (v *NullableOracleRACDatabaseInstance) Set(val *OracleRACDatabaseInstance) {
	v.value = val
	v.isSet = true
}

func (v NullableOracleRACDatabaseInstance) IsSet() bool {
	return v.isSet
}

func (v *NullableOracleRACDatabaseInstance) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOracleRACDatabaseInstance(val *OracleRACDatabaseInstance) *NullableOracleRACDatabaseInstance {
	return &NullableOracleRACDatabaseInstance{value: val, isSet: true}
}

func (v NullableOracleRACDatabaseInstance) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOracleRACDatabaseInstance) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


