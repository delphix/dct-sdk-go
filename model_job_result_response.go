/*
Delphix DCT API

Delphix DCT API

API version: 3.18.0
Contact: support@delphix.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package delphix_dct_api

import (
	"encoding/json"
)

// checks if the JobResultResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &JobResultResponse{}

// JobResultResponse The result of a job.
type JobResultResponse struct {
	// The ID of the job.
	JobId *string `json:"job_id,omitempty"`
	// The type of the job result. This is the type of the object present in the result.
	ResultType *string `json:"result_type,omitempty"`
	// The result of the job execution. This is JSON serialized string of the result object whose type is specified by result_type property.
	Result map[string]interface{} `json:"result,omitempty"`
}

// NewJobResultResponse instantiates a new JobResultResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewJobResultResponse() *JobResultResponse {
	this := JobResultResponse{}
	return &this
}

// NewJobResultResponseWithDefaults instantiates a new JobResultResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewJobResultResponseWithDefaults() *JobResultResponse {
	this := JobResultResponse{}
	return &this
}

// GetJobId returns the JobId field value if set, zero value otherwise.
func (o *JobResultResponse) GetJobId() string {
	if o == nil || IsNil(o.JobId) {
		var ret string
		return ret
	}
	return *o.JobId
}

// GetJobIdOk returns a tuple with the JobId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JobResultResponse) GetJobIdOk() (*string, bool) {
	if o == nil || IsNil(o.JobId) {
		return nil, false
	}
	return o.JobId, true
}

// HasJobId returns a boolean if a field has been set.
func (o *JobResultResponse) HasJobId() bool {
	if o != nil && !IsNil(o.JobId) {
		return true
	}

	return false
}

// SetJobId gets a reference to the given string and assigns it to the JobId field.
func (o *JobResultResponse) SetJobId(v string) {
	o.JobId = &v
}

// GetResultType returns the ResultType field value if set, zero value otherwise.
func (o *JobResultResponse) GetResultType() string {
	if o == nil || IsNil(o.ResultType) {
		var ret string
		return ret
	}
	return *o.ResultType
}

// GetResultTypeOk returns a tuple with the ResultType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JobResultResponse) GetResultTypeOk() (*string, bool) {
	if o == nil || IsNil(o.ResultType) {
		return nil, false
	}
	return o.ResultType, true
}

// HasResultType returns a boolean if a field has been set.
func (o *JobResultResponse) HasResultType() bool {
	if o != nil && !IsNil(o.ResultType) {
		return true
	}

	return false
}

// SetResultType gets a reference to the given string and assigns it to the ResultType field.
func (o *JobResultResponse) SetResultType(v string) {
	o.ResultType = &v
}

// GetResult returns the Result field value if set, zero value otherwise.
func (o *JobResultResponse) GetResult() map[string]interface{} {
	if o == nil || IsNil(o.Result) {
		var ret map[string]interface{}
		return ret
	}
	return o.Result
}

// GetResultOk returns a tuple with the Result field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JobResultResponse) GetResultOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Result) {
		return map[string]interface{}{}, false
	}
	return o.Result, true
}

// HasResult returns a boolean if a field has been set.
func (o *JobResultResponse) HasResult() bool {
	if o != nil && !IsNil(o.Result) {
		return true
	}

	return false
}

// SetResult gets a reference to the given map[string]interface{} and assigns it to the Result field.
func (o *JobResultResponse) SetResult(v map[string]interface{}) {
	o.Result = v
}

func (o JobResultResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o JobResultResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.JobId) {
		toSerialize["job_id"] = o.JobId
	}
	if !IsNil(o.ResultType) {
		toSerialize["result_type"] = o.ResultType
	}
	if !IsNil(o.Result) {
		toSerialize["result"] = o.Result
	}
	return toSerialize, nil
}

type NullableJobResultResponse struct {
	value *JobResultResponse
	isSet bool
}

func (v NullableJobResultResponse) Get() *JobResultResponse {
	return v.value
}

func (v *NullableJobResultResponse) Set(val *JobResultResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableJobResultResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableJobResultResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableJobResultResponse(val *JobResultResponse) *NullableJobResultResponse {
	return &NullableJobResultResponse{value: val, isSet: true}
}

func (v NullableJobResultResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableJobResultResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


