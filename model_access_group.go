/*
Delphix DCT API

Delphix DCT API

API version: 3.18.0
Contact: support@delphix.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package delphix_dct_api

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the AccessGroup type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AccessGroup{}

// AccessGroup An Access group is the DCT mechanism to grant roles to accounts. Each account has its own Access Group which can be used to manage permissions for that account, and an unlimited number of other Access groups can be created to manage permissions by groups of accounts.
type AccessGroup struct {
	// The Access group ID.
	Id *string `json:"id,omitempty"`
	// The Access group name
	Name string `json:"name"`
	// Indicates that this Access group defines the permissions of a single account, and thus account and account tags cannot be modified. Instead create a new Access group to manage permissions of multiple accounts.
	SingleAccount *bool `json:"single_account,omitempty"`
	// List of accounts ids included individually (as opposed to added by tags) in the Access group.
	AccountIds []int64 `json:"account_ids,omitempty"`
	// List of accounts ids included by tags in the Access group.
	TaggedAccountIds []int64 `json:"tagged_account_ids,omitempty"`
	// List of account tags. Accounts matching any of these tags will be automatically added to the Access group.
	AccountTags []Tag `json:"account_tags,omitempty"`
	// The Access group scopes.
	Scopes []AccessGroupScope `json:"scopes,omitempty"`
}

type _AccessGroup AccessGroup

// NewAccessGroup instantiates a new AccessGroup object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAccessGroup(name string) *AccessGroup {
	this := AccessGroup{}
	this.Name = name
	return &this
}

// NewAccessGroupWithDefaults instantiates a new AccessGroup object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAccessGroupWithDefaults() *AccessGroup {
	this := AccessGroup{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *AccessGroup) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccessGroup) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *AccessGroup) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *AccessGroup) SetId(v string) {
	o.Id = &v
}

// GetName returns the Name field value
func (o *AccessGroup) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *AccessGroup) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *AccessGroup) SetName(v string) {
	o.Name = v
}

// GetSingleAccount returns the SingleAccount field value if set, zero value otherwise.
func (o *AccessGroup) GetSingleAccount() bool {
	if o == nil || IsNil(o.SingleAccount) {
		var ret bool
		return ret
	}
	return *o.SingleAccount
}

// GetSingleAccountOk returns a tuple with the SingleAccount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccessGroup) GetSingleAccountOk() (*bool, bool) {
	if o == nil || IsNil(o.SingleAccount) {
		return nil, false
	}
	return o.SingleAccount, true
}

// HasSingleAccount returns a boolean if a field has been set.
func (o *AccessGroup) HasSingleAccount() bool {
	if o != nil && !IsNil(o.SingleAccount) {
		return true
	}

	return false
}

// SetSingleAccount gets a reference to the given bool and assigns it to the SingleAccount field.
func (o *AccessGroup) SetSingleAccount(v bool) {
	o.SingleAccount = &v
}

// GetAccountIds returns the AccountIds field value if set, zero value otherwise.
func (o *AccessGroup) GetAccountIds() []int64 {
	if o == nil || IsNil(o.AccountIds) {
		var ret []int64
		return ret
	}
	return o.AccountIds
}

// GetAccountIdsOk returns a tuple with the AccountIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccessGroup) GetAccountIdsOk() ([]int64, bool) {
	if o == nil || IsNil(o.AccountIds) {
		return nil, false
	}
	return o.AccountIds, true
}

// HasAccountIds returns a boolean if a field has been set.
func (o *AccessGroup) HasAccountIds() bool {
	if o != nil && !IsNil(o.AccountIds) {
		return true
	}

	return false
}

// SetAccountIds gets a reference to the given []int64 and assigns it to the AccountIds field.
func (o *AccessGroup) SetAccountIds(v []int64) {
	o.AccountIds = v
}

// GetTaggedAccountIds returns the TaggedAccountIds field value if set, zero value otherwise.
func (o *AccessGroup) GetTaggedAccountIds() []int64 {
	if o == nil || IsNil(o.TaggedAccountIds) {
		var ret []int64
		return ret
	}
	return o.TaggedAccountIds
}

// GetTaggedAccountIdsOk returns a tuple with the TaggedAccountIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccessGroup) GetTaggedAccountIdsOk() ([]int64, bool) {
	if o == nil || IsNil(o.TaggedAccountIds) {
		return nil, false
	}
	return o.TaggedAccountIds, true
}

// HasTaggedAccountIds returns a boolean if a field has been set.
func (o *AccessGroup) HasTaggedAccountIds() bool {
	if o != nil && !IsNil(o.TaggedAccountIds) {
		return true
	}

	return false
}

// SetTaggedAccountIds gets a reference to the given []int64 and assigns it to the TaggedAccountIds field.
func (o *AccessGroup) SetTaggedAccountIds(v []int64) {
	o.TaggedAccountIds = v
}

// GetAccountTags returns the AccountTags field value if set, zero value otherwise.
func (o *AccessGroup) GetAccountTags() []Tag {
	if o == nil || IsNil(o.AccountTags) {
		var ret []Tag
		return ret
	}
	return o.AccountTags
}

// GetAccountTagsOk returns a tuple with the AccountTags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccessGroup) GetAccountTagsOk() ([]Tag, bool) {
	if o == nil || IsNil(o.AccountTags) {
		return nil, false
	}
	return o.AccountTags, true
}

// HasAccountTags returns a boolean if a field has been set.
func (o *AccessGroup) HasAccountTags() bool {
	if o != nil && !IsNil(o.AccountTags) {
		return true
	}

	return false
}

// SetAccountTags gets a reference to the given []Tag and assigns it to the AccountTags field.
func (o *AccessGroup) SetAccountTags(v []Tag) {
	o.AccountTags = v
}

// GetScopes returns the Scopes field value if set, zero value otherwise.
func (o *AccessGroup) GetScopes() []AccessGroupScope {
	if o == nil || IsNil(o.Scopes) {
		var ret []AccessGroupScope
		return ret
	}
	return o.Scopes
}

// GetScopesOk returns a tuple with the Scopes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccessGroup) GetScopesOk() ([]AccessGroupScope, bool) {
	if o == nil || IsNil(o.Scopes) {
		return nil, false
	}
	return o.Scopes, true
}

// HasScopes returns a boolean if a field has been set.
func (o *AccessGroup) HasScopes() bool {
	if o != nil && !IsNil(o.Scopes) {
		return true
	}

	return false
}

// SetScopes gets a reference to the given []AccessGroupScope and assigns it to the Scopes field.
func (o *AccessGroup) SetScopes(v []AccessGroupScope) {
	o.Scopes = v
}

func (o AccessGroup) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AccessGroup) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	toSerialize["name"] = o.Name
	if !IsNil(o.SingleAccount) {
		toSerialize["single_account"] = o.SingleAccount
	}
	if !IsNil(o.AccountIds) {
		toSerialize["account_ids"] = o.AccountIds
	}
	if !IsNil(o.TaggedAccountIds) {
		toSerialize["tagged_account_ids"] = o.TaggedAccountIds
	}
	if !IsNil(o.AccountTags) {
		toSerialize["account_tags"] = o.AccountTags
	}
	if !IsNil(o.Scopes) {
		toSerialize["scopes"] = o.Scopes
	}
	return toSerialize, nil
}

func (o *AccessGroup) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAccessGroup := _AccessGroup{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varAccessGroup)

	if err != nil {
		return err
	}

	*o = AccessGroup(varAccessGroup)

	return err
}

type NullableAccessGroup struct {
	value *AccessGroup
	isSet bool
}

func (v NullableAccessGroup) Get() *AccessGroup {
	return v.value
}

func (v *NullableAccessGroup) Set(val *AccessGroup) {
	v.value = val
	v.isSet = true
}

func (v NullableAccessGroup) IsSet() bool {
	return v.isSet
}

func (v *NullableAccessGroup) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAccessGroup(val *AccessGroup) *NullableAccessGroup {
	return &NullableAccessGroup{value: val, isSet: true}
}

func (v NullableAccessGroup) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAccessGroup) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


