/*
Delphix DCT API

Delphix DCT API

API version: 3.18.0
Contact: support@delphix.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package delphix_dct_api

import (
	"encoding/json"
)

// checks if the LocationCompatibleRepositoryRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LocationCompatibleRepositoryRequest{}

// LocationCompatibleRepositoryRequest struct for LocationCompatibleRepositoryRequest
type LocationCompatibleRepositoryRequest struct {
	// The ID of the source object (dSource or VDB) to get the compatible repos. All other objects referenced by the parameters must live on the same engine as the source.
	SourceDataId *string `json:"source_data_id,omitempty"`
	// The ID of the Engine from where to get the compatible repos. If the source ID unambiguously identifies a source object, this parameter is unnecessary and ignored.
	EngineId *string `json:"engine_id,omitempty"`
	// location from where compatible repo to be fetched.
	Location *string `json:"location,omitempty"`
	// ID of the timeflow from which compatible repos need to be fetched.
	TimeflowId *string `json:"timeflow_id,omitempty"`
	// The ID or name of the target environment.
	EnvironmentId *string `json:"environment_id,omitempty"`
}

// NewLocationCompatibleRepositoryRequest instantiates a new LocationCompatibleRepositoryRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLocationCompatibleRepositoryRequest() *LocationCompatibleRepositoryRequest {
	this := LocationCompatibleRepositoryRequest{}
	return &this
}

// NewLocationCompatibleRepositoryRequestWithDefaults instantiates a new LocationCompatibleRepositoryRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLocationCompatibleRepositoryRequestWithDefaults() *LocationCompatibleRepositoryRequest {
	this := LocationCompatibleRepositoryRequest{}
	return &this
}

// GetSourceDataId returns the SourceDataId field value if set, zero value otherwise.
func (o *LocationCompatibleRepositoryRequest) GetSourceDataId() string {
	if o == nil || IsNil(o.SourceDataId) {
		var ret string
		return ret
	}
	return *o.SourceDataId
}

// GetSourceDataIdOk returns a tuple with the SourceDataId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LocationCompatibleRepositoryRequest) GetSourceDataIdOk() (*string, bool) {
	if o == nil || IsNil(o.SourceDataId) {
		return nil, false
	}
	return o.SourceDataId, true
}

// HasSourceDataId returns a boolean if a field has been set.
func (o *LocationCompatibleRepositoryRequest) HasSourceDataId() bool {
	if o != nil && !IsNil(o.SourceDataId) {
		return true
	}

	return false
}

// SetSourceDataId gets a reference to the given string and assigns it to the SourceDataId field.
func (o *LocationCompatibleRepositoryRequest) SetSourceDataId(v string) {
	o.SourceDataId = &v
}

// GetEngineId returns the EngineId field value if set, zero value otherwise.
func (o *LocationCompatibleRepositoryRequest) GetEngineId() string {
	if o == nil || IsNil(o.EngineId) {
		var ret string
		return ret
	}
	return *o.EngineId
}

// GetEngineIdOk returns a tuple with the EngineId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LocationCompatibleRepositoryRequest) GetEngineIdOk() (*string, bool) {
	if o == nil || IsNil(o.EngineId) {
		return nil, false
	}
	return o.EngineId, true
}

// HasEngineId returns a boolean if a field has been set.
func (o *LocationCompatibleRepositoryRequest) HasEngineId() bool {
	if o != nil && !IsNil(o.EngineId) {
		return true
	}

	return false
}

// SetEngineId gets a reference to the given string and assigns it to the EngineId field.
func (o *LocationCompatibleRepositoryRequest) SetEngineId(v string) {
	o.EngineId = &v
}

// GetLocation returns the Location field value if set, zero value otherwise.
func (o *LocationCompatibleRepositoryRequest) GetLocation() string {
	if o == nil || IsNil(o.Location) {
		var ret string
		return ret
	}
	return *o.Location
}

// GetLocationOk returns a tuple with the Location field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LocationCompatibleRepositoryRequest) GetLocationOk() (*string, bool) {
	if o == nil || IsNil(o.Location) {
		return nil, false
	}
	return o.Location, true
}

// HasLocation returns a boolean if a field has been set.
func (o *LocationCompatibleRepositoryRequest) HasLocation() bool {
	if o != nil && !IsNil(o.Location) {
		return true
	}

	return false
}

// SetLocation gets a reference to the given string and assigns it to the Location field.
func (o *LocationCompatibleRepositoryRequest) SetLocation(v string) {
	o.Location = &v
}

// GetTimeflowId returns the TimeflowId field value if set, zero value otherwise.
func (o *LocationCompatibleRepositoryRequest) GetTimeflowId() string {
	if o == nil || IsNil(o.TimeflowId) {
		var ret string
		return ret
	}
	return *o.TimeflowId
}

// GetTimeflowIdOk returns a tuple with the TimeflowId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LocationCompatibleRepositoryRequest) GetTimeflowIdOk() (*string, bool) {
	if o == nil || IsNil(o.TimeflowId) {
		return nil, false
	}
	return o.TimeflowId, true
}

// HasTimeflowId returns a boolean if a field has been set.
func (o *LocationCompatibleRepositoryRequest) HasTimeflowId() bool {
	if o != nil && !IsNil(o.TimeflowId) {
		return true
	}

	return false
}

// SetTimeflowId gets a reference to the given string and assigns it to the TimeflowId field.
func (o *LocationCompatibleRepositoryRequest) SetTimeflowId(v string) {
	o.TimeflowId = &v
}

// GetEnvironmentId returns the EnvironmentId field value if set, zero value otherwise.
func (o *LocationCompatibleRepositoryRequest) GetEnvironmentId() string {
	if o == nil || IsNil(o.EnvironmentId) {
		var ret string
		return ret
	}
	return *o.EnvironmentId
}

// GetEnvironmentIdOk returns a tuple with the EnvironmentId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LocationCompatibleRepositoryRequest) GetEnvironmentIdOk() (*string, bool) {
	if o == nil || IsNil(o.EnvironmentId) {
		return nil, false
	}
	return o.EnvironmentId, true
}

// HasEnvironmentId returns a boolean if a field has been set.
func (o *LocationCompatibleRepositoryRequest) HasEnvironmentId() bool {
	if o != nil && !IsNil(o.EnvironmentId) {
		return true
	}

	return false
}

// SetEnvironmentId gets a reference to the given string and assigns it to the EnvironmentId field.
func (o *LocationCompatibleRepositoryRequest) SetEnvironmentId(v string) {
	o.EnvironmentId = &v
}

func (o LocationCompatibleRepositoryRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LocationCompatibleRepositoryRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.SourceDataId) {
		toSerialize["source_data_id"] = o.SourceDataId
	}
	if !IsNil(o.EngineId) {
		toSerialize["engine_id"] = o.EngineId
	}
	if !IsNil(o.Location) {
		toSerialize["location"] = o.Location
	}
	if !IsNil(o.TimeflowId) {
		toSerialize["timeflow_id"] = o.TimeflowId
	}
	if !IsNil(o.EnvironmentId) {
		toSerialize["environment_id"] = o.EnvironmentId
	}
	return toSerialize, nil
}

type NullableLocationCompatibleRepositoryRequest struct {
	value *LocationCompatibleRepositoryRequest
	isSet bool
}

func (v NullableLocationCompatibleRepositoryRequest) Get() *LocationCompatibleRepositoryRequest {
	return v.value
}

func (v *NullableLocationCompatibleRepositoryRequest) Set(val *LocationCompatibleRepositoryRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableLocationCompatibleRepositoryRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableLocationCompatibleRepositoryRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLocationCompatibleRepositoryRequest(val *LocationCompatibleRepositoryRequest) *NullableLocationCompatibleRepositoryRequest {
	return &NullableLocationCompatibleRepositoryRequest{value: val, isSet: true}
}

func (v NullableLocationCompatibleRepositoryRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLocationCompatibleRepositoryRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


