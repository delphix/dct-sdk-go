/*
Delphix DCT API

Delphix DCT API

API version: 3.17.0
Contact: support@delphix.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package delphix_dct_api

import (
	"encoding/json"
)

// checks if the LDAPConfigParams type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LDAPConfigParams{}

// LDAPConfigParams Parameters to read or update LDAP Config
type LDAPConfigParams struct {
	// When set, these settings are enabled. True by default.
	Enabled *bool `json:"enabled,omitempty"`
	// When set, the system will automatically create new Accounts for those who have logged in using LDAP. This must be true if LDAP user is not already registered in system. True by default.
	AutoCreateUsers *bool `json:"auto_create_users,omitempty"`
	// The hostname of the LDAP server.
	Hostname *string `json:"hostname,omitempty"`
	// The port of the LDAP server. Default port is 389 for non-SSL and 636 for SSL.
	Port *int32 `json:"port,omitempty"`
	// DCT will try to authenticate using each Domain given in this list.
	Domains []Domain `json:"domains,omitempty"`
	// True if LDAP should be used over SSL.
	EnableSsl *bool `json:"enable_ssl,omitempty"`
	// File name of a truststore which can be used to validate the TLS certificate of the LDAP server. The truststore must be available at /etc/config/certs/<truststore_filename>
	TruststoreFilename *string `json:"truststore_filename,omitempty" validate:"regexp=^[a-zA-Z0-9_\\\\.\\\\-]+$"`
	// Password for reading trustStore file provided in 'truststore_filename' property
	TruststorePassword *string `json:"truststore_password,omitempty"`
	// Allow connections to the LDAP server over LDAPS without validating the TLS certificate. Even though the connection to the server might be performed over LDAPS, setting this property eliminates the protection against a man-in-the-middle attach for connections to this server. Instead, consider creating a truststore with a Certificate Authority to validate the server's certificate, and set the truststore_filename property. 
	InsecureSsl *bool `json:"insecure_ssl,omitempty"`
	// Ignore validation of the name associated to the TLS certificate when connecting to the LDAP server over LDAPS. Setting this value must only be done if the TLS certificate of the server does not match the hostname, and the TLS configuration of the server cannot be fixed. Setting this property reduces the protection against a man-in-the-middle attack for connections to this server. This is ignored if insecure_ssl is set. 
	UnsafeSslHostnameCheck *bool `json:"unsafe_ssl_hostname_check,omitempty"`
}

// NewLDAPConfigParams instantiates a new LDAPConfigParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLDAPConfigParams() *LDAPConfigParams {
	this := LDAPConfigParams{}
	var enabled bool = true
	this.Enabled = &enabled
	var autoCreateUsers bool = true
	this.AutoCreateUsers = &autoCreateUsers
	var enableSsl bool = true
	this.EnableSsl = &enableSsl
	var insecureSsl bool = false
	this.InsecureSsl = &insecureSsl
	var unsafeSslHostnameCheck bool = false
	this.UnsafeSslHostnameCheck = &unsafeSslHostnameCheck
	return &this
}

// NewLDAPConfigParamsWithDefaults instantiates a new LDAPConfigParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLDAPConfigParamsWithDefaults() *LDAPConfigParams {
	this := LDAPConfigParams{}
	var enabled bool = true
	this.Enabled = &enabled
	var autoCreateUsers bool = true
	this.AutoCreateUsers = &autoCreateUsers
	var enableSsl bool = true
	this.EnableSsl = &enableSsl
	var insecureSsl bool = false
	this.InsecureSsl = &insecureSsl
	var unsafeSslHostnameCheck bool = false
	this.UnsafeSslHostnameCheck = &unsafeSslHostnameCheck
	return &this
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *LDAPConfigParams) GetEnabled() bool {
	if o == nil || IsNil(o.Enabled) {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LDAPConfigParams) GetEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Enabled) {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *LDAPConfigParams) HasEnabled() bool {
	if o != nil && !IsNil(o.Enabled) {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *LDAPConfigParams) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetAutoCreateUsers returns the AutoCreateUsers field value if set, zero value otherwise.
func (o *LDAPConfigParams) GetAutoCreateUsers() bool {
	if o == nil || IsNil(o.AutoCreateUsers) {
		var ret bool
		return ret
	}
	return *o.AutoCreateUsers
}

// GetAutoCreateUsersOk returns a tuple with the AutoCreateUsers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LDAPConfigParams) GetAutoCreateUsersOk() (*bool, bool) {
	if o == nil || IsNil(o.AutoCreateUsers) {
		return nil, false
	}
	return o.AutoCreateUsers, true
}

// HasAutoCreateUsers returns a boolean if a field has been set.
func (o *LDAPConfigParams) HasAutoCreateUsers() bool {
	if o != nil && !IsNil(o.AutoCreateUsers) {
		return true
	}

	return false
}

// SetAutoCreateUsers gets a reference to the given bool and assigns it to the AutoCreateUsers field.
func (o *LDAPConfigParams) SetAutoCreateUsers(v bool) {
	o.AutoCreateUsers = &v
}

// GetHostname returns the Hostname field value if set, zero value otherwise.
func (o *LDAPConfigParams) GetHostname() string {
	if o == nil || IsNil(o.Hostname) {
		var ret string
		return ret
	}
	return *o.Hostname
}

// GetHostnameOk returns a tuple with the Hostname field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LDAPConfigParams) GetHostnameOk() (*string, bool) {
	if o == nil || IsNil(o.Hostname) {
		return nil, false
	}
	return o.Hostname, true
}

// HasHostname returns a boolean if a field has been set.
func (o *LDAPConfigParams) HasHostname() bool {
	if o != nil && !IsNil(o.Hostname) {
		return true
	}

	return false
}

// SetHostname gets a reference to the given string and assigns it to the Hostname field.
func (o *LDAPConfigParams) SetHostname(v string) {
	o.Hostname = &v
}

// GetPort returns the Port field value if set, zero value otherwise.
func (o *LDAPConfigParams) GetPort() int32 {
	if o == nil || IsNil(o.Port) {
		var ret int32
		return ret
	}
	return *o.Port
}

// GetPortOk returns a tuple with the Port field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LDAPConfigParams) GetPortOk() (*int32, bool) {
	if o == nil || IsNil(o.Port) {
		return nil, false
	}
	return o.Port, true
}

// HasPort returns a boolean if a field has been set.
func (o *LDAPConfigParams) HasPort() bool {
	if o != nil && !IsNil(o.Port) {
		return true
	}

	return false
}

// SetPort gets a reference to the given int32 and assigns it to the Port field.
func (o *LDAPConfigParams) SetPort(v int32) {
	o.Port = &v
}

// GetDomains returns the Domains field value if set, zero value otherwise.
func (o *LDAPConfigParams) GetDomains() []Domain {
	if o == nil || IsNil(o.Domains) {
		var ret []Domain
		return ret
	}
	return o.Domains
}

// GetDomainsOk returns a tuple with the Domains field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LDAPConfigParams) GetDomainsOk() ([]Domain, bool) {
	if o == nil || IsNil(o.Domains) {
		return nil, false
	}
	return o.Domains, true
}

// HasDomains returns a boolean if a field has been set.
func (o *LDAPConfigParams) HasDomains() bool {
	if o != nil && !IsNil(o.Domains) {
		return true
	}

	return false
}

// SetDomains gets a reference to the given []Domain and assigns it to the Domains field.
func (o *LDAPConfigParams) SetDomains(v []Domain) {
	o.Domains = v
}

// GetEnableSsl returns the EnableSsl field value if set, zero value otherwise.
func (o *LDAPConfigParams) GetEnableSsl() bool {
	if o == nil || IsNil(o.EnableSsl) {
		var ret bool
		return ret
	}
	return *o.EnableSsl
}

// GetEnableSslOk returns a tuple with the EnableSsl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LDAPConfigParams) GetEnableSslOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableSsl) {
		return nil, false
	}
	return o.EnableSsl, true
}

// HasEnableSsl returns a boolean if a field has been set.
func (o *LDAPConfigParams) HasEnableSsl() bool {
	if o != nil && !IsNil(o.EnableSsl) {
		return true
	}

	return false
}

// SetEnableSsl gets a reference to the given bool and assigns it to the EnableSsl field.
func (o *LDAPConfigParams) SetEnableSsl(v bool) {
	o.EnableSsl = &v
}

// GetTruststoreFilename returns the TruststoreFilename field value if set, zero value otherwise.
func (o *LDAPConfigParams) GetTruststoreFilename() string {
	if o == nil || IsNil(o.TruststoreFilename) {
		var ret string
		return ret
	}
	return *o.TruststoreFilename
}

// GetTruststoreFilenameOk returns a tuple with the TruststoreFilename field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LDAPConfigParams) GetTruststoreFilenameOk() (*string, bool) {
	if o == nil || IsNil(o.TruststoreFilename) {
		return nil, false
	}
	return o.TruststoreFilename, true
}

// HasTruststoreFilename returns a boolean if a field has been set.
func (o *LDAPConfigParams) HasTruststoreFilename() bool {
	if o != nil && !IsNil(o.TruststoreFilename) {
		return true
	}

	return false
}

// SetTruststoreFilename gets a reference to the given string and assigns it to the TruststoreFilename field.
func (o *LDAPConfigParams) SetTruststoreFilename(v string) {
	o.TruststoreFilename = &v
}

// GetTruststorePassword returns the TruststorePassword field value if set, zero value otherwise.
func (o *LDAPConfigParams) GetTruststorePassword() string {
	if o == nil || IsNil(o.TruststorePassword) {
		var ret string
		return ret
	}
	return *o.TruststorePassword
}

// GetTruststorePasswordOk returns a tuple with the TruststorePassword field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LDAPConfigParams) GetTruststorePasswordOk() (*string, bool) {
	if o == nil || IsNil(o.TruststorePassword) {
		return nil, false
	}
	return o.TruststorePassword, true
}

// HasTruststorePassword returns a boolean if a field has been set.
func (o *LDAPConfigParams) HasTruststorePassword() bool {
	if o != nil && !IsNil(o.TruststorePassword) {
		return true
	}

	return false
}

// SetTruststorePassword gets a reference to the given string and assigns it to the TruststorePassword field.
func (o *LDAPConfigParams) SetTruststorePassword(v string) {
	o.TruststorePassword = &v
}

// GetInsecureSsl returns the InsecureSsl field value if set, zero value otherwise.
func (o *LDAPConfigParams) GetInsecureSsl() bool {
	if o == nil || IsNil(o.InsecureSsl) {
		var ret bool
		return ret
	}
	return *o.InsecureSsl
}

// GetInsecureSslOk returns a tuple with the InsecureSsl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LDAPConfigParams) GetInsecureSslOk() (*bool, bool) {
	if o == nil || IsNil(o.InsecureSsl) {
		return nil, false
	}
	return o.InsecureSsl, true
}

// HasInsecureSsl returns a boolean if a field has been set.
func (o *LDAPConfigParams) HasInsecureSsl() bool {
	if o != nil && !IsNil(o.InsecureSsl) {
		return true
	}

	return false
}

// SetInsecureSsl gets a reference to the given bool and assigns it to the InsecureSsl field.
func (o *LDAPConfigParams) SetInsecureSsl(v bool) {
	o.InsecureSsl = &v
}

// GetUnsafeSslHostnameCheck returns the UnsafeSslHostnameCheck field value if set, zero value otherwise.
func (o *LDAPConfigParams) GetUnsafeSslHostnameCheck() bool {
	if o == nil || IsNil(o.UnsafeSslHostnameCheck) {
		var ret bool
		return ret
	}
	return *o.UnsafeSslHostnameCheck
}

// GetUnsafeSslHostnameCheckOk returns a tuple with the UnsafeSslHostnameCheck field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LDAPConfigParams) GetUnsafeSslHostnameCheckOk() (*bool, bool) {
	if o == nil || IsNil(o.UnsafeSslHostnameCheck) {
		return nil, false
	}
	return o.UnsafeSslHostnameCheck, true
}

// HasUnsafeSslHostnameCheck returns a boolean if a field has been set.
func (o *LDAPConfigParams) HasUnsafeSslHostnameCheck() bool {
	if o != nil && !IsNil(o.UnsafeSslHostnameCheck) {
		return true
	}

	return false
}

// SetUnsafeSslHostnameCheck gets a reference to the given bool and assigns it to the UnsafeSslHostnameCheck field.
func (o *LDAPConfigParams) SetUnsafeSslHostnameCheck(v bool) {
	o.UnsafeSslHostnameCheck = &v
}

func (o LDAPConfigParams) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LDAPConfigParams) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Enabled) {
		toSerialize["enabled"] = o.Enabled
	}
	if !IsNil(o.AutoCreateUsers) {
		toSerialize["auto_create_users"] = o.AutoCreateUsers
	}
	if !IsNil(o.Hostname) {
		toSerialize["hostname"] = o.Hostname
	}
	if !IsNil(o.Port) {
		toSerialize["port"] = o.Port
	}
	if !IsNil(o.Domains) {
		toSerialize["domains"] = o.Domains
	}
	if !IsNil(o.EnableSsl) {
		toSerialize["enable_ssl"] = o.EnableSsl
	}
	if !IsNil(o.TruststoreFilename) {
		toSerialize["truststore_filename"] = o.TruststoreFilename
	}
	if !IsNil(o.TruststorePassword) {
		toSerialize["truststore_password"] = o.TruststorePassword
	}
	if !IsNil(o.InsecureSsl) {
		toSerialize["insecure_ssl"] = o.InsecureSsl
	}
	if !IsNil(o.UnsafeSslHostnameCheck) {
		toSerialize["unsafe_ssl_hostname_check"] = o.UnsafeSslHostnameCheck
	}
	return toSerialize, nil
}

type NullableLDAPConfigParams struct {
	value *LDAPConfigParams
	isSet bool
}

func (v NullableLDAPConfigParams) Get() *LDAPConfigParams {
	return v.value
}

func (v *NullableLDAPConfigParams) Set(val *LDAPConfigParams) {
	v.value = val
	v.isSet = true
}

func (v NullableLDAPConfigParams) IsSet() bool {
	return v.isSet
}

func (v *NullableLDAPConfigParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLDAPConfigParams(val *LDAPConfigParams) *NullableLDAPConfigParams {
	return &NullableLDAPConfigParams{value: val, isSet: true}
}

func (v NullableLDAPConfigParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLDAPConfigParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


