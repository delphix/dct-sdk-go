/*
Delphix DCT API

Delphix DCT API

API version: 3.18.0
Contact: support@delphix.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package delphix_dct_api

import (
	"encoding/json"
)

// checks if the GlobalProperties type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GlobalProperties{}

// GlobalProperties Global properties response.
type GlobalProperties struct {
	// Property to define either username & password based authentication disabled or not.
	DisableUsernamePassword *bool `json:"disable_username_password,omitempty"`
	// Property to define the phonehome bundle upload cadence, in days, if Delphix services are reachable.
	PhonehomeUploadCadence *int32 `json:"phonehome_upload_cadence,omitempty"`
	// Property to define the maximum uncompressed bundle transfer size, in bytes, for phonehome.
	PhonehomeMaximumTransferSize *int32 `json:"phonehome_maximum_transfer_size,omitempty"`
	// Property to define the expiry time for login token, in seconds. Specify -1 to indicate never expiry of token.
	TokenExpiryTime *int32 `json:"token_expiry_time,omitempty"`
	// Property to define the maximum user inactivity time for login token, in seconds. Specify -1 to indicate never invalidate of token due to inactivity.
	TokenMaximumInactivityTime *int32 `json:"token_maximum_inactivity_time,omitempty"`
	// List of enabled features.
	FeatureFlags []string `json:"feature_flags,omitempty"`
	// Property to define the expiry time for API key, in seconds. Specify -1 to indicate never expiry of tapi key.
	ApiKeyExpiryTime *int32 `json:"api_key_expiry_time,omitempty"`
	// Restricts the IP ranges DCT will connect to when registering engines.
	AllowedIpRanges []string `json:"allowed_ip_ranges,omitempty"`
}

// NewGlobalProperties instantiates a new GlobalProperties object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGlobalProperties() *GlobalProperties {
	this := GlobalProperties{}
	return &this
}

// NewGlobalPropertiesWithDefaults instantiates a new GlobalProperties object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGlobalPropertiesWithDefaults() *GlobalProperties {
	this := GlobalProperties{}
	return &this
}

// GetDisableUsernamePassword returns the DisableUsernamePassword field value if set, zero value otherwise.
func (o *GlobalProperties) GetDisableUsernamePassword() bool {
	if o == nil || IsNil(o.DisableUsernamePassword) {
		var ret bool
		return ret
	}
	return *o.DisableUsernamePassword
}

// GetDisableUsernamePasswordOk returns a tuple with the DisableUsernamePassword field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GlobalProperties) GetDisableUsernamePasswordOk() (*bool, bool) {
	if o == nil || IsNil(o.DisableUsernamePassword) {
		return nil, false
	}
	return o.DisableUsernamePassword, true
}

// HasDisableUsernamePassword returns a boolean if a field has been set.
func (o *GlobalProperties) HasDisableUsernamePassword() bool {
	if o != nil && !IsNil(o.DisableUsernamePassword) {
		return true
	}

	return false
}

// SetDisableUsernamePassword gets a reference to the given bool and assigns it to the DisableUsernamePassword field.
func (o *GlobalProperties) SetDisableUsernamePassword(v bool) {
	o.DisableUsernamePassword = &v
}

// GetPhonehomeUploadCadence returns the PhonehomeUploadCadence field value if set, zero value otherwise.
func (o *GlobalProperties) GetPhonehomeUploadCadence() int32 {
	if o == nil || IsNil(o.PhonehomeUploadCadence) {
		var ret int32
		return ret
	}
	return *o.PhonehomeUploadCadence
}

// GetPhonehomeUploadCadenceOk returns a tuple with the PhonehomeUploadCadence field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GlobalProperties) GetPhonehomeUploadCadenceOk() (*int32, bool) {
	if o == nil || IsNil(o.PhonehomeUploadCadence) {
		return nil, false
	}
	return o.PhonehomeUploadCadence, true
}

// HasPhonehomeUploadCadence returns a boolean if a field has been set.
func (o *GlobalProperties) HasPhonehomeUploadCadence() bool {
	if o != nil && !IsNil(o.PhonehomeUploadCadence) {
		return true
	}

	return false
}

// SetPhonehomeUploadCadence gets a reference to the given int32 and assigns it to the PhonehomeUploadCadence field.
func (o *GlobalProperties) SetPhonehomeUploadCadence(v int32) {
	o.PhonehomeUploadCadence = &v
}

// GetPhonehomeMaximumTransferSize returns the PhonehomeMaximumTransferSize field value if set, zero value otherwise.
func (o *GlobalProperties) GetPhonehomeMaximumTransferSize() int32 {
	if o == nil || IsNil(o.PhonehomeMaximumTransferSize) {
		var ret int32
		return ret
	}
	return *o.PhonehomeMaximumTransferSize
}

// GetPhonehomeMaximumTransferSizeOk returns a tuple with the PhonehomeMaximumTransferSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GlobalProperties) GetPhonehomeMaximumTransferSizeOk() (*int32, bool) {
	if o == nil || IsNil(o.PhonehomeMaximumTransferSize) {
		return nil, false
	}
	return o.PhonehomeMaximumTransferSize, true
}

// HasPhonehomeMaximumTransferSize returns a boolean if a field has been set.
func (o *GlobalProperties) HasPhonehomeMaximumTransferSize() bool {
	if o != nil && !IsNil(o.PhonehomeMaximumTransferSize) {
		return true
	}

	return false
}

// SetPhonehomeMaximumTransferSize gets a reference to the given int32 and assigns it to the PhonehomeMaximumTransferSize field.
func (o *GlobalProperties) SetPhonehomeMaximumTransferSize(v int32) {
	o.PhonehomeMaximumTransferSize = &v
}

// GetTokenExpiryTime returns the TokenExpiryTime field value if set, zero value otherwise.
func (o *GlobalProperties) GetTokenExpiryTime() int32 {
	if o == nil || IsNil(o.TokenExpiryTime) {
		var ret int32
		return ret
	}
	return *o.TokenExpiryTime
}

// GetTokenExpiryTimeOk returns a tuple with the TokenExpiryTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GlobalProperties) GetTokenExpiryTimeOk() (*int32, bool) {
	if o == nil || IsNil(o.TokenExpiryTime) {
		return nil, false
	}
	return o.TokenExpiryTime, true
}

// HasTokenExpiryTime returns a boolean if a field has been set.
func (o *GlobalProperties) HasTokenExpiryTime() bool {
	if o != nil && !IsNil(o.TokenExpiryTime) {
		return true
	}

	return false
}

// SetTokenExpiryTime gets a reference to the given int32 and assigns it to the TokenExpiryTime field.
func (o *GlobalProperties) SetTokenExpiryTime(v int32) {
	o.TokenExpiryTime = &v
}

// GetTokenMaximumInactivityTime returns the TokenMaximumInactivityTime field value if set, zero value otherwise.
func (o *GlobalProperties) GetTokenMaximumInactivityTime() int32 {
	if o == nil || IsNil(o.TokenMaximumInactivityTime) {
		var ret int32
		return ret
	}
	return *o.TokenMaximumInactivityTime
}

// GetTokenMaximumInactivityTimeOk returns a tuple with the TokenMaximumInactivityTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GlobalProperties) GetTokenMaximumInactivityTimeOk() (*int32, bool) {
	if o == nil || IsNil(o.TokenMaximumInactivityTime) {
		return nil, false
	}
	return o.TokenMaximumInactivityTime, true
}

// HasTokenMaximumInactivityTime returns a boolean if a field has been set.
func (o *GlobalProperties) HasTokenMaximumInactivityTime() bool {
	if o != nil && !IsNil(o.TokenMaximumInactivityTime) {
		return true
	}

	return false
}

// SetTokenMaximumInactivityTime gets a reference to the given int32 and assigns it to the TokenMaximumInactivityTime field.
func (o *GlobalProperties) SetTokenMaximumInactivityTime(v int32) {
	o.TokenMaximumInactivityTime = &v
}

// GetFeatureFlags returns the FeatureFlags field value if set, zero value otherwise.
func (o *GlobalProperties) GetFeatureFlags() []string {
	if o == nil || IsNil(o.FeatureFlags) {
		var ret []string
		return ret
	}
	return o.FeatureFlags
}

// GetFeatureFlagsOk returns a tuple with the FeatureFlags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GlobalProperties) GetFeatureFlagsOk() ([]string, bool) {
	if o == nil || IsNil(o.FeatureFlags) {
		return nil, false
	}
	return o.FeatureFlags, true
}

// HasFeatureFlags returns a boolean if a field has been set.
func (o *GlobalProperties) HasFeatureFlags() bool {
	if o != nil && !IsNil(o.FeatureFlags) {
		return true
	}

	return false
}

// SetFeatureFlags gets a reference to the given []string and assigns it to the FeatureFlags field.
func (o *GlobalProperties) SetFeatureFlags(v []string) {
	o.FeatureFlags = v
}

// GetApiKeyExpiryTime returns the ApiKeyExpiryTime field value if set, zero value otherwise.
func (o *GlobalProperties) GetApiKeyExpiryTime() int32 {
	if o == nil || IsNil(o.ApiKeyExpiryTime) {
		var ret int32
		return ret
	}
	return *o.ApiKeyExpiryTime
}

// GetApiKeyExpiryTimeOk returns a tuple with the ApiKeyExpiryTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GlobalProperties) GetApiKeyExpiryTimeOk() (*int32, bool) {
	if o == nil || IsNil(o.ApiKeyExpiryTime) {
		return nil, false
	}
	return o.ApiKeyExpiryTime, true
}

// HasApiKeyExpiryTime returns a boolean if a field has been set.
func (o *GlobalProperties) HasApiKeyExpiryTime() bool {
	if o != nil && !IsNil(o.ApiKeyExpiryTime) {
		return true
	}

	return false
}

// SetApiKeyExpiryTime gets a reference to the given int32 and assigns it to the ApiKeyExpiryTime field.
func (o *GlobalProperties) SetApiKeyExpiryTime(v int32) {
	o.ApiKeyExpiryTime = &v
}

// GetAllowedIpRanges returns the AllowedIpRanges field value if set, zero value otherwise.
func (o *GlobalProperties) GetAllowedIpRanges() []string {
	if o == nil || IsNil(o.AllowedIpRanges) {
		var ret []string
		return ret
	}
	return o.AllowedIpRanges
}

// GetAllowedIpRangesOk returns a tuple with the AllowedIpRanges field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GlobalProperties) GetAllowedIpRangesOk() ([]string, bool) {
	if o == nil || IsNil(o.AllowedIpRanges) {
		return nil, false
	}
	return o.AllowedIpRanges, true
}

// HasAllowedIpRanges returns a boolean if a field has been set.
func (o *GlobalProperties) HasAllowedIpRanges() bool {
	if o != nil && !IsNil(o.AllowedIpRanges) {
		return true
	}

	return false
}

// SetAllowedIpRanges gets a reference to the given []string and assigns it to the AllowedIpRanges field.
func (o *GlobalProperties) SetAllowedIpRanges(v []string) {
	o.AllowedIpRanges = v
}

func (o GlobalProperties) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GlobalProperties) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DisableUsernamePassword) {
		toSerialize["disable_username_password"] = o.DisableUsernamePassword
	}
	if !IsNil(o.PhonehomeUploadCadence) {
		toSerialize["phonehome_upload_cadence"] = o.PhonehomeUploadCadence
	}
	if !IsNil(o.PhonehomeMaximumTransferSize) {
		toSerialize["phonehome_maximum_transfer_size"] = o.PhonehomeMaximumTransferSize
	}
	if !IsNil(o.TokenExpiryTime) {
		toSerialize["token_expiry_time"] = o.TokenExpiryTime
	}
	if !IsNil(o.TokenMaximumInactivityTime) {
		toSerialize["token_maximum_inactivity_time"] = o.TokenMaximumInactivityTime
	}
	if !IsNil(o.FeatureFlags) {
		toSerialize["feature_flags"] = o.FeatureFlags
	}
	if !IsNil(o.ApiKeyExpiryTime) {
		toSerialize["api_key_expiry_time"] = o.ApiKeyExpiryTime
	}
	if !IsNil(o.AllowedIpRanges) {
		toSerialize["allowed_ip_ranges"] = o.AllowedIpRanges
	}
	return toSerialize, nil
}

type NullableGlobalProperties struct {
	value *GlobalProperties
	isSet bool
}

func (v NullableGlobalProperties) Get() *GlobalProperties {
	return v.value
}

func (v *NullableGlobalProperties) Set(val *GlobalProperties) {
	v.value = val
	v.isSet = true
}

func (v NullableGlobalProperties) IsSet() bool {
	return v.isSet
}

func (v *NullableGlobalProperties) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGlobalProperties(val *GlobalProperties) *NullableGlobalProperties {
	return &NullableGlobalProperties{value: val, isSet: true}
}

func (v NullableGlobalProperties) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGlobalProperties) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


