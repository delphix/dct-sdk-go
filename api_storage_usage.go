/*
Delphix DCT API

Delphix DCT API

API version: 3.18.0
Contact: support@delphix.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package delphix_dct_api

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"time"
	"reflect"
)


// StorageUsageAPIService StorageUsageAPI service
type StorageUsageAPIService service

type ApiGetHistoricalStorageSummaryAggregateRequest struct {
	ctx context.Context
	ApiService *StorageUsageAPIService
	startDate *time.Time
	endDate *time.Time
	includeProjection *bool
	engineIds *[]string
}

// Report start date/time. Defaults to first API request.
func (r ApiGetHistoricalStorageSummaryAggregateRequest) StartDate(startDate time.Time) ApiGetHistoricalStorageSummaryAggregateRequest {
	r.startDate = &startDate
	return r
}

// Report end date/time. Defaults to current time.
func (r ApiGetHistoricalStorageSummaryAggregateRequest) EndDate(endDate time.Time) ApiGetHistoricalStorageSummaryAggregateRequest {
	r.endDate = &endDate
	return r
}

// Whether to compute a projection of future storage usage.
func (r ApiGetHistoricalStorageSummaryAggregateRequest) IncludeProjection(includeProjection bool) ApiGetHistoricalStorageSummaryAggregateRequest {
	r.includeProjection = &includeProjection
	return r
}

// The list of engine ids to aggregate data for. By default aggregating data for all engines.
func (r ApiGetHistoricalStorageSummaryAggregateRequest) EngineIds(engineIds []string) ApiGetHistoricalStorageSummaryAggregateRequest {
	r.engineIds = &engineIds
	return r
}

func (r ApiGetHistoricalStorageSummaryAggregateRequest) Execute() (*HistoricalStorageSummaryAggregate, *http.Response, error) {
	return r.ApiService.GetHistoricalStorageSummaryAggregateExecute(r)
}

/*
GetHistoricalStorageSummaryAggregate Returns the aggregated historical storage usage of all registered engines over time, optionally with a projection of future storage usage.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetHistoricalStorageSummaryAggregateRequest
*/
func (a *StorageUsageAPIService) GetHistoricalStorageSummaryAggregate(ctx context.Context) ApiGetHistoricalStorageSummaryAggregateRequest {
	return ApiGetHistoricalStorageSummaryAggregateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return HistoricalStorageSummaryAggregate
func (a *StorageUsageAPIService) GetHistoricalStorageSummaryAggregateExecute(r ApiGetHistoricalStorageSummaryAggregateRequest) (*HistoricalStorageSummaryAggregate, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *HistoricalStorageSummaryAggregate
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "StorageUsageAPIService.GetHistoricalStorageSummaryAggregate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/historical-storage-summary-aggregate"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.startDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "start_date", r.startDate, "form", "")
	}
	if r.endDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "end_date", r.endDate, "form", "")
	}
	if r.includeProjection != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "include_projection", r.includeProjection, "form", "")
	}
	if r.engineIds != nil {
		t := *r.engineIds
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "engine_ids", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "engine_ids", t, "form", "multi")
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ApiKeyAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetHistoricalStorageSummaryByEngineRequest struct {
	ctx context.Context
	ApiService *StorageUsageAPIService
	startDate *time.Time
	endDate *time.Time
	includeProjection *bool
	engineIds *[]string
}

// Report start date/time. Defaults to first API request.
func (r ApiGetHistoricalStorageSummaryByEngineRequest) StartDate(startDate time.Time) ApiGetHistoricalStorageSummaryByEngineRequest {
	r.startDate = &startDate
	return r
}

// Report end date/time. Defaults to current time.
func (r ApiGetHistoricalStorageSummaryByEngineRequest) EndDate(endDate time.Time) ApiGetHistoricalStorageSummaryByEngineRequest {
	r.endDate = &endDate
	return r
}

// Whether to compute a projection of future storage usage.
func (r ApiGetHistoricalStorageSummaryByEngineRequest) IncludeProjection(includeProjection bool) ApiGetHistoricalStorageSummaryByEngineRequest {
	r.includeProjection = &includeProjection
	return r
}

// The list of engine ids to include in the response. By default returning data for all engines.
func (r ApiGetHistoricalStorageSummaryByEngineRequest) EngineIds(engineIds []string) ApiGetHistoricalStorageSummaryByEngineRequest {
	r.engineIds = &engineIds
	return r
}

func (r ApiGetHistoricalStorageSummaryByEngineRequest) Execute() (*HistoricalStorageSummary, *http.Response, error) {
	return r.ApiService.GetHistoricalStorageSummaryByEngineExecute(r)
}

/*
GetHistoricalStorageSummaryByEngine Returns the historical storage usage by engine over time, optionally with a projection of future storage usage.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetHistoricalStorageSummaryByEngineRequest
*/
func (a *StorageUsageAPIService) GetHistoricalStorageSummaryByEngine(ctx context.Context) ApiGetHistoricalStorageSummaryByEngineRequest {
	return ApiGetHistoricalStorageSummaryByEngineRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return HistoricalStorageSummary
func (a *StorageUsageAPIService) GetHistoricalStorageSummaryByEngineExecute(r ApiGetHistoricalStorageSummaryByEngineRequest) (*HistoricalStorageSummary, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *HistoricalStorageSummary
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "StorageUsageAPIService.GetHistoricalStorageSummaryByEngine")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/historical-storage-summary-by-engine"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.startDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "start_date", r.startDate, "form", "")
	}
	if r.endDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "end_date", r.endDate, "form", "")
	}
	if r.includeProjection != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "include_projection", r.includeProjection, "form", "")
	}
	if r.engineIds != nil {
		t := *r.engineIds
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "engine_ids", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "engine_ids", t, "form", "multi")
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ApiKeyAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
