/*
Delphix DCT API

Delphix DCT API

API version: 3.17.0
Contact: support@delphix.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package delphix_dct_api

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the OracleDSourceLinkSourceParameters type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OracleDSourceLinkSourceParameters{}

// OracleDSourceLinkSourceParameters struct for OracleDSourceLinkSourceParameters
type OracleDSourceLinkSourceParameters struct {
	// Name of the dSource to be created.
	Name *string `json:"name,omitempty"`
	// Id of the source to link.
	SourceId string `json:"source_id"`
	// Id of the dataset group where this dSource should belong to.
	GroupId *string `json:"group_id,omitempty"`
	// The notes/description for the dSource.
	Description *string `json:"description,omitempty"`
	// True if LogSync should run for this database.
	LogSyncEnabled *bool `json:"log_sync_enabled,omitempty"`
	// The ID of the SnapSync policy for the dSource.
	SyncPolicyId *string `json:"sync_policy_id,omitempty"`
	// The ID of the Retention policy for the dSource.
	RetentionPolicyId *string `json:"retention_policy_id,omitempty"`
	// Whether the account creating this reporting schedule must be configured as owner of the reporting schedule.
	MakeCurrentAccountOwner *bool `json:"make_current_account_owner,omitempty"`
	// The tags to be created for dSource.
	Tags []Tag `json:"tags,omitempty"`
	// Operations to perform before syncing the created dSource. These operations can quiesce any data prior to syncing.
	OpsPreSync []SourceOperation `json:"ops_pre_sync,omitempty"`
	// Operations to perform after syncing a created dSource.
	OpsPostSync []SourceOperation `json:"ops_post_sync,omitempty"`
	// External file path.
	ExternalFilePath *string `json:"external_file_path,omitempty"`
	// Id of the environment user to use for linking.
	EnvironmentUserId *string `json:"environment_user_id,omitempty"`
	// Boolean value indicates whether LEVEL-based incremental backups can be used on the source database.
	BackupLevelEnabled *bool `json:"backup_level_enabled,omitempty"`
	// Number of parallel channels to use.
	RmanChannels *int32 `json:"rman_channels,omitempty"`
	// Number of data files to include in each RMAN backup set.
	FilesPerSet *int32 `json:"files_per_set,omitempty"`
	// True if extended block checking should be used for this linked database.
	CheckLogical *bool `json:"check_logical,omitempty"`
	// True if SnapSync data from the source should be retrieved through an encrypted connection. Enabling this feature can decrease the performance of SnapSync from the source but has no impact on the performance of VDBs created from the retrieved data.
	EncryptedLinkingEnabled *bool `json:"encrypted_linking_enabled,omitempty"`
	// True if SnapSync data from the source should be compressed over the network. Enabling this feature will reduce network bandwidth consumption and may significantly improve throughput, especially over slow network.
	CompressedLinkingEnabled *bool `json:"compressed_linking_enabled,omitempty"`
	// Bandwidth limit (MB/s) for SnapSync and LogSync network traffic. A value of 0 means no limit.
	BandwidthLimit *int32 `json:"bandwidth_limit,omitempty"`
	// Total number of transport connections to use during SnapSync.
	NumberOfConnections *int32 `json:"number_of_connections,omitempty"`
	// If true, NOLOGGING operations on this container are treated as faults and cannot be resolved manually.
	DiagnoseNoLoggingFaults *bool `json:"diagnose_no_logging_faults,omitempty"`
	// If true, pre-provisioning will be performed after every sync.
	PreProvisioningEnabled *bool `json:"pre_provisioning_enabled,omitempty"`
	// True if initial load should be done immediately.
	LinkNow *bool `json:"link_now,omitempty"`
	// Whether or not to take another full backup of the source database.
	ForceFullBackup *bool `json:"force_full_backup,omitempty"`
	// True if two SnapSyncs should be performed in immediate succession to reduce the number of logs required to provision the snapshot. This may significantly reduce the time necessary to provision from a snapshot.
	DoubleSync *bool `json:"double_sync,omitempty"`
	// Skip check that tests if there is enough space available to store the database in the Delphix Engine. The Delphix Engine estimates how much space a database will occupy after compression and prevents SnapSync if insufficient space is available. This safeguard can be overridden using this option. This may be useful when linking highly compressible databases.
	SkipSpaceCheck *bool `json:"skip_space_check,omitempty"`
	// Indicates whether a fresh SnapSync must be started regardless if it was possible to resume the current SnapSync. If true, we will not resume but instead ignore previous progress and backup all datafiles even if already completed from previous failed SnapSync. This does not force a full backup, if an incremental was in progress this will start a new incremental snapshot.
	DoNotResume *bool `json:"do_not_resume,omitempty"`
	// List of datafiles to take a full backup of. This would be useful in situations where certain datafiles could not be backed up during previous SnapSync due to corruption or because they went offline.
	FilesForFullBackup []int32 `json:"files_for_full_backup,omitempty"`
	// LogSync operation mode for this database.
	LogSyncMode *string `json:"log_sync_mode,omitempty"`
	// Interval between LogSync requests, in seconds.
	LogSyncInterval *int32 `json:"log_sync_interval,omitempty"`
	// Non-SYS database user to access this database. Only required for username-password auth (Single tenant only).
	NonSysUsername *string `json:"non_sys_username,omitempty"`
	// Password for non sys user authentication (Single tenant only).
	NonSysPassword *string `json:"non_sys_password,omitempty"`
	// Delphix display name for the non sys vault user(Single tenant only).
	NonSysVaultUsername *string `json:"non_sys_vault_username,omitempty"`
	// The name or reference of the vault from which to read the database credentials (Single tenant only).
	NonSysVault *string `json:"non_sys_vault,omitempty"`
	// Vault engine name where the credential is stored (Single tenant only).
	NonSysHashicorpVaultEngine *string `json:"non_sys_hashicorp_vault_engine,omitempty"`
	// Path in the vault engine where the credential is stored (Single tenant only).
	NonSysHashicorpVaultSecretPath *string `json:"non_sys_hashicorp_vault_secret_path,omitempty"`
	// Hashicorp vault key for the username in the key-value store (Single tenant only).
	NonSysHashicorpVaultUsernameKey *string `json:"non_sys_hashicorp_vault_username_key,omitempty"`
	// Hashicorp vault key for the password in the key-value store (Single tenant only).
	NonSysHashicorpVaultSecretKey *string `json:"non_sys_hashicorp_vault_secret_key,omitempty"`
	// Azure key vault name (Single tenant only).
	NonSysAzureVaultName *string `json:"non_sys_azure_vault_name,omitempty"`
	// Azure vault key for the username in the key-value store (Single tenant only).
	NonSysAzureVaultUsernameKey *string `json:"non_sys_azure_vault_username_key,omitempty"`
	// Azure vault key for the password in the key-value store (Single tenant only).
	NonSysAzureVaultSecretKey *string `json:"non_sys_azure_vault_secret_key,omitempty"`
	// Query to find a credential in the CyberArk vault (Single tenant only).
	NonSysCyberarkVaultQueryString *string `json:"non_sys_cyberark_vault_query_string,omitempty"`
	// The database fallback username. Optional if bequeath connections are enabled (to be used in case of bequeath connection failures). Only required for username-password auth.
	FallbackUsername *string `json:"fallback_username,omitempty"`
	// Password for fallback username.
	FallbackPassword *string `json:"fallback_password,omitempty"`
	// Delphix display name for the fallback vault user.
	FallbackVaultUsername *string `json:"fallback_vault_username,omitempty"`
	// The name or reference of the vault from which to read the database credentials.
	FallbackVault *string `json:"fallback_vault,omitempty"`
	// Vault engine name where the credential is stored.
	FallbackHashicorpVaultEngine *string `json:"fallback_hashicorp_vault_engine,omitempty"`
	// Path in the vault engine where the credential is stored.
	FallbackHashicorpVaultSecretPath *string `json:"fallback_hashicorp_vault_secret_path,omitempty"`
	// Hashicorp vault key for the username in the key-value store.
	FallbackHashicorpVaultUsernameKey *string `json:"fallback_hashicorp_vault_username_key,omitempty"`
	// Hashicorp vault key for the password in the key-value store.
	FallbackHashicorpVaultSecretKey *string `json:"fallback_hashicorp_vault_secret_key,omitempty"`
	// Azure key vault name.
	FallbackAzureVaultName *string `json:"fallback_azure_vault_name,omitempty"`
	// Azure vault key for the username in the key-value store.
	FallbackAzureVaultUsernameKey *string `json:"fallback_azure_vault_username_key,omitempty"`
	// Azure vault key for the password in the key-value store.
	FallbackAzureVaultSecretKey *string `json:"fallback_azure_vault_secret_key,omitempty"`
	// Query to find a credential in the CyberArk vault.
	FallbackCyberarkVaultQueryString *string `json:"fallback_cyberark_vault_query_string,omitempty"`
	// Operations to perform after syncing a created dSource and before running the LogSync.
	OpsPreLogSync []SourceOperation `json:"ops_pre_log_sync,omitempty"`
}

type _OracleDSourceLinkSourceParameters OracleDSourceLinkSourceParameters

// NewOracleDSourceLinkSourceParameters instantiates a new OracleDSourceLinkSourceParameters object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOracleDSourceLinkSourceParameters(sourceId string) *OracleDSourceLinkSourceParameters {
	this := OracleDSourceLinkSourceParameters{}
	this.SourceId = sourceId
	var logSyncEnabled bool = false
	this.LogSyncEnabled = &logSyncEnabled
	var makeCurrentAccountOwner bool = true
	this.MakeCurrentAccountOwner = &makeCurrentAccountOwner
	var rmanChannels int32 = 2
	this.RmanChannels = &rmanChannels
	var filesPerSet int32 = 5
	this.FilesPerSet = &filesPerSet
	var checkLogical bool = false
	this.CheckLogical = &checkLogical
	var encryptedLinkingEnabled bool = false
	this.EncryptedLinkingEnabled = &encryptedLinkingEnabled
	var compressedLinkingEnabled bool = true
	this.CompressedLinkingEnabled = &compressedLinkingEnabled
	var bandwidthLimit int32 = 0
	this.BandwidthLimit = &bandwidthLimit
	var numberOfConnections int32 = 1
	this.NumberOfConnections = &numberOfConnections
	var diagnoseNoLoggingFaults bool = true
	this.DiagnoseNoLoggingFaults = &diagnoseNoLoggingFaults
	var preProvisioningEnabled bool = false
	this.PreProvisioningEnabled = &preProvisioningEnabled
	var linkNow bool = false
	this.LinkNow = &linkNow
	var forceFullBackup bool = false
	this.ForceFullBackup = &forceFullBackup
	var doubleSync bool = false
	this.DoubleSync = &doubleSync
	var skipSpaceCheck bool = false
	this.SkipSpaceCheck = &skipSpaceCheck
	var doNotResume bool = false
	this.DoNotResume = &doNotResume
	var logSyncMode string = "UNDEFINED"
	this.LogSyncMode = &logSyncMode
	var logSyncInterval int32 = 5
	this.LogSyncInterval = &logSyncInterval
	return &this
}

// NewOracleDSourceLinkSourceParametersWithDefaults instantiates a new OracleDSourceLinkSourceParameters object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOracleDSourceLinkSourceParametersWithDefaults() *OracleDSourceLinkSourceParameters {
	this := OracleDSourceLinkSourceParameters{}
	var logSyncEnabled bool = false
	this.LogSyncEnabled = &logSyncEnabled
	var makeCurrentAccountOwner bool = true
	this.MakeCurrentAccountOwner = &makeCurrentAccountOwner
	var rmanChannels int32 = 2
	this.RmanChannels = &rmanChannels
	var filesPerSet int32 = 5
	this.FilesPerSet = &filesPerSet
	var checkLogical bool = false
	this.CheckLogical = &checkLogical
	var encryptedLinkingEnabled bool = false
	this.EncryptedLinkingEnabled = &encryptedLinkingEnabled
	var compressedLinkingEnabled bool = true
	this.CompressedLinkingEnabled = &compressedLinkingEnabled
	var bandwidthLimit int32 = 0
	this.BandwidthLimit = &bandwidthLimit
	var numberOfConnections int32 = 1
	this.NumberOfConnections = &numberOfConnections
	var diagnoseNoLoggingFaults bool = true
	this.DiagnoseNoLoggingFaults = &diagnoseNoLoggingFaults
	var preProvisioningEnabled bool = false
	this.PreProvisioningEnabled = &preProvisioningEnabled
	var linkNow bool = false
	this.LinkNow = &linkNow
	var forceFullBackup bool = false
	this.ForceFullBackup = &forceFullBackup
	var doubleSync bool = false
	this.DoubleSync = &doubleSync
	var skipSpaceCheck bool = false
	this.SkipSpaceCheck = &skipSpaceCheck
	var doNotResume bool = false
	this.DoNotResume = &doNotResume
	var logSyncMode string = "UNDEFINED"
	this.LogSyncMode = &logSyncMode
	var logSyncInterval int32 = 5
	this.LogSyncInterval = &logSyncInterval
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *OracleDSourceLinkSourceParameters) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OracleDSourceLinkSourceParameters) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *OracleDSourceLinkSourceParameters) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *OracleDSourceLinkSourceParameters) SetName(v string) {
	o.Name = &v
}

// GetSourceId returns the SourceId field value
func (o *OracleDSourceLinkSourceParameters) GetSourceId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SourceId
}

// GetSourceIdOk returns a tuple with the SourceId field value
// and a boolean to check if the value has been set.
func (o *OracleDSourceLinkSourceParameters) GetSourceIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SourceId, true
}

// SetSourceId sets field value
func (o *OracleDSourceLinkSourceParameters) SetSourceId(v string) {
	o.SourceId = v
}

// GetGroupId returns the GroupId field value if set, zero value otherwise.
func (o *OracleDSourceLinkSourceParameters) GetGroupId() string {
	if o == nil || IsNil(o.GroupId) {
		var ret string
		return ret
	}
	return *o.GroupId
}

// GetGroupIdOk returns a tuple with the GroupId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OracleDSourceLinkSourceParameters) GetGroupIdOk() (*string, bool) {
	if o == nil || IsNil(o.GroupId) {
		return nil, false
	}
	return o.GroupId, true
}

// HasGroupId returns a boolean if a field has been set.
func (o *OracleDSourceLinkSourceParameters) HasGroupId() bool {
	if o != nil && !IsNil(o.GroupId) {
		return true
	}

	return false
}

// SetGroupId gets a reference to the given string and assigns it to the GroupId field.
func (o *OracleDSourceLinkSourceParameters) SetGroupId(v string) {
	o.GroupId = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *OracleDSourceLinkSourceParameters) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OracleDSourceLinkSourceParameters) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *OracleDSourceLinkSourceParameters) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *OracleDSourceLinkSourceParameters) SetDescription(v string) {
	o.Description = &v
}

// GetLogSyncEnabled returns the LogSyncEnabled field value if set, zero value otherwise.
func (o *OracleDSourceLinkSourceParameters) GetLogSyncEnabled() bool {
	if o == nil || IsNil(o.LogSyncEnabled) {
		var ret bool
		return ret
	}
	return *o.LogSyncEnabled
}

// GetLogSyncEnabledOk returns a tuple with the LogSyncEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OracleDSourceLinkSourceParameters) GetLogSyncEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.LogSyncEnabled) {
		return nil, false
	}
	return o.LogSyncEnabled, true
}

// HasLogSyncEnabled returns a boolean if a field has been set.
func (o *OracleDSourceLinkSourceParameters) HasLogSyncEnabled() bool {
	if o != nil && !IsNil(o.LogSyncEnabled) {
		return true
	}

	return false
}

// SetLogSyncEnabled gets a reference to the given bool and assigns it to the LogSyncEnabled field.
func (o *OracleDSourceLinkSourceParameters) SetLogSyncEnabled(v bool) {
	o.LogSyncEnabled = &v
}

// GetSyncPolicyId returns the SyncPolicyId field value if set, zero value otherwise.
func (o *OracleDSourceLinkSourceParameters) GetSyncPolicyId() string {
	if o == nil || IsNil(o.SyncPolicyId) {
		var ret string
		return ret
	}
	return *o.SyncPolicyId
}

// GetSyncPolicyIdOk returns a tuple with the SyncPolicyId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OracleDSourceLinkSourceParameters) GetSyncPolicyIdOk() (*string, bool) {
	if o == nil || IsNil(o.SyncPolicyId) {
		return nil, false
	}
	return o.SyncPolicyId, true
}

// HasSyncPolicyId returns a boolean if a field has been set.
func (o *OracleDSourceLinkSourceParameters) HasSyncPolicyId() bool {
	if o != nil && !IsNil(o.SyncPolicyId) {
		return true
	}

	return false
}

// SetSyncPolicyId gets a reference to the given string and assigns it to the SyncPolicyId field.
func (o *OracleDSourceLinkSourceParameters) SetSyncPolicyId(v string) {
	o.SyncPolicyId = &v
}

// GetRetentionPolicyId returns the RetentionPolicyId field value if set, zero value otherwise.
func (o *OracleDSourceLinkSourceParameters) GetRetentionPolicyId() string {
	if o == nil || IsNil(o.RetentionPolicyId) {
		var ret string
		return ret
	}
	return *o.RetentionPolicyId
}

// GetRetentionPolicyIdOk returns a tuple with the RetentionPolicyId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OracleDSourceLinkSourceParameters) GetRetentionPolicyIdOk() (*string, bool) {
	if o == nil || IsNil(o.RetentionPolicyId) {
		return nil, false
	}
	return o.RetentionPolicyId, true
}

// HasRetentionPolicyId returns a boolean if a field has been set.
func (o *OracleDSourceLinkSourceParameters) HasRetentionPolicyId() bool {
	if o != nil && !IsNil(o.RetentionPolicyId) {
		return true
	}

	return false
}

// SetRetentionPolicyId gets a reference to the given string and assigns it to the RetentionPolicyId field.
func (o *OracleDSourceLinkSourceParameters) SetRetentionPolicyId(v string) {
	o.RetentionPolicyId = &v
}

// GetMakeCurrentAccountOwner returns the MakeCurrentAccountOwner field value if set, zero value otherwise.
func (o *OracleDSourceLinkSourceParameters) GetMakeCurrentAccountOwner() bool {
	if o == nil || IsNil(o.MakeCurrentAccountOwner) {
		var ret bool
		return ret
	}
	return *o.MakeCurrentAccountOwner
}

// GetMakeCurrentAccountOwnerOk returns a tuple with the MakeCurrentAccountOwner field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OracleDSourceLinkSourceParameters) GetMakeCurrentAccountOwnerOk() (*bool, bool) {
	if o == nil || IsNil(o.MakeCurrentAccountOwner) {
		return nil, false
	}
	return o.MakeCurrentAccountOwner, true
}

// HasMakeCurrentAccountOwner returns a boolean if a field has been set.
func (o *OracleDSourceLinkSourceParameters) HasMakeCurrentAccountOwner() bool {
	if o != nil && !IsNil(o.MakeCurrentAccountOwner) {
		return true
	}

	return false
}

// SetMakeCurrentAccountOwner gets a reference to the given bool and assigns it to the MakeCurrentAccountOwner field.
func (o *OracleDSourceLinkSourceParameters) SetMakeCurrentAccountOwner(v bool) {
	o.MakeCurrentAccountOwner = &v
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *OracleDSourceLinkSourceParameters) GetTags() []Tag {
	if o == nil || IsNil(o.Tags) {
		var ret []Tag
		return ret
	}
	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OracleDSourceLinkSourceParameters) GetTagsOk() ([]Tag, bool) {
	if o == nil || IsNil(o.Tags) {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *OracleDSourceLinkSourceParameters) HasTags() bool {
	if o != nil && !IsNil(o.Tags) {
		return true
	}

	return false
}

// SetTags gets a reference to the given []Tag and assigns it to the Tags field.
func (o *OracleDSourceLinkSourceParameters) SetTags(v []Tag) {
	o.Tags = v
}

// GetOpsPreSync returns the OpsPreSync field value if set, zero value otherwise.
func (o *OracleDSourceLinkSourceParameters) GetOpsPreSync() []SourceOperation {
	if o == nil || IsNil(o.OpsPreSync) {
		var ret []SourceOperation
		return ret
	}
	return o.OpsPreSync
}

// GetOpsPreSyncOk returns a tuple with the OpsPreSync field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OracleDSourceLinkSourceParameters) GetOpsPreSyncOk() ([]SourceOperation, bool) {
	if o == nil || IsNil(o.OpsPreSync) {
		return nil, false
	}
	return o.OpsPreSync, true
}

// HasOpsPreSync returns a boolean if a field has been set.
func (o *OracleDSourceLinkSourceParameters) HasOpsPreSync() bool {
	if o != nil && !IsNil(o.OpsPreSync) {
		return true
	}

	return false
}

// SetOpsPreSync gets a reference to the given []SourceOperation and assigns it to the OpsPreSync field.
func (o *OracleDSourceLinkSourceParameters) SetOpsPreSync(v []SourceOperation) {
	o.OpsPreSync = v
}

// GetOpsPostSync returns the OpsPostSync field value if set, zero value otherwise.
func (o *OracleDSourceLinkSourceParameters) GetOpsPostSync() []SourceOperation {
	if o == nil || IsNil(o.OpsPostSync) {
		var ret []SourceOperation
		return ret
	}
	return o.OpsPostSync
}

// GetOpsPostSyncOk returns a tuple with the OpsPostSync field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OracleDSourceLinkSourceParameters) GetOpsPostSyncOk() ([]SourceOperation, bool) {
	if o == nil || IsNil(o.OpsPostSync) {
		return nil, false
	}
	return o.OpsPostSync, true
}

// HasOpsPostSync returns a boolean if a field has been set.
func (o *OracleDSourceLinkSourceParameters) HasOpsPostSync() bool {
	if o != nil && !IsNil(o.OpsPostSync) {
		return true
	}

	return false
}

// SetOpsPostSync gets a reference to the given []SourceOperation and assigns it to the OpsPostSync field.
func (o *OracleDSourceLinkSourceParameters) SetOpsPostSync(v []SourceOperation) {
	o.OpsPostSync = v
}

// GetExternalFilePath returns the ExternalFilePath field value if set, zero value otherwise.
func (o *OracleDSourceLinkSourceParameters) GetExternalFilePath() string {
	if o == nil || IsNil(o.ExternalFilePath) {
		var ret string
		return ret
	}
	return *o.ExternalFilePath
}

// GetExternalFilePathOk returns a tuple with the ExternalFilePath field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OracleDSourceLinkSourceParameters) GetExternalFilePathOk() (*string, bool) {
	if o == nil || IsNil(o.ExternalFilePath) {
		return nil, false
	}
	return o.ExternalFilePath, true
}

// HasExternalFilePath returns a boolean if a field has been set.
func (o *OracleDSourceLinkSourceParameters) HasExternalFilePath() bool {
	if o != nil && !IsNil(o.ExternalFilePath) {
		return true
	}

	return false
}

// SetExternalFilePath gets a reference to the given string and assigns it to the ExternalFilePath field.
func (o *OracleDSourceLinkSourceParameters) SetExternalFilePath(v string) {
	o.ExternalFilePath = &v
}

// GetEnvironmentUserId returns the EnvironmentUserId field value if set, zero value otherwise.
func (o *OracleDSourceLinkSourceParameters) GetEnvironmentUserId() string {
	if o == nil || IsNil(o.EnvironmentUserId) {
		var ret string
		return ret
	}
	return *o.EnvironmentUserId
}

// GetEnvironmentUserIdOk returns a tuple with the EnvironmentUserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OracleDSourceLinkSourceParameters) GetEnvironmentUserIdOk() (*string, bool) {
	if o == nil || IsNil(o.EnvironmentUserId) {
		return nil, false
	}
	return o.EnvironmentUserId, true
}

// HasEnvironmentUserId returns a boolean if a field has been set.
func (o *OracleDSourceLinkSourceParameters) HasEnvironmentUserId() bool {
	if o != nil && !IsNil(o.EnvironmentUserId) {
		return true
	}

	return false
}

// SetEnvironmentUserId gets a reference to the given string and assigns it to the EnvironmentUserId field.
func (o *OracleDSourceLinkSourceParameters) SetEnvironmentUserId(v string) {
	o.EnvironmentUserId = &v
}

// GetBackupLevelEnabled returns the BackupLevelEnabled field value if set, zero value otherwise.
func (o *OracleDSourceLinkSourceParameters) GetBackupLevelEnabled() bool {
	if o == nil || IsNil(o.BackupLevelEnabled) {
		var ret bool
		return ret
	}
	return *o.BackupLevelEnabled
}

// GetBackupLevelEnabledOk returns a tuple with the BackupLevelEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OracleDSourceLinkSourceParameters) GetBackupLevelEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.BackupLevelEnabled) {
		return nil, false
	}
	return o.BackupLevelEnabled, true
}

// HasBackupLevelEnabled returns a boolean if a field has been set.
func (o *OracleDSourceLinkSourceParameters) HasBackupLevelEnabled() bool {
	if o != nil && !IsNil(o.BackupLevelEnabled) {
		return true
	}

	return false
}

// SetBackupLevelEnabled gets a reference to the given bool and assigns it to the BackupLevelEnabled field.
func (o *OracleDSourceLinkSourceParameters) SetBackupLevelEnabled(v bool) {
	o.BackupLevelEnabled = &v
}

// GetRmanChannels returns the RmanChannels field value if set, zero value otherwise.
func (o *OracleDSourceLinkSourceParameters) GetRmanChannels() int32 {
	if o == nil || IsNil(o.RmanChannels) {
		var ret int32
		return ret
	}
	return *o.RmanChannels
}

// GetRmanChannelsOk returns a tuple with the RmanChannels field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OracleDSourceLinkSourceParameters) GetRmanChannelsOk() (*int32, bool) {
	if o == nil || IsNil(o.RmanChannels) {
		return nil, false
	}
	return o.RmanChannels, true
}

// HasRmanChannels returns a boolean if a field has been set.
func (o *OracleDSourceLinkSourceParameters) HasRmanChannels() bool {
	if o != nil && !IsNil(o.RmanChannels) {
		return true
	}

	return false
}

// SetRmanChannels gets a reference to the given int32 and assigns it to the RmanChannels field.
func (o *OracleDSourceLinkSourceParameters) SetRmanChannels(v int32) {
	o.RmanChannels = &v
}

// GetFilesPerSet returns the FilesPerSet field value if set, zero value otherwise.
func (o *OracleDSourceLinkSourceParameters) GetFilesPerSet() int32 {
	if o == nil || IsNil(o.FilesPerSet) {
		var ret int32
		return ret
	}
	return *o.FilesPerSet
}

// GetFilesPerSetOk returns a tuple with the FilesPerSet field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OracleDSourceLinkSourceParameters) GetFilesPerSetOk() (*int32, bool) {
	if o == nil || IsNil(o.FilesPerSet) {
		return nil, false
	}
	return o.FilesPerSet, true
}

// HasFilesPerSet returns a boolean if a field has been set.
func (o *OracleDSourceLinkSourceParameters) HasFilesPerSet() bool {
	if o != nil && !IsNil(o.FilesPerSet) {
		return true
	}

	return false
}

// SetFilesPerSet gets a reference to the given int32 and assigns it to the FilesPerSet field.
func (o *OracleDSourceLinkSourceParameters) SetFilesPerSet(v int32) {
	o.FilesPerSet = &v
}

// GetCheckLogical returns the CheckLogical field value if set, zero value otherwise.
func (o *OracleDSourceLinkSourceParameters) GetCheckLogical() bool {
	if o == nil || IsNil(o.CheckLogical) {
		var ret bool
		return ret
	}
	return *o.CheckLogical
}

// GetCheckLogicalOk returns a tuple with the CheckLogical field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OracleDSourceLinkSourceParameters) GetCheckLogicalOk() (*bool, bool) {
	if o == nil || IsNil(o.CheckLogical) {
		return nil, false
	}
	return o.CheckLogical, true
}

// HasCheckLogical returns a boolean if a field has been set.
func (o *OracleDSourceLinkSourceParameters) HasCheckLogical() bool {
	if o != nil && !IsNil(o.CheckLogical) {
		return true
	}

	return false
}

// SetCheckLogical gets a reference to the given bool and assigns it to the CheckLogical field.
func (o *OracleDSourceLinkSourceParameters) SetCheckLogical(v bool) {
	o.CheckLogical = &v
}

// GetEncryptedLinkingEnabled returns the EncryptedLinkingEnabled field value if set, zero value otherwise.
func (o *OracleDSourceLinkSourceParameters) GetEncryptedLinkingEnabled() bool {
	if o == nil || IsNil(o.EncryptedLinkingEnabled) {
		var ret bool
		return ret
	}
	return *o.EncryptedLinkingEnabled
}

// GetEncryptedLinkingEnabledOk returns a tuple with the EncryptedLinkingEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OracleDSourceLinkSourceParameters) GetEncryptedLinkingEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.EncryptedLinkingEnabled) {
		return nil, false
	}
	return o.EncryptedLinkingEnabled, true
}

// HasEncryptedLinkingEnabled returns a boolean if a field has been set.
func (o *OracleDSourceLinkSourceParameters) HasEncryptedLinkingEnabled() bool {
	if o != nil && !IsNil(o.EncryptedLinkingEnabled) {
		return true
	}

	return false
}

// SetEncryptedLinkingEnabled gets a reference to the given bool and assigns it to the EncryptedLinkingEnabled field.
func (o *OracleDSourceLinkSourceParameters) SetEncryptedLinkingEnabled(v bool) {
	o.EncryptedLinkingEnabled = &v
}

// GetCompressedLinkingEnabled returns the CompressedLinkingEnabled field value if set, zero value otherwise.
func (o *OracleDSourceLinkSourceParameters) GetCompressedLinkingEnabled() bool {
	if o == nil || IsNil(o.CompressedLinkingEnabled) {
		var ret bool
		return ret
	}
	return *o.CompressedLinkingEnabled
}

// GetCompressedLinkingEnabledOk returns a tuple with the CompressedLinkingEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OracleDSourceLinkSourceParameters) GetCompressedLinkingEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.CompressedLinkingEnabled) {
		return nil, false
	}
	return o.CompressedLinkingEnabled, true
}

// HasCompressedLinkingEnabled returns a boolean if a field has been set.
func (o *OracleDSourceLinkSourceParameters) HasCompressedLinkingEnabled() bool {
	if o != nil && !IsNil(o.CompressedLinkingEnabled) {
		return true
	}

	return false
}

// SetCompressedLinkingEnabled gets a reference to the given bool and assigns it to the CompressedLinkingEnabled field.
func (o *OracleDSourceLinkSourceParameters) SetCompressedLinkingEnabled(v bool) {
	o.CompressedLinkingEnabled = &v
}

// GetBandwidthLimit returns the BandwidthLimit field value if set, zero value otherwise.
func (o *OracleDSourceLinkSourceParameters) GetBandwidthLimit() int32 {
	if o == nil || IsNil(o.BandwidthLimit) {
		var ret int32
		return ret
	}
	return *o.BandwidthLimit
}

// GetBandwidthLimitOk returns a tuple with the BandwidthLimit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OracleDSourceLinkSourceParameters) GetBandwidthLimitOk() (*int32, bool) {
	if o == nil || IsNil(o.BandwidthLimit) {
		return nil, false
	}
	return o.BandwidthLimit, true
}

// HasBandwidthLimit returns a boolean if a field has been set.
func (o *OracleDSourceLinkSourceParameters) HasBandwidthLimit() bool {
	if o != nil && !IsNil(o.BandwidthLimit) {
		return true
	}

	return false
}

// SetBandwidthLimit gets a reference to the given int32 and assigns it to the BandwidthLimit field.
func (o *OracleDSourceLinkSourceParameters) SetBandwidthLimit(v int32) {
	o.BandwidthLimit = &v
}

// GetNumberOfConnections returns the NumberOfConnections field value if set, zero value otherwise.
func (o *OracleDSourceLinkSourceParameters) GetNumberOfConnections() int32 {
	if o == nil || IsNil(o.NumberOfConnections) {
		var ret int32
		return ret
	}
	return *o.NumberOfConnections
}

// GetNumberOfConnectionsOk returns a tuple with the NumberOfConnections field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OracleDSourceLinkSourceParameters) GetNumberOfConnectionsOk() (*int32, bool) {
	if o == nil || IsNil(o.NumberOfConnections) {
		return nil, false
	}
	return o.NumberOfConnections, true
}

// HasNumberOfConnections returns a boolean if a field has been set.
func (o *OracleDSourceLinkSourceParameters) HasNumberOfConnections() bool {
	if o != nil && !IsNil(o.NumberOfConnections) {
		return true
	}

	return false
}

// SetNumberOfConnections gets a reference to the given int32 and assigns it to the NumberOfConnections field.
func (o *OracleDSourceLinkSourceParameters) SetNumberOfConnections(v int32) {
	o.NumberOfConnections = &v
}

// GetDiagnoseNoLoggingFaults returns the DiagnoseNoLoggingFaults field value if set, zero value otherwise.
func (o *OracleDSourceLinkSourceParameters) GetDiagnoseNoLoggingFaults() bool {
	if o == nil || IsNil(o.DiagnoseNoLoggingFaults) {
		var ret bool
		return ret
	}
	return *o.DiagnoseNoLoggingFaults
}

// GetDiagnoseNoLoggingFaultsOk returns a tuple with the DiagnoseNoLoggingFaults field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OracleDSourceLinkSourceParameters) GetDiagnoseNoLoggingFaultsOk() (*bool, bool) {
	if o == nil || IsNil(o.DiagnoseNoLoggingFaults) {
		return nil, false
	}
	return o.DiagnoseNoLoggingFaults, true
}

// HasDiagnoseNoLoggingFaults returns a boolean if a field has been set.
func (o *OracleDSourceLinkSourceParameters) HasDiagnoseNoLoggingFaults() bool {
	if o != nil && !IsNil(o.DiagnoseNoLoggingFaults) {
		return true
	}

	return false
}

// SetDiagnoseNoLoggingFaults gets a reference to the given bool and assigns it to the DiagnoseNoLoggingFaults field.
func (o *OracleDSourceLinkSourceParameters) SetDiagnoseNoLoggingFaults(v bool) {
	o.DiagnoseNoLoggingFaults = &v
}

// GetPreProvisioningEnabled returns the PreProvisioningEnabled field value if set, zero value otherwise.
func (o *OracleDSourceLinkSourceParameters) GetPreProvisioningEnabled() bool {
	if o == nil || IsNil(o.PreProvisioningEnabled) {
		var ret bool
		return ret
	}
	return *o.PreProvisioningEnabled
}

// GetPreProvisioningEnabledOk returns a tuple with the PreProvisioningEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OracleDSourceLinkSourceParameters) GetPreProvisioningEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.PreProvisioningEnabled) {
		return nil, false
	}
	return o.PreProvisioningEnabled, true
}

// HasPreProvisioningEnabled returns a boolean if a field has been set.
func (o *OracleDSourceLinkSourceParameters) HasPreProvisioningEnabled() bool {
	if o != nil && !IsNil(o.PreProvisioningEnabled) {
		return true
	}

	return false
}

// SetPreProvisioningEnabled gets a reference to the given bool and assigns it to the PreProvisioningEnabled field.
func (o *OracleDSourceLinkSourceParameters) SetPreProvisioningEnabled(v bool) {
	o.PreProvisioningEnabled = &v
}

// GetLinkNow returns the LinkNow field value if set, zero value otherwise.
func (o *OracleDSourceLinkSourceParameters) GetLinkNow() bool {
	if o == nil || IsNil(o.LinkNow) {
		var ret bool
		return ret
	}
	return *o.LinkNow
}

// GetLinkNowOk returns a tuple with the LinkNow field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OracleDSourceLinkSourceParameters) GetLinkNowOk() (*bool, bool) {
	if o == nil || IsNil(o.LinkNow) {
		return nil, false
	}
	return o.LinkNow, true
}

// HasLinkNow returns a boolean if a field has been set.
func (o *OracleDSourceLinkSourceParameters) HasLinkNow() bool {
	if o != nil && !IsNil(o.LinkNow) {
		return true
	}

	return false
}

// SetLinkNow gets a reference to the given bool and assigns it to the LinkNow field.
func (o *OracleDSourceLinkSourceParameters) SetLinkNow(v bool) {
	o.LinkNow = &v
}

// GetForceFullBackup returns the ForceFullBackup field value if set, zero value otherwise.
func (o *OracleDSourceLinkSourceParameters) GetForceFullBackup() bool {
	if o == nil || IsNil(o.ForceFullBackup) {
		var ret bool
		return ret
	}
	return *o.ForceFullBackup
}

// GetForceFullBackupOk returns a tuple with the ForceFullBackup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OracleDSourceLinkSourceParameters) GetForceFullBackupOk() (*bool, bool) {
	if o == nil || IsNil(o.ForceFullBackup) {
		return nil, false
	}
	return o.ForceFullBackup, true
}

// HasForceFullBackup returns a boolean if a field has been set.
func (o *OracleDSourceLinkSourceParameters) HasForceFullBackup() bool {
	if o != nil && !IsNil(o.ForceFullBackup) {
		return true
	}

	return false
}

// SetForceFullBackup gets a reference to the given bool and assigns it to the ForceFullBackup field.
func (o *OracleDSourceLinkSourceParameters) SetForceFullBackup(v bool) {
	o.ForceFullBackup = &v
}

// GetDoubleSync returns the DoubleSync field value if set, zero value otherwise.
func (o *OracleDSourceLinkSourceParameters) GetDoubleSync() bool {
	if o == nil || IsNil(o.DoubleSync) {
		var ret bool
		return ret
	}
	return *o.DoubleSync
}

// GetDoubleSyncOk returns a tuple with the DoubleSync field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OracleDSourceLinkSourceParameters) GetDoubleSyncOk() (*bool, bool) {
	if o == nil || IsNil(o.DoubleSync) {
		return nil, false
	}
	return o.DoubleSync, true
}

// HasDoubleSync returns a boolean if a field has been set.
func (o *OracleDSourceLinkSourceParameters) HasDoubleSync() bool {
	if o != nil && !IsNil(o.DoubleSync) {
		return true
	}

	return false
}

// SetDoubleSync gets a reference to the given bool and assigns it to the DoubleSync field.
func (o *OracleDSourceLinkSourceParameters) SetDoubleSync(v bool) {
	o.DoubleSync = &v
}

// GetSkipSpaceCheck returns the SkipSpaceCheck field value if set, zero value otherwise.
func (o *OracleDSourceLinkSourceParameters) GetSkipSpaceCheck() bool {
	if o == nil || IsNil(o.SkipSpaceCheck) {
		var ret bool
		return ret
	}
	return *o.SkipSpaceCheck
}

// GetSkipSpaceCheckOk returns a tuple with the SkipSpaceCheck field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OracleDSourceLinkSourceParameters) GetSkipSpaceCheckOk() (*bool, bool) {
	if o == nil || IsNil(o.SkipSpaceCheck) {
		return nil, false
	}
	return o.SkipSpaceCheck, true
}

// HasSkipSpaceCheck returns a boolean if a field has been set.
func (o *OracleDSourceLinkSourceParameters) HasSkipSpaceCheck() bool {
	if o != nil && !IsNil(o.SkipSpaceCheck) {
		return true
	}

	return false
}

// SetSkipSpaceCheck gets a reference to the given bool and assigns it to the SkipSpaceCheck field.
func (o *OracleDSourceLinkSourceParameters) SetSkipSpaceCheck(v bool) {
	o.SkipSpaceCheck = &v
}

// GetDoNotResume returns the DoNotResume field value if set, zero value otherwise.
func (o *OracleDSourceLinkSourceParameters) GetDoNotResume() bool {
	if o == nil || IsNil(o.DoNotResume) {
		var ret bool
		return ret
	}
	return *o.DoNotResume
}

// GetDoNotResumeOk returns a tuple with the DoNotResume field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OracleDSourceLinkSourceParameters) GetDoNotResumeOk() (*bool, bool) {
	if o == nil || IsNil(o.DoNotResume) {
		return nil, false
	}
	return o.DoNotResume, true
}

// HasDoNotResume returns a boolean if a field has been set.
func (o *OracleDSourceLinkSourceParameters) HasDoNotResume() bool {
	if o != nil && !IsNil(o.DoNotResume) {
		return true
	}

	return false
}

// SetDoNotResume gets a reference to the given bool and assigns it to the DoNotResume field.
func (o *OracleDSourceLinkSourceParameters) SetDoNotResume(v bool) {
	o.DoNotResume = &v
}

// GetFilesForFullBackup returns the FilesForFullBackup field value if set, zero value otherwise.
func (o *OracleDSourceLinkSourceParameters) GetFilesForFullBackup() []int32 {
	if o == nil || IsNil(o.FilesForFullBackup) {
		var ret []int32
		return ret
	}
	return o.FilesForFullBackup
}

// GetFilesForFullBackupOk returns a tuple with the FilesForFullBackup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OracleDSourceLinkSourceParameters) GetFilesForFullBackupOk() ([]int32, bool) {
	if o == nil || IsNil(o.FilesForFullBackup) {
		return nil, false
	}
	return o.FilesForFullBackup, true
}

// HasFilesForFullBackup returns a boolean if a field has been set.
func (o *OracleDSourceLinkSourceParameters) HasFilesForFullBackup() bool {
	if o != nil && !IsNil(o.FilesForFullBackup) {
		return true
	}

	return false
}

// SetFilesForFullBackup gets a reference to the given []int32 and assigns it to the FilesForFullBackup field.
func (o *OracleDSourceLinkSourceParameters) SetFilesForFullBackup(v []int32) {
	o.FilesForFullBackup = v
}

// GetLogSyncMode returns the LogSyncMode field value if set, zero value otherwise.
func (o *OracleDSourceLinkSourceParameters) GetLogSyncMode() string {
	if o == nil || IsNil(o.LogSyncMode) {
		var ret string
		return ret
	}
	return *o.LogSyncMode
}

// GetLogSyncModeOk returns a tuple with the LogSyncMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OracleDSourceLinkSourceParameters) GetLogSyncModeOk() (*string, bool) {
	if o == nil || IsNil(o.LogSyncMode) {
		return nil, false
	}
	return o.LogSyncMode, true
}

// HasLogSyncMode returns a boolean if a field has been set.
func (o *OracleDSourceLinkSourceParameters) HasLogSyncMode() bool {
	if o != nil && !IsNil(o.LogSyncMode) {
		return true
	}

	return false
}

// SetLogSyncMode gets a reference to the given string and assigns it to the LogSyncMode field.
func (o *OracleDSourceLinkSourceParameters) SetLogSyncMode(v string) {
	o.LogSyncMode = &v
}

// GetLogSyncInterval returns the LogSyncInterval field value if set, zero value otherwise.
func (o *OracleDSourceLinkSourceParameters) GetLogSyncInterval() int32 {
	if o == nil || IsNil(o.LogSyncInterval) {
		var ret int32
		return ret
	}
	return *o.LogSyncInterval
}

// GetLogSyncIntervalOk returns a tuple with the LogSyncInterval field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OracleDSourceLinkSourceParameters) GetLogSyncIntervalOk() (*int32, bool) {
	if o == nil || IsNil(o.LogSyncInterval) {
		return nil, false
	}
	return o.LogSyncInterval, true
}

// HasLogSyncInterval returns a boolean if a field has been set.
func (o *OracleDSourceLinkSourceParameters) HasLogSyncInterval() bool {
	if o != nil && !IsNil(o.LogSyncInterval) {
		return true
	}

	return false
}

// SetLogSyncInterval gets a reference to the given int32 and assigns it to the LogSyncInterval field.
func (o *OracleDSourceLinkSourceParameters) SetLogSyncInterval(v int32) {
	o.LogSyncInterval = &v
}

// GetNonSysUsername returns the NonSysUsername field value if set, zero value otherwise.
func (o *OracleDSourceLinkSourceParameters) GetNonSysUsername() string {
	if o == nil || IsNil(o.NonSysUsername) {
		var ret string
		return ret
	}
	return *o.NonSysUsername
}

// GetNonSysUsernameOk returns a tuple with the NonSysUsername field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OracleDSourceLinkSourceParameters) GetNonSysUsernameOk() (*string, bool) {
	if o == nil || IsNil(o.NonSysUsername) {
		return nil, false
	}
	return o.NonSysUsername, true
}

// HasNonSysUsername returns a boolean if a field has been set.
func (o *OracleDSourceLinkSourceParameters) HasNonSysUsername() bool {
	if o != nil && !IsNil(o.NonSysUsername) {
		return true
	}

	return false
}

// SetNonSysUsername gets a reference to the given string and assigns it to the NonSysUsername field.
func (o *OracleDSourceLinkSourceParameters) SetNonSysUsername(v string) {
	o.NonSysUsername = &v
}

// GetNonSysPassword returns the NonSysPassword field value if set, zero value otherwise.
func (o *OracleDSourceLinkSourceParameters) GetNonSysPassword() string {
	if o == nil || IsNil(o.NonSysPassword) {
		var ret string
		return ret
	}
	return *o.NonSysPassword
}

// GetNonSysPasswordOk returns a tuple with the NonSysPassword field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OracleDSourceLinkSourceParameters) GetNonSysPasswordOk() (*string, bool) {
	if o == nil || IsNil(o.NonSysPassword) {
		return nil, false
	}
	return o.NonSysPassword, true
}

// HasNonSysPassword returns a boolean if a field has been set.
func (o *OracleDSourceLinkSourceParameters) HasNonSysPassword() bool {
	if o != nil && !IsNil(o.NonSysPassword) {
		return true
	}

	return false
}

// SetNonSysPassword gets a reference to the given string and assigns it to the NonSysPassword field.
func (o *OracleDSourceLinkSourceParameters) SetNonSysPassword(v string) {
	o.NonSysPassword = &v
}

// GetNonSysVaultUsername returns the NonSysVaultUsername field value if set, zero value otherwise.
func (o *OracleDSourceLinkSourceParameters) GetNonSysVaultUsername() string {
	if o == nil || IsNil(o.NonSysVaultUsername) {
		var ret string
		return ret
	}
	return *o.NonSysVaultUsername
}

// GetNonSysVaultUsernameOk returns a tuple with the NonSysVaultUsername field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OracleDSourceLinkSourceParameters) GetNonSysVaultUsernameOk() (*string, bool) {
	if o == nil || IsNil(o.NonSysVaultUsername) {
		return nil, false
	}
	return o.NonSysVaultUsername, true
}

// HasNonSysVaultUsername returns a boolean if a field has been set.
func (o *OracleDSourceLinkSourceParameters) HasNonSysVaultUsername() bool {
	if o != nil && !IsNil(o.NonSysVaultUsername) {
		return true
	}

	return false
}

// SetNonSysVaultUsername gets a reference to the given string and assigns it to the NonSysVaultUsername field.
func (o *OracleDSourceLinkSourceParameters) SetNonSysVaultUsername(v string) {
	o.NonSysVaultUsername = &v
}

// GetNonSysVault returns the NonSysVault field value if set, zero value otherwise.
func (o *OracleDSourceLinkSourceParameters) GetNonSysVault() string {
	if o == nil || IsNil(o.NonSysVault) {
		var ret string
		return ret
	}
	return *o.NonSysVault
}

// GetNonSysVaultOk returns a tuple with the NonSysVault field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OracleDSourceLinkSourceParameters) GetNonSysVaultOk() (*string, bool) {
	if o == nil || IsNil(o.NonSysVault) {
		return nil, false
	}
	return o.NonSysVault, true
}

// HasNonSysVault returns a boolean if a field has been set.
func (o *OracleDSourceLinkSourceParameters) HasNonSysVault() bool {
	if o != nil && !IsNil(o.NonSysVault) {
		return true
	}

	return false
}

// SetNonSysVault gets a reference to the given string and assigns it to the NonSysVault field.
func (o *OracleDSourceLinkSourceParameters) SetNonSysVault(v string) {
	o.NonSysVault = &v
}

// GetNonSysHashicorpVaultEngine returns the NonSysHashicorpVaultEngine field value if set, zero value otherwise.
func (o *OracleDSourceLinkSourceParameters) GetNonSysHashicorpVaultEngine() string {
	if o == nil || IsNil(o.NonSysHashicorpVaultEngine) {
		var ret string
		return ret
	}
	return *o.NonSysHashicorpVaultEngine
}

// GetNonSysHashicorpVaultEngineOk returns a tuple with the NonSysHashicorpVaultEngine field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OracleDSourceLinkSourceParameters) GetNonSysHashicorpVaultEngineOk() (*string, bool) {
	if o == nil || IsNil(o.NonSysHashicorpVaultEngine) {
		return nil, false
	}
	return o.NonSysHashicorpVaultEngine, true
}

// HasNonSysHashicorpVaultEngine returns a boolean if a field has been set.
func (o *OracleDSourceLinkSourceParameters) HasNonSysHashicorpVaultEngine() bool {
	if o != nil && !IsNil(o.NonSysHashicorpVaultEngine) {
		return true
	}

	return false
}

// SetNonSysHashicorpVaultEngine gets a reference to the given string and assigns it to the NonSysHashicorpVaultEngine field.
func (o *OracleDSourceLinkSourceParameters) SetNonSysHashicorpVaultEngine(v string) {
	o.NonSysHashicorpVaultEngine = &v
}

// GetNonSysHashicorpVaultSecretPath returns the NonSysHashicorpVaultSecretPath field value if set, zero value otherwise.
func (o *OracleDSourceLinkSourceParameters) GetNonSysHashicorpVaultSecretPath() string {
	if o == nil || IsNil(o.NonSysHashicorpVaultSecretPath) {
		var ret string
		return ret
	}
	return *o.NonSysHashicorpVaultSecretPath
}

// GetNonSysHashicorpVaultSecretPathOk returns a tuple with the NonSysHashicorpVaultSecretPath field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OracleDSourceLinkSourceParameters) GetNonSysHashicorpVaultSecretPathOk() (*string, bool) {
	if o == nil || IsNil(o.NonSysHashicorpVaultSecretPath) {
		return nil, false
	}
	return o.NonSysHashicorpVaultSecretPath, true
}

// HasNonSysHashicorpVaultSecretPath returns a boolean if a field has been set.
func (o *OracleDSourceLinkSourceParameters) HasNonSysHashicorpVaultSecretPath() bool {
	if o != nil && !IsNil(o.NonSysHashicorpVaultSecretPath) {
		return true
	}

	return false
}

// SetNonSysHashicorpVaultSecretPath gets a reference to the given string and assigns it to the NonSysHashicorpVaultSecretPath field.
func (o *OracleDSourceLinkSourceParameters) SetNonSysHashicorpVaultSecretPath(v string) {
	o.NonSysHashicorpVaultSecretPath = &v
}

// GetNonSysHashicorpVaultUsernameKey returns the NonSysHashicorpVaultUsernameKey field value if set, zero value otherwise.
func (o *OracleDSourceLinkSourceParameters) GetNonSysHashicorpVaultUsernameKey() string {
	if o == nil || IsNil(o.NonSysHashicorpVaultUsernameKey) {
		var ret string
		return ret
	}
	return *o.NonSysHashicorpVaultUsernameKey
}

// GetNonSysHashicorpVaultUsernameKeyOk returns a tuple with the NonSysHashicorpVaultUsernameKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OracleDSourceLinkSourceParameters) GetNonSysHashicorpVaultUsernameKeyOk() (*string, bool) {
	if o == nil || IsNil(o.NonSysHashicorpVaultUsernameKey) {
		return nil, false
	}
	return o.NonSysHashicorpVaultUsernameKey, true
}

// HasNonSysHashicorpVaultUsernameKey returns a boolean if a field has been set.
func (o *OracleDSourceLinkSourceParameters) HasNonSysHashicorpVaultUsernameKey() bool {
	if o != nil && !IsNil(o.NonSysHashicorpVaultUsernameKey) {
		return true
	}

	return false
}

// SetNonSysHashicorpVaultUsernameKey gets a reference to the given string and assigns it to the NonSysHashicorpVaultUsernameKey field.
func (o *OracleDSourceLinkSourceParameters) SetNonSysHashicorpVaultUsernameKey(v string) {
	o.NonSysHashicorpVaultUsernameKey = &v
}

// GetNonSysHashicorpVaultSecretKey returns the NonSysHashicorpVaultSecretKey field value if set, zero value otherwise.
func (o *OracleDSourceLinkSourceParameters) GetNonSysHashicorpVaultSecretKey() string {
	if o == nil || IsNil(o.NonSysHashicorpVaultSecretKey) {
		var ret string
		return ret
	}
	return *o.NonSysHashicorpVaultSecretKey
}

// GetNonSysHashicorpVaultSecretKeyOk returns a tuple with the NonSysHashicorpVaultSecretKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OracleDSourceLinkSourceParameters) GetNonSysHashicorpVaultSecretKeyOk() (*string, bool) {
	if o == nil || IsNil(o.NonSysHashicorpVaultSecretKey) {
		return nil, false
	}
	return o.NonSysHashicorpVaultSecretKey, true
}

// HasNonSysHashicorpVaultSecretKey returns a boolean if a field has been set.
func (o *OracleDSourceLinkSourceParameters) HasNonSysHashicorpVaultSecretKey() bool {
	if o != nil && !IsNil(o.NonSysHashicorpVaultSecretKey) {
		return true
	}

	return false
}

// SetNonSysHashicorpVaultSecretKey gets a reference to the given string and assigns it to the NonSysHashicorpVaultSecretKey field.
func (o *OracleDSourceLinkSourceParameters) SetNonSysHashicorpVaultSecretKey(v string) {
	o.NonSysHashicorpVaultSecretKey = &v
}

// GetNonSysAzureVaultName returns the NonSysAzureVaultName field value if set, zero value otherwise.
func (o *OracleDSourceLinkSourceParameters) GetNonSysAzureVaultName() string {
	if o == nil || IsNil(o.NonSysAzureVaultName) {
		var ret string
		return ret
	}
	return *o.NonSysAzureVaultName
}

// GetNonSysAzureVaultNameOk returns a tuple with the NonSysAzureVaultName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OracleDSourceLinkSourceParameters) GetNonSysAzureVaultNameOk() (*string, bool) {
	if o == nil || IsNil(o.NonSysAzureVaultName) {
		return nil, false
	}
	return o.NonSysAzureVaultName, true
}

// HasNonSysAzureVaultName returns a boolean if a field has been set.
func (o *OracleDSourceLinkSourceParameters) HasNonSysAzureVaultName() bool {
	if o != nil && !IsNil(o.NonSysAzureVaultName) {
		return true
	}

	return false
}

// SetNonSysAzureVaultName gets a reference to the given string and assigns it to the NonSysAzureVaultName field.
func (o *OracleDSourceLinkSourceParameters) SetNonSysAzureVaultName(v string) {
	o.NonSysAzureVaultName = &v
}

// GetNonSysAzureVaultUsernameKey returns the NonSysAzureVaultUsernameKey field value if set, zero value otherwise.
func (o *OracleDSourceLinkSourceParameters) GetNonSysAzureVaultUsernameKey() string {
	if o == nil || IsNil(o.NonSysAzureVaultUsernameKey) {
		var ret string
		return ret
	}
	return *o.NonSysAzureVaultUsernameKey
}

// GetNonSysAzureVaultUsernameKeyOk returns a tuple with the NonSysAzureVaultUsernameKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OracleDSourceLinkSourceParameters) GetNonSysAzureVaultUsernameKeyOk() (*string, bool) {
	if o == nil || IsNil(o.NonSysAzureVaultUsernameKey) {
		return nil, false
	}
	return o.NonSysAzureVaultUsernameKey, true
}

// HasNonSysAzureVaultUsernameKey returns a boolean if a field has been set.
func (o *OracleDSourceLinkSourceParameters) HasNonSysAzureVaultUsernameKey() bool {
	if o != nil && !IsNil(o.NonSysAzureVaultUsernameKey) {
		return true
	}

	return false
}

// SetNonSysAzureVaultUsernameKey gets a reference to the given string and assigns it to the NonSysAzureVaultUsernameKey field.
func (o *OracleDSourceLinkSourceParameters) SetNonSysAzureVaultUsernameKey(v string) {
	o.NonSysAzureVaultUsernameKey = &v
}

// GetNonSysAzureVaultSecretKey returns the NonSysAzureVaultSecretKey field value if set, zero value otherwise.
func (o *OracleDSourceLinkSourceParameters) GetNonSysAzureVaultSecretKey() string {
	if o == nil || IsNil(o.NonSysAzureVaultSecretKey) {
		var ret string
		return ret
	}
	return *o.NonSysAzureVaultSecretKey
}

// GetNonSysAzureVaultSecretKeyOk returns a tuple with the NonSysAzureVaultSecretKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OracleDSourceLinkSourceParameters) GetNonSysAzureVaultSecretKeyOk() (*string, bool) {
	if o == nil || IsNil(o.NonSysAzureVaultSecretKey) {
		return nil, false
	}
	return o.NonSysAzureVaultSecretKey, true
}

// HasNonSysAzureVaultSecretKey returns a boolean if a field has been set.
func (o *OracleDSourceLinkSourceParameters) HasNonSysAzureVaultSecretKey() bool {
	if o != nil && !IsNil(o.NonSysAzureVaultSecretKey) {
		return true
	}

	return false
}

// SetNonSysAzureVaultSecretKey gets a reference to the given string and assigns it to the NonSysAzureVaultSecretKey field.
func (o *OracleDSourceLinkSourceParameters) SetNonSysAzureVaultSecretKey(v string) {
	o.NonSysAzureVaultSecretKey = &v
}

// GetNonSysCyberarkVaultQueryString returns the NonSysCyberarkVaultQueryString field value if set, zero value otherwise.
func (o *OracleDSourceLinkSourceParameters) GetNonSysCyberarkVaultQueryString() string {
	if o == nil || IsNil(o.NonSysCyberarkVaultQueryString) {
		var ret string
		return ret
	}
	return *o.NonSysCyberarkVaultQueryString
}

// GetNonSysCyberarkVaultQueryStringOk returns a tuple with the NonSysCyberarkVaultQueryString field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OracleDSourceLinkSourceParameters) GetNonSysCyberarkVaultQueryStringOk() (*string, bool) {
	if o == nil || IsNil(o.NonSysCyberarkVaultQueryString) {
		return nil, false
	}
	return o.NonSysCyberarkVaultQueryString, true
}

// HasNonSysCyberarkVaultQueryString returns a boolean if a field has been set.
func (o *OracleDSourceLinkSourceParameters) HasNonSysCyberarkVaultQueryString() bool {
	if o != nil && !IsNil(o.NonSysCyberarkVaultQueryString) {
		return true
	}

	return false
}

// SetNonSysCyberarkVaultQueryString gets a reference to the given string and assigns it to the NonSysCyberarkVaultQueryString field.
func (o *OracleDSourceLinkSourceParameters) SetNonSysCyberarkVaultQueryString(v string) {
	o.NonSysCyberarkVaultQueryString = &v
}

// GetFallbackUsername returns the FallbackUsername field value if set, zero value otherwise.
func (o *OracleDSourceLinkSourceParameters) GetFallbackUsername() string {
	if o == nil || IsNil(o.FallbackUsername) {
		var ret string
		return ret
	}
	return *o.FallbackUsername
}

// GetFallbackUsernameOk returns a tuple with the FallbackUsername field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OracleDSourceLinkSourceParameters) GetFallbackUsernameOk() (*string, bool) {
	if o == nil || IsNil(o.FallbackUsername) {
		return nil, false
	}
	return o.FallbackUsername, true
}

// HasFallbackUsername returns a boolean if a field has been set.
func (o *OracleDSourceLinkSourceParameters) HasFallbackUsername() bool {
	if o != nil && !IsNil(o.FallbackUsername) {
		return true
	}

	return false
}

// SetFallbackUsername gets a reference to the given string and assigns it to the FallbackUsername field.
func (o *OracleDSourceLinkSourceParameters) SetFallbackUsername(v string) {
	o.FallbackUsername = &v
}

// GetFallbackPassword returns the FallbackPassword field value if set, zero value otherwise.
func (o *OracleDSourceLinkSourceParameters) GetFallbackPassword() string {
	if o == nil || IsNil(o.FallbackPassword) {
		var ret string
		return ret
	}
	return *o.FallbackPassword
}

// GetFallbackPasswordOk returns a tuple with the FallbackPassword field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OracleDSourceLinkSourceParameters) GetFallbackPasswordOk() (*string, bool) {
	if o == nil || IsNil(o.FallbackPassword) {
		return nil, false
	}
	return o.FallbackPassword, true
}

// HasFallbackPassword returns a boolean if a field has been set.
func (o *OracleDSourceLinkSourceParameters) HasFallbackPassword() bool {
	if o != nil && !IsNil(o.FallbackPassword) {
		return true
	}

	return false
}

// SetFallbackPassword gets a reference to the given string and assigns it to the FallbackPassword field.
func (o *OracleDSourceLinkSourceParameters) SetFallbackPassword(v string) {
	o.FallbackPassword = &v
}

// GetFallbackVaultUsername returns the FallbackVaultUsername field value if set, zero value otherwise.
func (o *OracleDSourceLinkSourceParameters) GetFallbackVaultUsername() string {
	if o == nil || IsNil(o.FallbackVaultUsername) {
		var ret string
		return ret
	}
	return *o.FallbackVaultUsername
}

// GetFallbackVaultUsernameOk returns a tuple with the FallbackVaultUsername field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OracleDSourceLinkSourceParameters) GetFallbackVaultUsernameOk() (*string, bool) {
	if o == nil || IsNil(o.FallbackVaultUsername) {
		return nil, false
	}
	return o.FallbackVaultUsername, true
}

// HasFallbackVaultUsername returns a boolean if a field has been set.
func (o *OracleDSourceLinkSourceParameters) HasFallbackVaultUsername() bool {
	if o != nil && !IsNil(o.FallbackVaultUsername) {
		return true
	}

	return false
}

// SetFallbackVaultUsername gets a reference to the given string and assigns it to the FallbackVaultUsername field.
func (o *OracleDSourceLinkSourceParameters) SetFallbackVaultUsername(v string) {
	o.FallbackVaultUsername = &v
}

// GetFallbackVault returns the FallbackVault field value if set, zero value otherwise.
func (o *OracleDSourceLinkSourceParameters) GetFallbackVault() string {
	if o == nil || IsNil(o.FallbackVault) {
		var ret string
		return ret
	}
	return *o.FallbackVault
}

// GetFallbackVaultOk returns a tuple with the FallbackVault field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OracleDSourceLinkSourceParameters) GetFallbackVaultOk() (*string, bool) {
	if o == nil || IsNil(o.FallbackVault) {
		return nil, false
	}
	return o.FallbackVault, true
}

// HasFallbackVault returns a boolean if a field has been set.
func (o *OracleDSourceLinkSourceParameters) HasFallbackVault() bool {
	if o != nil && !IsNil(o.FallbackVault) {
		return true
	}

	return false
}

// SetFallbackVault gets a reference to the given string and assigns it to the FallbackVault field.
func (o *OracleDSourceLinkSourceParameters) SetFallbackVault(v string) {
	o.FallbackVault = &v
}

// GetFallbackHashicorpVaultEngine returns the FallbackHashicorpVaultEngine field value if set, zero value otherwise.
func (o *OracleDSourceLinkSourceParameters) GetFallbackHashicorpVaultEngine() string {
	if o == nil || IsNil(o.FallbackHashicorpVaultEngine) {
		var ret string
		return ret
	}
	return *o.FallbackHashicorpVaultEngine
}

// GetFallbackHashicorpVaultEngineOk returns a tuple with the FallbackHashicorpVaultEngine field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OracleDSourceLinkSourceParameters) GetFallbackHashicorpVaultEngineOk() (*string, bool) {
	if o == nil || IsNil(o.FallbackHashicorpVaultEngine) {
		return nil, false
	}
	return o.FallbackHashicorpVaultEngine, true
}

// HasFallbackHashicorpVaultEngine returns a boolean if a field has been set.
func (o *OracleDSourceLinkSourceParameters) HasFallbackHashicorpVaultEngine() bool {
	if o != nil && !IsNil(o.FallbackHashicorpVaultEngine) {
		return true
	}

	return false
}

// SetFallbackHashicorpVaultEngine gets a reference to the given string and assigns it to the FallbackHashicorpVaultEngine field.
func (o *OracleDSourceLinkSourceParameters) SetFallbackHashicorpVaultEngine(v string) {
	o.FallbackHashicorpVaultEngine = &v
}

// GetFallbackHashicorpVaultSecretPath returns the FallbackHashicorpVaultSecretPath field value if set, zero value otherwise.
func (o *OracleDSourceLinkSourceParameters) GetFallbackHashicorpVaultSecretPath() string {
	if o == nil || IsNil(o.FallbackHashicorpVaultSecretPath) {
		var ret string
		return ret
	}
	return *o.FallbackHashicorpVaultSecretPath
}

// GetFallbackHashicorpVaultSecretPathOk returns a tuple with the FallbackHashicorpVaultSecretPath field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OracleDSourceLinkSourceParameters) GetFallbackHashicorpVaultSecretPathOk() (*string, bool) {
	if o == nil || IsNil(o.FallbackHashicorpVaultSecretPath) {
		return nil, false
	}
	return o.FallbackHashicorpVaultSecretPath, true
}

// HasFallbackHashicorpVaultSecretPath returns a boolean if a field has been set.
func (o *OracleDSourceLinkSourceParameters) HasFallbackHashicorpVaultSecretPath() bool {
	if o != nil && !IsNil(o.FallbackHashicorpVaultSecretPath) {
		return true
	}

	return false
}

// SetFallbackHashicorpVaultSecretPath gets a reference to the given string and assigns it to the FallbackHashicorpVaultSecretPath field.
func (o *OracleDSourceLinkSourceParameters) SetFallbackHashicorpVaultSecretPath(v string) {
	o.FallbackHashicorpVaultSecretPath = &v
}

// GetFallbackHashicorpVaultUsernameKey returns the FallbackHashicorpVaultUsernameKey field value if set, zero value otherwise.
func (o *OracleDSourceLinkSourceParameters) GetFallbackHashicorpVaultUsernameKey() string {
	if o == nil || IsNil(o.FallbackHashicorpVaultUsernameKey) {
		var ret string
		return ret
	}
	return *o.FallbackHashicorpVaultUsernameKey
}

// GetFallbackHashicorpVaultUsernameKeyOk returns a tuple with the FallbackHashicorpVaultUsernameKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OracleDSourceLinkSourceParameters) GetFallbackHashicorpVaultUsernameKeyOk() (*string, bool) {
	if o == nil || IsNil(o.FallbackHashicorpVaultUsernameKey) {
		return nil, false
	}
	return o.FallbackHashicorpVaultUsernameKey, true
}

// HasFallbackHashicorpVaultUsernameKey returns a boolean if a field has been set.
func (o *OracleDSourceLinkSourceParameters) HasFallbackHashicorpVaultUsernameKey() bool {
	if o != nil && !IsNil(o.FallbackHashicorpVaultUsernameKey) {
		return true
	}

	return false
}

// SetFallbackHashicorpVaultUsernameKey gets a reference to the given string and assigns it to the FallbackHashicorpVaultUsernameKey field.
func (o *OracleDSourceLinkSourceParameters) SetFallbackHashicorpVaultUsernameKey(v string) {
	o.FallbackHashicorpVaultUsernameKey = &v
}

// GetFallbackHashicorpVaultSecretKey returns the FallbackHashicorpVaultSecretKey field value if set, zero value otherwise.
func (o *OracleDSourceLinkSourceParameters) GetFallbackHashicorpVaultSecretKey() string {
	if o == nil || IsNil(o.FallbackHashicorpVaultSecretKey) {
		var ret string
		return ret
	}
	return *o.FallbackHashicorpVaultSecretKey
}

// GetFallbackHashicorpVaultSecretKeyOk returns a tuple with the FallbackHashicorpVaultSecretKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OracleDSourceLinkSourceParameters) GetFallbackHashicorpVaultSecretKeyOk() (*string, bool) {
	if o == nil || IsNil(o.FallbackHashicorpVaultSecretKey) {
		return nil, false
	}
	return o.FallbackHashicorpVaultSecretKey, true
}

// HasFallbackHashicorpVaultSecretKey returns a boolean if a field has been set.
func (o *OracleDSourceLinkSourceParameters) HasFallbackHashicorpVaultSecretKey() bool {
	if o != nil && !IsNil(o.FallbackHashicorpVaultSecretKey) {
		return true
	}

	return false
}

// SetFallbackHashicorpVaultSecretKey gets a reference to the given string and assigns it to the FallbackHashicorpVaultSecretKey field.
func (o *OracleDSourceLinkSourceParameters) SetFallbackHashicorpVaultSecretKey(v string) {
	o.FallbackHashicorpVaultSecretKey = &v
}

// GetFallbackAzureVaultName returns the FallbackAzureVaultName field value if set, zero value otherwise.
func (o *OracleDSourceLinkSourceParameters) GetFallbackAzureVaultName() string {
	if o == nil || IsNil(o.FallbackAzureVaultName) {
		var ret string
		return ret
	}
	return *o.FallbackAzureVaultName
}

// GetFallbackAzureVaultNameOk returns a tuple with the FallbackAzureVaultName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OracleDSourceLinkSourceParameters) GetFallbackAzureVaultNameOk() (*string, bool) {
	if o == nil || IsNil(o.FallbackAzureVaultName) {
		return nil, false
	}
	return o.FallbackAzureVaultName, true
}

// HasFallbackAzureVaultName returns a boolean if a field has been set.
func (o *OracleDSourceLinkSourceParameters) HasFallbackAzureVaultName() bool {
	if o != nil && !IsNil(o.FallbackAzureVaultName) {
		return true
	}

	return false
}

// SetFallbackAzureVaultName gets a reference to the given string and assigns it to the FallbackAzureVaultName field.
func (o *OracleDSourceLinkSourceParameters) SetFallbackAzureVaultName(v string) {
	o.FallbackAzureVaultName = &v
}

// GetFallbackAzureVaultUsernameKey returns the FallbackAzureVaultUsernameKey field value if set, zero value otherwise.
func (o *OracleDSourceLinkSourceParameters) GetFallbackAzureVaultUsernameKey() string {
	if o == nil || IsNil(o.FallbackAzureVaultUsernameKey) {
		var ret string
		return ret
	}
	return *o.FallbackAzureVaultUsernameKey
}

// GetFallbackAzureVaultUsernameKeyOk returns a tuple with the FallbackAzureVaultUsernameKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OracleDSourceLinkSourceParameters) GetFallbackAzureVaultUsernameKeyOk() (*string, bool) {
	if o == nil || IsNil(o.FallbackAzureVaultUsernameKey) {
		return nil, false
	}
	return o.FallbackAzureVaultUsernameKey, true
}

// HasFallbackAzureVaultUsernameKey returns a boolean if a field has been set.
func (o *OracleDSourceLinkSourceParameters) HasFallbackAzureVaultUsernameKey() bool {
	if o != nil && !IsNil(o.FallbackAzureVaultUsernameKey) {
		return true
	}

	return false
}

// SetFallbackAzureVaultUsernameKey gets a reference to the given string and assigns it to the FallbackAzureVaultUsernameKey field.
func (o *OracleDSourceLinkSourceParameters) SetFallbackAzureVaultUsernameKey(v string) {
	o.FallbackAzureVaultUsernameKey = &v
}

// GetFallbackAzureVaultSecretKey returns the FallbackAzureVaultSecretKey field value if set, zero value otherwise.
func (o *OracleDSourceLinkSourceParameters) GetFallbackAzureVaultSecretKey() string {
	if o == nil || IsNil(o.FallbackAzureVaultSecretKey) {
		var ret string
		return ret
	}
	return *o.FallbackAzureVaultSecretKey
}

// GetFallbackAzureVaultSecretKeyOk returns a tuple with the FallbackAzureVaultSecretKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OracleDSourceLinkSourceParameters) GetFallbackAzureVaultSecretKeyOk() (*string, bool) {
	if o == nil || IsNil(o.FallbackAzureVaultSecretKey) {
		return nil, false
	}
	return o.FallbackAzureVaultSecretKey, true
}

// HasFallbackAzureVaultSecretKey returns a boolean if a field has been set.
func (o *OracleDSourceLinkSourceParameters) HasFallbackAzureVaultSecretKey() bool {
	if o != nil && !IsNil(o.FallbackAzureVaultSecretKey) {
		return true
	}

	return false
}

// SetFallbackAzureVaultSecretKey gets a reference to the given string and assigns it to the FallbackAzureVaultSecretKey field.
func (o *OracleDSourceLinkSourceParameters) SetFallbackAzureVaultSecretKey(v string) {
	o.FallbackAzureVaultSecretKey = &v
}

// GetFallbackCyberarkVaultQueryString returns the FallbackCyberarkVaultQueryString field value if set, zero value otherwise.
func (o *OracleDSourceLinkSourceParameters) GetFallbackCyberarkVaultQueryString() string {
	if o == nil || IsNil(o.FallbackCyberarkVaultQueryString) {
		var ret string
		return ret
	}
	return *o.FallbackCyberarkVaultQueryString
}

// GetFallbackCyberarkVaultQueryStringOk returns a tuple with the FallbackCyberarkVaultQueryString field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OracleDSourceLinkSourceParameters) GetFallbackCyberarkVaultQueryStringOk() (*string, bool) {
	if o == nil || IsNil(o.FallbackCyberarkVaultQueryString) {
		return nil, false
	}
	return o.FallbackCyberarkVaultQueryString, true
}

// HasFallbackCyberarkVaultQueryString returns a boolean if a field has been set.
func (o *OracleDSourceLinkSourceParameters) HasFallbackCyberarkVaultQueryString() bool {
	if o != nil && !IsNil(o.FallbackCyberarkVaultQueryString) {
		return true
	}

	return false
}

// SetFallbackCyberarkVaultQueryString gets a reference to the given string and assigns it to the FallbackCyberarkVaultQueryString field.
func (o *OracleDSourceLinkSourceParameters) SetFallbackCyberarkVaultQueryString(v string) {
	o.FallbackCyberarkVaultQueryString = &v
}

// GetOpsPreLogSync returns the OpsPreLogSync field value if set, zero value otherwise.
func (o *OracleDSourceLinkSourceParameters) GetOpsPreLogSync() []SourceOperation {
	if o == nil || IsNil(o.OpsPreLogSync) {
		var ret []SourceOperation
		return ret
	}
	return o.OpsPreLogSync
}

// GetOpsPreLogSyncOk returns a tuple with the OpsPreLogSync field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OracleDSourceLinkSourceParameters) GetOpsPreLogSyncOk() ([]SourceOperation, bool) {
	if o == nil || IsNil(o.OpsPreLogSync) {
		return nil, false
	}
	return o.OpsPreLogSync, true
}

// HasOpsPreLogSync returns a boolean if a field has been set.
func (o *OracleDSourceLinkSourceParameters) HasOpsPreLogSync() bool {
	if o != nil && !IsNil(o.OpsPreLogSync) {
		return true
	}

	return false
}

// SetOpsPreLogSync gets a reference to the given []SourceOperation and assigns it to the OpsPreLogSync field.
func (o *OracleDSourceLinkSourceParameters) SetOpsPreLogSync(v []SourceOperation) {
	o.OpsPreLogSync = v
}

func (o OracleDSourceLinkSourceParameters) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OracleDSourceLinkSourceParameters) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	toSerialize["source_id"] = o.SourceId
	if !IsNil(o.GroupId) {
		toSerialize["group_id"] = o.GroupId
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.LogSyncEnabled) {
		toSerialize["log_sync_enabled"] = o.LogSyncEnabled
	}
	if !IsNil(o.SyncPolicyId) {
		toSerialize["sync_policy_id"] = o.SyncPolicyId
	}
	if !IsNil(o.RetentionPolicyId) {
		toSerialize["retention_policy_id"] = o.RetentionPolicyId
	}
	if !IsNil(o.MakeCurrentAccountOwner) {
		toSerialize["make_current_account_owner"] = o.MakeCurrentAccountOwner
	}
	if !IsNil(o.Tags) {
		toSerialize["tags"] = o.Tags
	}
	if !IsNil(o.OpsPreSync) {
		toSerialize["ops_pre_sync"] = o.OpsPreSync
	}
	if !IsNil(o.OpsPostSync) {
		toSerialize["ops_post_sync"] = o.OpsPostSync
	}
	if !IsNil(o.ExternalFilePath) {
		toSerialize["external_file_path"] = o.ExternalFilePath
	}
	if !IsNil(o.EnvironmentUserId) {
		toSerialize["environment_user_id"] = o.EnvironmentUserId
	}
	if !IsNil(o.BackupLevelEnabled) {
		toSerialize["backup_level_enabled"] = o.BackupLevelEnabled
	}
	if !IsNil(o.RmanChannels) {
		toSerialize["rman_channels"] = o.RmanChannels
	}
	if !IsNil(o.FilesPerSet) {
		toSerialize["files_per_set"] = o.FilesPerSet
	}
	if !IsNil(o.CheckLogical) {
		toSerialize["check_logical"] = o.CheckLogical
	}
	if !IsNil(o.EncryptedLinkingEnabled) {
		toSerialize["encrypted_linking_enabled"] = o.EncryptedLinkingEnabled
	}
	if !IsNil(o.CompressedLinkingEnabled) {
		toSerialize["compressed_linking_enabled"] = o.CompressedLinkingEnabled
	}
	if !IsNil(o.BandwidthLimit) {
		toSerialize["bandwidth_limit"] = o.BandwidthLimit
	}
	if !IsNil(o.NumberOfConnections) {
		toSerialize["number_of_connections"] = o.NumberOfConnections
	}
	if !IsNil(o.DiagnoseNoLoggingFaults) {
		toSerialize["diagnose_no_logging_faults"] = o.DiagnoseNoLoggingFaults
	}
	if !IsNil(o.PreProvisioningEnabled) {
		toSerialize["pre_provisioning_enabled"] = o.PreProvisioningEnabled
	}
	if !IsNil(o.LinkNow) {
		toSerialize["link_now"] = o.LinkNow
	}
	if !IsNil(o.ForceFullBackup) {
		toSerialize["force_full_backup"] = o.ForceFullBackup
	}
	if !IsNil(o.DoubleSync) {
		toSerialize["double_sync"] = o.DoubleSync
	}
	if !IsNil(o.SkipSpaceCheck) {
		toSerialize["skip_space_check"] = o.SkipSpaceCheck
	}
	if !IsNil(o.DoNotResume) {
		toSerialize["do_not_resume"] = o.DoNotResume
	}
	if !IsNil(o.FilesForFullBackup) {
		toSerialize["files_for_full_backup"] = o.FilesForFullBackup
	}
	if !IsNil(o.LogSyncMode) {
		toSerialize["log_sync_mode"] = o.LogSyncMode
	}
	if !IsNil(o.LogSyncInterval) {
		toSerialize["log_sync_interval"] = o.LogSyncInterval
	}
	if !IsNil(o.NonSysUsername) {
		toSerialize["non_sys_username"] = o.NonSysUsername
	}
	if !IsNil(o.NonSysPassword) {
		toSerialize["non_sys_password"] = o.NonSysPassword
	}
	if !IsNil(o.NonSysVaultUsername) {
		toSerialize["non_sys_vault_username"] = o.NonSysVaultUsername
	}
	if !IsNil(o.NonSysVault) {
		toSerialize["non_sys_vault"] = o.NonSysVault
	}
	if !IsNil(o.NonSysHashicorpVaultEngine) {
		toSerialize["non_sys_hashicorp_vault_engine"] = o.NonSysHashicorpVaultEngine
	}
	if !IsNil(o.NonSysHashicorpVaultSecretPath) {
		toSerialize["non_sys_hashicorp_vault_secret_path"] = o.NonSysHashicorpVaultSecretPath
	}
	if !IsNil(o.NonSysHashicorpVaultUsernameKey) {
		toSerialize["non_sys_hashicorp_vault_username_key"] = o.NonSysHashicorpVaultUsernameKey
	}
	if !IsNil(o.NonSysHashicorpVaultSecretKey) {
		toSerialize["non_sys_hashicorp_vault_secret_key"] = o.NonSysHashicorpVaultSecretKey
	}
	if !IsNil(o.NonSysAzureVaultName) {
		toSerialize["non_sys_azure_vault_name"] = o.NonSysAzureVaultName
	}
	if !IsNil(o.NonSysAzureVaultUsernameKey) {
		toSerialize["non_sys_azure_vault_username_key"] = o.NonSysAzureVaultUsernameKey
	}
	if !IsNil(o.NonSysAzureVaultSecretKey) {
		toSerialize["non_sys_azure_vault_secret_key"] = o.NonSysAzureVaultSecretKey
	}
	if !IsNil(o.NonSysCyberarkVaultQueryString) {
		toSerialize["non_sys_cyberark_vault_query_string"] = o.NonSysCyberarkVaultQueryString
	}
	if !IsNil(o.FallbackUsername) {
		toSerialize["fallback_username"] = o.FallbackUsername
	}
	if !IsNil(o.FallbackPassword) {
		toSerialize["fallback_password"] = o.FallbackPassword
	}
	if !IsNil(o.FallbackVaultUsername) {
		toSerialize["fallback_vault_username"] = o.FallbackVaultUsername
	}
	if !IsNil(o.FallbackVault) {
		toSerialize["fallback_vault"] = o.FallbackVault
	}
	if !IsNil(o.FallbackHashicorpVaultEngine) {
		toSerialize["fallback_hashicorp_vault_engine"] = o.FallbackHashicorpVaultEngine
	}
	if !IsNil(o.FallbackHashicorpVaultSecretPath) {
		toSerialize["fallback_hashicorp_vault_secret_path"] = o.FallbackHashicorpVaultSecretPath
	}
	if !IsNil(o.FallbackHashicorpVaultUsernameKey) {
		toSerialize["fallback_hashicorp_vault_username_key"] = o.FallbackHashicorpVaultUsernameKey
	}
	if !IsNil(o.FallbackHashicorpVaultSecretKey) {
		toSerialize["fallback_hashicorp_vault_secret_key"] = o.FallbackHashicorpVaultSecretKey
	}
	if !IsNil(o.FallbackAzureVaultName) {
		toSerialize["fallback_azure_vault_name"] = o.FallbackAzureVaultName
	}
	if !IsNil(o.FallbackAzureVaultUsernameKey) {
		toSerialize["fallback_azure_vault_username_key"] = o.FallbackAzureVaultUsernameKey
	}
	if !IsNil(o.FallbackAzureVaultSecretKey) {
		toSerialize["fallback_azure_vault_secret_key"] = o.FallbackAzureVaultSecretKey
	}
	if !IsNil(o.FallbackCyberarkVaultQueryString) {
		toSerialize["fallback_cyberark_vault_query_string"] = o.FallbackCyberarkVaultQueryString
	}
	if !IsNil(o.OpsPreLogSync) {
		toSerialize["ops_pre_log_sync"] = o.OpsPreLogSync
	}
	return toSerialize, nil
}

func (o *OracleDSourceLinkSourceParameters) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"source_id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varOracleDSourceLinkSourceParameters := _OracleDSourceLinkSourceParameters{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varOracleDSourceLinkSourceParameters)

	if err != nil {
		return err
	}

	*o = OracleDSourceLinkSourceParameters(varOracleDSourceLinkSourceParameters)

	return err
}

type NullableOracleDSourceLinkSourceParameters struct {
	value *OracleDSourceLinkSourceParameters
	isSet bool
}

func (v NullableOracleDSourceLinkSourceParameters) Get() *OracleDSourceLinkSourceParameters {
	return v.value
}

func (v *NullableOracleDSourceLinkSourceParameters) Set(val *OracleDSourceLinkSourceParameters) {
	v.value = val
	v.isSet = true
}

func (v NullableOracleDSourceLinkSourceParameters) IsSet() bool {
	return v.isSet
}

func (v *NullableOracleDSourceLinkSourceParameters) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOracleDSourceLinkSourceParameters(val *OracleDSourceLinkSourceParameters) *NullableOracleDSourceLinkSourceParameters {
	return &NullableOracleDSourceLinkSourceParameters{value: val, isSet: true}
}

func (v NullableOracleDSourceLinkSourceParameters) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOracleDSourceLinkSourceParameters) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


