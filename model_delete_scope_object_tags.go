/*
Delphix DCT API

Delphix DCT API

API version: 3.17.0
Contact: support@delphix.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package delphix_dct_api

import (
	"encoding/json"
)

// checks if the DeleteScopeObjectTags type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DeleteScopeObjectTags{}

// DeleteScopeObjectTags struct for DeleteScopeObjectTags
type DeleteScopeObjectTags struct {
	// List of scope tags to be deleted
	Tags []ScopeTag `json:"tags,omitempty"`
}

// NewDeleteScopeObjectTags instantiates a new DeleteScopeObjectTags object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDeleteScopeObjectTags() *DeleteScopeObjectTags {
	this := DeleteScopeObjectTags{}
	return &this
}

// NewDeleteScopeObjectTagsWithDefaults instantiates a new DeleteScopeObjectTags object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDeleteScopeObjectTagsWithDefaults() *DeleteScopeObjectTags {
	this := DeleteScopeObjectTags{}
	return &this
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *DeleteScopeObjectTags) GetTags() []ScopeTag {
	if o == nil || IsNil(o.Tags) {
		var ret []ScopeTag
		return ret
	}
	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeleteScopeObjectTags) GetTagsOk() ([]ScopeTag, bool) {
	if o == nil || IsNil(o.Tags) {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *DeleteScopeObjectTags) HasTags() bool {
	if o != nil && !IsNil(o.Tags) {
		return true
	}

	return false
}

// SetTags gets a reference to the given []ScopeTag and assigns it to the Tags field.
func (o *DeleteScopeObjectTags) SetTags(v []ScopeTag) {
	o.Tags = v
}

func (o DeleteScopeObjectTags) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DeleteScopeObjectTags) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Tags) {
		toSerialize["tags"] = o.Tags
	}
	return toSerialize, nil
}

type NullableDeleteScopeObjectTags struct {
	value *DeleteScopeObjectTags
	isSet bool
}

func (v NullableDeleteScopeObjectTags) Get() *DeleteScopeObjectTags {
	return v.value
}

func (v *NullableDeleteScopeObjectTags) Set(val *DeleteScopeObjectTags) {
	v.value = val
	v.isSet = true
}

func (v NullableDeleteScopeObjectTags) IsSet() bool {
	return v.isSet
}

func (v *NullableDeleteScopeObjectTags) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeleteScopeObjectTags(val *DeleteScopeObjectTags) *NullableDeleteScopeObjectTags {
	return &NullableDeleteScopeObjectTags{value: val, isSet: true}
}

func (v NullableDeleteScopeObjectTags) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeleteScopeObjectTags) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


