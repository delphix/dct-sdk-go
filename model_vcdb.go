/*
Delphix DCT API

Delphix DCT API

API version: 3.18.0
Contact: support@delphix.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package delphix_dct_api

import (
	"encoding/json"
	"time"
)

// checks if the VCDB type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VCDB{}

// VCDB The Delphix Oracle Virtual Container Database.
type VCDB struct {
	// The vCDB object entity ID.
	Id *string `json:"id,omitempty"`
	// The name of this vCDB.
	Name NullableString `json:"name,omitempty"`
	// The name of the container database in the Oracle DBMS.
	DatabaseName *string `json:"database_name,omitempty"`
	// The namespace id of this vCDB.
	NamespaceId NullableString `json:"namespace_id,omitempty"`
	// The namespace name of this vCDB.
	NamespaceName NullableString `json:"namespace_name,omitempty"`
	// Is this a replicated object.
	IsReplica NullableBool `json:"is_replica,omitempty"`
	// The version of this vCDB.
	DatabaseVersion NullableString `json:"database_version,omitempty"`
	// A reference to the Environment that hosts this vCDB.
	EnvironmentId NullableString `json:"environment_id,omitempty"`
	// The total size of the data files used by this vCDB, in bytes.
	Size NullableInt64 `json:"size,omitempty"`
	// A reference to the Engine that this vCDB belongs to.
	EngineId *string `json:"engine_id,omitempty"`
	// The runtime status of the vCDB.
	Status NullableString `json:"status,omitempty"`
	// A reference to the parent CDB of this vCDB.
	ParentId *string `json:"parent_id,omitempty"`
	// The date this vCDB was created.
	CreationDate NullableTime `json:"creation_date,omitempty"`
	// The name of the group containing this vCDB.
	GroupName NullableString `json:"group_name,omitempty"`
	// Whether the vCDB is enabled or not.
	Enabled *bool `json:"enabled,omitempty"`
	// The content type of the vcdb.
	ContentType NullableString `json:"content_type,omitempty"`
	// Indicates whether the Engine should automatically restart this vcdb when target host reboot is detected.
	VcdbRestart *bool `json:"vcdb_restart,omitempty"`
	Tags []Tag `json:"tags,omitempty"`
	// Indicates whether datapatch should be invoked.
	InvokeDatapatch *bool `json:"invoke_datapatch,omitempty"`
	// The list of node listeners for this VCDB.
	NodeListeners []string `json:"node_listeners,omitempty"`
	// The instance name of this single instance VCDB.
	InstanceName *string `json:"instance_name,omitempty"`
	// The instance number of this single instance VCDB.
	InstanceNumber *int32 `json:"instance_number,omitempty"`
	Instances []OracleRACDatabaseInstance `json:"instances,omitempty"`
	OracleServices []OracleService `json:"oracle_services,omitempty"`
	// The repository id of this Virtual CDB.
	RepositoryId *string `json:"repository_id,omitempty"`
}

// NewVCDB instantiates a new VCDB object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVCDB() *VCDB {
	this := VCDB{}
	return &this
}

// NewVCDBWithDefaults instantiates a new VCDB object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVCDBWithDefaults() *VCDB {
	this := VCDB{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *VCDB) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VCDB) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *VCDB) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *VCDB) SetId(v string) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VCDB) GetName() string {
	if o == nil || IsNil(o.Name.Get()) {
		var ret string
		return ret
	}
	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VCDB) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// HasName returns a boolean if a field has been set.
func (o *VCDB) HasName() bool {
	if o != nil && o.Name.IsSet() {
		return true
	}

	return false
}

// SetName gets a reference to the given NullableString and assigns it to the Name field.
func (o *VCDB) SetName(v string) {
	o.Name.Set(&v)
}
// SetNameNil sets the value for Name to be an explicit nil
func (o *VCDB) SetNameNil() {
	o.Name.Set(nil)
}

// UnsetName ensures that no value is present for Name, not even an explicit nil
func (o *VCDB) UnsetName() {
	o.Name.Unset()
}

// GetDatabaseName returns the DatabaseName field value if set, zero value otherwise.
func (o *VCDB) GetDatabaseName() string {
	if o == nil || IsNil(o.DatabaseName) {
		var ret string
		return ret
	}
	return *o.DatabaseName
}

// GetDatabaseNameOk returns a tuple with the DatabaseName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VCDB) GetDatabaseNameOk() (*string, bool) {
	if o == nil || IsNil(o.DatabaseName) {
		return nil, false
	}
	return o.DatabaseName, true
}

// HasDatabaseName returns a boolean if a field has been set.
func (o *VCDB) HasDatabaseName() bool {
	if o != nil && !IsNil(o.DatabaseName) {
		return true
	}

	return false
}

// SetDatabaseName gets a reference to the given string and assigns it to the DatabaseName field.
func (o *VCDB) SetDatabaseName(v string) {
	o.DatabaseName = &v
}

// GetNamespaceId returns the NamespaceId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VCDB) GetNamespaceId() string {
	if o == nil || IsNil(o.NamespaceId.Get()) {
		var ret string
		return ret
	}
	return *o.NamespaceId.Get()
}

// GetNamespaceIdOk returns a tuple with the NamespaceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VCDB) GetNamespaceIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.NamespaceId.Get(), o.NamespaceId.IsSet()
}

// HasNamespaceId returns a boolean if a field has been set.
func (o *VCDB) HasNamespaceId() bool {
	if o != nil && o.NamespaceId.IsSet() {
		return true
	}

	return false
}

// SetNamespaceId gets a reference to the given NullableString and assigns it to the NamespaceId field.
func (o *VCDB) SetNamespaceId(v string) {
	o.NamespaceId.Set(&v)
}
// SetNamespaceIdNil sets the value for NamespaceId to be an explicit nil
func (o *VCDB) SetNamespaceIdNil() {
	o.NamespaceId.Set(nil)
}

// UnsetNamespaceId ensures that no value is present for NamespaceId, not even an explicit nil
func (o *VCDB) UnsetNamespaceId() {
	o.NamespaceId.Unset()
}

// GetNamespaceName returns the NamespaceName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VCDB) GetNamespaceName() string {
	if o == nil || IsNil(o.NamespaceName.Get()) {
		var ret string
		return ret
	}
	return *o.NamespaceName.Get()
}

// GetNamespaceNameOk returns a tuple with the NamespaceName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VCDB) GetNamespaceNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.NamespaceName.Get(), o.NamespaceName.IsSet()
}

// HasNamespaceName returns a boolean if a field has been set.
func (o *VCDB) HasNamespaceName() bool {
	if o != nil && o.NamespaceName.IsSet() {
		return true
	}

	return false
}

// SetNamespaceName gets a reference to the given NullableString and assigns it to the NamespaceName field.
func (o *VCDB) SetNamespaceName(v string) {
	o.NamespaceName.Set(&v)
}
// SetNamespaceNameNil sets the value for NamespaceName to be an explicit nil
func (o *VCDB) SetNamespaceNameNil() {
	o.NamespaceName.Set(nil)
}

// UnsetNamespaceName ensures that no value is present for NamespaceName, not even an explicit nil
func (o *VCDB) UnsetNamespaceName() {
	o.NamespaceName.Unset()
}

// GetIsReplica returns the IsReplica field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VCDB) GetIsReplica() bool {
	if o == nil || IsNil(o.IsReplica.Get()) {
		var ret bool
		return ret
	}
	return *o.IsReplica.Get()
}

// GetIsReplicaOk returns a tuple with the IsReplica field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VCDB) GetIsReplicaOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.IsReplica.Get(), o.IsReplica.IsSet()
}

// HasIsReplica returns a boolean if a field has been set.
func (o *VCDB) HasIsReplica() bool {
	if o != nil && o.IsReplica.IsSet() {
		return true
	}

	return false
}

// SetIsReplica gets a reference to the given NullableBool and assigns it to the IsReplica field.
func (o *VCDB) SetIsReplica(v bool) {
	o.IsReplica.Set(&v)
}
// SetIsReplicaNil sets the value for IsReplica to be an explicit nil
func (o *VCDB) SetIsReplicaNil() {
	o.IsReplica.Set(nil)
}

// UnsetIsReplica ensures that no value is present for IsReplica, not even an explicit nil
func (o *VCDB) UnsetIsReplica() {
	o.IsReplica.Unset()
}

// GetDatabaseVersion returns the DatabaseVersion field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VCDB) GetDatabaseVersion() string {
	if o == nil || IsNil(o.DatabaseVersion.Get()) {
		var ret string
		return ret
	}
	return *o.DatabaseVersion.Get()
}

// GetDatabaseVersionOk returns a tuple with the DatabaseVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VCDB) GetDatabaseVersionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.DatabaseVersion.Get(), o.DatabaseVersion.IsSet()
}

// HasDatabaseVersion returns a boolean if a field has been set.
func (o *VCDB) HasDatabaseVersion() bool {
	if o != nil && o.DatabaseVersion.IsSet() {
		return true
	}

	return false
}

// SetDatabaseVersion gets a reference to the given NullableString and assigns it to the DatabaseVersion field.
func (o *VCDB) SetDatabaseVersion(v string) {
	o.DatabaseVersion.Set(&v)
}
// SetDatabaseVersionNil sets the value for DatabaseVersion to be an explicit nil
func (o *VCDB) SetDatabaseVersionNil() {
	o.DatabaseVersion.Set(nil)
}

// UnsetDatabaseVersion ensures that no value is present for DatabaseVersion, not even an explicit nil
func (o *VCDB) UnsetDatabaseVersion() {
	o.DatabaseVersion.Unset()
}

// GetEnvironmentId returns the EnvironmentId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VCDB) GetEnvironmentId() string {
	if o == nil || IsNil(o.EnvironmentId.Get()) {
		var ret string
		return ret
	}
	return *o.EnvironmentId.Get()
}

// GetEnvironmentIdOk returns a tuple with the EnvironmentId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VCDB) GetEnvironmentIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.EnvironmentId.Get(), o.EnvironmentId.IsSet()
}

// HasEnvironmentId returns a boolean if a field has been set.
func (o *VCDB) HasEnvironmentId() bool {
	if o != nil && o.EnvironmentId.IsSet() {
		return true
	}

	return false
}

// SetEnvironmentId gets a reference to the given NullableString and assigns it to the EnvironmentId field.
func (o *VCDB) SetEnvironmentId(v string) {
	o.EnvironmentId.Set(&v)
}
// SetEnvironmentIdNil sets the value for EnvironmentId to be an explicit nil
func (o *VCDB) SetEnvironmentIdNil() {
	o.EnvironmentId.Set(nil)
}

// UnsetEnvironmentId ensures that no value is present for EnvironmentId, not even an explicit nil
func (o *VCDB) UnsetEnvironmentId() {
	o.EnvironmentId.Unset()
}

// GetSize returns the Size field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VCDB) GetSize() int64 {
	if o == nil || IsNil(o.Size.Get()) {
		var ret int64
		return ret
	}
	return *o.Size.Get()
}

// GetSizeOk returns a tuple with the Size field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VCDB) GetSizeOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.Size.Get(), o.Size.IsSet()
}

// HasSize returns a boolean if a field has been set.
func (o *VCDB) HasSize() bool {
	if o != nil && o.Size.IsSet() {
		return true
	}

	return false
}

// SetSize gets a reference to the given NullableInt64 and assigns it to the Size field.
func (o *VCDB) SetSize(v int64) {
	o.Size.Set(&v)
}
// SetSizeNil sets the value for Size to be an explicit nil
func (o *VCDB) SetSizeNil() {
	o.Size.Set(nil)
}

// UnsetSize ensures that no value is present for Size, not even an explicit nil
func (o *VCDB) UnsetSize() {
	o.Size.Unset()
}

// GetEngineId returns the EngineId field value if set, zero value otherwise.
func (o *VCDB) GetEngineId() string {
	if o == nil || IsNil(o.EngineId) {
		var ret string
		return ret
	}
	return *o.EngineId
}

// GetEngineIdOk returns a tuple with the EngineId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VCDB) GetEngineIdOk() (*string, bool) {
	if o == nil || IsNil(o.EngineId) {
		return nil, false
	}
	return o.EngineId, true
}

// HasEngineId returns a boolean if a field has been set.
func (o *VCDB) HasEngineId() bool {
	if o != nil && !IsNil(o.EngineId) {
		return true
	}

	return false
}

// SetEngineId gets a reference to the given string and assigns it to the EngineId field.
func (o *VCDB) SetEngineId(v string) {
	o.EngineId = &v
}

// GetStatus returns the Status field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VCDB) GetStatus() string {
	if o == nil || IsNil(o.Status.Get()) {
		var ret string
		return ret
	}
	return *o.Status.Get()
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VCDB) GetStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Status.Get(), o.Status.IsSet()
}

// HasStatus returns a boolean if a field has been set.
func (o *VCDB) HasStatus() bool {
	if o != nil && o.Status.IsSet() {
		return true
	}

	return false
}

// SetStatus gets a reference to the given NullableString and assigns it to the Status field.
func (o *VCDB) SetStatus(v string) {
	o.Status.Set(&v)
}
// SetStatusNil sets the value for Status to be an explicit nil
func (o *VCDB) SetStatusNil() {
	o.Status.Set(nil)
}

// UnsetStatus ensures that no value is present for Status, not even an explicit nil
func (o *VCDB) UnsetStatus() {
	o.Status.Unset()
}

// GetParentId returns the ParentId field value if set, zero value otherwise.
func (o *VCDB) GetParentId() string {
	if o == nil || IsNil(o.ParentId) {
		var ret string
		return ret
	}
	return *o.ParentId
}

// GetParentIdOk returns a tuple with the ParentId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VCDB) GetParentIdOk() (*string, bool) {
	if o == nil || IsNil(o.ParentId) {
		return nil, false
	}
	return o.ParentId, true
}

// HasParentId returns a boolean if a field has been set.
func (o *VCDB) HasParentId() bool {
	if o != nil && !IsNil(o.ParentId) {
		return true
	}

	return false
}

// SetParentId gets a reference to the given string and assigns it to the ParentId field.
func (o *VCDB) SetParentId(v string) {
	o.ParentId = &v
}

// GetCreationDate returns the CreationDate field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VCDB) GetCreationDate() time.Time {
	if o == nil || IsNil(o.CreationDate.Get()) {
		var ret time.Time
		return ret
	}
	return *o.CreationDate.Get()
}

// GetCreationDateOk returns a tuple with the CreationDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VCDB) GetCreationDateOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.CreationDate.Get(), o.CreationDate.IsSet()
}

// HasCreationDate returns a boolean if a field has been set.
func (o *VCDB) HasCreationDate() bool {
	if o != nil && o.CreationDate.IsSet() {
		return true
	}

	return false
}

// SetCreationDate gets a reference to the given NullableTime and assigns it to the CreationDate field.
func (o *VCDB) SetCreationDate(v time.Time) {
	o.CreationDate.Set(&v)
}
// SetCreationDateNil sets the value for CreationDate to be an explicit nil
func (o *VCDB) SetCreationDateNil() {
	o.CreationDate.Set(nil)
}

// UnsetCreationDate ensures that no value is present for CreationDate, not even an explicit nil
func (o *VCDB) UnsetCreationDate() {
	o.CreationDate.Unset()
}

// GetGroupName returns the GroupName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VCDB) GetGroupName() string {
	if o == nil || IsNil(o.GroupName.Get()) {
		var ret string
		return ret
	}
	return *o.GroupName.Get()
}

// GetGroupNameOk returns a tuple with the GroupName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VCDB) GetGroupNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.GroupName.Get(), o.GroupName.IsSet()
}

// HasGroupName returns a boolean if a field has been set.
func (o *VCDB) HasGroupName() bool {
	if o != nil && o.GroupName.IsSet() {
		return true
	}

	return false
}

// SetGroupName gets a reference to the given NullableString and assigns it to the GroupName field.
func (o *VCDB) SetGroupName(v string) {
	o.GroupName.Set(&v)
}
// SetGroupNameNil sets the value for GroupName to be an explicit nil
func (o *VCDB) SetGroupNameNil() {
	o.GroupName.Set(nil)
}

// UnsetGroupName ensures that no value is present for GroupName, not even an explicit nil
func (o *VCDB) UnsetGroupName() {
	o.GroupName.Unset()
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *VCDB) GetEnabled() bool {
	if o == nil || IsNil(o.Enabled) {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VCDB) GetEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Enabled) {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *VCDB) HasEnabled() bool {
	if o != nil && !IsNil(o.Enabled) {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *VCDB) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetContentType returns the ContentType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VCDB) GetContentType() string {
	if o == nil || IsNil(o.ContentType.Get()) {
		var ret string
		return ret
	}
	return *o.ContentType.Get()
}

// GetContentTypeOk returns a tuple with the ContentType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VCDB) GetContentTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ContentType.Get(), o.ContentType.IsSet()
}

// HasContentType returns a boolean if a field has been set.
func (o *VCDB) HasContentType() bool {
	if o != nil && o.ContentType.IsSet() {
		return true
	}

	return false
}

// SetContentType gets a reference to the given NullableString and assigns it to the ContentType field.
func (o *VCDB) SetContentType(v string) {
	o.ContentType.Set(&v)
}
// SetContentTypeNil sets the value for ContentType to be an explicit nil
func (o *VCDB) SetContentTypeNil() {
	o.ContentType.Set(nil)
}

// UnsetContentType ensures that no value is present for ContentType, not even an explicit nil
func (o *VCDB) UnsetContentType() {
	o.ContentType.Unset()
}

// GetVcdbRestart returns the VcdbRestart field value if set, zero value otherwise.
func (o *VCDB) GetVcdbRestart() bool {
	if o == nil || IsNil(o.VcdbRestart) {
		var ret bool
		return ret
	}
	return *o.VcdbRestart
}

// GetVcdbRestartOk returns a tuple with the VcdbRestart field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VCDB) GetVcdbRestartOk() (*bool, bool) {
	if o == nil || IsNil(o.VcdbRestart) {
		return nil, false
	}
	return o.VcdbRestart, true
}

// HasVcdbRestart returns a boolean if a field has been set.
func (o *VCDB) HasVcdbRestart() bool {
	if o != nil && !IsNil(o.VcdbRestart) {
		return true
	}

	return false
}

// SetVcdbRestart gets a reference to the given bool and assigns it to the VcdbRestart field.
func (o *VCDB) SetVcdbRestart(v bool) {
	o.VcdbRestart = &v
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *VCDB) GetTags() []Tag {
	if o == nil || IsNil(o.Tags) {
		var ret []Tag
		return ret
	}
	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VCDB) GetTagsOk() ([]Tag, bool) {
	if o == nil || IsNil(o.Tags) {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *VCDB) HasTags() bool {
	if o != nil && !IsNil(o.Tags) {
		return true
	}

	return false
}

// SetTags gets a reference to the given []Tag and assigns it to the Tags field.
func (o *VCDB) SetTags(v []Tag) {
	o.Tags = v
}

// GetInvokeDatapatch returns the InvokeDatapatch field value if set, zero value otherwise.
func (o *VCDB) GetInvokeDatapatch() bool {
	if o == nil || IsNil(o.InvokeDatapatch) {
		var ret bool
		return ret
	}
	return *o.InvokeDatapatch
}

// GetInvokeDatapatchOk returns a tuple with the InvokeDatapatch field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VCDB) GetInvokeDatapatchOk() (*bool, bool) {
	if o == nil || IsNil(o.InvokeDatapatch) {
		return nil, false
	}
	return o.InvokeDatapatch, true
}

// HasInvokeDatapatch returns a boolean if a field has been set.
func (o *VCDB) HasInvokeDatapatch() bool {
	if o != nil && !IsNil(o.InvokeDatapatch) {
		return true
	}

	return false
}

// SetInvokeDatapatch gets a reference to the given bool and assigns it to the InvokeDatapatch field.
func (o *VCDB) SetInvokeDatapatch(v bool) {
	o.InvokeDatapatch = &v
}

// GetNodeListeners returns the NodeListeners field value if set, zero value otherwise.
func (o *VCDB) GetNodeListeners() []string {
	if o == nil || IsNil(o.NodeListeners) {
		var ret []string
		return ret
	}
	return o.NodeListeners
}

// GetNodeListenersOk returns a tuple with the NodeListeners field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VCDB) GetNodeListenersOk() ([]string, bool) {
	if o == nil || IsNil(o.NodeListeners) {
		return nil, false
	}
	return o.NodeListeners, true
}

// HasNodeListeners returns a boolean if a field has been set.
func (o *VCDB) HasNodeListeners() bool {
	if o != nil && !IsNil(o.NodeListeners) {
		return true
	}

	return false
}

// SetNodeListeners gets a reference to the given []string and assigns it to the NodeListeners field.
func (o *VCDB) SetNodeListeners(v []string) {
	o.NodeListeners = v
}

// GetInstanceName returns the InstanceName field value if set, zero value otherwise.
func (o *VCDB) GetInstanceName() string {
	if o == nil || IsNil(o.InstanceName) {
		var ret string
		return ret
	}
	return *o.InstanceName
}

// GetInstanceNameOk returns a tuple with the InstanceName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VCDB) GetInstanceNameOk() (*string, bool) {
	if o == nil || IsNil(o.InstanceName) {
		return nil, false
	}
	return o.InstanceName, true
}

// HasInstanceName returns a boolean if a field has been set.
func (o *VCDB) HasInstanceName() bool {
	if o != nil && !IsNil(o.InstanceName) {
		return true
	}

	return false
}

// SetInstanceName gets a reference to the given string and assigns it to the InstanceName field.
func (o *VCDB) SetInstanceName(v string) {
	o.InstanceName = &v
}

// GetInstanceNumber returns the InstanceNumber field value if set, zero value otherwise.
func (o *VCDB) GetInstanceNumber() int32 {
	if o == nil || IsNil(o.InstanceNumber) {
		var ret int32
		return ret
	}
	return *o.InstanceNumber
}

// GetInstanceNumberOk returns a tuple with the InstanceNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VCDB) GetInstanceNumberOk() (*int32, bool) {
	if o == nil || IsNil(o.InstanceNumber) {
		return nil, false
	}
	return o.InstanceNumber, true
}

// HasInstanceNumber returns a boolean if a field has been set.
func (o *VCDB) HasInstanceNumber() bool {
	if o != nil && !IsNil(o.InstanceNumber) {
		return true
	}

	return false
}

// SetInstanceNumber gets a reference to the given int32 and assigns it to the InstanceNumber field.
func (o *VCDB) SetInstanceNumber(v int32) {
	o.InstanceNumber = &v
}

// GetInstances returns the Instances field value if set, zero value otherwise.
func (o *VCDB) GetInstances() []OracleRACDatabaseInstance {
	if o == nil || IsNil(o.Instances) {
		var ret []OracleRACDatabaseInstance
		return ret
	}
	return o.Instances
}

// GetInstancesOk returns a tuple with the Instances field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VCDB) GetInstancesOk() ([]OracleRACDatabaseInstance, bool) {
	if o == nil || IsNil(o.Instances) {
		return nil, false
	}
	return o.Instances, true
}

// HasInstances returns a boolean if a field has been set.
func (o *VCDB) HasInstances() bool {
	if o != nil && !IsNil(o.Instances) {
		return true
	}

	return false
}

// SetInstances gets a reference to the given []OracleRACDatabaseInstance and assigns it to the Instances field.
func (o *VCDB) SetInstances(v []OracleRACDatabaseInstance) {
	o.Instances = v
}

// GetOracleServices returns the OracleServices field value if set, zero value otherwise.
func (o *VCDB) GetOracleServices() []OracleService {
	if o == nil || IsNil(o.OracleServices) {
		var ret []OracleService
		return ret
	}
	return o.OracleServices
}

// GetOracleServicesOk returns a tuple with the OracleServices field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VCDB) GetOracleServicesOk() ([]OracleService, bool) {
	if o == nil || IsNil(o.OracleServices) {
		return nil, false
	}
	return o.OracleServices, true
}

// HasOracleServices returns a boolean if a field has been set.
func (o *VCDB) HasOracleServices() bool {
	if o != nil && !IsNil(o.OracleServices) {
		return true
	}

	return false
}

// SetOracleServices gets a reference to the given []OracleService and assigns it to the OracleServices field.
func (o *VCDB) SetOracleServices(v []OracleService) {
	o.OracleServices = v
}

// GetRepositoryId returns the RepositoryId field value if set, zero value otherwise.
func (o *VCDB) GetRepositoryId() string {
	if o == nil || IsNil(o.RepositoryId) {
		var ret string
		return ret
	}
	return *o.RepositoryId
}

// GetRepositoryIdOk returns a tuple with the RepositoryId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VCDB) GetRepositoryIdOk() (*string, bool) {
	if o == nil || IsNil(o.RepositoryId) {
		return nil, false
	}
	return o.RepositoryId, true
}

// HasRepositoryId returns a boolean if a field has been set.
func (o *VCDB) HasRepositoryId() bool {
	if o != nil && !IsNil(o.RepositoryId) {
		return true
	}

	return false
}

// SetRepositoryId gets a reference to the given string and assigns it to the RepositoryId field.
func (o *VCDB) SetRepositoryId(v string) {
	o.RepositoryId = &v
}

func (o VCDB) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VCDB) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if o.Name.IsSet() {
		toSerialize["name"] = o.Name.Get()
	}
	if !IsNil(o.DatabaseName) {
		toSerialize["database_name"] = o.DatabaseName
	}
	if o.NamespaceId.IsSet() {
		toSerialize["namespace_id"] = o.NamespaceId.Get()
	}
	if o.NamespaceName.IsSet() {
		toSerialize["namespace_name"] = o.NamespaceName.Get()
	}
	if o.IsReplica.IsSet() {
		toSerialize["is_replica"] = o.IsReplica.Get()
	}
	if o.DatabaseVersion.IsSet() {
		toSerialize["database_version"] = o.DatabaseVersion.Get()
	}
	if o.EnvironmentId.IsSet() {
		toSerialize["environment_id"] = o.EnvironmentId.Get()
	}
	if o.Size.IsSet() {
		toSerialize["size"] = o.Size.Get()
	}
	if !IsNil(o.EngineId) {
		toSerialize["engine_id"] = o.EngineId
	}
	if o.Status.IsSet() {
		toSerialize["status"] = o.Status.Get()
	}
	if !IsNil(o.ParentId) {
		toSerialize["parent_id"] = o.ParentId
	}
	if o.CreationDate.IsSet() {
		toSerialize["creation_date"] = o.CreationDate.Get()
	}
	if o.GroupName.IsSet() {
		toSerialize["group_name"] = o.GroupName.Get()
	}
	if !IsNil(o.Enabled) {
		toSerialize["enabled"] = o.Enabled
	}
	if o.ContentType.IsSet() {
		toSerialize["content_type"] = o.ContentType.Get()
	}
	if !IsNil(o.VcdbRestart) {
		toSerialize["vcdb_restart"] = o.VcdbRestart
	}
	if !IsNil(o.Tags) {
		toSerialize["tags"] = o.Tags
	}
	if !IsNil(o.InvokeDatapatch) {
		toSerialize["invoke_datapatch"] = o.InvokeDatapatch
	}
	if !IsNil(o.NodeListeners) {
		toSerialize["node_listeners"] = o.NodeListeners
	}
	if !IsNil(o.InstanceName) {
		toSerialize["instance_name"] = o.InstanceName
	}
	if !IsNil(o.InstanceNumber) {
		toSerialize["instance_number"] = o.InstanceNumber
	}
	if !IsNil(o.Instances) {
		toSerialize["instances"] = o.Instances
	}
	if !IsNil(o.OracleServices) {
		toSerialize["oracle_services"] = o.OracleServices
	}
	if !IsNil(o.RepositoryId) {
		toSerialize["repository_id"] = o.RepositoryId
	}
	return toSerialize, nil
}

type NullableVCDB struct {
	value *VCDB
	isSet bool
}

func (v NullableVCDB) Get() *VCDB {
	return v.value
}

func (v *NullableVCDB) Set(val *VCDB) {
	v.value = val
	v.isSet = true
}

func (v NullableVCDB) IsSet() bool {
	return v.isSet
}

func (v *NullableVCDB) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVCDB(val *VCDB) *NullableVCDB {
	return &NullableVCDB{value: val, isSet: true}
}

func (v NullableVCDB) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVCDB) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


