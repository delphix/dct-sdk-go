/*
Delphix DCT API

Delphix DCT API

API version: 3.17.0
Contact: support@delphix.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package delphix_dct_api

import (
	"encoding/json"
)

// checks if the OracleRacCustomEnvVar type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OracleRacCustomEnvVar{}

// OracleRacCustomEnvVar struct for OracleRacCustomEnvVar
type OracleRacCustomEnvVar struct {
	NodeId *string `json:"node_id,omitempty"`
	Name *string `json:"name,omitempty"`
	Value *string `json:"value,omitempty"`
}

// NewOracleRacCustomEnvVar instantiates a new OracleRacCustomEnvVar object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOracleRacCustomEnvVar() *OracleRacCustomEnvVar {
	this := OracleRacCustomEnvVar{}
	return &this
}

// NewOracleRacCustomEnvVarWithDefaults instantiates a new OracleRacCustomEnvVar object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOracleRacCustomEnvVarWithDefaults() *OracleRacCustomEnvVar {
	this := OracleRacCustomEnvVar{}
	return &this
}

// GetNodeId returns the NodeId field value if set, zero value otherwise.
func (o *OracleRacCustomEnvVar) GetNodeId() string {
	if o == nil || IsNil(o.NodeId) {
		var ret string
		return ret
	}
	return *o.NodeId
}

// GetNodeIdOk returns a tuple with the NodeId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OracleRacCustomEnvVar) GetNodeIdOk() (*string, bool) {
	if o == nil || IsNil(o.NodeId) {
		return nil, false
	}
	return o.NodeId, true
}

// HasNodeId returns a boolean if a field has been set.
func (o *OracleRacCustomEnvVar) HasNodeId() bool {
	if o != nil && !IsNil(o.NodeId) {
		return true
	}

	return false
}

// SetNodeId gets a reference to the given string and assigns it to the NodeId field.
func (o *OracleRacCustomEnvVar) SetNodeId(v string) {
	o.NodeId = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *OracleRacCustomEnvVar) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OracleRacCustomEnvVar) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *OracleRacCustomEnvVar) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *OracleRacCustomEnvVar) SetName(v string) {
	o.Name = &v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *OracleRacCustomEnvVar) GetValue() string {
	if o == nil || IsNil(o.Value) {
		var ret string
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OracleRacCustomEnvVar) GetValueOk() (*string, bool) {
	if o == nil || IsNil(o.Value) {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *OracleRacCustomEnvVar) HasValue() bool {
	if o != nil && !IsNil(o.Value) {
		return true
	}

	return false
}

// SetValue gets a reference to the given string and assigns it to the Value field.
func (o *OracleRacCustomEnvVar) SetValue(v string) {
	o.Value = &v
}

func (o OracleRacCustomEnvVar) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OracleRacCustomEnvVar) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.NodeId) {
		toSerialize["node_id"] = o.NodeId
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Value) {
		toSerialize["value"] = o.Value
	}
	return toSerialize, nil
}

type NullableOracleRacCustomEnvVar struct {
	value *OracleRacCustomEnvVar
	isSet bool
}

func (v NullableOracleRacCustomEnvVar) Get() *OracleRacCustomEnvVar {
	return v.value
}

func (v *NullableOracleRacCustomEnvVar) Set(val *OracleRacCustomEnvVar) {
	v.value = val
	v.isSet = true
}

func (v NullableOracleRacCustomEnvVar) IsSet() bool {
	return v.isSet
}

func (v *NullableOracleRacCustomEnvVar) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOracleRacCustomEnvVar(val *OracleRacCustomEnvVar) *NullableOracleRacCustomEnvVar {
	return &NullableOracleRacCustomEnvVar{value: val, isSet: true}
}

func (v NullableOracleRacCustomEnvVar) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOracleRacCustomEnvVar) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


