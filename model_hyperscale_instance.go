/*
Delphix DCT API

Delphix DCT API

API version: 3.18.0
Contact: support@delphix.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package delphix_dct_api

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the HyperscaleInstance type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HyperscaleInstance{}

// HyperscaleInstance A registered Hyperscale instance's connection and authentication settings.
type HyperscaleInstance struct {
	// The Hyperscale instance entity ID.
	Id *string `json:"id,omitempty"`
	// The name of this hyperscale instance.
	Name string `json:"name"`
	// The hostname of this hyperscale instance.
	Hostname string `json:"hostname"`
	DataType *HyperscaleDataTypeEnum `json:"data_type,omitempty"`
	// The date this hyperscale instance was registered.
	CreationDate *time.Time `json:"creation_date,omitempty"`
	// The tags to be created for this hyperscale instance.
	Tags []Tag `json:"tags,omitempty"`
	// API key to connect to the hyperscale instance.
	ApiKey string `json:"api_key"`
	// Allow connections to the hyperscale instance over HTTPs without validating the TLS certificate. Even though the connection to the hyperscale instance might be performed over HTTPs, setting this property eliminates the protection against a man-in-the-middle attach for connections to this engine. Instead, consider creating a truststore with a Certificate Authority to validate the hyperscale instance's certificate, and set the truststore_filename property. 
	InsecureSsl *bool `json:"insecure_ssl,omitempty"`
	// Ignore validation of the name associated to the TLS certificate when connecting to the hyperscale instance over HTTPs. Setting this value must only be done if the TLS certificate of the hyperscale instance does not match the hostname, and the TLS configuration of the hyperscale instance cannot be fixed. Setting this property reduces the protection against a man-in-the-middle attack for connections to this hyperscale instance. This is ignored if insecure_ssl is set. 
	UnsafeSslHostnameCheck *bool `json:"unsafe_ssl_hostname_check,omitempty"`
	// File name of a truststore which can be used to validate the TLS certificate of the hyperscale instance. The truststore must be available at /etc/config/certs/<truststore_filename> 
	TruststoreFilename NullableString `json:"truststore_filename,omitempty" validate:"regexp=^[a-zA-Z0-9_\\\\.]+$"`
	// Password to read the truststore. 
	TruststorePassword NullableString `json:"truststore_password,omitempty"`
	// The status of this hyperscale instance.
	Status NullableString `json:"status,omitempty"`
	// The status of the connection to the hyperscale instance.
	ConnectionStatus NullableString `json:"connection_status,omitempty"`
	// If set, details about the status of the connection to the hyperscale instance.
	ConnectionStatusDetails *string `json:"connection_status_details,omitempty"`
}

type _HyperscaleInstance HyperscaleInstance

// NewHyperscaleInstance instantiates a new HyperscaleInstance object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHyperscaleInstance(name string, hostname string, apiKey string) *HyperscaleInstance {
	this := HyperscaleInstance{}
	this.Name = name
	this.Hostname = hostname
	this.ApiKey = apiKey
	var insecureSsl bool = false
	this.InsecureSsl = &insecureSsl
	var unsafeSslHostnameCheck bool = false
	this.UnsafeSslHostnameCheck = &unsafeSslHostnameCheck
	return &this
}

// NewHyperscaleInstanceWithDefaults instantiates a new HyperscaleInstance object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHyperscaleInstanceWithDefaults() *HyperscaleInstance {
	this := HyperscaleInstance{}
	var insecureSsl bool = false
	this.InsecureSsl = &insecureSsl
	var unsafeSslHostnameCheck bool = false
	this.UnsafeSslHostnameCheck = &unsafeSslHostnameCheck
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *HyperscaleInstance) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HyperscaleInstance) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *HyperscaleInstance) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *HyperscaleInstance) SetId(v string) {
	o.Id = &v
}

// GetName returns the Name field value
func (o *HyperscaleInstance) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *HyperscaleInstance) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *HyperscaleInstance) SetName(v string) {
	o.Name = v
}

// GetHostname returns the Hostname field value
func (o *HyperscaleInstance) GetHostname() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Hostname
}

// GetHostnameOk returns a tuple with the Hostname field value
// and a boolean to check if the value has been set.
func (o *HyperscaleInstance) GetHostnameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Hostname, true
}

// SetHostname sets field value
func (o *HyperscaleInstance) SetHostname(v string) {
	o.Hostname = v
}

// GetDataType returns the DataType field value if set, zero value otherwise.
func (o *HyperscaleInstance) GetDataType() HyperscaleDataTypeEnum {
	if o == nil || IsNil(o.DataType) {
		var ret HyperscaleDataTypeEnum
		return ret
	}
	return *o.DataType
}

// GetDataTypeOk returns a tuple with the DataType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HyperscaleInstance) GetDataTypeOk() (*HyperscaleDataTypeEnum, bool) {
	if o == nil || IsNil(o.DataType) {
		return nil, false
	}
	return o.DataType, true
}

// HasDataType returns a boolean if a field has been set.
func (o *HyperscaleInstance) HasDataType() bool {
	if o != nil && !IsNil(o.DataType) {
		return true
	}

	return false
}

// SetDataType gets a reference to the given HyperscaleDataTypeEnum and assigns it to the DataType field.
func (o *HyperscaleInstance) SetDataType(v HyperscaleDataTypeEnum) {
	o.DataType = &v
}

// GetCreationDate returns the CreationDate field value if set, zero value otherwise.
func (o *HyperscaleInstance) GetCreationDate() time.Time {
	if o == nil || IsNil(o.CreationDate) {
		var ret time.Time
		return ret
	}
	return *o.CreationDate
}

// GetCreationDateOk returns a tuple with the CreationDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HyperscaleInstance) GetCreationDateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CreationDate) {
		return nil, false
	}
	return o.CreationDate, true
}

// HasCreationDate returns a boolean if a field has been set.
func (o *HyperscaleInstance) HasCreationDate() bool {
	if o != nil && !IsNil(o.CreationDate) {
		return true
	}

	return false
}

// SetCreationDate gets a reference to the given time.Time and assigns it to the CreationDate field.
func (o *HyperscaleInstance) SetCreationDate(v time.Time) {
	o.CreationDate = &v
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *HyperscaleInstance) GetTags() []Tag {
	if o == nil || IsNil(o.Tags) {
		var ret []Tag
		return ret
	}
	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HyperscaleInstance) GetTagsOk() ([]Tag, bool) {
	if o == nil || IsNil(o.Tags) {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *HyperscaleInstance) HasTags() bool {
	if o != nil && !IsNil(o.Tags) {
		return true
	}

	return false
}

// SetTags gets a reference to the given []Tag and assigns it to the Tags field.
func (o *HyperscaleInstance) SetTags(v []Tag) {
	o.Tags = v
}

// GetApiKey returns the ApiKey field value
func (o *HyperscaleInstance) GetApiKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ApiKey
}

// GetApiKeyOk returns a tuple with the ApiKey field value
// and a boolean to check if the value has been set.
func (o *HyperscaleInstance) GetApiKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ApiKey, true
}

// SetApiKey sets field value
func (o *HyperscaleInstance) SetApiKey(v string) {
	o.ApiKey = v
}

// GetInsecureSsl returns the InsecureSsl field value if set, zero value otherwise.
func (o *HyperscaleInstance) GetInsecureSsl() bool {
	if o == nil || IsNil(o.InsecureSsl) {
		var ret bool
		return ret
	}
	return *o.InsecureSsl
}

// GetInsecureSslOk returns a tuple with the InsecureSsl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HyperscaleInstance) GetInsecureSslOk() (*bool, bool) {
	if o == nil || IsNil(o.InsecureSsl) {
		return nil, false
	}
	return o.InsecureSsl, true
}

// HasInsecureSsl returns a boolean if a field has been set.
func (o *HyperscaleInstance) HasInsecureSsl() bool {
	if o != nil && !IsNil(o.InsecureSsl) {
		return true
	}

	return false
}

// SetInsecureSsl gets a reference to the given bool and assigns it to the InsecureSsl field.
func (o *HyperscaleInstance) SetInsecureSsl(v bool) {
	o.InsecureSsl = &v
}

// GetUnsafeSslHostnameCheck returns the UnsafeSslHostnameCheck field value if set, zero value otherwise.
func (o *HyperscaleInstance) GetUnsafeSslHostnameCheck() bool {
	if o == nil || IsNil(o.UnsafeSslHostnameCheck) {
		var ret bool
		return ret
	}
	return *o.UnsafeSslHostnameCheck
}

// GetUnsafeSslHostnameCheckOk returns a tuple with the UnsafeSslHostnameCheck field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HyperscaleInstance) GetUnsafeSslHostnameCheckOk() (*bool, bool) {
	if o == nil || IsNil(o.UnsafeSslHostnameCheck) {
		return nil, false
	}
	return o.UnsafeSslHostnameCheck, true
}

// HasUnsafeSslHostnameCheck returns a boolean if a field has been set.
func (o *HyperscaleInstance) HasUnsafeSslHostnameCheck() bool {
	if o != nil && !IsNil(o.UnsafeSslHostnameCheck) {
		return true
	}

	return false
}

// SetUnsafeSslHostnameCheck gets a reference to the given bool and assigns it to the UnsafeSslHostnameCheck field.
func (o *HyperscaleInstance) SetUnsafeSslHostnameCheck(v bool) {
	o.UnsafeSslHostnameCheck = &v
}

// GetTruststoreFilename returns the TruststoreFilename field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HyperscaleInstance) GetTruststoreFilename() string {
	if o == nil || IsNil(o.TruststoreFilename.Get()) {
		var ret string
		return ret
	}
	return *o.TruststoreFilename.Get()
}

// GetTruststoreFilenameOk returns a tuple with the TruststoreFilename field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HyperscaleInstance) GetTruststoreFilenameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.TruststoreFilename.Get(), o.TruststoreFilename.IsSet()
}

// HasTruststoreFilename returns a boolean if a field has been set.
func (o *HyperscaleInstance) HasTruststoreFilename() bool {
	if o != nil && o.TruststoreFilename.IsSet() {
		return true
	}

	return false
}

// SetTruststoreFilename gets a reference to the given NullableString and assigns it to the TruststoreFilename field.
func (o *HyperscaleInstance) SetTruststoreFilename(v string) {
	o.TruststoreFilename.Set(&v)
}
// SetTruststoreFilenameNil sets the value for TruststoreFilename to be an explicit nil
func (o *HyperscaleInstance) SetTruststoreFilenameNil() {
	o.TruststoreFilename.Set(nil)
}

// UnsetTruststoreFilename ensures that no value is present for TruststoreFilename, not even an explicit nil
func (o *HyperscaleInstance) UnsetTruststoreFilename() {
	o.TruststoreFilename.Unset()
}

// GetTruststorePassword returns the TruststorePassword field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HyperscaleInstance) GetTruststorePassword() string {
	if o == nil || IsNil(o.TruststorePassword.Get()) {
		var ret string
		return ret
	}
	return *o.TruststorePassword.Get()
}

// GetTruststorePasswordOk returns a tuple with the TruststorePassword field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HyperscaleInstance) GetTruststorePasswordOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.TruststorePassword.Get(), o.TruststorePassword.IsSet()
}

// HasTruststorePassword returns a boolean if a field has been set.
func (o *HyperscaleInstance) HasTruststorePassword() bool {
	if o != nil && o.TruststorePassword.IsSet() {
		return true
	}

	return false
}

// SetTruststorePassword gets a reference to the given NullableString and assigns it to the TruststorePassword field.
func (o *HyperscaleInstance) SetTruststorePassword(v string) {
	o.TruststorePassword.Set(&v)
}
// SetTruststorePasswordNil sets the value for TruststorePassword to be an explicit nil
func (o *HyperscaleInstance) SetTruststorePasswordNil() {
	o.TruststorePassword.Set(nil)
}

// UnsetTruststorePassword ensures that no value is present for TruststorePassword, not even an explicit nil
func (o *HyperscaleInstance) UnsetTruststorePassword() {
	o.TruststorePassword.Unset()
}

// GetStatus returns the Status field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HyperscaleInstance) GetStatus() string {
	if o == nil || IsNil(o.Status.Get()) {
		var ret string
		return ret
	}
	return *o.Status.Get()
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HyperscaleInstance) GetStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Status.Get(), o.Status.IsSet()
}

// HasStatus returns a boolean if a field has been set.
func (o *HyperscaleInstance) HasStatus() bool {
	if o != nil && o.Status.IsSet() {
		return true
	}

	return false
}

// SetStatus gets a reference to the given NullableString and assigns it to the Status field.
func (o *HyperscaleInstance) SetStatus(v string) {
	o.Status.Set(&v)
}
// SetStatusNil sets the value for Status to be an explicit nil
func (o *HyperscaleInstance) SetStatusNil() {
	o.Status.Set(nil)
}

// UnsetStatus ensures that no value is present for Status, not even an explicit nil
func (o *HyperscaleInstance) UnsetStatus() {
	o.Status.Unset()
}

// GetConnectionStatus returns the ConnectionStatus field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HyperscaleInstance) GetConnectionStatus() string {
	if o == nil || IsNil(o.ConnectionStatus.Get()) {
		var ret string
		return ret
	}
	return *o.ConnectionStatus.Get()
}

// GetConnectionStatusOk returns a tuple with the ConnectionStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HyperscaleInstance) GetConnectionStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ConnectionStatus.Get(), o.ConnectionStatus.IsSet()
}

// HasConnectionStatus returns a boolean if a field has been set.
func (o *HyperscaleInstance) HasConnectionStatus() bool {
	if o != nil && o.ConnectionStatus.IsSet() {
		return true
	}

	return false
}

// SetConnectionStatus gets a reference to the given NullableString and assigns it to the ConnectionStatus field.
func (o *HyperscaleInstance) SetConnectionStatus(v string) {
	o.ConnectionStatus.Set(&v)
}
// SetConnectionStatusNil sets the value for ConnectionStatus to be an explicit nil
func (o *HyperscaleInstance) SetConnectionStatusNil() {
	o.ConnectionStatus.Set(nil)
}

// UnsetConnectionStatus ensures that no value is present for ConnectionStatus, not even an explicit nil
func (o *HyperscaleInstance) UnsetConnectionStatus() {
	o.ConnectionStatus.Unset()
}

// GetConnectionStatusDetails returns the ConnectionStatusDetails field value if set, zero value otherwise.
func (o *HyperscaleInstance) GetConnectionStatusDetails() string {
	if o == nil || IsNil(o.ConnectionStatusDetails) {
		var ret string
		return ret
	}
	return *o.ConnectionStatusDetails
}

// GetConnectionStatusDetailsOk returns a tuple with the ConnectionStatusDetails field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HyperscaleInstance) GetConnectionStatusDetailsOk() (*string, bool) {
	if o == nil || IsNil(o.ConnectionStatusDetails) {
		return nil, false
	}
	return o.ConnectionStatusDetails, true
}

// HasConnectionStatusDetails returns a boolean if a field has been set.
func (o *HyperscaleInstance) HasConnectionStatusDetails() bool {
	if o != nil && !IsNil(o.ConnectionStatusDetails) {
		return true
	}

	return false
}

// SetConnectionStatusDetails gets a reference to the given string and assigns it to the ConnectionStatusDetails field.
func (o *HyperscaleInstance) SetConnectionStatusDetails(v string) {
	o.ConnectionStatusDetails = &v
}

func (o HyperscaleInstance) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HyperscaleInstance) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	toSerialize["name"] = o.Name
	toSerialize["hostname"] = o.Hostname
	if !IsNil(o.DataType) {
		toSerialize["data_type"] = o.DataType
	}
	if !IsNil(o.CreationDate) {
		toSerialize["creation_date"] = o.CreationDate
	}
	if !IsNil(o.Tags) {
		toSerialize["tags"] = o.Tags
	}
	toSerialize["api_key"] = o.ApiKey
	if !IsNil(o.InsecureSsl) {
		toSerialize["insecure_ssl"] = o.InsecureSsl
	}
	if !IsNil(o.UnsafeSslHostnameCheck) {
		toSerialize["unsafe_ssl_hostname_check"] = o.UnsafeSslHostnameCheck
	}
	if o.TruststoreFilename.IsSet() {
		toSerialize["truststore_filename"] = o.TruststoreFilename.Get()
	}
	if o.TruststorePassword.IsSet() {
		toSerialize["truststore_password"] = o.TruststorePassword.Get()
	}
	if o.Status.IsSet() {
		toSerialize["status"] = o.Status.Get()
	}
	if o.ConnectionStatus.IsSet() {
		toSerialize["connection_status"] = o.ConnectionStatus.Get()
	}
	if !IsNil(o.ConnectionStatusDetails) {
		toSerialize["connection_status_details"] = o.ConnectionStatusDetails
	}
	return toSerialize, nil
}

func (o *HyperscaleInstance) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"hostname",
		"api_key",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varHyperscaleInstance := _HyperscaleInstance{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varHyperscaleInstance)

	if err != nil {
		return err
	}

	*o = HyperscaleInstance(varHyperscaleInstance)

	return err
}

type NullableHyperscaleInstance struct {
	value *HyperscaleInstance
	isSet bool
}

func (v NullableHyperscaleInstance) Get() *HyperscaleInstance {
	return v.value
}

func (v *NullableHyperscaleInstance) Set(val *HyperscaleInstance) {
	v.value = val
	v.isSet = true
}

func (v NullableHyperscaleInstance) IsSet() bool {
	return v.isSet
}

func (v *NullableHyperscaleInstance) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHyperscaleInstance(val *HyperscaleInstance) *NullableHyperscaleInstance {
	return &NullableHyperscaleInstance{value: val, isSet: true}
}

func (v NullableHyperscaleInstance) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHyperscaleInstance) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


