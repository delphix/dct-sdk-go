/*
Delphix DCT API

Delphix DCT API

API version: 3.18.0
Contact: support@delphix.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package delphix_dct_api

import (
	"encoding/json"
	"time"
)

// checks if the TimeflowRange type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TimeflowRange{}

// TimeflowRange Represents a time range within a timeflow.
type TimeflowRange struct {
	// The starting location of this range.
	StartPointLocation *string `json:"start_point_location,omitempty"`
	// The starting timestamp of this range.
	StartPointTimestamp *time.Time `json:"start_point_timestamp,omitempty"`
	// The ending location of this range.
	EndPointLocation *string `json:"end_point_location,omitempty"`
	// The ending timestamp of this range.
	EndPointTimestamp *time.Time `json:"end_point_timestamp,omitempty"`
	// A reference to the timeflow of this range.
	TimeflowId *string `json:"timeflow_id,omitempty"`
	// Whether or not this range is provisionable.
	Provisionable *bool `json:"provisionable,omitempty"`
}

// NewTimeflowRange instantiates a new TimeflowRange object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTimeflowRange() *TimeflowRange {
	this := TimeflowRange{}
	return &this
}

// NewTimeflowRangeWithDefaults instantiates a new TimeflowRange object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTimeflowRangeWithDefaults() *TimeflowRange {
	this := TimeflowRange{}
	return &this
}

// GetStartPointLocation returns the StartPointLocation field value if set, zero value otherwise.
func (o *TimeflowRange) GetStartPointLocation() string {
	if o == nil || IsNil(o.StartPointLocation) {
		var ret string
		return ret
	}
	return *o.StartPointLocation
}

// GetStartPointLocationOk returns a tuple with the StartPointLocation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TimeflowRange) GetStartPointLocationOk() (*string, bool) {
	if o == nil || IsNil(o.StartPointLocation) {
		return nil, false
	}
	return o.StartPointLocation, true
}

// HasStartPointLocation returns a boolean if a field has been set.
func (o *TimeflowRange) HasStartPointLocation() bool {
	if o != nil && !IsNil(o.StartPointLocation) {
		return true
	}

	return false
}

// SetStartPointLocation gets a reference to the given string and assigns it to the StartPointLocation field.
func (o *TimeflowRange) SetStartPointLocation(v string) {
	o.StartPointLocation = &v
}

// GetStartPointTimestamp returns the StartPointTimestamp field value if set, zero value otherwise.
func (o *TimeflowRange) GetStartPointTimestamp() time.Time {
	if o == nil || IsNil(o.StartPointTimestamp) {
		var ret time.Time
		return ret
	}
	return *o.StartPointTimestamp
}

// GetStartPointTimestampOk returns a tuple with the StartPointTimestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TimeflowRange) GetStartPointTimestampOk() (*time.Time, bool) {
	if o == nil || IsNil(o.StartPointTimestamp) {
		return nil, false
	}
	return o.StartPointTimestamp, true
}

// HasStartPointTimestamp returns a boolean if a field has been set.
func (o *TimeflowRange) HasStartPointTimestamp() bool {
	if o != nil && !IsNil(o.StartPointTimestamp) {
		return true
	}

	return false
}

// SetStartPointTimestamp gets a reference to the given time.Time and assigns it to the StartPointTimestamp field.
func (o *TimeflowRange) SetStartPointTimestamp(v time.Time) {
	o.StartPointTimestamp = &v
}

// GetEndPointLocation returns the EndPointLocation field value if set, zero value otherwise.
func (o *TimeflowRange) GetEndPointLocation() string {
	if o == nil || IsNil(o.EndPointLocation) {
		var ret string
		return ret
	}
	return *o.EndPointLocation
}

// GetEndPointLocationOk returns a tuple with the EndPointLocation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TimeflowRange) GetEndPointLocationOk() (*string, bool) {
	if o == nil || IsNil(o.EndPointLocation) {
		return nil, false
	}
	return o.EndPointLocation, true
}

// HasEndPointLocation returns a boolean if a field has been set.
func (o *TimeflowRange) HasEndPointLocation() bool {
	if o != nil && !IsNil(o.EndPointLocation) {
		return true
	}

	return false
}

// SetEndPointLocation gets a reference to the given string and assigns it to the EndPointLocation field.
func (o *TimeflowRange) SetEndPointLocation(v string) {
	o.EndPointLocation = &v
}

// GetEndPointTimestamp returns the EndPointTimestamp field value if set, zero value otherwise.
func (o *TimeflowRange) GetEndPointTimestamp() time.Time {
	if o == nil || IsNil(o.EndPointTimestamp) {
		var ret time.Time
		return ret
	}
	return *o.EndPointTimestamp
}

// GetEndPointTimestampOk returns a tuple with the EndPointTimestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TimeflowRange) GetEndPointTimestampOk() (*time.Time, bool) {
	if o == nil || IsNil(o.EndPointTimestamp) {
		return nil, false
	}
	return o.EndPointTimestamp, true
}

// HasEndPointTimestamp returns a boolean if a field has been set.
func (o *TimeflowRange) HasEndPointTimestamp() bool {
	if o != nil && !IsNil(o.EndPointTimestamp) {
		return true
	}

	return false
}

// SetEndPointTimestamp gets a reference to the given time.Time and assigns it to the EndPointTimestamp field.
func (o *TimeflowRange) SetEndPointTimestamp(v time.Time) {
	o.EndPointTimestamp = &v
}

// GetTimeflowId returns the TimeflowId field value if set, zero value otherwise.
func (o *TimeflowRange) GetTimeflowId() string {
	if o == nil || IsNil(o.TimeflowId) {
		var ret string
		return ret
	}
	return *o.TimeflowId
}

// GetTimeflowIdOk returns a tuple with the TimeflowId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TimeflowRange) GetTimeflowIdOk() (*string, bool) {
	if o == nil || IsNil(o.TimeflowId) {
		return nil, false
	}
	return o.TimeflowId, true
}

// HasTimeflowId returns a boolean if a field has been set.
func (o *TimeflowRange) HasTimeflowId() bool {
	if o != nil && !IsNil(o.TimeflowId) {
		return true
	}

	return false
}

// SetTimeflowId gets a reference to the given string and assigns it to the TimeflowId field.
func (o *TimeflowRange) SetTimeflowId(v string) {
	o.TimeflowId = &v
}

// GetProvisionable returns the Provisionable field value if set, zero value otherwise.
func (o *TimeflowRange) GetProvisionable() bool {
	if o == nil || IsNil(o.Provisionable) {
		var ret bool
		return ret
	}
	return *o.Provisionable
}

// GetProvisionableOk returns a tuple with the Provisionable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TimeflowRange) GetProvisionableOk() (*bool, bool) {
	if o == nil || IsNil(o.Provisionable) {
		return nil, false
	}
	return o.Provisionable, true
}

// HasProvisionable returns a boolean if a field has been set.
func (o *TimeflowRange) HasProvisionable() bool {
	if o != nil && !IsNil(o.Provisionable) {
		return true
	}

	return false
}

// SetProvisionable gets a reference to the given bool and assigns it to the Provisionable field.
func (o *TimeflowRange) SetProvisionable(v bool) {
	o.Provisionable = &v
}

func (o TimeflowRange) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TimeflowRange) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.StartPointLocation) {
		toSerialize["start_point_location"] = o.StartPointLocation
	}
	if !IsNil(o.StartPointTimestamp) {
		toSerialize["start_point_timestamp"] = o.StartPointTimestamp
	}
	if !IsNil(o.EndPointLocation) {
		toSerialize["end_point_location"] = o.EndPointLocation
	}
	if !IsNil(o.EndPointTimestamp) {
		toSerialize["end_point_timestamp"] = o.EndPointTimestamp
	}
	if !IsNil(o.TimeflowId) {
		toSerialize["timeflow_id"] = o.TimeflowId
	}
	if !IsNil(o.Provisionable) {
		toSerialize["provisionable"] = o.Provisionable
	}
	return toSerialize, nil
}

type NullableTimeflowRange struct {
	value *TimeflowRange
	isSet bool
}

func (v NullableTimeflowRange) Get() *TimeflowRange {
	return v.value
}

func (v *NullableTimeflowRange) Set(val *TimeflowRange) {
	v.value = val
	v.isSet = true
}

func (v NullableTimeflowRange) IsSet() bool {
	return v.isSet
}

func (v *NullableTimeflowRange) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTimeflowRange(val *TimeflowRange) *NullableTimeflowRange {
	return &NullableTimeflowRange{value: val, isSet: true}
}

func (v NullableTimeflowRange) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTimeflowRange) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


