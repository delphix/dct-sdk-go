/*
Delphix DCT API

Delphix DCT API

API version: 3.18.0
Contact: support@delphix.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package delphix_dct_api

import (
	"encoding/json"
)

// checks if the OracleService type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OracleService{}

// OracleService struct for OracleService
type OracleService struct {
	// Represents whether this jdbc connection string is auto discovered or not.
	Discovered *bool `json:"discovered,omitempty"`
	// The jdbc connection string used to connect with the database.
	JdbcConnectionString *string `json:"jdbc_connection_string,omitempty"`
}

// NewOracleService instantiates a new OracleService object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOracleService() *OracleService {
	this := OracleService{}
	return &this
}

// NewOracleServiceWithDefaults instantiates a new OracleService object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOracleServiceWithDefaults() *OracleService {
	this := OracleService{}
	return &this
}

// GetDiscovered returns the Discovered field value if set, zero value otherwise.
func (o *OracleService) GetDiscovered() bool {
	if o == nil || IsNil(o.Discovered) {
		var ret bool
		return ret
	}
	return *o.Discovered
}

// GetDiscoveredOk returns a tuple with the Discovered field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OracleService) GetDiscoveredOk() (*bool, bool) {
	if o == nil || IsNil(o.Discovered) {
		return nil, false
	}
	return o.Discovered, true
}

// HasDiscovered returns a boolean if a field has been set.
func (o *OracleService) HasDiscovered() bool {
	if o != nil && !IsNil(o.Discovered) {
		return true
	}

	return false
}

// SetDiscovered gets a reference to the given bool and assigns it to the Discovered field.
func (o *OracleService) SetDiscovered(v bool) {
	o.Discovered = &v
}

// GetJdbcConnectionString returns the JdbcConnectionString field value if set, zero value otherwise.
func (o *OracleService) GetJdbcConnectionString() string {
	if o == nil || IsNil(o.JdbcConnectionString) {
		var ret string
		return ret
	}
	return *o.JdbcConnectionString
}

// GetJdbcConnectionStringOk returns a tuple with the JdbcConnectionString field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OracleService) GetJdbcConnectionStringOk() (*string, bool) {
	if o == nil || IsNil(o.JdbcConnectionString) {
		return nil, false
	}
	return o.JdbcConnectionString, true
}

// HasJdbcConnectionString returns a boolean if a field has been set.
func (o *OracleService) HasJdbcConnectionString() bool {
	if o != nil && !IsNil(o.JdbcConnectionString) {
		return true
	}

	return false
}

// SetJdbcConnectionString gets a reference to the given string and assigns it to the JdbcConnectionString field.
func (o *OracleService) SetJdbcConnectionString(v string) {
	o.JdbcConnectionString = &v
}

func (o OracleService) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OracleService) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Discovered) {
		toSerialize["discovered"] = o.Discovered
	}
	if !IsNil(o.JdbcConnectionString) {
		toSerialize["jdbc_connection_string"] = o.JdbcConnectionString
	}
	return toSerialize, nil
}

type NullableOracleService struct {
	value *OracleService
	isSet bool
}

func (v NullableOracleService) Get() *OracleService {
	return v.value
}

func (v *NullableOracleService) Set(val *OracleService) {
	v.value = val
	v.isSet = true
}

func (v NullableOracleService) IsSet() bool {
	return v.isSet
}

func (v *NullableOracleService) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOracleService(val *OracleService) *NullableOracleService {
	return &NullableOracleService{value: val, isSet: true}
}

func (v NullableOracleService) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOracleService) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


