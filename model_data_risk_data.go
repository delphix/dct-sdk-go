/*
Delphix DCT API

Delphix DCT API

API version: 3.17.0
Contact: support@delphix.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package delphix_dct_api

import (
	"encoding/json"
	"time"
)

// checks if the DataRiskData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DataRiskData{}

// DataRiskData struct for DataRiskData
type DataRiskData struct {
	// The DCT id of the connector. This is an opaque string.
	ConnectorId *string `json:"connector_id,omitempty"`
	// The ID of the connector as found on the compliance engine.
	EngineConnectorId *int32 `json:"engine_connector_id,omitempty"`
	// Name of the connector.
	ConnectorName *string `json:"connector_name,omitempty"`
	// Type of the connector.
	ConnectorType *string `json:"connector_type,omitempty"`
	// Date this connector was last profiled.
	LastProfiledDate *time.Time `json:"last_profiled_date,omitempty"`
	// Date this connector last had a masking job run.
	LastMaskedDate *time.Time `json:"last_masked_date,omitempty"`
	// The entity ID of the masking engine.
	EngineId *string `json:"engine_id,omitempty"`
	// The name of the masking engine.
	EngineName *string `json:"engine_name,omitempty"`
	// If this connector has been profiled.
	IsProfiled *bool `json:"is_profiled,omitempty"`
	// If this connector has sensitive data.
	IsSensitiveData *bool `json:"is_sensitive_data,omitempty"`
	// If this connector has had a successful masking job run.
	IsMasked *bool `json:"is_masked,omitempty"`
	// If this connector has sensitive data that have not been masked.
	IsAtRisk *bool `json:"is_at_risk,omitempty"`
	// The total number of data elements of this connector.
	DataElementsTotal *int64 `json:"data_elements_total,omitempty"`
	// The number of data elements categorized as not sensitive.
	DataElementsNotSensitive *int64 `json:"data_elements_not_sensitive,omitempty"`
	// The number of sensitive data elements that have been masked.
	DataElementsSensitiveMasked *int64 `json:"data_elements_sensitive_masked,omitempty"`
	// The number of sensitive data elements that have not been masked.
	DataElementsSensitiveUnmasked *int64 `json:"data_elements_sensitive_unmasked,omitempty"`
	// The total number of records from this connector.
	RecordsTotal *int64 `json:"records_total,omitempty"`
	// The number of records found to be not sensitive.
	RecordsNotSensitive *int64 `json:"records_not_sensitive,omitempty"`
	// The number of records found to be sensitive and have been masked.
	RecordsSensitiveMasked *int64 `json:"records_sensitive_masked,omitempty"`
	// The number of records found to be sensitive and have not been masked.
	RecordsSensitiveUnmasked *int64 `json:"records_sensitive_unmasked,omitempty"`
	// The tags of the connector.
	Tags []Tag `json:"tags,omitempty"`
}

// NewDataRiskData instantiates a new DataRiskData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDataRiskData() *DataRiskData {
	this := DataRiskData{}
	return &this
}

// NewDataRiskDataWithDefaults instantiates a new DataRiskData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDataRiskDataWithDefaults() *DataRiskData {
	this := DataRiskData{}
	return &this
}

// GetConnectorId returns the ConnectorId field value if set, zero value otherwise.
func (o *DataRiskData) GetConnectorId() string {
	if o == nil || IsNil(o.ConnectorId) {
		var ret string
		return ret
	}
	return *o.ConnectorId
}

// GetConnectorIdOk returns a tuple with the ConnectorId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataRiskData) GetConnectorIdOk() (*string, bool) {
	if o == nil || IsNil(o.ConnectorId) {
		return nil, false
	}
	return o.ConnectorId, true
}

// HasConnectorId returns a boolean if a field has been set.
func (o *DataRiskData) HasConnectorId() bool {
	if o != nil && !IsNil(o.ConnectorId) {
		return true
	}

	return false
}

// SetConnectorId gets a reference to the given string and assigns it to the ConnectorId field.
func (o *DataRiskData) SetConnectorId(v string) {
	o.ConnectorId = &v
}

// GetEngineConnectorId returns the EngineConnectorId field value if set, zero value otherwise.
func (o *DataRiskData) GetEngineConnectorId() int32 {
	if o == nil || IsNil(o.EngineConnectorId) {
		var ret int32
		return ret
	}
	return *o.EngineConnectorId
}

// GetEngineConnectorIdOk returns a tuple with the EngineConnectorId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataRiskData) GetEngineConnectorIdOk() (*int32, bool) {
	if o == nil || IsNil(o.EngineConnectorId) {
		return nil, false
	}
	return o.EngineConnectorId, true
}

// HasEngineConnectorId returns a boolean if a field has been set.
func (o *DataRiskData) HasEngineConnectorId() bool {
	if o != nil && !IsNil(o.EngineConnectorId) {
		return true
	}

	return false
}

// SetEngineConnectorId gets a reference to the given int32 and assigns it to the EngineConnectorId field.
func (o *DataRiskData) SetEngineConnectorId(v int32) {
	o.EngineConnectorId = &v
}

// GetConnectorName returns the ConnectorName field value if set, zero value otherwise.
func (o *DataRiskData) GetConnectorName() string {
	if o == nil || IsNil(o.ConnectorName) {
		var ret string
		return ret
	}
	return *o.ConnectorName
}

// GetConnectorNameOk returns a tuple with the ConnectorName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataRiskData) GetConnectorNameOk() (*string, bool) {
	if o == nil || IsNil(o.ConnectorName) {
		return nil, false
	}
	return o.ConnectorName, true
}

// HasConnectorName returns a boolean if a field has been set.
func (o *DataRiskData) HasConnectorName() bool {
	if o != nil && !IsNil(o.ConnectorName) {
		return true
	}

	return false
}

// SetConnectorName gets a reference to the given string and assigns it to the ConnectorName field.
func (o *DataRiskData) SetConnectorName(v string) {
	o.ConnectorName = &v
}

// GetConnectorType returns the ConnectorType field value if set, zero value otherwise.
func (o *DataRiskData) GetConnectorType() string {
	if o == nil || IsNil(o.ConnectorType) {
		var ret string
		return ret
	}
	return *o.ConnectorType
}

// GetConnectorTypeOk returns a tuple with the ConnectorType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataRiskData) GetConnectorTypeOk() (*string, bool) {
	if o == nil || IsNil(o.ConnectorType) {
		return nil, false
	}
	return o.ConnectorType, true
}

// HasConnectorType returns a boolean if a field has been set.
func (o *DataRiskData) HasConnectorType() bool {
	if o != nil && !IsNil(o.ConnectorType) {
		return true
	}

	return false
}

// SetConnectorType gets a reference to the given string and assigns it to the ConnectorType field.
func (o *DataRiskData) SetConnectorType(v string) {
	o.ConnectorType = &v
}

// GetLastProfiledDate returns the LastProfiledDate field value if set, zero value otherwise.
func (o *DataRiskData) GetLastProfiledDate() time.Time {
	if o == nil || IsNil(o.LastProfiledDate) {
		var ret time.Time
		return ret
	}
	return *o.LastProfiledDate
}

// GetLastProfiledDateOk returns a tuple with the LastProfiledDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataRiskData) GetLastProfiledDateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.LastProfiledDate) {
		return nil, false
	}
	return o.LastProfiledDate, true
}

// HasLastProfiledDate returns a boolean if a field has been set.
func (o *DataRiskData) HasLastProfiledDate() bool {
	if o != nil && !IsNil(o.LastProfiledDate) {
		return true
	}

	return false
}

// SetLastProfiledDate gets a reference to the given time.Time and assigns it to the LastProfiledDate field.
func (o *DataRiskData) SetLastProfiledDate(v time.Time) {
	o.LastProfiledDate = &v
}

// GetLastMaskedDate returns the LastMaskedDate field value if set, zero value otherwise.
func (o *DataRiskData) GetLastMaskedDate() time.Time {
	if o == nil || IsNil(o.LastMaskedDate) {
		var ret time.Time
		return ret
	}
	return *o.LastMaskedDate
}

// GetLastMaskedDateOk returns a tuple with the LastMaskedDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataRiskData) GetLastMaskedDateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.LastMaskedDate) {
		return nil, false
	}
	return o.LastMaskedDate, true
}

// HasLastMaskedDate returns a boolean if a field has been set.
func (o *DataRiskData) HasLastMaskedDate() bool {
	if o != nil && !IsNil(o.LastMaskedDate) {
		return true
	}

	return false
}

// SetLastMaskedDate gets a reference to the given time.Time and assigns it to the LastMaskedDate field.
func (o *DataRiskData) SetLastMaskedDate(v time.Time) {
	o.LastMaskedDate = &v
}

// GetEngineId returns the EngineId field value if set, zero value otherwise.
func (o *DataRiskData) GetEngineId() string {
	if o == nil || IsNil(o.EngineId) {
		var ret string
		return ret
	}
	return *o.EngineId
}

// GetEngineIdOk returns a tuple with the EngineId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataRiskData) GetEngineIdOk() (*string, bool) {
	if o == nil || IsNil(o.EngineId) {
		return nil, false
	}
	return o.EngineId, true
}

// HasEngineId returns a boolean if a field has been set.
func (o *DataRiskData) HasEngineId() bool {
	if o != nil && !IsNil(o.EngineId) {
		return true
	}

	return false
}

// SetEngineId gets a reference to the given string and assigns it to the EngineId field.
func (o *DataRiskData) SetEngineId(v string) {
	o.EngineId = &v
}

// GetEngineName returns the EngineName field value if set, zero value otherwise.
func (o *DataRiskData) GetEngineName() string {
	if o == nil || IsNil(o.EngineName) {
		var ret string
		return ret
	}
	return *o.EngineName
}

// GetEngineNameOk returns a tuple with the EngineName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataRiskData) GetEngineNameOk() (*string, bool) {
	if o == nil || IsNil(o.EngineName) {
		return nil, false
	}
	return o.EngineName, true
}

// HasEngineName returns a boolean if a field has been set.
func (o *DataRiskData) HasEngineName() bool {
	if o != nil && !IsNil(o.EngineName) {
		return true
	}

	return false
}

// SetEngineName gets a reference to the given string and assigns it to the EngineName field.
func (o *DataRiskData) SetEngineName(v string) {
	o.EngineName = &v
}

// GetIsProfiled returns the IsProfiled field value if set, zero value otherwise.
func (o *DataRiskData) GetIsProfiled() bool {
	if o == nil || IsNil(o.IsProfiled) {
		var ret bool
		return ret
	}
	return *o.IsProfiled
}

// GetIsProfiledOk returns a tuple with the IsProfiled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataRiskData) GetIsProfiledOk() (*bool, bool) {
	if o == nil || IsNil(o.IsProfiled) {
		return nil, false
	}
	return o.IsProfiled, true
}

// HasIsProfiled returns a boolean if a field has been set.
func (o *DataRiskData) HasIsProfiled() bool {
	if o != nil && !IsNil(o.IsProfiled) {
		return true
	}

	return false
}

// SetIsProfiled gets a reference to the given bool and assigns it to the IsProfiled field.
func (o *DataRiskData) SetIsProfiled(v bool) {
	o.IsProfiled = &v
}

// GetIsSensitiveData returns the IsSensitiveData field value if set, zero value otherwise.
func (o *DataRiskData) GetIsSensitiveData() bool {
	if o == nil || IsNil(o.IsSensitiveData) {
		var ret bool
		return ret
	}
	return *o.IsSensitiveData
}

// GetIsSensitiveDataOk returns a tuple with the IsSensitiveData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataRiskData) GetIsSensitiveDataOk() (*bool, bool) {
	if o == nil || IsNil(o.IsSensitiveData) {
		return nil, false
	}
	return o.IsSensitiveData, true
}

// HasIsSensitiveData returns a boolean if a field has been set.
func (o *DataRiskData) HasIsSensitiveData() bool {
	if o != nil && !IsNil(o.IsSensitiveData) {
		return true
	}

	return false
}

// SetIsSensitiveData gets a reference to the given bool and assigns it to the IsSensitiveData field.
func (o *DataRiskData) SetIsSensitiveData(v bool) {
	o.IsSensitiveData = &v
}

// GetIsMasked returns the IsMasked field value if set, zero value otherwise.
func (o *DataRiskData) GetIsMasked() bool {
	if o == nil || IsNil(o.IsMasked) {
		var ret bool
		return ret
	}
	return *o.IsMasked
}

// GetIsMaskedOk returns a tuple with the IsMasked field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataRiskData) GetIsMaskedOk() (*bool, bool) {
	if o == nil || IsNil(o.IsMasked) {
		return nil, false
	}
	return o.IsMasked, true
}

// HasIsMasked returns a boolean if a field has been set.
func (o *DataRiskData) HasIsMasked() bool {
	if o != nil && !IsNil(o.IsMasked) {
		return true
	}

	return false
}

// SetIsMasked gets a reference to the given bool and assigns it to the IsMasked field.
func (o *DataRiskData) SetIsMasked(v bool) {
	o.IsMasked = &v
}

// GetIsAtRisk returns the IsAtRisk field value if set, zero value otherwise.
func (o *DataRiskData) GetIsAtRisk() bool {
	if o == nil || IsNil(o.IsAtRisk) {
		var ret bool
		return ret
	}
	return *o.IsAtRisk
}

// GetIsAtRiskOk returns a tuple with the IsAtRisk field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataRiskData) GetIsAtRiskOk() (*bool, bool) {
	if o == nil || IsNil(o.IsAtRisk) {
		return nil, false
	}
	return o.IsAtRisk, true
}

// HasIsAtRisk returns a boolean if a field has been set.
func (o *DataRiskData) HasIsAtRisk() bool {
	if o != nil && !IsNil(o.IsAtRisk) {
		return true
	}

	return false
}

// SetIsAtRisk gets a reference to the given bool and assigns it to the IsAtRisk field.
func (o *DataRiskData) SetIsAtRisk(v bool) {
	o.IsAtRisk = &v
}

// GetDataElementsTotal returns the DataElementsTotal field value if set, zero value otherwise.
func (o *DataRiskData) GetDataElementsTotal() int64 {
	if o == nil || IsNil(o.DataElementsTotal) {
		var ret int64
		return ret
	}
	return *o.DataElementsTotal
}

// GetDataElementsTotalOk returns a tuple with the DataElementsTotal field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataRiskData) GetDataElementsTotalOk() (*int64, bool) {
	if o == nil || IsNil(o.DataElementsTotal) {
		return nil, false
	}
	return o.DataElementsTotal, true
}

// HasDataElementsTotal returns a boolean if a field has been set.
func (o *DataRiskData) HasDataElementsTotal() bool {
	if o != nil && !IsNil(o.DataElementsTotal) {
		return true
	}

	return false
}

// SetDataElementsTotal gets a reference to the given int64 and assigns it to the DataElementsTotal field.
func (o *DataRiskData) SetDataElementsTotal(v int64) {
	o.DataElementsTotal = &v
}

// GetDataElementsNotSensitive returns the DataElementsNotSensitive field value if set, zero value otherwise.
func (o *DataRiskData) GetDataElementsNotSensitive() int64 {
	if o == nil || IsNil(o.DataElementsNotSensitive) {
		var ret int64
		return ret
	}
	return *o.DataElementsNotSensitive
}

// GetDataElementsNotSensitiveOk returns a tuple with the DataElementsNotSensitive field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataRiskData) GetDataElementsNotSensitiveOk() (*int64, bool) {
	if o == nil || IsNil(o.DataElementsNotSensitive) {
		return nil, false
	}
	return o.DataElementsNotSensitive, true
}

// HasDataElementsNotSensitive returns a boolean if a field has been set.
func (o *DataRiskData) HasDataElementsNotSensitive() bool {
	if o != nil && !IsNil(o.DataElementsNotSensitive) {
		return true
	}

	return false
}

// SetDataElementsNotSensitive gets a reference to the given int64 and assigns it to the DataElementsNotSensitive field.
func (o *DataRiskData) SetDataElementsNotSensitive(v int64) {
	o.DataElementsNotSensitive = &v
}

// GetDataElementsSensitiveMasked returns the DataElementsSensitiveMasked field value if set, zero value otherwise.
func (o *DataRiskData) GetDataElementsSensitiveMasked() int64 {
	if o == nil || IsNil(o.DataElementsSensitiveMasked) {
		var ret int64
		return ret
	}
	return *o.DataElementsSensitiveMasked
}

// GetDataElementsSensitiveMaskedOk returns a tuple with the DataElementsSensitiveMasked field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataRiskData) GetDataElementsSensitiveMaskedOk() (*int64, bool) {
	if o == nil || IsNil(o.DataElementsSensitiveMasked) {
		return nil, false
	}
	return o.DataElementsSensitiveMasked, true
}

// HasDataElementsSensitiveMasked returns a boolean if a field has been set.
func (o *DataRiskData) HasDataElementsSensitiveMasked() bool {
	if o != nil && !IsNil(o.DataElementsSensitiveMasked) {
		return true
	}

	return false
}

// SetDataElementsSensitiveMasked gets a reference to the given int64 and assigns it to the DataElementsSensitiveMasked field.
func (o *DataRiskData) SetDataElementsSensitiveMasked(v int64) {
	o.DataElementsSensitiveMasked = &v
}

// GetDataElementsSensitiveUnmasked returns the DataElementsSensitiveUnmasked field value if set, zero value otherwise.
func (o *DataRiskData) GetDataElementsSensitiveUnmasked() int64 {
	if o == nil || IsNil(o.DataElementsSensitiveUnmasked) {
		var ret int64
		return ret
	}
	return *o.DataElementsSensitiveUnmasked
}

// GetDataElementsSensitiveUnmaskedOk returns a tuple with the DataElementsSensitiveUnmasked field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataRiskData) GetDataElementsSensitiveUnmaskedOk() (*int64, bool) {
	if o == nil || IsNil(o.DataElementsSensitiveUnmasked) {
		return nil, false
	}
	return o.DataElementsSensitiveUnmasked, true
}

// HasDataElementsSensitiveUnmasked returns a boolean if a field has been set.
func (o *DataRiskData) HasDataElementsSensitiveUnmasked() bool {
	if o != nil && !IsNil(o.DataElementsSensitiveUnmasked) {
		return true
	}

	return false
}

// SetDataElementsSensitiveUnmasked gets a reference to the given int64 and assigns it to the DataElementsSensitiveUnmasked field.
func (o *DataRiskData) SetDataElementsSensitiveUnmasked(v int64) {
	o.DataElementsSensitiveUnmasked = &v
}

// GetRecordsTotal returns the RecordsTotal field value if set, zero value otherwise.
func (o *DataRiskData) GetRecordsTotal() int64 {
	if o == nil || IsNil(o.RecordsTotal) {
		var ret int64
		return ret
	}
	return *o.RecordsTotal
}

// GetRecordsTotalOk returns a tuple with the RecordsTotal field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataRiskData) GetRecordsTotalOk() (*int64, bool) {
	if o == nil || IsNil(o.RecordsTotal) {
		return nil, false
	}
	return o.RecordsTotal, true
}

// HasRecordsTotal returns a boolean if a field has been set.
func (o *DataRiskData) HasRecordsTotal() bool {
	if o != nil && !IsNil(o.RecordsTotal) {
		return true
	}

	return false
}

// SetRecordsTotal gets a reference to the given int64 and assigns it to the RecordsTotal field.
func (o *DataRiskData) SetRecordsTotal(v int64) {
	o.RecordsTotal = &v
}

// GetRecordsNotSensitive returns the RecordsNotSensitive field value if set, zero value otherwise.
func (o *DataRiskData) GetRecordsNotSensitive() int64 {
	if o == nil || IsNil(o.RecordsNotSensitive) {
		var ret int64
		return ret
	}
	return *o.RecordsNotSensitive
}

// GetRecordsNotSensitiveOk returns a tuple with the RecordsNotSensitive field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataRiskData) GetRecordsNotSensitiveOk() (*int64, bool) {
	if o == nil || IsNil(o.RecordsNotSensitive) {
		return nil, false
	}
	return o.RecordsNotSensitive, true
}

// HasRecordsNotSensitive returns a boolean if a field has been set.
func (o *DataRiskData) HasRecordsNotSensitive() bool {
	if o != nil && !IsNil(o.RecordsNotSensitive) {
		return true
	}

	return false
}

// SetRecordsNotSensitive gets a reference to the given int64 and assigns it to the RecordsNotSensitive field.
func (o *DataRiskData) SetRecordsNotSensitive(v int64) {
	o.RecordsNotSensitive = &v
}

// GetRecordsSensitiveMasked returns the RecordsSensitiveMasked field value if set, zero value otherwise.
func (o *DataRiskData) GetRecordsSensitiveMasked() int64 {
	if o == nil || IsNil(o.RecordsSensitiveMasked) {
		var ret int64
		return ret
	}
	return *o.RecordsSensitiveMasked
}

// GetRecordsSensitiveMaskedOk returns a tuple with the RecordsSensitiveMasked field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataRiskData) GetRecordsSensitiveMaskedOk() (*int64, bool) {
	if o == nil || IsNil(o.RecordsSensitiveMasked) {
		return nil, false
	}
	return o.RecordsSensitiveMasked, true
}

// HasRecordsSensitiveMasked returns a boolean if a field has been set.
func (o *DataRiskData) HasRecordsSensitiveMasked() bool {
	if o != nil && !IsNil(o.RecordsSensitiveMasked) {
		return true
	}

	return false
}

// SetRecordsSensitiveMasked gets a reference to the given int64 and assigns it to the RecordsSensitiveMasked field.
func (o *DataRiskData) SetRecordsSensitiveMasked(v int64) {
	o.RecordsSensitiveMasked = &v
}

// GetRecordsSensitiveUnmasked returns the RecordsSensitiveUnmasked field value if set, zero value otherwise.
func (o *DataRiskData) GetRecordsSensitiveUnmasked() int64 {
	if o == nil || IsNil(o.RecordsSensitiveUnmasked) {
		var ret int64
		return ret
	}
	return *o.RecordsSensitiveUnmasked
}

// GetRecordsSensitiveUnmaskedOk returns a tuple with the RecordsSensitiveUnmasked field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataRiskData) GetRecordsSensitiveUnmaskedOk() (*int64, bool) {
	if o == nil || IsNil(o.RecordsSensitiveUnmasked) {
		return nil, false
	}
	return o.RecordsSensitiveUnmasked, true
}

// HasRecordsSensitiveUnmasked returns a boolean if a field has been set.
func (o *DataRiskData) HasRecordsSensitiveUnmasked() bool {
	if o != nil && !IsNil(o.RecordsSensitiveUnmasked) {
		return true
	}

	return false
}

// SetRecordsSensitiveUnmasked gets a reference to the given int64 and assigns it to the RecordsSensitiveUnmasked field.
func (o *DataRiskData) SetRecordsSensitiveUnmasked(v int64) {
	o.RecordsSensitiveUnmasked = &v
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *DataRiskData) GetTags() []Tag {
	if o == nil || IsNil(o.Tags) {
		var ret []Tag
		return ret
	}
	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataRiskData) GetTagsOk() ([]Tag, bool) {
	if o == nil || IsNil(o.Tags) {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *DataRiskData) HasTags() bool {
	if o != nil && !IsNil(o.Tags) {
		return true
	}

	return false
}

// SetTags gets a reference to the given []Tag and assigns it to the Tags field.
func (o *DataRiskData) SetTags(v []Tag) {
	o.Tags = v
}

func (o DataRiskData) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DataRiskData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ConnectorId) {
		toSerialize["connector_id"] = o.ConnectorId
	}
	if !IsNil(o.EngineConnectorId) {
		toSerialize["engine_connector_id"] = o.EngineConnectorId
	}
	if !IsNil(o.ConnectorName) {
		toSerialize["connector_name"] = o.ConnectorName
	}
	if !IsNil(o.ConnectorType) {
		toSerialize["connector_type"] = o.ConnectorType
	}
	if !IsNil(o.LastProfiledDate) {
		toSerialize["last_profiled_date"] = o.LastProfiledDate
	}
	if !IsNil(o.LastMaskedDate) {
		toSerialize["last_masked_date"] = o.LastMaskedDate
	}
	if !IsNil(o.EngineId) {
		toSerialize["engine_id"] = o.EngineId
	}
	if !IsNil(o.EngineName) {
		toSerialize["engine_name"] = o.EngineName
	}
	if !IsNil(o.IsProfiled) {
		toSerialize["is_profiled"] = o.IsProfiled
	}
	if !IsNil(o.IsSensitiveData) {
		toSerialize["is_sensitive_data"] = o.IsSensitiveData
	}
	if !IsNil(o.IsMasked) {
		toSerialize["is_masked"] = o.IsMasked
	}
	if !IsNil(o.IsAtRisk) {
		toSerialize["is_at_risk"] = o.IsAtRisk
	}
	if !IsNil(o.DataElementsTotal) {
		toSerialize["data_elements_total"] = o.DataElementsTotal
	}
	if !IsNil(o.DataElementsNotSensitive) {
		toSerialize["data_elements_not_sensitive"] = o.DataElementsNotSensitive
	}
	if !IsNil(o.DataElementsSensitiveMasked) {
		toSerialize["data_elements_sensitive_masked"] = o.DataElementsSensitiveMasked
	}
	if !IsNil(o.DataElementsSensitiveUnmasked) {
		toSerialize["data_elements_sensitive_unmasked"] = o.DataElementsSensitiveUnmasked
	}
	if !IsNil(o.RecordsTotal) {
		toSerialize["records_total"] = o.RecordsTotal
	}
	if !IsNil(o.RecordsNotSensitive) {
		toSerialize["records_not_sensitive"] = o.RecordsNotSensitive
	}
	if !IsNil(o.RecordsSensitiveMasked) {
		toSerialize["records_sensitive_masked"] = o.RecordsSensitiveMasked
	}
	if !IsNil(o.RecordsSensitiveUnmasked) {
		toSerialize["records_sensitive_unmasked"] = o.RecordsSensitiveUnmasked
	}
	if !IsNil(o.Tags) {
		toSerialize["tags"] = o.Tags
	}
	return toSerialize, nil
}

type NullableDataRiskData struct {
	value *DataRiskData
	isSet bool
}

func (v NullableDataRiskData) Get() *DataRiskData {
	return v.value
}

func (v *NullableDataRiskData) Set(val *DataRiskData) {
	v.value = val
	v.isSet = true
}

func (v NullableDataRiskData) IsSet() bool {
	return v.isSet
}

func (v *NullableDataRiskData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDataRiskData(val *DataRiskData) *NullableDataRiskData {
	return &NullableDataRiskData{value: val, isSet: true}
}

func (v NullableDataRiskData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDataRiskData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


