/*
Delphix DCT API

Delphix DCT API

API version: 3.17.0
Contact: support@delphix.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package delphix_dct_api

import (
	"encoding/json"
)

// checks if the UpdateAccessGroupScope type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateAccessGroupScope{}

// UpdateAccessGroupScope An Access group scope parameters that are allowed to update.
type UpdateAccessGroupScope struct {
	// The Access group scope name.
	Name *string `json:"name,omitempty"`
	// Specifies the type of the scope. Scope of type SIMPLE would grant access to all DCT objects. Scope of type SCOPED would grant access to all objects based on objects and object-tags and permissions defined in linked role. Scope of type ADVANCED would grant access to DCT objects based on objects and object-tags and the individual permissions.
	ScopeType *string `json:"scope_type,omitempty"`
}

// NewUpdateAccessGroupScope instantiates a new UpdateAccessGroupScope object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateAccessGroupScope() *UpdateAccessGroupScope {
	this := UpdateAccessGroupScope{}
	return &this
}

// NewUpdateAccessGroupScopeWithDefaults instantiates a new UpdateAccessGroupScope object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateAccessGroupScopeWithDefaults() *UpdateAccessGroupScope {
	this := UpdateAccessGroupScope{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *UpdateAccessGroupScope) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateAccessGroupScope) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *UpdateAccessGroupScope) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *UpdateAccessGroupScope) SetName(v string) {
	o.Name = &v
}

// GetScopeType returns the ScopeType field value if set, zero value otherwise.
func (o *UpdateAccessGroupScope) GetScopeType() string {
	if o == nil || IsNil(o.ScopeType) {
		var ret string
		return ret
	}
	return *o.ScopeType
}

// GetScopeTypeOk returns a tuple with the ScopeType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateAccessGroupScope) GetScopeTypeOk() (*string, bool) {
	if o == nil || IsNil(o.ScopeType) {
		return nil, false
	}
	return o.ScopeType, true
}

// HasScopeType returns a boolean if a field has been set.
func (o *UpdateAccessGroupScope) HasScopeType() bool {
	if o != nil && !IsNil(o.ScopeType) {
		return true
	}

	return false
}

// SetScopeType gets a reference to the given string and assigns it to the ScopeType field.
func (o *UpdateAccessGroupScope) SetScopeType(v string) {
	o.ScopeType = &v
}

func (o UpdateAccessGroupScope) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateAccessGroupScope) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.ScopeType) {
		toSerialize["scope_type"] = o.ScopeType
	}
	return toSerialize, nil
}

type NullableUpdateAccessGroupScope struct {
	value *UpdateAccessGroupScope
	isSet bool
}

func (v NullableUpdateAccessGroupScope) Get() *UpdateAccessGroupScope {
	return v.value
}

func (v *NullableUpdateAccessGroupScope) Set(val *UpdateAccessGroupScope) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateAccessGroupScope) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateAccessGroupScope) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateAccessGroupScope(val *UpdateAccessGroupScope) *NullableUpdateAccessGroupScope {
	return &NullableUpdateAccessGroupScope{value: val, isSet: true}
}

func (v NullableUpdateAccessGroupScope) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateAccessGroupScope) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


