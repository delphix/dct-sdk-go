/*
Delphix DCT API

Delphix DCT API

API version: 3.17.0
Contact: support@delphix.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package delphix_dct_api

import (
	"encoding/json"
)

// checks if the DiscoveryExpression type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DiscoveryExpression{}

// DiscoveryExpression struct for DiscoveryExpression
type DiscoveryExpression struct {
	// The id of the discovery expression.
	Id *string `json:"id,omitempty"`
	// The name of the discovery expression.
	Name *string `json:"name,omitempty"`
	// The regular expression that will be used to match against column/field names or data values during the execution of a discovery job. Only applicable for SEARCH expressions.
	RegularExpression *string `json:"regular_expression,omitempty"`
	// This field determines whether the discovery expression will be targeted at the underlying data in a data source (e.g. row values in the database column / field values in the file), or whether the discovery expression will be targeted at the schema of the data source (e.g. column names in a database table or field names in a file). Data-Level profiling consumes more memory than Column-Name-Level/Field-Name-Level profiling due to the fact that the discovery expression must be checked against a larger number of data values (e.g. hundreds) than column/field names (i.e. one). Only applicable for SEARCH expressions.
	DataLevelProfiling *bool `json:"data_level_profiling,omitempty"`
	// Minimum length of the value for string types. Only applicable for TYPE expressions.
	MinDataLength *int32 `json:"min_data_length,omitempty"`
	// The id of the engine associated with this discovery expression.
	EngineId *string `json:"engine_id,omitempty"`
	// The name of the engine associated with this discovery expression.
	EngineName *string `json:"engine_name,omitempty"`
	// The id of the data class associated with this discovery expression.
	DataClassId *string `json:"data_class_id,omitempty"`
	// The name of the data class associated with this discovery expression.
	DataClassName *string `json:"data_class_name,omitempty"`
	// Data type to apply a constraint to. Only applicable for TYPE expressions.
	DataType *string `json:"data_type,omitempty"`
	// The type of the discovery expression.
	ExpressionType *string `json:"expression_type,omitempty"`
	// The level of data sources this discovery expression will be targeted.
	Level *string `json:"level,omitempty"`
	// The tags of this discovery expression.
	Tags []Tag `json:"tags,omitempty"`
}

// NewDiscoveryExpression instantiates a new DiscoveryExpression object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDiscoveryExpression() *DiscoveryExpression {
	this := DiscoveryExpression{}
	return &this
}

// NewDiscoveryExpressionWithDefaults instantiates a new DiscoveryExpression object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDiscoveryExpressionWithDefaults() *DiscoveryExpression {
	this := DiscoveryExpression{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *DiscoveryExpression) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DiscoveryExpression) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *DiscoveryExpression) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *DiscoveryExpression) SetId(v string) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *DiscoveryExpression) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DiscoveryExpression) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *DiscoveryExpression) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *DiscoveryExpression) SetName(v string) {
	o.Name = &v
}

// GetRegularExpression returns the RegularExpression field value if set, zero value otherwise.
func (o *DiscoveryExpression) GetRegularExpression() string {
	if o == nil || IsNil(o.RegularExpression) {
		var ret string
		return ret
	}
	return *o.RegularExpression
}

// GetRegularExpressionOk returns a tuple with the RegularExpression field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DiscoveryExpression) GetRegularExpressionOk() (*string, bool) {
	if o == nil || IsNil(o.RegularExpression) {
		return nil, false
	}
	return o.RegularExpression, true
}

// HasRegularExpression returns a boolean if a field has been set.
func (o *DiscoveryExpression) HasRegularExpression() bool {
	if o != nil && !IsNil(o.RegularExpression) {
		return true
	}

	return false
}

// SetRegularExpression gets a reference to the given string and assigns it to the RegularExpression field.
func (o *DiscoveryExpression) SetRegularExpression(v string) {
	o.RegularExpression = &v
}

// GetDataLevelProfiling returns the DataLevelProfiling field value if set, zero value otherwise.
func (o *DiscoveryExpression) GetDataLevelProfiling() bool {
	if o == nil || IsNil(o.DataLevelProfiling) {
		var ret bool
		return ret
	}
	return *o.DataLevelProfiling
}

// GetDataLevelProfilingOk returns a tuple with the DataLevelProfiling field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DiscoveryExpression) GetDataLevelProfilingOk() (*bool, bool) {
	if o == nil || IsNil(o.DataLevelProfiling) {
		return nil, false
	}
	return o.DataLevelProfiling, true
}

// HasDataLevelProfiling returns a boolean if a field has been set.
func (o *DiscoveryExpression) HasDataLevelProfiling() bool {
	if o != nil && !IsNil(o.DataLevelProfiling) {
		return true
	}

	return false
}

// SetDataLevelProfiling gets a reference to the given bool and assigns it to the DataLevelProfiling field.
func (o *DiscoveryExpression) SetDataLevelProfiling(v bool) {
	o.DataLevelProfiling = &v
}

// GetMinDataLength returns the MinDataLength field value if set, zero value otherwise.
func (o *DiscoveryExpression) GetMinDataLength() int32 {
	if o == nil || IsNil(o.MinDataLength) {
		var ret int32
		return ret
	}
	return *o.MinDataLength
}

// GetMinDataLengthOk returns a tuple with the MinDataLength field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DiscoveryExpression) GetMinDataLengthOk() (*int32, bool) {
	if o == nil || IsNil(o.MinDataLength) {
		return nil, false
	}
	return o.MinDataLength, true
}

// HasMinDataLength returns a boolean if a field has been set.
func (o *DiscoveryExpression) HasMinDataLength() bool {
	if o != nil && !IsNil(o.MinDataLength) {
		return true
	}

	return false
}

// SetMinDataLength gets a reference to the given int32 and assigns it to the MinDataLength field.
func (o *DiscoveryExpression) SetMinDataLength(v int32) {
	o.MinDataLength = &v
}

// GetEngineId returns the EngineId field value if set, zero value otherwise.
func (o *DiscoveryExpression) GetEngineId() string {
	if o == nil || IsNil(o.EngineId) {
		var ret string
		return ret
	}
	return *o.EngineId
}

// GetEngineIdOk returns a tuple with the EngineId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DiscoveryExpression) GetEngineIdOk() (*string, bool) {
	if o == nil || IsNil(o.EngineId) {
		return nil, false
	}
	return o.EngineId, true
}

// HasEngineId returns a boolean if a field has been set.
func (o *DiscoveryExpression) HasEngineId() bool {
	if o != nil && !IsNil(o.EngineId) {
		return true
	}

	return false
}

// SetEngineId gets a reference to the given string and assigns it to the EngineId field.
func (o *DiscoveryExpression) SetEngineId(v string) {
	o.EngineId = &v
}

// GetEngineName returns the EngineName field value if set, zero value otherwise.
func (o *DiscoveryExpression) GetEngineName() string {
	if o == nil || IsNil(o.EngineName) {
		var ret string
		return ret
	}
	return *o.EngineName
}

// GetEngineNameOk returns a tuple with the EngineName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DiscoveryExpression) GetEngineNameOk() (*string, bool) {
	if o == nil || IsNil(o.EngineName) {
		return nil, false
	}
	return o.EngineName, true
}

// HasEngineName returns a boolean if a field has been set.
func (o *DiscoveryExpression) HasEngineName() bool {
	if o != nil && !IsNil(o.EngineName) {
		return true
	}

	return false
}

// SetEngineName gets a reference to the given string and assigns it to the EngineName field.
func (o *DiscoveryExpression) SetEngineName(v string) {
	o.EngineName = &v
}

// GetDataClassId returns the DataClassId field value if set, zero value otherwise.
func (o *DiscoveryExpression) GetDataClassId() string {
	if o == nil || IsNil(o.DataClassId) {
		var ret string
		return ret
	}
	return *o.DataClassId
}

// GetDataClassIdOk returns a tuple with the DataClassId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DiscoveryExpression) GetDataClassIdOk() (*string, bool) {
	if o == nil || IsNil(o.DataClassId) {
		return nil, false
	}
	return o.DataClassId, true
}

// HasDataClassId returns a boolean if a field has been set.
func (o *DiscoveryExpression) HasDataClassId() bool {
	if o != nil && !IsNil(o.DataClassId) {
		return true
	}

	return false
}

// SetDataClassId gets a reference to the given string and assigns it to the DataClassId field.
func (o *DiscoveryExpression) SetDataClassId(v string) {
	o.DataClassId = &v
}

// GetDataClassName returns the DataClassName field value if set, zero value otherwise.
func (o *DiscoveryExpression) GetDataClassName() string {
	if o == nil || IsNil(o.DataClassName) {
		var ret string
		return ret
	}
	return *o.DataClassName
}

// GetDataClassNameOk returns a tuple with the DataClassName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DiscoveryExpression) GetDataClassNameOk() (*string, bool) {
	if o == nil || IsNil(o.DataClassName) {
		return nil, false
	}
	return o.DataClassName, true
}

// HasDataClassName returns a boolean if a field has been set.
func (o *DiscoveryExpression) HasDataClassName() bool {
	if o != nil && !IsNil(o.DataClassName) {
		return true
	}

	return false
}

// SetDataClassName gets a reference to the given string and assigns it to the DataClassName field.
func (o *DiscoveryExpression) SetDataClassName(v string) {
	o.DataClassName = &v
}

// GetDataType returns the DataType field value if set, zero value otherwise.
func (o *DiscoveryExpression) GetDataType() string {
	if o == nil || IsNil(o.DataType) {
		var ret string
		return ret
	}
	return *o.DataType
}

// GetDataTypeOk returns a tuple with the DataType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DiscoveryExpression) GetDataTypeOk() (*string, bool) {
	if o == nil || IsNil(o.DataType) {
		return nil, false
	}
	return o.DataType, true
}

// HasDataType returns a boolean if a field has been set.
func (o *DiscoveryExpression) HasDataType() bool {
	if o != nil && !IsNil(o.DataType) {
		return true
	}

	return false
}

// SetDataType gets a reference to the given string and assigns it to the DataType field.
func (o *DiscoveryExpression) SetDataType(v string) {
	o.DataType = &v
}

// GetExpressionType returns the ExpressionType field value if set, zero value otherwise.
func (o *DiscoveryExpression) GetExpressionType() string {
	if o == nil || IsNil(o.ExpressionType) {
		var ret string
		return ret
	}
	return *o.ExpressionType
}

// GetExpressionTypeOk returns a tuple with the ExpressionType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DiscoveryExpression) GetExpressionTypeOk() (*string, bool) {
	if o == nil || IsNil(o.ExpressionType) {
		return nil, false
	}
	return o.ExpressionType, true
}

// HasExpressionType returns a boolean if a field has been set.
func (o *DiscoveryExpression) HasExpressionType() bool {
	if o != nil && !IsNil(o.ExpressionType) {
		return true
	}

	return false
}

// SetExpressionType gets a reference to the given string and assigns it to the ExpressionType field.
func (o *DiscoveryExpression) SetExpressionType(v string) {
	o.ExpressionType = &v
}

// GetLevel returns the Level field value if set, zero value otherwise.
func (o *DiscoveryExpression) GetLevel() string {
	if o == nil || IsNil(o.Level) {
		var ret string
		return ret
	}
	return *o.Level
}

// GetLevelOk returns a tuple with the Level field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DiscoveryExpression) GetLevelOk() (*string, bool) {
	if o == nil || IsNil(o.Level) {
		return nil, false
	}
	return o.Level, true
}

// HasLevel returns a boolean if a field has been set.
func (o *DiscoveryExpression) HasLevel() bool {
	if o != nil && !IsNil(o.Level) {
		return true
	}

	return false
}

// SetLevel gets a reference to the given string and assigns it to the Level field.
func (o *DiscoveryExpression) SetLevel(v string) {
	o.Level = &v
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *DiscoveryExpression) GetTags() []Tag {
	if o == nil || IsNil(o.Tags) {
		var ret []Tag
		return ret
	}
	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DiscoveryExpression) GetTagsOk() ([]Tag, bool) {
	if o == nil || IsNil(o.Tags) {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *DiscoveryExpression) HasTags() bool {
	if o != nil && !IsNil(o.Tags) {
		return true
	}

	return false
}

// SetTags gets a reference to the given []Tag and assigns it to the Tags field.
func (o *DiscoveryExpression) SetTags(v []Tag) {
	o.Tags = v
}

func (o DiscoveryExpression) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DiscoveryExpression) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.RegularExpression) {
		toSerialize["regular_expression"] = o.RegularExpression
	}
	if !IsNil(o.DataLevelProfiling) {
		toSerialize["data_level_profiling"] = o.DataLevelProfiling
	}
	if !IsNil(o.MinDataLength) {
		toSerialize["min_data_length"] = o.MinDataLength
	}
	if !IsNil(o.EngineId) {
		toSerialize["engine_id"] = o.EngineId
	}
	if !IsNil(o.EngineName) {
		toSerialize["engine_name"] = o.EngineName
	}
	if !IsNil(o.DataClassId) {
		toSerialize["data_class_id"] = o.DataClassId
	}
	if !IsNil(o.DataClassName) {
		toSerialize["data_class_name"] = o.DataClassName
	}
	if !IsNil(o.DataType) {
		toSerialize["data_type"] = o.DataType
	}
	if !IsNil(o.ExpressionType) {
		toSerialize["expression_type"] = o.ExpressionType
	}
	if !IsNil(o.Level) {
		toSerialize["level"] = o.Level
	}
	if !IsNil(o.Tags) {
		toSerialize["tags"] = o.Tags
	}
	return toSerialize, nil
}

type NullableDiscoveryExpression struct {
	value *DiscoveryExpression
	isSet bool
}

func (v NullableDiscoveryExpression) Get() *DiscoveryExpression {
	return v.value
}

func (v *NullableDiscoveryExpression) Set(val *DiscoveryExpression) {
	v.value = val
	v.isSet = true
}

func (v NullableDiscoveryExpression) IsSet() bool {
	return v.isSet
}

func (v *NullableDiscoveryExpression) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDiscoveryExpression(val *DiscoveryExpression) *NullableDiscoveryExpression {
	return &NullableDiscoveryExpression{value: val, isSet: true}
}

func (v NullableDiscoveryExpression) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDiscoveryExpression) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


