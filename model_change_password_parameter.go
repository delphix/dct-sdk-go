/*
Delphix DCT API

Delphix DCT API

API version: 3.17.0
Contact: support@delphix.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package delphix_dct_api

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ChangePasswordParameter type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ChangePasswordParameter{}

// ChangePasswordParameter struct for ChangePasswordParameter
type ChangePasswordParameter struct {
	// Old password that needs to be changed for the Account.
	OldPassword string `json:"old_password"`
	// New password that needs to be set for the Account. Set this to null for unsetting the current password. Not including this property also results in unsetting of the current password.
	NewPassword *string `json:"new_password,omitempty"`
}

type _ChangePasswordParameter ChangePasswordParameter

// NewChangePasswordParameter instantiates a new ChangePasswordParameter object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewChangePasswordParameter(oldPassword string) *ChangePasswordParameter {
	this := ChangePasswordParameter{}
	this.OldPassword = oldPassword
	return &this
}

// NewChangePasswordParameterWithDefaults instantiates a new ChangePasswordParameter object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewChangePasswordParameterWithDefaults() *ChangePasswordParameter {
	this := ChangePasswordParameter{}
	return &this
}

// GetOldPassword returns the OldPassword field value
func (o *ChangePasswordParameter) GetOldPassword() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.OldPassword
}

// GetOldPasswordOk returns a tuple with the OldPassword field value
// and a boolean to check if the value has been set.
func (o *ChangePasswordParameter) GetOldPasswordOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OldPassword, true
}

// SetOldPassword sets field value
func (o *ChangePasswordParameter) SetOldPassword(v string) {
	o.OldPassword = v
}

// GetNewPassword returns the NewPassword field value if set, zero value otherwise.
func (o *ChangePasswordParameter) GetNewPassword() string {
	if o == nil || IsNil(o.NewPassword) {
		var ret string
		return ret
	}
	return *o.NewPassword
}

// GetNewPasswordOk returns a tuple with the NewPassword field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChangePasswordParameter) GetNewPasswordOk() (*string, bool) {
	if o == nil || IsNil(o.NewPassword) {
		return nil, false
	}
	return o.NewPassword, true
}

// HasNewPassword returns a boolean if a field has been set.
func (o *ChangePasswordParameter) HasNewPassword() bool {
	if o != nil && !IsNil(o.NewPassword) {
		return true
	}

	return false
}

// SetNewPassword gets a reference to the given string and assigns it to the NewPassword field.
func (o *ChangePasswordParameter) SetNewPassword(v string) {
	o.NewPassword = &v
}

func (o ChangePasswordParameter) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ChangePasswordParameter) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["old_password"] = o.OldPassword
	if !IsNil(o.NewPassword) {
		toSerialize["new_password"] = o.NewPassword
	}
	return toSerialize, nil
}

func (o *ChangePasswordParameter) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"old_password",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varChangePasswordParameter := _ChangePasswordParameter{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varChangePasswordParameter)

	if err != nil {
		return err
	}

	*o = ChangePasswordParameter(varChangePasswordParameter)

	return err
}

type NullableChangePasswordParameter struct {
	value *ChangePasswordParameter
	isSet bool
}

func (v NullableChangePasswordParameter) Get() *ChangePasswordParameter {
	return v.value
}

func (v *NullableChangePasswordParameter) Set(val *ChangePasswordParameter) {
	v.value = val
	v.isSet = true
}

func (v NullableChangePasswordParameter) IsSet() bool {
	return v.isSet
}

func (v *NullableChangePasswordParameter) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableChangePasswordParameter(val *ChangePasswordParameter) *NullableChangePasswordParameter {
	return &NullableChangePasswordParameter{value: val, isSet: true}
}

func (v NullableChangePasswordParameter) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableChangePasswordParameter) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


