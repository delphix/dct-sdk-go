/*
Delphix DCT API

Delphix DCT API

API version: 3.18.0
Contact: support@delphix.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package delphix_dct_api

import (
	"encoding/json"
)

// checks if the HyperscaleConnectorUpdateParameters type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HyperscaleConnectorUpdateParameters{}

// HyperscaleConnectorUpdateParameters The updatable properties of a Hyperscale Connector.
type HyperscaleConnectorUpdateParameters struct {
	Name *string `json:"name,omitempty"`
	// The username this Connector will use to connect to the source database.
	SourceUsername *string `json:"source_username,omitempty"`
	// The password this Connector will use to connect to the source database.
	SourcePassword *string `json:"source_password,omitempty"`
	// The JDBC URL used to connect to the source database.
	SourceJdbcUrl *string `json:"source_jdbc_url,omitempty"`
	// The MongoDB URL used to connect to the source database.
	SourceMongoUrl *string `json:"source_mongo_url,omitempty"`
	// The path on the filesystem where source files must be read (Delimited files Only).
	SourceFilesystemPath *string `json:"source_filesystem_path,omitempty"`
	SourceConnectionProperties *map[string]string `json:"source_connection_properties,omitempty"`
	// The username this Connector will use to connect to the target database.
	TargetUsername *string `json:"target_username,omitempty"`
	// The username this Connector will use to connect to the target database.
	TargetPassword *string `json:"target_password,omitempty"`
	// The JDBC URL used to connect to the target database.
	TargetJdbcUrl *string `json:"target_jdbc_url,omitempty"`
	// The MongoDB URL used to connect to the target database.
	TargetMongoUrl *string `json:"target_mongo_url,omitempty"`
	// The path on the filesystem where target files must be written (Delimited files Only).
	TargetFilesystemPath *string `json:"target_filesystem_path,omitempty"`
	TargetConnectionProperties *map[string]string `json:"target_connection_properties,omitempty"`
}

// NewHyperscaleConnectorUpdateParameters instantiates a new HyperscaleConnectorUpdateParameters object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHyperscaleConnectorUpdateParameters() *HyperscaleConnectorUpdateParameters {
	this := HyperscaleConnectorUpdateParameters{}
	return &this
}

// NewHyperscaleConnectorUpdateParametersWithDefaults instantiates a new HyperscaleConnectorUpdateParameters object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHyperscaleConnectorUpdateParametersWithDefaults() *HyperscaleConnectorUpdateParameters {
	this := HyperscaleConnectorUpdateParameters{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *HyperscaleConnectorUpdateParameters) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HyperscaleConnectorUpdateParameters) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *HyperscaleConnectorUpdateParameters) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *HyperscaleConnectorUpdateParameters) SetName(v string) {
	o.Name = &v
}

// GetSourceUsername returns the SourceUsername field value if set, zero value otherwise.
func (o *HyperscaleConnectorUpdateParameters) GetSourceUsername() string {
	if o == nil || IsNil(o.SourceUsername) {
		var ret string
		return ret
	}
	return *o.SourceUsername
}

// GetSourceUsernameOk returns a tuple with the SourceUsername field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HyperscaleConnectorUpdateParameters) GetSourceUsernameOk() (*string, bool) {
	if o == nil || IsNil(o.SourceUsername) {
		return nil, false
	}
	return o.SourceUsername, true
}

// HasSourceUsername returns a boolean if a field has been set.
func (o *HyperscaleConnectorUpdateParameters) HasSourceUsername() bool {
	if o != nil && !IsNil(o.SourceUsername) {
		return true
	}

	return false
}

// SetSourceUsername gets a reference to the given string and assigns it to the SourceUsername field.
func (o *HyperscaleConnectorUpdateParameters) SetSourceUsername(v string) {
	o.SourceUsername = &v
}

// GetSourcePassword returns the SourcePassword field value if set, zero value otherwise.
func (o *HyperscaleConnectorUpdateParameters) GetSourcePassword() string {
	if o == nil || IsNil(o.SourcePassword) {
		var ret string
		return ret
	}
	return *o.SourcePassword
}

// GetSourcePasswordOk returns a tuple with the SourcePassword field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HyperscaleConnectorUpdateParameters) GetSourcePasswordOk() (*string, bool) {
	if o == nil || IsNil(o.SourcePassword) {
		return nil, false
	}
	return o.SourcePassword, true
}

// HasSourcePassword returns a boolean if a field has been set.
func (o *HyperscaleConnectorUpdateParameters) HasSourcePassword() bool {
	if o != nil && !IsNil(o.SourcePassword) {
		return true
	}

	return false
}

// SetSourcePassword gets a reference to the given string and assigns it to the SourcePassword field.
func (o *HyperscaleConnectorUpdateParameters) SetSourcePassword(v string) {
	o.SourcePassword = &v
}

// GetSourceJdbcUrl returns the SourceJdbcUrl field value if set, zero value otherwise.
func (o *HyperscaleConnectorUpdateParameters) GetSourceJdbcUrl() string {
	if o == nil || IsNil(o.SourceJdbcUrl) {
		var ret string
		return ret
	}
	return *o.SourceJdbcUrl
}

// GetSourceJdbcUrlOk returns a tuple with the SourceJdbcUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HyperscaleConnectorUpdateParameters) GetSourceJdbcUrlOk() (*string, bool) {
	if o == nil || IsNil(o.SourceJdbcUrl) {
		return nil, false
	}
	return o.SourceJdbcUrl, true
}

// HasSourceJdbcUrl returns a boolean if a field has been set.
func (o *HyperscaleConnectorUpdateParameters) HasSourceJdbcUrl() bool {
	if o != nil && !IsNil(o.SourceJdbcUrl) {
		return true
	}

	return false
}

// SetSourceJdbcUrl gets a reference to the given string and assigns it to the SourceJdbcUrl field.
func (o *HyperscaleConnectorUpdateParameters) SetSourceJdbcUrl(v string) {
	o.SourceJdbcUrl = &v
}

// GetSourceMongoUrl returns the SourceMongoUrl field value if set, zero value otherwise.
func (o *HyperscaleConnectorUpdateParameters) GetSourceMongoUrl() string {
	if o == nil || IsNil(o.SourceMongoUrl) {
		var ret string
		return ret
	}
	return *o.SourceMongoUrl
}

// GetSourceMongoUrlOk returns a tuple with the SourceMongoUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HyperscaleConnectorUpdateParameters) GetSourceMongoUrlOk() (*string, bool) {
	if o == nil || IsNil(o.SourceMongoUrl) {
		return nil, false
	}
	return o.SourceMongoUrl, true
}

// HasSourceMongoUrl returns a boolean if a field has been set.
func (o *HyperscaleConnectorUpdateParameters) HasSourceMongoUrl() bool {
	if o != nil && !IsNil(o.SourceMongoUrl) {
		return true
	}

	return false
}

// SetSourceMongoUrl gets a reference to the given string and assigns it to the SourceMongoUrl field.
func (o *HyperscaleConnectorUpdateParameters) SetSourceMongoUrl(v string) {
	o.SourceMongoUrl = &v
}

// GetSourceFilesystemPath returns the SourceFilesystemPath field value if set, zero value otherwise.
func (o *HyperscaleConnectorUpdateParameters) GetSourceFilesystemPath() string {
	if o == nil || IsNil(o.SourceFilesystemPath) {
		var ret string
		return ret
	}
	return *o.SourceFilesystemPath
}

// GetSourceFilesystemPathOk returns a tuple with the SourceFilesystemPath field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HyperscaleConnectorUpdateParameters) GetSourceFilesystemPathOk() (*string, bool) {
	if o == nil || IsNil(o.SourceFilesystemPath) {
		return nil, false
	}
	return o.SourceFilesystemPath, true
}

// HasSourceFilesystemPath returns a boolean if a field has been set.
func (o *HyperscaleConnectorUpdateParameters) HasSourceFilesystemPath() bool {
	if o != nil && !IsNil(o.SourceFilesystemPath) {
		return true
	}

	return false
}

// SetSourceFilesystemPath gets a reference to the given string and assigns it to the SourceFilesystemPath field.
func (o *HyperscaleConnectorUpdateParameters) SetSourceFilesystemPath(v string) {
	o.SourceFilesystemPath = &v
}

// GetSourceConnectionProperties returns the SourceConnectionProperties field value if set, zero value otherwise.
func (o *HyperscaleConnectorUpdateParameters) GetSourceConnectionProperties() map[string]string {
	if o == nil || IsNil(o.SourceConnectionProperties) {
		var ret map[string]string
		return ret
	}
	return *o.SourceConnectionProperties
}

// GetSourceConnectionPropertiesOk returns a tuple with the SourceConnectionProperties field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HyperscaleConnectorUpdateParameters) GetSourceConnectionPropertiesOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.SourceConnectionProperties) {
		return nil, false
	}
	return o.SourceConnectionProperties, true
}

// HasSourceConnectionProperties returns a boolean if a field has been set.
func (o *HyperscaleConnectorUpdateParameters) HasSourceConnectionProperties() bool {
	if o != nil && !IsNil(o.SourceConnectionProperties) {
		return true
	}

	return false
}

// SetSourceConnectionProperties gets a reference to the given map[string]string and assigns it to the SourceConnectionProperties field.
func (o *HyperscaleConnectorUpdateParameters) SetSourceConnectionProperties(v map[string]string) {
	o.SourceConnectionProperties = &v
}

// GetTargetUsername returns the TargetUsername field value if set, zero value otherwise.
func (o *HyperscaleConnectorUpdateParameters) GetTargetUsername() string {
	if o == nil || IsNil(o.TargetUsername) {
		var ret string
		return ret
	}
	return *o.TargetUsername
}

// GetTargetUsernameOk returns a tuple with the TargetUsername field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HyperscaleConnectorUpdateParameters) GetTargetUsernameOk() (*string, bool) {
	if o == nil || IsNil(o.TargetUsername) {
		return nil, false
	}
	return o.TargetUsername, true
}

// HasTargetUsername returns a boolean if a field has been set.
func (o *HyperscaleConnectorUpdateParameters) HasTargetUsername() bool {
	if o != nil && !IsNil(o.TargetUsername) {
		return true
	}

	return false
}

// SetTargetUsername gets a reference to the given string and assigns it to the TargetUsername field.
func (o *HyperscaleConnectorUpdateParameters) SetTargetUsername(v string) {
	o.TargetUsername = &v
}

// GetTargetPassword returns the TargetPassword field value if set, zero value otherwise.
func (o *HyperscaleConnectorUpdateParameters) GetTargetPassword() string {
	if o == nil || IsNil(o.TargetPassword) {
		var ret string
		return ret
	}
	return *o.TargetPassword
}

// GetTargetPasswordOk returns a tuple with the TargetPassword field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HyperscaleConnectorUpdateParameters) GetTargetPasswordOk() (*string, bool) {
	if o == nil || IsNil(o.TargetPassword) {
		return nil, false
	}
	return o.TargetPassword, true
}

// HasTargetPassword returns a boolean if a field has been set.
func (o *HyperscaleConnectorUpdateParameters) HasTargetPassword() bool {
	if o != nil && !IsNil(o.TargetPassword) {
		return true
	}

	return false
}

// SetTargetPassword gets a reference to the given string and assigns it to the TargetPassword field.
func (o *HyperscaleConnectorUpdateParameters) SetTargetPassword(v string) {
	o.TargetPassword = &v
}

// GetTargetJdbcUrl returns the TargetJdbcUrl field value if set, zero value otherwise.
func (o *HyperscaleConnectorUpdateParameters) GetTargetJdbcUrl() string {
	if o == nil || IsNil(o.TargetJdbcUrl) {
		var ret string
		return ret
	}
	return *o.TargetJdbcUrl
}

// GetTargetJdbcUrlOk returns a tuple with the TargetJdbcUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HyperscaleConnectorUpdateParameters) GetTargetJdbcUrlOk() (*string, bool) {
	if o == nil || IsNil(o.TargetJdbcUrl) {
		return nil, false
	}
	return o.TargetJdbcUrl, true
}

// HasTargetJdbcUrl returns a boolean if a field has been set.
func (o *HyperscaleConnectorUpdateParameters) HasTargetJdbcUrl() bool {
	if o != nil && !IsNil(o.TargetJdbcUrl) {
		return true
	}

	return false
}

// SetTargetJdbcUrl gets a reference to the given string and assigns it to the TargetJdbcUrl field.
func (o *HyperscaleConnectorUpdateParameters) SetTargetJdbcUrl(v string) {
	o.TargetJdbcUrl = &v
}

// GetTargetMongoUrl returns the TargetMongoUrl field value if set, zero value otherwise.
func (o *HyperscaleConnectorUpdateParameters) GetTargetMongoUrl() string {
	if o == nil || IsNil(o.TargetMongoUrl) {
		var ret string
		return ret
	}
	return *o.TargetMongoUrl
}

// GetTargetMongoUrlOk returns a tuple with the TargetMongoUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HyperscaleConnectorUpdateParameters) GetTargetMongoUrlOk() (*string, bool) {
	if o == nil || IsNil(o.TargetMongoUrl) {
		return nil, false
	}
	return o.TargetMongoUrl, true
}

// HasTargetMongoUrl returns a boolean if a field has been set.
func (o *HyperscaleConnectorUpdateParameters) HasTargetMongoUrl() bool {
	if o != nil && !IsNil(o.TargetMongoUrl) {
		return true
	}

	return false
}

// SetTargetMongoUrl gets a reference to the given string and assigns it to the TargetMongoUrl field.
func (o *HyperscaleConnectorUpdateParameters) SetTargetMongoUrl(v string) {
	o.TargetMongoUrl = &v
}

// GetTargetFilesystemPath returns the TargetFilesystemPath field value if set, zero value otherwise.
func (o *HyperscaleConnectorUpdateParameters) GetTargetFilesystemPath() string {
	if o == nil || IsNil(o.TargetFilesystemPath) {
		var ret string
		return ret
	}
	return *o.TargetFilesystemPath
}

// GetTargetFilesystemPathOk returns a tuple with the TargetFilesystemPath field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HyperscaleConnectorUpdateParameters) GetTargetFilesystemPathOk() (*string, bool) {
	if o == nil || IsNil(o.TargetFilesystemPath) {
		return nil, false
	}
	return o.TargetFilesystemPath, true
}

// HasTargetFilesystemPath returns a boolean if a field has been set.
func (o *HyperscaleConnectorUpdateParameters) HasTargetFilesystemPath() bool {
	if o != nil && !IsNil(o.TargetFilesystemPath) {
		return true
	}

	return false
}

// SetTargetFilesystemPath gets a reference to the given string and assigns it to the TargetFilesystemPath field.
func (o *HyperscaleConnectorUpdateParameters) SetTargetFilesystemPath(v string) {
	o.TargetFilesystemPath = &v
}

// GetTargetConnectionProperties returns the TargetConnectionProperties field value if set, zero value otherwise.
func (o *HyperscaleConnectorUpdateParameters) GetTargetConnectionProperties() map[string]string {
	if o == nil || IsNil(o.TargetConnectionProperties) {
		var ret map[string]string
		return ret
	}
	return *o.TargetConnectionProperties
}

// GetTargetConnectionPropertiesOk returns a tuple with the TargetConnectionProperties field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HyperscaleConnectorUpdateParameters) GetTargetConnectionPropertiesOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.TargetConnectionProperties) {
		return nil, false
	}
	return o.TargetConnectionProperties, true
}

// HasTargetConnectionProperties returns a boolean if a field has been set.
func (o *HyperscaleConnectorUpdateParameters) HasTargetConnectionProperties() bool {
	if o != nil && !IsNil(o.TargetConnectionProperties) {
		return true
	}

	return false
}

// SetTargetConnectionProperties gets a reference to the given map[string]string and assigns it to the TargetConnectionProperties field.
func (o *HyperscaleConnectorUpdateParameters) SetTargetConnectionProperties(v map[string]string) {
	o.TargetConnectionProperties = &v
}

func (o HyperscaleConnectorUpdateParameters) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HyperscaleConnectorUpdateParameters) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.SourceUsername) {
		toSerialize["source_username"] = o.SourceUsername
	}
	if !IsNil(o.SourcePassword) {
		toSerialize["source_password"] = o.SourcePassword
	}
	if !IsNil(o.SourceJdbcUrl) {
		toSerialize["source_jdbc_url"] = o.SourceJdbcUrl
	}
	if !IsNil(o.SourceMongoUrl) {
		toSerialize["source_mongo_url"] = o.SourceMongoUrl
	}
	if !IsNil(o.SourceFilesystemPath) {
		toSerialize["source_filesystem_path"] = o.SourceFilesystemPath
	}
	if !IsNil(o.SourceConnectionProperties) {
		toSerialize["source_connection_properties"] = o.SourceConnectionProperties
	}
	if !IsNil(o.TargetUsername) {
		toSerialize["target_username"] = o.TargetUsername
	}
	if !IsNil(o.TargetPassword) {
		toSerialize["target_password"] = o.TargetPassword
	}
	if !IsNil(o.TargetJdbcUrl) {
		toSerialize["target_jdbc_url"] = o.TargetJdbcUrl
	}
	if !IsNil(o.TargetMongoUrl) {
		toSerialize["target_mongo_url"] = o.TargetMongoUrl
	}
	if !IsNil(o.TargetFilesystemPath) {
		toSerialize["target_filesystem_path"] = o.TargetFilesystemPath
	}
	if !IsNil(o.TargetConnectionProperties) {
		toSerialize["target_connection_properties"] = o.TargetConnectionProperties
	}
	return toSerialize, nil
}

type NullableHyperscaleConnectorUpdateParameters struct {
	value *HyperscaleConnectorUpdateParameters
	isSet bool
}

func (v NullableHyperscaleConnectorUpdateParameters) Get() *HyperscaleConnectorUpdateParameters {
	return v.value
}

func (v *NullableHyperscaleConnectorUpdateParameters) Set(val *HyperscaleConnectorUpdateParameters) {
	v.value = val
	v.isSet = true
}

func (v NullableHyperscaleConnectorUpdateParameters) IsSet() bool {
	return v.isSet
}

func (v *NullableHyperscaleConnectorUpdateParameters) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHyperscaleConnectorUpdateParameters(val *HyperscaleConnectorUpdateParameters) *NullableHyperscaleConnectorUpdateParameters {
	return &NullableHyperscaleConnectorUpdateParameters{value: val, isSet: true}
}

func (v NullableHyperscaleConnectorUpdateParameters) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHyperscaleConnectorUpdateParameters) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


