/*
Delphix DCT API

Delphix DCT API

API version: 3.18.0
Contact: support@delphix.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package delphix_dct_api

import (
	"encoding/json"
	"time"
)

// checks if the VirtualizationFault type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VirtualizationFault{}

// VirtualizationFault A fault on a virtualization engine.
type VirtualizationFault struct {
	// ID of the virtualization engine fault.
	Id *string `json:"id,omitempty"`
	// ID of the RegisteredEngine.
	EngineId *string `json:"engine_id,omitempty"`
	// A unique dot delimited identifier associated with the fault.
	BundleId *string `json:"bundle_id,omitempty"`
	// The name of the faulted object at the time the fault was diagnosed.
	TargetName *string `json:"target_name,omitempty"`
	// The type of the object that is faulted.
	TargetObjectType *string `json:"target_object_type,omitempty"`
	// The ID of the object that is faulted.
	TargetObjectId *string `json:"target_object_id,omitempty"`
	// The summary of the fault.
	Title *string `json:"title,omitempty"`
	// The full description of the fault.
	Description *string `json:"description,omitempty"`
	// The suggested action to be taken.
	FaultAction *string `json:"fault_action,omitempty"`
	// The automated response taken by the Delphix engine.
	Response *string `json:"response,omitempty"`
	// The severity of the fault event.
	Severity *string `json:"severity,omitempty"`
	// The status of the fault.
	Status *string `json:"status,omitempty"`
	// The date when the fault was diagnosed.
	DateDiagnosed *time.Time `json:"date_diagnosed,omitempty"`
	// The date when the fault was resolved.
	DateResolved *time.Time `json:"date_resolved,omitempty"`
	// A comment that describes the fault resolution.
	ResolutionComments *string `json:"resolution_comments,omitempty"`
}

// NewVirtualizationFault instantiates a new VirtualizationFault object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVirtualizationFault() *VirtualizationFault {
	this := VirtualizationFault{}
	return &this
}

// NewVirtualizationFaultWithDefaults instantiates a new VirtualizationFault object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVirtualizationFaultWithDefaults() *VirtualizationFault {
	this := VirtualizationFault{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *VirtualizationFault) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualizationFault) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *VirtualizationFault) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *VirtualizationFault) SetId(v string) {
	o.Id = &v
}

// GetEngineId returns the EngineId field value if set, zero value otherwise.
func (o *VirtualizationFault) GetEngineId() string {
	if o == nil || IsNil(o.EngineId) {
		var ret string
		return ret
	}
	return *o.EngineId
}

// GetEngineIdOk returns a tuple with the EngineId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualizationFault) GetEngineIdOk() (*string, bool) {
	if o == nil || IsNil(o.EngineId) {
		return nil, false
	}
	return o.EngineId, true
}

// HasEngineId returns a boolean if a field has been set.
func (o *VirtualizationFault) HasEngineId() bool {
	if o != nil && !IsNil(o.EngineId) {
		return true
	}

	return false
}

// SetEngineId gets a reference to the given string and assigns it to the EngineId field.
func (o *VirtualizationFault) SetEngineId(v string) {
	o.EngineId = &v
}

// GetBundleId returns the BundleId field value if set, zero value otherwise.
func (o *VirtualizationFault) GetBundleId() string {
	if o == nil || IsNil(o.BundleId) {
		var ret string
		return ret
	}
	return *o.BundleId
}

// GetBundleIdOk returns a tuple with the BundleId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualizationFault) GetBundleIdOk() (*string, bool) {
	if o == nil || IsNil(o.BundleId) {
		return nil, false
	}
	return o.BundleId, true
}

// HasBundleId returns a boolean if a field has been set.
func (o *VirtualizationFault) HasBundleId() bool {
	if o != nil && !IsNil(o.BundleId) {
		return true
	}

	return false
}

// SetBundleId gets a reference to the given string and assigns it to the BundleId field.
func (o *VirtualizationFault) SetBundleId(v string) {
	o.BundleId = &v
}

// GetTargetName returns the TargetName field value if set, zero value otherwise.
func (o *VirtualizationFault) GetTargetName() string {
	if o == nil || IsNil(o.TargetName) {
		var ret string
		return ret
	}
	return *o.TargetName
}

// GetTargetNameOk returns a tuple with the TargetName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualizationFault) GetTargetNameOk() (*string, bool) {
	if o == nil || IsNil(o.TargetName) {
		return nil, false
	}
	return o.TargetName, true
}

// HasTargetName returns a boolean if a field has been set.
func (o *VirtualizationFault) HasTargetName() bool {
	if o != nil && !IsNil(o.TargetName) {
		return true
	}

	return false
}

// SetTargetName gets a reference to the given string and assigns it to the TargetName field.
func (o *VirtualizationFault) SetTargetName(v string) {
	o.TargetName = &v
}

// GetTargetObjectType returns the TargetObjectType field value if set, zero value otherwise.
func (o *VirtualizationFault) GetTargetObjectType() string {
	if o == nil || IsNil(o.TargetObjectType) {
		var ret string
		return ret
	}
	return *o.TargetObjectType
}

// GetTargetObjectTypeOk returns a tuple with the TargetObjectType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualizationFault) GetTargetObjectTypeOk() (*string, bool) {
	if o == nil || IsNil(o.TargetObjectType) {
		return nil, false
	}
	return o.TargetObjectType, true
}

// HasTargetObjectType returns a boolean if a field has been set.
func (o *VirtualizationFault) HasTargetObjectType() bool {
	if o != nil && !IsNil(o.TargetObjectType) {
		return true
	}

	return false
}

// SetTargetObjectType gets a reference to the given string and assigns it to the TargetObjectType field.
func (o *VirtualizationFault) SetTargetObjectType(v string) {
	o.TargetObjectType = &v
}

// GetTargetObjectId returns the TargetObjectId field value if set, zero value otherwise.
func (o *VirtualizationFault) GetTargetObjectId() string {
	if o == nil || IsNil(o.TargetObjectId) {
		var ret string
		return ret
	}
	return *o.TargetObjectId
}

// GetTargetObjectIdOk returns a tuple with the TargetObjectId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualizationFault) GetTargetObjectIdOk() (*string, bool) {
	if o == nil || IsNil(o.TargetObjectId) {
		return nil, false
	}
	return o.TargetObjectId, true
}

// HasTargetObjectId returns a boolean if a field has been set.
func (o *VirtualizationFault) HasTargetObjectId() bool {
	if o != nil && !IsNil(o.TargetObjectId) {
		return true
	}

	return false
}

// SetTargetObjectId gets a reference to the given string and assigns it to the TargetObjectId field.
func (o *VirtualizationFault) SetTargetObjectId(v string) {
	o.TargetObjectId = &v
}

// GetTitle returns the Title field value if set, zero value otherwise.
func (o *VirtualizationFault) GetTitle() string {
	if o == nil || IsNil(o.Title) {
		var ret string
		return ret
	}
	return *o.Title
}

// GetTitleOk returns a tuple with the Title field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualizationFault) GetTitleOk() (*string, bool) {
	if o == nil || IsNil(o.Title) {
		return nil, false
	}
	return o.Title, true
}

// HasTitle returns a boolean if a field has been set.
func (o *VirtualizationFault) HasTitle() bool {
	if o != nil && !IsNil(o.Title) {
		return true
	}

	return false
}

// SetTitle gets a reference to the given string and assigns it to the Title field.
func (o *VirtualizationFault) SetTitle(v string) {
	o.Title = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *VirtualizationFault) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualizationFault) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *VirtualizationFault) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *VirtualizationFault) SetDescription(v string) {
	o.Description = &v
}

// GetFaultAction returns the FaultAction field value if set, zero value otherwise.
func (o *VirtualizationFault) GetFaultAction() string {
	if o == nil || IsNil(o.FaultAction) {
		var ret string
		return ret
	}
	return *o.FaultAction
}

// GetFaultActionOk returns a tuple with the FaultAction field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualizationFault) GetFaultActionOk() (*string, bool) {
	if o == nil || IsNil(o.FaultAction) {
		return nil, false
	}
	return o.FaultAction, true
}

// HasFaultAction returns a boolean if a field has been set.
func (o *VirtualizationFault) HasFaultAction() bool {
	if o != nil && !IsNil(o.FaultAction) {
		return true
	}

	return false
}

// SetFaultAction gets a reference to the given string and assigns it to the FaultAction field.
func (o *VirtualizationFault) SetFaultAction(v string) {
	o.FaultAction = &v
}

// GetResponse returns the Response field value if set, zero value otherwise.
func (o *VirtualizationFault) GetResponse() string {
	if o == nil || IsNil(o.Response) {
		var ret string
		return ret
	}
	return *o.Response
}

// GetResponseOk returns a tuple with the Response field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualizationFault) GetResponseOk() (*string, bool) {
	if o == nil || IsNil(o.Response) {
		return nil, false
	}
	return o.Response, true
}

// HasResponse returns a boolean if a field has been set.
func (o *VirtualizationFault) HasResponse() bool {
	if o != nil && !IsNil(o.Response) {
		return true
	}

	return false
}

// SetResponse gets a reference to the given string and assigns it to the Response field.
func (o *VirtualizationFault) SetResponse(v string) {
	o.Response = &v
}

// GetSeverity returns the Severity field value if set, zero value otherwise.
func (o *VirtualizationFault) GetSeverity() string {
	if o == nil || IsNil(o.Severity) {
		var ret string
		return ret
	}
	return *o.Severity
}

// GetSeverityOk returns a tuple with the Severity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualizationFault) GetSeverityOk() (*string, bool) {
	if o == nil || IsNil(o.Severity) {
		return nil, false
	}
	return o.Severity, true
}

// HasSeverity returns a boolean if a field has been set.
func (o *VirtualizationFault) HasSeverity() bool {
	if o != nil && !IsNil(o.Severity) {
		return true
	}

	return false
}

// SetSeverity gets a reference to the given string and assigns it to the Severity field.
func (o *VirtualizationFault) SetSeverity(v string) {
	o.Severity = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *VirtualizationFault) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualizationFault) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *VirtualizationFault) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *VirtualizationFault) SetStatus(v string) {
	o.Status = &v
}

// GetDateDiagnosed returns the DateDiagnosed field value if set, zero value otherwise.
func (o *VirtualizationFault) GetDateDiagnosed() time.Time {
	if o == nil || IsNil(o.DateDiagnosed) {
		var ret time.Time
		return ret
	}
	return *o.DateDiagnosed
}

// GetDateDiagnosedOk returns a tuple with the DateDiagnosed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualizationFault) GetDateDiagnosedOk() (*time.Time, bool) {
	if o == nil || IsNil(o.DateDiagnosed) {
		return nil, false
	}
	return o.DateDiagnosed, true
}

// HasDateDiagnosed returns a boolean if a field has been set.
func (o *VirtualizationFault) HasDateDiagnosed() bool {
	if o != nil && !IsNil(o.DateDiagnosed) {
		return true
	}

	return false
}

// SetDateDiagnosed gets a reference to the given time.Time and assigns it to the DateDiagnosed field.
func (o *VirtualizationFault) SetDateDiagnosed(v time.Time) {
	o.DateDiagnosed = &v
}

// GetDateResolved returns the DateResolved field value if set, zero value otherwise.
func (o *VirtualizationFault) GetDateResolved() time.Time {
	if o == nil || IsNil(o.DateResolved) {
		var ret time.Time
		return ret
	}
	return *o.DateResolved
}

// GetDateResolvedOk returns a tuple with the DateResolved field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualizationFault) GetDateResolvedOk() (*time.Time, bool) {
	if o == nil || IsNil(o.DateResolved) {
		return nil, false
	}
	return o.DateResolved, true
}

// HasDateResolved returns a boolean if a field has been set.
func (o *VirtualizationFault) HasDateResolved() bool {
	if o != nil && !IsNil(o.DateResolved) {
		return true
	}

	return false
}

// SetDateResolved gets a reference to the given time.Time and assigns it to the DateResolved field.
func (o *VirtualizationFault) SetDateResolved(v time.Time) {
	o.DateResolved = &v
}

// GetResolutionComments returns the ResolutionComments field value if set, zero value otherwise.
func (o *VirtualizationFault) GetResolutionComments() string {
	if o == nil || IsNil(o.ResolutionComments) {
		var ret string
		return ret
	}
	return *o.ResolutionComments
}

// GetResolutionCommentsOk returns a tuple with the ResolutionComments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualizationFault) GetResolutionCommentsOk() (*string, bool) {
	if o == nil || IsNil(o.ResolutionComments) {
		return nil, false
	}
	return o.ResolutionComments, true
}

// HasResolutionComments returns a boolean if a field has been set.
func (o *VirtualizationFault) HasResolutionComments() bool {
	if o != nil && !IsNil(o.ResolutionComments) {
		return true
	}

	return false
}

// SetResolutionComments gets a reference to the given string and assigns it to the ResolutionComments field.
func (o *VirtualizationFault) SetResolutionComments(v string) {
	o.ResolutionComments = &v
}

func (o VirtualizationFault) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VirtualizationFault) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.EngineId) {
		toSerialize["engine_id"] = o.EngineId
	}
	if !IsNil(o.BundleId) {
		toSerialize["bundle_id"] = o.BundleId
	}
	if !IsNil(o.TargetName) {
		toSerialize["target_name"] = o.TargetName
	}
	if !IsNil(o.TargetObjectType) {
		toSerialize["target_object_type"] = o.TargetObjectType
	}
	if !IsNil(o.TargetObjectId) {
		toSerialize["target_object_id"] = o.TargetObjectId
	}
	if !IsNil(o.Title) {
		toSerialize["title"] = o.Title
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.FaultAction) {
		toSerialize["fault_action"] = o.FaultAction
	}
	if !IsNil(o.Response) {
		toSerialize["response"] = o.Response
	}
	if !IsNil(o.Severity) {
		toSerialize["severity"] = o.Severity
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.DateDiagnosed) {
		toSerialize["date_diagnosed"] = o.DateDiagnosed
	}
	if !IsNil(o.DateResolved) {
		toSerialize["date_resolved"] = o.DateResolved
	}
	if !IsNil(o.ResolutionComments) {
		toSerialize["resolution_comments"] = o.ResolutionComments
	}
	return toSerialize, nil
}

type NullableVirtualizationFault struct {
	value *VirtualizationFault
	isSet bool
}

func (v NullableVirtualizationFault) Get() *VirtualizationFault {
	return v.value
}

func (v *NullableVirtualizationFault) Set(val *VirtualizationFault) {
	v.value = val
	v.isSet = true
}

func (v NullableVirtualizationFault) IsSet() bool {
	return v.isSet
}

func (v *NullableVirtualizationFault) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVirtualizationFault(val *VirtualizationFault) *NullableVirtualizationFault {
	return &NullableVirtualizationFault{value: val, isSet: true}
}

func (v NullableVirtualizationFault) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVirtualizationFault) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


