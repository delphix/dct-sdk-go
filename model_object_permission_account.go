/*
Delphix DCT API

Delphix DCT API

API version: 3.18.0
Contact: support@delphix.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package delphix_dct_api

import (
	"encoding/json"
)

// checks if the ObjectPermissionAccount type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ObjectPermissionAccount{}

// ObjectPermissionAccount The account details for object permission.
type ObjectPermissionAccount struct {
	// Numeric ID of the Account.
	Id *int64 `json:"id,omitempty"`
	// First name of the Account.
	FirstName *string `json:"first_name,omitempty"`
	// Last name of the Account.
	LastName *string `json:"last_name,omitempty"`
	// Email of the Account.
	Email *string `json:"email,omitempty"`
	// Access groups of the Account.
	AccessGroups []ObjectPermissionAccessGroups `json:"access_groups,omitempty"`
}

// NewObjectPermissionAccount instantiates a new ObjectPermissionAccount object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewObjectPermissionAccount() *ObjectPermissionAccount {
	this := ObjectPermissionAccount{}
	return &this
}

// NewObjectPermissionAccountWithDefaults instantiates a new ObjectPermissionAccount object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewObjectPermissionAccountWithDefaults() *ObjectPermissionAccount {
	this := ObjectPermissionAccount{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ObjectPermissionAccount) GetId() int64 {
	if o == nil || IsNil(o.Id) {
		var ret int64
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjectPermissionAccount) GetIdOk() (*int64, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ObjectPermissionAccount) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int64 and assigns it to the Id field.
func (o *ObjectPermissionAccount) SetId(v int64) {
	o.Id = &v
}

// GetFirstName returns the FirstName field value if set, zero value otherwise.
func (o *ObjectPermissionAccount) GetFirstName() string {
	if o == nil || IsNil(o.FirstName) {
		var ret string
		return ret
	}
	return *o.FirstName
}

// GetFirstNameOk returns a tuple with the FirstName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjectPermissionAccount) GetFirstNameOk() (*string, bool) {
	if o == nil || IsNil(o.FirstName) {
		return nil, false
	}
	return o.FirstName, true
}

// HasFirstName returns a boolean if a field has been set.
func (o *ObjectPermissionAccount) HasFirstName() bool {
	if o != nil && !IsNil(o.FirstName) {
		return true
	}

	return false
}

// SetFirstName gets a reference to the given string and assigns it to the FirstName field.
func (o *ObjectPermissionAccount) SetFirstName(v string) {
	o.FirstName = &v
}

// GetLastName returns the LastName field value if set, zero value otherwise.
func (o *ObjectPermissionAccount) GetLastName() string {
	if o == nil || IsNil(o.LastName) {
		var ret string
		return ret
	}
	return *o.LastName
}

// GetLastNameOk returns a tuple with the LastName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjectPermissionAccount) GetLastNameOk() (*string, bool) {
	if o == nil || IsNil(o.LastName) {
		return nil, false
	}
	return o.LastName, true
}

// HasLastName returns a boolean if a field has been set.
func (o *ObjectPermissionAccount) HasLastName() bool {
	if o != nil && !IsNil(o.LastName) {
		return true
	}

	return false
}

// SetLastName gets a reference to the given string and assigns it to the LastName field.
func (o *ObjectPermissionAccount) SetLastName(v string) {
	o.LastName = &v
}

// GetEmail returns the Email field value if set, zero value otherwise.
func (o *ObjectPermissionAccount) GetEmail() string {
	if o == nil || IsNil(o.Email) {
		var ret string
		return ret
	}
	return *o.Email
}

// GetEmailOk returns a tuple with the Email field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjectPermissionAccount) GetEmailOk() (*string, bool) {
	if o == nil || IsNil(o.Email) {
		return nil, false
	}
	return o.Email, true
}

// HasEmail returns a boolean if a field has been set.
func (o *ObjectPermissionAccount) HasEmail() bool {
	if o != nil && !IsNil(o.Email) {
		return true
	}

	return false
}

// SetEmail gets a reference to the given string and assigns it to the Email field.
func (o *ObjectPermissionAccount) SetEmail(v string) {
	o.Email = &v
}

// GetAccessGroups returns the AccessGroups field value if set, zero value otherwise.
func (o *ObjectPermissionAccount) GetAccessGroups() []ObjectPermissionAccessGroups {
	if o == nil || IsNil(o.AccessGroups) {
		var ret []ObjectPermissionAccessGroups
		return ret
	}
	return o.AccessGroups
}

// GetAccessGroupsOk returns a tuple with the AccessGroups field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjectPermissionAccount) GetAccessGroupsOk() ([]ObjectPermissionAccessGroups, bool) {
	if o == nil || IsNil(o.AccessGroups) {
		return nil, false
	}
	return o.AccessGroups, true
}

// HasAccessGroups returns a boolean if a field has been set.
func (o *ObjectPermissionAccount) HasAccessGroups() bool {
	if o != nil && !IsNil(o.AccessGroups) {
		return true
	}

	return false
}

// SetAccessGroups gets a reference to the given []ObjectPermissionAccessGroups and assigns it to the AccessGroups field.
func (o *ObjectPermissionAccount) SetAccessGroups(v []ObjectPermissionAccessGroups) {
	o.AccessGroups = v
}

func (o ObjectPermissionAccount) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ObjectPermissionAccount) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.FirstName) {
		toSerialize["first_name"] = o.FirstName
	}
	if !IsNil(o.LastName) {
		toSerialize["last_name"] = o.LastName
	}
	if !IsNil(o.Email) {
		toSerialize["email"] = o.Email
	}
	if !IsNil(o.AccessGroups) {
		toSerialize["access_groups"] = o.AccessGroups
	}
	return toSerialize, nil
}

type NullableObjectPermissionAccount struct {
	value *ObjectPermissionAccount
	isSet bool
}

func (v NullableObjectPermissionAccount) Get() *ObjectPermissionAccount {
	return v.value
}

func (v *NullableObjectPermissionAccount) Set(val *ObjectPermissionAccount) {
	v.value = val
	v.isSet = true
}

func (v NullableObjectPermissionAccount) IsSet() bool {
	return v.isSet
}

func (v *NullableObjectPermissionAccount) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableObjectPermissionAccount(val *ObjectPermissionAccount) *NullableObjectPermissionAccount {
	return &NullableObjectPermissionAccount{value: val, isSet: true}
}

func (v NullableObjectPermissionAccount) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableObjectPermissionAccount) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


