/*
Delphix DCT API

Delphix DCT API

API version: 3.18.0
Contact: support@delphix.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package delphix_dct_api

import (
	"encoding/json"
)

// checks if the CreateMaskingJobRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateMaskingJobRequest{}

// CreateMaskingJobRequest Parameters to create a MaskingJob.
type CreateMaskingJobRequest struct {
	// The name to give the Masking Job.
	Name *string `json:"name,omitempty"`
	// The description of the Job (Hyperscale Job only).
	Description *string `json:"description,omitempty"`
	// The type of Job.
	JobType *string `json:"job_type,omitempty"`
	// The ID of the HyperscaleInstance to create this Job on (Hyperscale Job only).
	HyperscaleInstanceId *string `json:"hyperscale_instance_id,omitempty"`
	// The ID of the Masking Job to use as the source (Hyperscale Job only).
	SourceMaskingJobId *string `json:"source_masking_job_id,omitempty"`
	// The username to set for the Source Connector that will be imported (Hyperscale Job only).
	HyperscaleSourceConnectorUsername *string `json:"hyperscale_source_connector_username,omitempty"`
	// The password to set for the Source Connector that will be imported (Hyperscale Job only).
	HyperscaleSourceConnectorPassword *string `json:"hyperscale_source_connector_password,omitempty"`
	// The username to set for the Target Connector that will be imported (Hyperscale Job only).
	HyperscaleTargetConnectorUsername *string `json:"hyperscale_target_connector_username,omitempty"`
	// The password to set for the Target Connector that will be imported (Hyperscale Job only).
	HyperscaleTargetConnectorPassword *string `json:"hyperscale_target_connector_password,omitempty"`
	// The ID of the MountPoint to use for the resulting dataset (Hyperscale Job only).
	MountPointId *string `json:"mount_point_id,omitempty"`
	// The number of unloaded files to be generated from the source database (Hyperscale Job only).
	UnloadSplit *int64 `json:"unload_split,omitempty"`
	// The stream size to be used by the sqlldr oracle utility which specifies the size (in bytes) of the data stream sent from the client to the server (Hyperscale Job only).
	StreamSize *int64 `json:"stream_size,omitempty"`
	// Defines whether execution data will be stored after execution is complete (Hyperscale Job only).
	RetainExecutionData *string `json:"retain_execution_data,omitempty"`
	// Maximum memory, in MB, to be allocated for each Masking job (Hyperscale Job only).
	MaxMemory *int32 `json:"max_memory,omitempty"`
	// Minimum memory, in MB, to be allocated for each Masking job (Hyperscale Job only).
	MinMemory *int32 `json:"min_memory,omitempty"`
	// The granularity with which the masking engine provides updates on the progress of the masking job. For instance, a feedbackSize of 50000 results in log updates whenever 50000 rows are processed during the masking phase (Hyperscale Job only).
	FeedbackSize *int32 `json:"feedback_size,omitempty"`
	// The stream row limit constrains the total number of rows that may enter the job for each masking stream. Setting this value to 0 allows unlimited rows into each stream, while leaving it blank will select a default limit based on job type (Hyperscale Job only).
	StreamRowLimit *int32 `json:"stream_row_limit,omitempty"`
	// Number of input streams to be configured for Masking Job (Hyperscale Job only).
	NumInputStreams *int32 `json:"num_input_streams,omitempty"`
	// Maximum number of parallel connection that the Hyperscale instance can have with the source datasource (Hyperscale Job only).
	MaxConcurrentSourceConnections *int32 `json:"max_concurrent_source_connections,omitempty"`
	// Maximum number of parallel connection that the Hyperscale instance can have with the target datasource (Hyperscale Job only).
	MaxConcurrentTargetConnections *int32 `json:"max_concurrent_target_connections,omitempty"`
	// The degree of parallelism (DOP) per Oracle job to recreate the index in the post-load process (Hyperscale Job only).
	ParallelismDegree *int32 `json:"parallelism_degree,omitempty"`
	Tags []Tag `json:"tags,omitempty"`
	// Whether the account creating this Masking job must be configured as owner of it (Hyperscale Job only).
	MakeCurrentAccountOwner *bool `json:"make_current_account_owner,omitempty"`
}

// NewCreateMaskingJobRequest instantiates a new CreateMaskingJobRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateMaskingJobRequest() *CreateMaskingJobRequest {
	this := CreateMaskingJobRequest{}
	var makeCurrentAccountOwner bool = true
	this.MakeCurrentAccountOwner = &makeCurrentAccountOwner
	return &this
}

// NewCreateMaskingJobRequestWithDefaults instantiates a new CreateMaskingJobRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateMaskingJobRequestWithDefaults() *CreateMaskingJobRequest {
	this := CreateMaskingJobRequest{}
	var makeCurrentAccountOwner bool = true
	this.MakeCurrentAccountOwner = &makeCurrentAccountOwner
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *CreateMaskingJobRequest) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateMaskingJobRequest) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *CreateMaskingJobRequest) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *CreateMaskingJobRequest) SetName(v string) {
	o.Name = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *CreateMaskingJobRequest) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateMaskingJobRequest) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *CreateMaskingJobRequest) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *CreateMaskingJobRequest) SetDescription(v string) {
	o.Description = &v
}

// GetJobType returns the JobType field value if set, zero value otherwise.
func (o *CreateMaskingJobRequest) GetJobType() string {
	if o == nil || IsNil(o.JobType) {
		var ret string
		return ret
	}
	return *o.JobType
}

// GetJobTypeOk returns a tuple with the JobType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateMaskingJobRequest) GetJobTypeOk() (*string, bool) {
	if o == nil || IsNil(o.JobType) {
		return nil, false
	}
	return o.JobType, true
}

// HasJobType returns a boolean if a field has been set.
func (o *CreateMaskingJobRequest) HasJobType() bool {
	if o != nil && !IsNil(o.JobType) {
		return true
	}

	return false
}

// SetJobType gets a reference to the given string and assigns it to the JobType field.
func (o *CreateMaskingJobRequest) SetJobType(v string) {
	o.JobType = &v
}

// GetHyperscaleInstanceId returns the HyperscaleInstanceId field value if set, zero value otherwise.
func (o *CreateMaskingJobRequest) GetHyperscaleInstanceId() string {
	if o == nil || IsNil(o.HyperscaleInstanceId) {
		var ret string
		return ret
	}
	return *o.HyperscaleInstanceId
}

// GetHyperscaleInstanceIdOk returns a tuple with the HyperscaleInstanceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateMaskingJobRequest) GetHyperscaleInstanceIdOk() (*string, bool) {
	if o == nil || IsNil(o.HyperscaleInstanceId) {
		return nil, false
	}
	return o.HyperscaleInstanceId, true
}

// HasHyperscaleInstanceId returns a boolean if a field has been set.
func (o *CreateMaskingJobRequest) HasHyperscaleInstanceId() bool {
	if o != nil && !IsNil(o.HyperscaleInstanceId) {
		return true
	}

	return false
}

// SetHyperscaleInstanceId gets a reference to the given string and assigns it to the HyperscaleInstanceId field.
func (o *CreateMaskingJobRequest) SetHyperscaleInstanceId(v string) {
	o.HyperscaleInstanceId = &v
}

// GetSourceMaskingJobId returns the SourceMaskingJobId field value if set, zero value otherwise.
func (o *CreateMaskingJobRequest) GetSourceMaskingJobId() string {
	if o == nil || IsNil(o.SourceMaskingJobId) {
		var ret string
		return ret
	}
	return *o.SourceMaskingJobId
}

// GetSourceMaskingJobIdOk returns a tuple with the SourceMaskingJobId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateMaskingJobRequest) GetSourceMaskingJobIdOk() (*string, bool) {
	if o == nil || IsNil(o.SourceMaskingJobId) {
		return nil, false
	}
	return o.SourceMaskingJobId, true
}

// HasSourceMaskingJobId returns a boolean if a field has been set.
func (o *CreateMaskingJobRequest) HasSourceMaskingJobId() bool {
	if o != nil && !IsNil(o.SourceMaskingJobId) {
		return true
	}

	return false
}

// SetSourceMaskingJobId gets a reference to the given string and assigns it to the SourceMaskingJobId field.
func (o *CreateMaskingJobRequest) SetSourceMaskingJobId(v string) {
	o.SourceMaskingJobId = &v
}

// GetHyperscaleSourceConnectorUsername returns the HyperscaleSourceConnectorUsername field value if set, zero value otherwise.
func (o *CreateMaskingJobRequest) GetHyperscaleSourceConnectorUsername() string {
	if o == nil || IsNil(o.HyperscaleSourceConnectorUsername) {
		var ret string
		return ret
	}
	return *o.HyperscaleSourceConnectorUsername
}

// GetHyperscaleSourceConnectorUsernameOk returns a tuple with the HyperscaleSourceConnectorUsername field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateMaskingJobRequest) GetHyperscaleSourceConnectorUsernameOk() (*string, bool) {
	if o == nil || IsNil(o.HyperscaleSourceConnectorUsername) {
		return nil, false
	}
	return o.HyperscaleSourceConnectorUsername, true
}

// HasHyperscaleSourceConnectorUsername returns a boolean if a field has been set.
func (o *CreateMaskingJobRequest) HasHyperscaleSourceConnectorUsername() bool {
	if o != nil && !IsNil(o.HyperscaleSourceConnectorUsername) {
		return true
	}

	return false
}

// SetHyperscaleSourceConnectorUsername gets a reference to the given string and assigns it to the HyperscaleSourceConnectorUsername field.
func (o *CreateMaskingJobRequest) SetHyperscaleSourceConnectorUsername(v string) {
	o.HyperscaleSourceConnectorUsername = &v
}

// GetHyperscaleSourceConnectorPassword returns the HyperscaleSourceConnectorPassword field value if set, zero value otherwise.
func (o *CreateMaskingJobRequest) GetHyperscaleSourceConnectorPassword() string {
	if o == nil || IsNil(o.HyperscaleSourceConnectorPassword) {
		var ret string
		return ret
	}
	return *o.HyperscaleSourceConnectorPassword
}

// GetHyperscaleSourceConnectorPasswordOk returns a tuple with the HyperscaleSourceConnectorPassword field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateMaskingJobRequest) GetHyperscaleSourceConnectorPasswordOk() (*string, bool) {
	if o == nil || IsNil(o.HyperscaleSourceConnectorPassword) {
		return nil, false
	}
	return o.HyperscaleSourceConnectorPassword, true
}

// HasHyperscaleSourceConnectorPassword returns a boolean if a field has been set.
func (o *CreateMaskingJobRequest) HasHyperscaleSourceConnectorPassword() bool {
	if o != nil && !IsNil(o.HyperscaleSourceConnectorPassword) {
		return true
	}

	return false
}

// SetHyperscaleSourceConnectorPassword gets a reference to the given string and assigns it to the HyperscaleSourceConnectorPassword field.
func (o *CreateMaskingJobRequest) SetHyperscaleSourceConnectorPassword(v string) {
	o.HyperscaleSourceConnectorPassword = &v
}

// GetHyperscaleTargetConnectorUsername returns the HyperscaleTargetConnectorUsername field value if set, zero value otherwise.
func (o *CreateMaskingJobRequest) GetHyperscaleTargetConnectorUsername() string {
	if o == nil || IsNil(o.HyperscaleTargetConnectorUsername) {
		var ret string
		return ret
	}
	return *o.HyperscaleTargetConnectorUsername
}

// GetHyperscaleTargetConnectorUsernameOk returns a tuple with the HyperscaleTargetConnectorUsername field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateMaskingJobRequest) GetHyperscaleTargetConnectorUsernameOk() (*string, bool) {
	if o == nil || IsNil(o.HyperscaleTargetConnectorUsername) {
		return nil, false
	}
	return o.HyperscaleTargetConnectorUsername, true
}

// HasHyperscaleTargetConnectorUsername returns a boolean if a field has been set.
func (o *CreateMaskingJobRequest) HasHyperscaleTargetConnectorUsername() bool {
	if o != nil && !IsNil(o.HyperscaleTargetConnectorUsername) {
		return true
	}

	return false
}

// SetHyperscaleTargetConnectorUsername gets a reference to the given string and assigns it to the HyperscaleTargetConnectorUsername field.
func (o *CreateMaskingJobRequest) SetHyperscaleTargetConnectorUsername(v string) {
	o.HyperscaleTargetConnectorUsername = &v
}

// GetHyperscaleTargetConnectorPassword returns the HyperscaleTargetConnectorPassword field value if set, zero value otherwise.
func (o *CreateMaskingJobRequest) GetHyperscaleTargetConnectorPassword() string {
	if o == nil || IsNil(o.HyperscaleTargetConnectorPassword) {
		var ret string
		return ret
	}
	return *o.HyperscaleTargetConnectorPassword
}

// GetHyperscaleTargetConnectorPasswordOk returns a tuple with the HyperscaleTargetConnectorPassword field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateMaskingJobRequest) GetHyperscaleTargetConnectorPasswordOk() (*string, bool) {
	if o == nil || IsNil(o.HyperscaleTargetConnectorPassword) {
		return nil, false
	}
	return o.HyperscaleTargetConnectorPassword, true
}

// HasHyperscaleTargetConnectorPassword returns a boolean if a field has been set.
func (o *CreateMaskingJobRequest) HasHyperscaleTargetConnectorPassword() bool {
	if o != nil && !IsNil(o.HyperscaleTargetConnectorPassword) {
		return true
	}

	return false
}

// SetHyperscaleTargetConnectorPassword gets a reference to the given string and assigns it to the HyperscaleTargetConnectorPassword field.
func (o *CreateMaskingJobRequest) SetHyperscaleTargetConnectorPassword(v string) {
	o.HyperscaleTargetConnectorPassword = &v
}

// GetMountPointId returns the MountPointId field value if set, zero value otherwise.
func (o *CreateMaskingJobRequest) GetMountPointId() string {
	if o == nil || IsNil(o.MountPointId) {
		var ret string
		return ret
	}
	return *o.MountPointId
}

// GetMountPointIdOk returns a tuple with the MountPointId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateMaskingJobRequest) GetMountPointIdOk() (*string, bool) {
	if o == nil || IsNil(o.MountPointId) {
		return nil, false
	}
	return o.MountPointId, true
}

// HasMountPointId returns a boolean if a field has been set.
func (o *CreateMaskingJobRequest) HasMountPointId() bool {
	if o != nil && !IsNil(o.MountPointId) {
		return true
	}

	return false
}

// SetMountPointId gets a reference to the given string and assigns it to the MountPointId field.
func (o *CreateMaskingJobRequest) SetMountPointId(v string) {
	o.MountPointId = &v
}

// GetUnloadSplit returns the UnloadSplit field value if set, zero value otherwise.
func (o *CreateMaskingJobRequest) GetUnloadSplit() int64 {
	if o == nil || IsNil(o.UnloadSplit) {
		var ret int64
		return ret
	}
	return *o.UnloadSplit
}

// GetUnloadSplitOk returns a tuple with the UnloadSplit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateMaskingJobRequest) GetUnloadSplitOk() (*int64, bool) {
	if o == nil || IsNil(o.UnloadSplit) {
		return nil, false
	}
	return o.UnloadSplit, true
}

// HasUnloadSplit returns a boolean if a field has been set.
func (o *CreateMaskingJobRequest) HasUnloadSplit() bool {
	if o != nil && !IsNil(o.UnloadSplit) {
		return true
	}

	return false
}

// SetUnloadSplit gets a reference to the given int64 and assigns it to the UnloadSplit field.
func (o *CreateMaskingJobRequest) SetUnloadSplit(v int64) {
	o.UnloadSplit = &v
}

// GetStreamSize returns the StreamSize field value if set, zero value otherwise.
func (o *CreateMaskingJobRequest) GetStreamSize() int64 {
	if o == nil || IsNil(o.StreamSize) {
		var ret int64
		return ret
	}
	return *o.StreamSize
}

// GetStreamSizeOk returns a tuple with the StreamSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateMaskingJobRequest) GetStreamSizeOk() (*int64, bool) {
	if o == nil || IsNil(o.StreamSize) {
		return nil, false
	}
	return o.StreamSize, true
}

// HasStreamSize returns a boolean if a field has been set.
func (o *CreateMaskingJobRequest) HasStreamSize() bool {
	if o != nil && !IsNil(o.StreamSize) {
		return true
	}

	return false
}

// SetStreamSize gets a reference to the given int64 and assigns it to the StreamSize field.
func (o *CreateMaskingJobRequest) SetStreamSize(v int64) {
	o.StreamSize = &v
}

// GetRetainExecutionData returns the RetainExecutionData field value if set, zero value otherwise.
func (o *CreateMaskingJobRequest) GetRetainExecutionData() string {
	if o == nil || IsNil(o.RetainExecutionData) {
		var ret string
		return ret
	}
	return *o.RetainExecutionData
}

// GetRetainExecutionDataOk returns a tuple with the RetainExecutionData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateMaskingJobRequest) GetRetainExecutionDataOk() (*string, bool) {
	if o == nil || IsNil(o.RetainExecutionData) {
		return nil, false
	}
	return o.RetainExecutionData, true
}

// HasRetainExecutionData returns a boolean if a field has been set.
func (o *CreateMaskingJobRequest) HasRetainExecutionData() bool {
	if o != nil && !IsNil(o.RetainExecutionData) {
		return true
	}

	return false
}

// SetRetainExecutionData gets a reference to the given string and assigns it to the RetainExecutionData field.
func (o *CreateMaskingJobRequest) SetRetainExecutionData(v string) {
	o.RetainExecutionData = &v
}

// GetMaxMemory returns the MaxMemory field value if set, zero value otherwise.
func (o *CreateMaskingJobRequest) GetMaxMemory() int32 {
	if o == nil || IsNil(o.MaxMemory) {
		var ret int32
		return ret
	}
	return *o.MaxMemory
}

// GetMaxMemoryOk returns a tuple with the MaxMemory field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateMaskingJobRequest) GetMaxMemoryOk() (*int32, bool) {
	if o == nil || IsNil(o.MaxMemory) {
		return nil, false
	}
	return o.MaxMemory, true
}

// HasMaxMemory returns a boolean if a field has been set.
func (o *CreateMaskingJobRequest) HasMaxMemory() bool {
	if o != nil && !IsNil(o.MaxMemory) {
		return true
	}

	return false
}

// SetMaxMemory gets a reference to the given int32 and assigns it to the MaxMemory field.
func (o *CreateMaskingJobRequest) SetMaxMemory(v int32) {
	o.MaxMemory = &v
}

// GetMinMemory returns the MinMemory field value if set, zero value otherwise.
func (o *CreateMaskingJobRequest) GetMinMemory() int32 {
	if o == nil || IsNil(o.MinMemory) {
		var ret int32
		return ret
	}
	return *o.MinMemory
}

// GetMinMemoryOk returns a tuple with the MinMemory field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateMaskingJobRequest) GetMinMemoryOk() (*int32, bool) {
	if o == nil || IsNil(o.MinMemory) {
		return nil, false
	}
	return o.MinMemory, true
}

// HasMinMemory returns a boolean if a field has been set.
func (o *CreateMaskingJobRequest) HasMinMemory() bool {
	if o != nil && !IsNil(o.MinMemory) {
		return true
	}

	return false
}

// SetMinMemory gets a reference to the given int32 and assigns it to the MinMemory field.
func (o *CreateMaskingJobRequest) SetMinMemory(v int32) {
	o.MinMemory = &v
}

// GetFeedbackSize returns the FeedbackSize field value if set, zero value otherwise.
func (o *CreateMaskingJobRequest) GetFeedbackSize() int32 {
	if o == nil || IsNil(o.FeedbackSize) {
		var ret int32
		return ret
	}
	return *o.FeedbackSize
}

// GetFeedbackSizeOk returns a tuple with the FeedbackSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateMaskingJobRequest) GetFeedbackSizeOk() (*int32, bool) {
	if o == nil || IsNil(o.FeedbackSize) {
		return nil, false
	}
	return o.FeedbackSize, true
}

// HasFeedbackSize returns a boolean if a field has been set.
func (o *CreateMaskingJobRequest) HasFeedbackSize() bool {
	if o != nil && !IsNil(o.FeedbackSize) {
		return true
	}

	return false
}

// SetFeedbackSize gets a reference to the given int32 and assigns it to the FeedbackSize field.
func (o *CreateMaskingJobRequest) SetFeedbackSize(v int32) {
	o.FeedbackSize = &v
}

// GetStreamRowLimit returns the StreamRowLimit field value if set, zero value otherwise.
func (o *CreateMaskingJobRequest) GetStreamRowLimit() int32 {
	if o == nil || IsNil(o.StreamRowLimit) {
		var ret int32
		return ret
	}
	return *o.StreamRowLimit
}

// GetStreamRowLimitOk returns a tuple with the StreamRowLimit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateMaskingJobRequest) GetStreamRowLimitOk() (*int32, bool) {
	if o == nil || IsNil(o.StreamRowLimit) {
		return nil, false
	}
	return o.StreamRowLimit, true
}

// HasStreamRowLimit returns a boolean if a field has been set.
func (o *CreateMaskingJobRequest) HasStreamRowLimit() bool {
	if o != nil && !IsNil(o.StreamRowLimit) {
		return true
	}

	return false
}

// SetStreamRowLimit gets a reference to the given int32 and assigns it to the StreamRowLimit field.
func (o *CreateMaskingJobRequest) SetStreamRowLimit(v int32) {
	o.StreamRowLimit = &v
}

// GetNumInputStreams returns the NumInputStreams field value if set, zero value otherwise.
func (o *CreateMaskingJobRequest) GetNumInputStreams() int32 {
	if o == nil || IsNil(o.NumInputStreams) {
		var ret int32
		return ret
	}
	return *o.NumInputStreams
}

// GetNumInputStreamsOk returns a tuple with the NumInputStreams field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateMaskingJobRequest) GetNumInputStreamsOk() (*int32, bool) {
	if o == nil || IsNil(o.NumInputStreams) {
		return nil, false
	}
	return o.NumInputStreams, true
}

// HasNumInputStreams returns a boolean if a field has been set.
func (o *CreateMaskingJobRequest) HasNumInputStreams() bool {
	if o != nil && !IsNil(o.NumInputStreams) {
		return true
	}

	return false
}

// SetNumInputStreams gets a reference to the given int32 and assigns it to the NumInputStreams field.
func (o *CreateMaskingJobRequest) SetNumInputStreams(v int32) {
	o.NumInputStreams = &v
}

// GetMaxConcurrentSourceConnections returns the MaxConcurrentSourceConnections field value if set, zero value otherwise.
func (o *CreateMaskingJobRequest) GetMaxConcurrentSourceConnections() int32 {
	if o == nil || IsNil(o.MaxConcurrentSourceConnections) {
		var ret int32
		return ret
	}
	return *o.MaxConcurrentSourceConnections
}

// GetMaxConcurrentSourceConnectionsOk returns a tuple with the MaxConcurrentSourceConnections field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateMaskingJobRequest) GetMaxConcurrentSourceConnectionsOk() (*int32, bool) {
	if o == nil || IsNil(o.MaxConcurrentSourceConnections) {
		return nil, false
	}
	return o.MaxConcurrentSourceConnections, true
}

// HasMaxConcurrentSourceConnections returns a boolean if a field has been set.
func (o *CreateMaskingJobRequest) HasMaxConcurrentSourceConnections() bool {
	if o != nil && !IsNil(o.MaxConcurrentSourceConnections) {
		return true
	}

	return false
}

// SetMaxConcurrentSourceConnections gets a reference to the given int32 and assigns it to the MaxConcurrentSourceConnections field.
func (o *CreateMaskingJobRequest) SetMaxConcurrentSourceConnections(v int32) {
	o.MaxConcurrentSourceConnections = &v
}

// GetMaxConcurrentTargetConnections returns the MaxConcurrentTargetConnections field value if set, zero value otherwise.
func (o *CreateMaskingJobRequest) GetMaxConcurrentTargetConnections() int32 {
	if o == nil || IsNil(o.MaxConcurrentTargetConnections) {
		var ret int32
		return ret
	}
	return *o.MaxConcurrentTargetConnections
}

// GetMaxConcurrentTargetConnectionsOk returns a tuple with the MaxConcurrentTargetConnections field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateMaskingJobRequest) GetMaxConcurrentTargetConnectionsOk() (*int32, bool) {
	if o == nil || IsNil(o.MaxConcurrentTargetConnections) {
		return nil, false
	}
	return o.MaxConcurrentTargetConnections, true
}

// HasMaxConcurrentTargetConnections returns a boolean if a field has been set.
func (o *CreateMaskingJobRequest) HasMaxConcurrentTargetConnections() bool {
	if o != nil && !IsNil(o.MaxConcurrentTargetConnections) {
		return true
	}

	return false
}

// SetMaxConcurrentTargetConnections gets a reference to the given int32 and assigns it to the MaxConcurrentTargetConnections field.
func (o *CreateMaskingJobRequest) SetMaxConcurrentTargetConnections(v int32) {
	o.MaxConcurrentTargetConnections = &v
}

// GetParallelismDegree returns the ParallelismDegree field value if set, zero value otherwise.
func (o *CreateMaskingJobRequest) GetParallelismDegree() int32 {
	if o == nil || IsNil(o.ParallelismDegree) {
		var ret int32
		return ret
	}
	return *o.ParallelismDegree
}

// GetParallelismDegreeOk returns a tuple with the ParallelismDegree field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateMaskingJobRequest) GetParallelismDegreeOk() (*int32, bool) {
	if o == nil || IsNil(o.ParallelismDegree) {
		return nil, false
	}
	return o.ParallelismDegree, true
}

// HasParallelismDegree returns a boolean if a field has been set.
func (o *CreateMaskingJobRequest) HasParallelismDegree() bool {
	if o != nil && !IsNil(o.ParallelismDegree) {
		return true
	}

	return false
}

// SetParallelismDegree gets a reference to the given int32 and assigns it to the ParallelismDegree field.
func (o *CreateMaskingJobRequest) SetParallelismDegree(v int32) {
	o.ParallelismDegree = &v
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *CreateMaskingJobRequest) GetTags() []Tag {
	if o == nil || IsNil(o.Tags) {
		var ret []Tag
		return ret
	}
	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateMaskingJobRequest) GetTagsOk() ([]Tag, bool) {
	if o == nil || IsNil(o.Tags) {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *CreateMaskingJobRequest) HasTags() bool {
	if o != nil && !IsNil(o.Tags) {
		return true
	}

	return false
}

// SetTags gets a reference to the given []Tag and assigns it to the Tags field.
func (o *CreateMaskingJobRequest) SetTags(v []Tag) {
	o.Tags = v
}

// GetMakeCurrentAccountOwner returns the MakeCurrentAccountOwner field value if set, zero value otherwise.
func (o *CreateMaskingJobRequest) GetMakeCurrentAccountOwner() bool {
	if o == nil || IsNil(o.MakeCurrentAccountOwner) {
		var ret bool
		return ret
	}
	return *o.MakeCurrentAccountOwner
}

// GetMakeCurrentAccountOwnerOk returns a tuple with the MakeCurrentAccountOwner field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateMaskingJobRequest) GetMakeCurrentAccountOwnerOk() (*bool, bool) {
	if o == nil || IsNil(o.MakeCurrentAccountOwner) {
		return nil, false
	}
	return o.MakeCurrentAccountOwner, true
}

// HasMakeCurrentAccountOwner returns a boolean if a field has been set.
func (o *CreateMaskingJobRequest) HasMakeCurrentAccountOwner() bool {
	if o != nil && !IsNil(o.MakeCurrentAccountOwner) {
		return true
	}

	return false
}

// SetMakeCurrentAccountOwner gets a reference to the given bool and assigns it to the MakeCurrentAccountOwner field.
func (o *CreateMaskingJobRequest) SetMakeCurrentAccountOwner(v bool) {
	o.MakeCurrentAccountOwner = &v
}

func (o CreateMaskingJobRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateMaskingJobRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.JobType) {
		toSerialize["job_type"] = o.JobType
	}
	if !IsNil(o.HyperscaleInstanceId) {
		toSerialize["hyperscale_instance_id"] = o.HyperscaleInstanceId
	}
	if !IsNil(o.SourceMaskingJobId) {
		toSerialize["source_masking_job_id"] = o.SourceMaskingJobId
	}
	if !IsNil(o.HyperscaleSourceConnectorUsername) {
		toSerialize["hyperscale_source_connector_username"] = o.HyperscaleSourceConnectorUsername
	}
	if !IsNil(o.HyperscaleSourceConnectorPassword) {
		toSerialize["hyperscale_source_connector_password"] = o.HyperscaleSourceConnectorPassword
	}
	if !IsNil(o.HyperscaleTargetConnectorUsername) {
		toSerialize["hyperscale_target_connector_username"] = o.HyperscaleTargetConnectorUsername
	}
	if !IsNil(o.HyperscaleTargetConnectorPassword) {
		toSerialize["hyperscale_target_connector_password"] = o.HyperscaleTargetConnectorPassword
	}
	if !IsNil(o.MountPointId) {
		toSerialize["mount_point_id"] = o.MountPointId
	}
	if !IsNil(o.UnloadSplit) {
		toSerialize["unload_split"] = o.UnloadSplit
	}
	if !IsNil(o.StreamSize) {
		toSerialize["stream_size"] = o.StreamSize
	}
	if !IsNil(o.RetainExecutionData) {
		toSerialize["retain_execution_data"] = o.RetainExecutionData
	}
	if !IsNil(o.MaxMemory) {
		toSerialize["max_memory"] = o.MaxMemory
	}
	if !IsNil(o.MinMemory) {
		toSerialize["min_memory"] = o.MinMemory
	}
	if !IsNil(o.FeedbackSize) {
		toSerialize["feedback_size"] = o.FeedbackSize
	}
	if !IsNil(o.StreamRowLimit) {
		toSerialize["stream_row_limit"] = o.StreamRowLimit
	}
	if !IsNil(o.NumInputStreams) {
		toSerialize["num_input_streams"] = o.NumInputStreams
	}
	if !IsNil(o.MaxConcurrentSourceConnections) {
		toSerialize["max_concurrent_source_connections"] = o.MaxConcurrentSourceConnections
	}
	if !IsNil(o.MaxConcurrentTargetConnections) {
		toSerialize["max_concurrent_target_connections"] = o.MaxConcurrentTargetConnections
	}
	if !IsNil(o.ParallelismDegree) {
		toSerialize["parallelism_degree"] = o.ParallelismDegree
	}
	if !IsNil(o.Tags) {
		toSerialize["tags"] = o.Tags
	}
	if !IsNil(o.MakeCurrentAccountOwner) {
		toSerialize["make_current_account_owner"] = o.MakeCurrentAccountOwner
	}
	return toSerialize, nil
}

type NullableCreateMaskingJobRequest struct {
	value *CreateMaskingJobRequest
	isSet bool
}

func (v NullableCreateMaskingJobRequest) Get() *CreateMaskingJobRequest {
	return v.value
}

func (v *NullableCreateMaskingJobRequest) Set(val *CreateMaskingJobRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateMaskingJobRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateMaskingJobRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateMaskingJobRequest(val *CreateMaskingJobRequest) *NullableCreateMaskingJobRequest {
	return &NullableCreateMaskingJobRequest{value: val, isSet: true}
}

func (v NullableCreateMaskingJobRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateMaskingJobRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


