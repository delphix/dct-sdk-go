/*
Delphix DCT API

Delphix DCT API

API version: 3.18.0
Contact: support@delphix.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package delphix_dct_api

import (
	"encoding/json"
)

// checks if the FailoverNamespaceParameters type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FailoverNamespaceParameters{}

// FailoverNamespaceParameters The parameters to failover a Namespace.
type FailoverNamespaceParameters struct {
	// Whether to enable failback for the datasets being failed over.
	EnableFailback *bool `json:"enable_failback,omitempty"`
}

// NewFailoverNamespaceParameters instantiates a new FailoverNamespaceParameters object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFailoverNamespaceParameters() *FailoverNamespaceParameters {
	this := FailoverNamespaceParameters{}
	var enableFailback bool = false
	this.EnableFailback = &enableFailback
	return &this
}

// NewFailoverNamespaceParametersWithDefaults instantiates a new FailoverNamespaceParameters object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFailoverNamespaceParametersWithDefaults() *FailoverNamespaceParameters {
	this := FailoverNamespaceParameters{}
	var enableFailback bool = false
	this.EnableFailback = &enableFailback
	return &this
}

// GetEnableFailback returns the EnableFailback field value if set, zero value otherwise.
func (o *FailoverNamespaceParameters) GetEnableFailback() bool {
	if o == nil || IsNil(o.EnableFailback) {
		var ret bool
		return ret
	}
	return *o.EnableFailback
}

// GetEnableFailbackOk returns a tuple with the EnableFailback field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FailoverNamespaceParameters) GetEnableFailbackOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableFailback) {
		return nil, false
	}
	return o.EnableFailback, true
}

// HasEnableFailback returns a boolean if a field has been set.
func (o *FailoverNamespaceParameters) HasEnableFailback() bool {
	if o != nil && !IsNil(o.EnableFailback) {
		return true
	}

	return false
}

// SetEnableFailback gets a reference to the given bool and assigns it to the EnableFailback field.
func (o *FailoverNamespaceParameters) SetEnableFailback(v bool) {
	o.EnableFailback = &v
}

func (o FailoverNamespaceParameters) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FailoverNamespaceParameters) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.EnableFailback) {
		toSerialize["enable_failback"] = o.EnableFailback
	}
	return toSerialize, nil
}

type NullableFailoverNamespaceParameters struct {
	value *FailoverNamespaceParameters
	isSet bool
}

func (v NullableFailoverNamespaceParameters) Get() *FailoverNamespaceParameters {
	return v.value
}

func (v *NullableFailoverNamespaceParameters) Set(val *FailoverNamespaceParameters) {
	v.value = val
	v.isSet = true
}

func (v NullableFailoverNamespaceParameters) IsSet() bool {
	return v.isSet
}

func (v *NullableFailoverNamespaceParameters) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFailoverNamespaceParameters(val *FailoverNamespaceParameters) *NullableFailoverNamespaceParameters {
	return &NullableFailoverNamespaceParameters{value: val, isSet: true}
}

func (v NullableFailoverNamespaceParameters) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFailoverNamespaceParameters) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


