/*
Delphix DCT API

Delphix DCT API

API version: 3.17.0
Contact: support@delphix.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package delphix_dct_api

import (
	"encoding/json"
)

// checks if the EnableVDBGroupParameters type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EnableVDBGroupParameters{}

// EnableVDBGroupParameters Parameters to enable a VDBGroup.
type EnableVDBGroupParameters struct {
	VdbEnableParamMappings []VDBEnableParametersMapping `json:"vdb_enable_param_mappings,omitempty"`
}

// NewEnableVDBGroupParameters instantiates a new EnableVDBGroupParameters object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEnableVDBGroupParameters() *EnableVDBGroupParameters {
	this := EnableVDBGroupParameters{}
	return &this
}

// NewEnableVDBGroupParametersWithDefaults instantiates a new EnableVDBGroupParameters object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEnableVDBGroupParametersWithDefaults() *EnableVDBGroupParameters {
	this := EnableVDBGroupParameters{}
	return &this
}

// GetVdbEnableParamMappings returns the VdbEnableParamMappings field value if set, zero value otherwise.
func (o *EnableVDBGroupParameters) GetVdbEnableParamMappings() []VDBEnableParametersMapping {
	if o == nil || IsNil(o.VdbEnableParamMappings) {
		var ret []VDBEnableParametersMapping
		return ret
	}
	return o.VdbEnableParamMappings
}

// GetVdbEnableParamMappingsOk returns a tuple with the VdbEnableParamMappings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnableVDBGroupParameters) GetVdbEnableParamMappingsOk() ([]VDBEnableParametersMapping, bool) {
	if o == nil || IsNil(o.VdbEnableParamMappings) {
		return nil, false
	}
	return o.VdbEnableParamMappings, true
}

// HasVdbEnableParamMappings returns a boolean if a field has been set.
func (o *EnableVDBGroupParameters) HasVdbEnableParamMappings() bool {
	if o != nil && !IsNil(o.VdbEnableParamMappings) {
		return true
	}

	return false
}

// SetVdbEnableParamMappings gets a reference to the given []VDBEnableParametersMapping and assigns it to the VdbEnableParamMappings field.
func (o *EnableVDBGroupParameters) SetVdbEnableParamMappings(v []VDBEnableParametersMapping) {
	o.VdbEnableParamMappings = v
}

func (o EnableVDBGroupParameters) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EnableVDBGroupParameters) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.VdbEnableParamMappings) {
		toSerialize["vdb_enable_param_mappings"] = o.VdbEnableParamMappings
	}
	return toSerialize, nil
}

type NullableEnableVDBGroupParameters struct {
	value *EnableVDBGroupParameters
	isSet bool
}

func (v NullableEnableVDBGroupParameters) Get() *EnableVDBGroupParameters {
	return v.value
}

func (v *NullableEnableVDBGroupParameters) Set(val *EnableVDBGroupParameters) {
	v.value = val
	v.isSet = true
}

func (v NullableEnableVDBGroupParameters) IsSet() bool {
	return v.isSet
}

func (v *NullableEnableVDBGroupParameters) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnableVDBGroupParameters(val *EnableVDBGroupParameters) *NullableEnableVDBGroupParameters {
	return &NullableEnableVDBGroupParameters{value: val, isSet: true}
}

func (v NullableEnableVDBGroupParameters) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnableVDBGroupParameters) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


