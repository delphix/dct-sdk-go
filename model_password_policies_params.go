/*
Delphix DCT API

Delphix DCT API

API version: 3.17.0
Contact: support@delphix.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package delphix_dct_api

import (
	"encoding/json"
)

// checks if the PasswordPoliciesParams type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PasswordPoliciesParams{}

// PasswordPoliciesParams Parameters to read or update password policies
type PasswordPoliciesParams struct {
	// True if password policies are enforced/enabled.
	Enabled *bool `json:"enabled,omitempty"`
	// Minimum length for password.
	MinLength *int32 `json:"min_length,omitempty"`
	// The password can not be the same as any of the previous n passwords.
	ReuseDisallowLimit *int32 `json:"reuse_disallow_limit,omitempty"`
	// Mandate at least one digit in password.
	Digit *bool `json:"digit,omitempty"`
	// Mandate at least one uppercase letter in password.
	UppercaseLetter *bool `json:"uppercase_letter,omitempty"`
	// Mandate at least one lower letter in password.
	LowercaseLetter *bool `json:"lowercase_letter,omitempty"`
	// Mandate at least one special character in password.
	SpecialCharacter *bool `json:"special_character,omitempty"`
	// Disallows password containing case-insensitive user name or reversed user name.
	DisallowUsernameAsPassword *bool `json:"disallow_username_as_password,omitempty"`
	// The number of allowed attempts for incorrect password, after which the account gets locked.
	MaximumPasswordAttempts *int32 `json:"maximum_password_attempts,omitempty"`
}

// NewPasswordPoliciesParams instantiates a new PasswordPoliciesParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPasswordPoliciesParams() *PasswordPoliciesParams {
	this := PasswordPoliciesParams{}
	var enabled bool = true
	this.Enabled = &enabled
	var minLength int32 = 15
	this.MinLength = &minLength
	var reuseDisallowLimit int32 = 2
	this.ReuseDisallowLimit = &reuseDisallowLimit
	var digit bool = true
	this.Digit = &digit
	var uppercaseLetter bool = true
	this.UppercaseLetter = &uppercaseLetter
	var lowercaseLetter bool = true
	this.LowercaseLetter = &lowercaseLetter
	var specialCharacter bool = true
	this.SpecialCharacter = &specialCharacter
	var disallowUsernameAsPassword bool = true
	this.DisallowUsernameAsPassword = &disallowUsernameAsPassword
	var maximumPasswordAttempts int32 = 5
	this.MaximumPasswordAttempts = &maximumPasswordAttempts
	return &this
}

// NewPasswordPoliciesParamsWithDefaults instantiates a new PasswordPoliciesParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPasswordPoliciesParamsWithDefaults() *PasswordPoliciesParams {
	this := PasswordPoliciesParams{}
	var enabled bool = true
	this.Enabled = &enabled
	var minLength int32 = 15
	this.MinLength = &minLength
	var reuseDisallowLimit int32 = 2
	this.ReuseDisallowLimit = &reuseDisallowLimit
	var digit bool = true
	this.Digit = &digit
	var uppercaseLetter bool = true
	this.UppercaseLetter = &uppercaseLetter
	var lowercaseLetter bool = true
	this.LowercaseLetter = &lowercaseLetter
	var specialCharacter bool = true
	this.SpecialCharacter = &specialCharacter
	var disallowUsernameAsPassword bool = true
	this.DisallowUsernameAsPassword = &disallowUsernameAsPassword
	var maximumPasswordAttempts int32 = 5
	this.MaximumPasswordAttempts = &maximumPasswordAttempts
	return &this
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *PasswordPoliciesParams) GetEnabled() bool {
	if o == nil || IsNil(o.Enabled) {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PasswordPoliciesParams) GetEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Enabled) {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *PasswordPoliciesParams) HasEnabled() bool {
	if o != nil && !IsNil(o.Enabled) {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *PasswordPoliciesParams) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetMinLength returns the MinLength field value if set, zero value otherwise.
func (o *PasswordPoliciesParams) GetMinLength() int32 {
	if o == nil || IsNil(o.MinLength) {
		var ret int32
		return ret
	}
	return *o.MinLength
}

// GetMinLengthOk returns a tuple with the MinLength field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PasswordPoliciesParams) GetMinLengthOk() (*int32, bool) {
	if o == nil || IsNil(o.MinLength) {
		return nil, false
	}
	return o.MinLength, true
}

// HasMinLength returns a boolean if a field has been set.
func (o *PasswordPoliciesParams) HasMinLength() bool {
	if o != nil && !IsNil(o.MinLength) {
		return true
	}

	return false
}

// SetMinLength gets a reference to the given int32 and assigns it to the MinLength field.
func (o *PasswordPoliciesParams) SetMinLength(v int32) {
	o.MinLength = &v
}

// GetReuseDisallowLimit returns the ReuseDisallowLimit field value if set, zero value otherwise.
func (o *PasswordPoliciesParams) GetReuseDisallowLimit() int32 {
	if o == nil || IsNil(o.ReuseDisallowLimit) {
		var ret int32
		return ret
	}
	return *o.ReuseDisallowLimit
}

// GetReuseDisallowLimitOk returns a tuple with the ReuseDisallowLimit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PasswordPoliciesParams) GetReuseDisallowLimitOk() (*int32, bool) {
	if o == nil || IsNil(o.ReuseDisallowLimit) {
		return nil, false
	}
	return o.ReuseDisallowLimit, true
}

// HasReuseDisallowLimit returns a boolean if a field has been set.
func (o *PasswordPoliciesParams) HasReuseDisallowLimit() bool {
	if o != nil && !IsNil(o.ReuseDisallowLimit) {
		return true
	}

	return false
}

// SetReuseDisallowLimit gets a reference to the given int32 and assigns it to the ReuseDisallowLimit field.
func (o *PasswordPoliciesParams) SetReuseDisallowLimit(v int32) {
	o.ReuseDisallowLimit = &v
}

// GetDigit returns the Digit field value if set, zero value otherwise.
func (o *PasswordPoliciesParams) GetDigit() bool {
	if o == nil || IsNil(o.Digit) {
		var ret bool
		return ret
	}
	return *o.Digit
}

// GetDigitOk returns a tuple with the Digit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PasswordPoliciesParams) GetDigitOk() (*bool, bool) {
	if o == nil || IsNil(o.Digit) {
		return nil, false
	}
	return o.Digit, true
}

// HasDigit returns a boolean if a field has been set.
func (o *PasswordPoliciesParams) HasDigit() bool {
	if o != nil && !IsNil(o.Digit) {
		return true
	}

	return false
}

// SetDigit gets a reference to the given bool and assigns it to the Digit field.
func (o *PasswordPoliciesParams) SetDigit(v bool) {
	o.Digit = &v
}

// GetUppercaseLetter returns the UppercaseLetter field value if set, zero value otherwise.
func (o *PasswordPoliciesParams) GetUppercaseLetter() bool {
	if o == nil || IsNil(o.UppercaseLetter) {
		var ret bool
		return ret
	}
	return *o.UppercaseLetter
}

// GetUppercaseLetterOk returns a tuple with the UppercaseLetter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PasswordPoliciesParams) GetUppercaseLetterOk() (*bool, bool) {
	if o == nil || IsNil(o.UppercaseLetter) {
		return nil, false
	}
	return o.UppercaseLetter, true
}

// HasUppercaseLetter returns a boolean if a field has been set.
func (o *PasswordPoliciesParams) HasUppercaseLetter() bool {
	if o != nil && !IsNil(o.UppercaseLetter) {
		return true
	}

	return false
}

// SetUppercaseLetter gets a reference to the given bool and assigns it to the UppercaseLetter field.
func (o *PasswordPoliciesParams) SetUppercaseLetter(v bool) {
	o.UppercaseLetter = &v
}

// GetLowercaseLetter returns the LowercaseLetter field value if set, zero value otherwise.
func (o *PasswordPoliciesParams) GetLowercaseLetter() bool {
	if o == nil || IsNil(o.LowercaseLetter) {
		var ret bool
		return ret
	}
	return *o.LowercaseLetter
}

// GetLowercaseLetterOk returns a tuple with the LowercaseLetter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PasswordPoliciesParams) GetLowercaseLetterOk() (*bool, bool) {
	if o == nil || IsNil(o.LowercaseLetter) {
		return nil, false
	}
	return o.LowercaseLetter, true
}

// HasLowercaseLetter returns a boolean if a field has been set.
func (o *PasswordPoliciesParams) HasLowercaseLetter() bool {
	if o != nil && !IsNil(o.LowercaseLetter) {
		return true
	}

	return false
}

// SetLowercaseLetter gets a reference to the given bool and assigns it to the LowercaseLetter field.
func (o *PasswordPoliciesParams) SetLowercaseLetter(v bool) {
	o.LowercaseLetter = &v
}

// GetSpecialCharacter returns the SpecialCharacter field value if set, zero value otherwise.
func (o *PasswordPoliciesParams) GetSpecialCharacter() bool {
	if o == nil || IsNil(o.SpecialCharacter) {
		var ret bool
		return ret
	}
	return *o.SpecialCharacter
}

// GetSpecialCharacterOk returns a tuple with the SpecialCharacter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PasswordPoliciesParams) GetSpecialCharacterOk() (*bool, bool) {
	if o == nil || IsNil(o.SpecialCharacter) {
		return nil, false
	}
	return o.SpecialCharacter, true
}

// HasSpecialCharacter returns a boolean if a field has been set.
func (o *PasswordPoliciesParams) HasSpecialCharacter() bool {
	if o != nil && !IsNil(o.SpecialCharacter) {
		return true
	}

	return false
}

// SetSpecialCharacter gets a reference to the given bool and assigns it to the SpecialCharacter field.
func (o *PasswordPoliciesParams) SetSpecialCharacter(v bool) {
	o.SpecialCharacter = &v
}

// GetDisallowUsernameAsPassword returns the DisallowUsernameAsPassword field value if set, zero value otherwise.
func (o *PasswordPoliciesParams) GetDisallowUsernameAsPassword() bool {
	if o == nil || IsNil(o.DisallowUsernameAsPassword) {
		var ret bool
		return ret
	}
	return *o.DisallowUsernameAsPassword
}

// GetDisallowUsernameAsPasswordOk returns a tuple with the DisallowUsernameAsPassword field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PasswordPoliciesParams) GetDisallowUsernameAsPasswordOk() (*bool, bool) {
	if o == nil || IsNil(o.DisallowUsernameAsPassword) {
		return nil, false
	}
	return o.DisallowUsernameAsPassword, true
}

// HasDisallowUsernameAsPassword returns a boolean if a field has been set.
func (o *PasswordPoliciesParams) HasDisallowUsernameAsPassword() bool {
	if o != nil && !IsNil(o.DisallowUsernameAsPassword) {
		return true
	}

	return false
}

// SetDisallowUsernameAsPassword gets a reference to the given bool and assigns it to the DisallowUsernameAsPassword field.
func (o *PasswordPoliciesParams) SetDisallowUsernameAsPassword(v bool) {
	o.DisallowUsernameAsPassword = &v
}

// GetMaximumPasswordAttempts returns the MaximumPasswordAttempts field value if set, zero value otherwise.
func (o *PasswordPoliciesParams) GetMaximumPasswordAttempts() int32 {
	if o == nil || IsNil(o.MaximumPasswordAttempts) {
		var ret int32
		return ret
	}
	return *o.MaximumPasswordAttempts
}

// GetMaximumPasswordAttemptsOk returns a tuple with the MaximumPasswordAttempts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PasswordPoliciesParams) GetMaximumPasswordAttemptsOk() (*int32, bool) {
	if o == nil || IsNil(o.MaximumPasswordAttempts) {
		return nil, false
	}
	return o.MaximumPasswordAttempts, true
}

// HasMaximumPasswordAttempts returns a boolean if a field has been set.
func (o *PasswordPoliciesParams) HasMaximumPasswordAttempts() bool {
	if o != nil && !IsNil(o.MaximumPasswordAttempts) {
		return true
	}

	return false
}

// SetMaximumPasswordAttempts gets a reference to the given int32 and assigns it to the MaximumPasswordAttempts field.
func (o *PasswordPoliciesParams) SetMaximumPasswordAttempts(v int32) {
	o.MaximumPasswordAttempts = &v
}

func (o PasswordPoliciesParams) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PasswordPoliciesParams) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Enabled) {
		toSerialize["enabled"] = o.Enabled
	}
	if !IsNil(o.MinLength) {
		toSerialize["min_length"] = o.MinLength
	}
	if !IsNil(o.ReuseDisallowLimit) {
		toSerialize["reuse_disallow_limit"] = o.ReuseDisallowLimit
	}
	if !IsNil(o.Digit) {
		toSerialize["digit"] = o.Digit
	}
	if !IsNil(o.UppercaseLetter) {
		toSerialize["uppercase_letter"] = o.UppercaseLetter
	}
	if !IsNil(o.LowercaseLetter) {
		toSerialize["lowercase_letter"] = o.LowercaseLetter
	}
	if !IsNil(o.SpecialCharacter) {
		toSerialize["special_character"] = o.SpecialCharacter
	}
	if !IsNil(o.DisallowUsernameAsPassword) {
		toSerialize["disallow_username_as_password"] = o.DisallowUsernameAsPassword
	}
	if !IsNil(o.MaximumPasswordAttempts) {
		toSerialize["maximum_password_attempts"] = o.MaximumPasswordAttempts
	}
	return toSerialize, nil
}

type NullablePasswordPoliciesParams struct {
	value *PasswordPoliciesParams
	isSet bool
}

func (v NullablePasswordPoliciesParams) Get() *PasswordPoliciesParams {
	return v.value
}

func (v *NullablePasswordPoliciesParams) Set(val *PasswordPoliciesParams) {
	v.value = val
	v.isSet = true
}

func (v NullablePasswordPoliciesParams) IsSet() bool {
	return v.isSet
}

func (v *NullablePasswordPoliciesParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePasswordPoliciesParams(val *PasswordPoliciesParams) *NullablePasswordPoliciesParams {
	return &NullablePasswordPoliciesParams{value: val, isSet: true}
}

func (v NullablePasswordPoliciesParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePasswordPoliciesParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


