/*
Delphix DCT API

Delphix DCT API

API version: 3.18.0
Contact: support@delphix.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package delphix_dct_api

import (
	"encoding/json"
)

// checks if the SnapshotCompatibleRepositoryRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SnapshotCompatibleRepositoryRequest{}

// SnapshotCompatibleRepositoryRequest struct for SnapshotCompatibleRepositoryRequest
type SnapshotCompatibleRepositoryRequest struct {
	// The ID of the source object (dSource or VDB) to get the compatible repos. All other objects referenced by the parameters must live on the same engine as the source.
	SourceDataId *string `json:"source_data_id,omitempty"`
	// The ID of the Engine from where to get the compatible repos. If the source ID unambiguously identifies a source object, this parameter is unnecessary and ignored.
	EngineId *string `json:"engine_id,omitempty"`
	// The ID of the snapshot from which to execute the operation.
	SnapshotId *string `json:"snapshot_id,omitempty"`
	// The ID or name of the target environment.
	EnvironmentId *string `json:"environment_id,omitempty"`
}

// NewSnapshotCompatibleRepositoryRequest instantiates a new SnapshotCompatibleRepositoryRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSnapshotCompatibleRepositoryRequest() *SnapshotCompatibleRepositoryRequest {
	this := SnapshotCompatibleRepositoryRequest{}
	return &this
}

// NewSnapshotCompatibleRepositoryRequestWithDefaults instantiates a new SnapshotCompatibleRepositoryRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSnapshotCompatibleRepositoryRequestWithDefaults() *SnapshotCompatibleRepositoryRequest {
	this := SnapshotCompatibleRepositoryRequest{}
	return &this
}

// GetSourceDataId returns the SourceDataId field value if set, zero value otherwise.
func (o *SnapshotCompatibleRepositoryRequest) GetSourceDataId() string {
	if o == nil || IsNil(o.SourceDataId) {
		var ret string
		return ret
	}
	return *o.SourceDataId
}

// GetSourceDataIdOk returns a tuple with the SourceDataId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SnapshotCompatibleRepositoryRequest) GetSourceDataIdOk() (*string, bool) {
	if o == nil || IsNil(o.SourceDataId) {
		return nil, false
	}
	return o.SourceDataId, true
}

// HasSourceDataId returns a boolean if a field has been set.
func (o *SnapshotCompatibleRepositoryRequest) HasSourceDataId() bool {
	if o != nil && !IsNil(o.SourceDataId) {
		return true
	}

	return false
}

// SetSourceDataId gets a reference to the given string and assigns it to the SourceDataId field.
func (o *SnapshotCompatibleRepositoryRequest) SetSourceDataId(v string) {
	o.SourceDataId = &v
}

// GetEngineId returns the EngineId field value if set, zero value otherwise.
func (o *SnapshotCompatibleRepositoryRequest) GetEngineId() string {
	if o == nil || IsNil(o.EngineId) {
		var ret string
		return ret
	}
	return *o.EngineId
}

// GetEngineIdOk returns a tuple with the EngineId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SnapshotCompatibleRepositoryRequest) GetEngineIdOk() (*string, bool) {
	if o == nil || IsNil(o.EngineId) {
		return nil, false
	}
	return o.EngineId, true
}

// HasEngineId returns a boolean if a field has been set.
func (o *SnapshotCompatibleRepositoryRequest) HasEngineId() bool {
	if o != nil && !IsNil(o.EngineId) {
		return true
	}

	return false
}

// SetEngineId gets a reference to the given string and assigns it to the EngineId field.
func (o *SnapshotCompatibleRepositoryRequest) SetEngineId(v string) {
	o.EngineId = &v
}

// GetSnapshotId returns the SnapshotId field value if set, zero value otherwise.
func (o *SnapshotCompatibleRepositoryRequest) GetSnapshotId() string {
	if o == nil || IsNil(o.SnapshotId) {
		var ret string
		return ret
	}
	return *o.SnapshotId
}

// GetSnapshotIdOk returns a tuple with the SnapshotId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SnapshotCompatibleRepositoryRequest) GetSnapshotIdOk() (*string, bool) {
	if o == nil || IsNil(o.SnapshotId) {
		return nil, false
	}
	return o.SnapshotId, true
}

// HasSnapshotId returns a boolean if a field has been set.
func (o *SnapshotCompatibleRepositoryRequest) HasSnapshotId() bool {
	if o != nil && !IsNil(o.SnapshotId) {
		return true
	}

	return false
}

// SetSnapshotId gets a reference to the given string and assigns it to the SnapshotId field.
func (o *SnapshotCompatibleRepositoryRequest) SetSnapshotId(v string) {
	o.SnapshotId = &v
}

// GetEnvironmentId returns the EnvironmentId field value if set, zero value otherwise.
func (o *SnapshotCompatibleRepositoryRequest) GetEnvironmentId() string {
	if o == nil || IsNil(o.EnvironmentId) {
		var ret string
		return ret
	}
	return *o.EnvironmentId
}

// GetEnvironmentIdOk returns a tuple with the EnvironmentId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SnapshotCompatibleRepositoryRequest) GetEnvironmentIdOk() (*string, bool) {
	if o == nil || IsNil(o.EnvironmentId) {
		return nil, false
	}
	return o.EnvironmentId, true
}

// HasEnvironmentId returns a boolean if a field has been set.
func (o *SnapshotCompatibleRepositoryRequest) HasEnvironmentId() bool {
	if o != nil && !IsNil(o.EnvironmentId) {
		return true
	}

	return false
}

// SetEnvironmentId gets a reference to the given string and assigns it to the EnvironmentId field.
func (o *SnapshotCompatibleRepositoryRequest) SetEnvironmentId(v string) {
	o.EnvironmentId = &v
}

func (o SnapshotCompatibleRepositoryRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SnapshotCompatibleRepositoryRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.SourceDataId) {
		toSerialize["source_data_id"] = o.SourceDataId
	}
	if !IsNil(o.EngineId) {
		toSerialize["engine_id"] = o.EngineId
	}
	if !IsNil(o.SnapshotId) {
		toSerialize["snapshot_id"] = o.SnapshotId
	}
	if !IsNil(o.EnvironmentId) {
		toSerialize["environment_id"] = o.EnvironmentId
	}
	return toSerialize, nil
}

type NullableSnapshotCompatibleRepositoryRequest struct {
	value *SnapshotCompatibleRepositoryRequest
	isSet bool
}

func (v NullableSnapshotCompatibleRepositoryRequest) Get() *SnapshotCompatibleRepositoryRequest {
	return v.value
}

func (v *NullableSnapshotCompatibleRepositoryRequest) Set(val *SnapshotCompatibleRepositoryRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableSnapshotCompatibleRepositoryRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableSnapshotCompatibleRepositoryRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSnapshotCompatibleRepositoryRequest(val *SnapshotCompatibleRepositoryRequest) *NullableSnapshotCompatibleRepositoryRequest {
	return &NullableSnapshotCompatibleRepositoryRequest{value: val, isSet: true}
}

func (v NullableSnapshotCompatibleRepositoryRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSnapshotCompatibleRepositoryRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


