/*
Delphix DCT API

Delphix DCT API

API version: 3.17.0
Contact: support@delphix.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package delphix_dct_api

import (
	"encoding/json"
)

// checks if the DataClass type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DataClass{}

// DataClass A data class.
type DataClass struct {
	// The data class ID.
	Id *string `json:"id,omitempty"`
	// The name of this data class.
	Name *string `json:"name,omitempty"`
	// The ID of the default masking algorithm for this data class.
	DefaultAlgorithmId NullableString `json:"default_algorithm_id,omitempty"`
	// The name of the default masking algorithm for this data class.
	DefaultAlgorithmName NullableString `json:"default_algorithm_name,omitempty"`
	// The ID of the default tokenization algorithm for this data class.
	DefaultTokenAlgorithmId NullableString `json:"default_token_algorithm_id,omitempty"`
	// The default tokenization algorithm for this data class.
	DefaultTokenAlgorithmName NullableString `json:"default_token_algorithm_name,omitempty"`
	// A description of this data class.
	Description NullableString `json:"description,omitempty"`
	// An example data value for this data class.
	Example NullableString `json:"example,omitempty"`
	// The export revision hash of this data class from the source engine.
	RevisionHash NullableString `json:"revision_hash,omitempty"`
	// The ID of the engine that this data class originated from.
	EngineId NullableString `json:"engine_id,omitempty"`
	// The name of the engine that this data class originated from.
	EngineName NullableString `json:"engine_name,omitempty"`
	// The tags of this data class.
	Tags []Tag `json:"tags,omitempty"`
}

// NewDataClass instantiates a new DataClass object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDataClass() *DataClass {
	this := DataClass{}
	return &this
}

// NewDataClassWithDefaults instantiates a new DataClass object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDataClassWithDefaults() *DataClass {
	this := DataClass{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *DataClass) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataClass) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *DataClass) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *DataClass) SetId(v string) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *DataClass) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataClass) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *DataClass) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *DataClass) SetName(v string) {
	o.Name = &v
}

// GetDefaultAlgorithmId returns the DefaultAlgorithmId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DataClass) GetDefaultAlgorithmId() string {
	if o == nil || IsNil(o.DefaultAlgorithmId.Get()) {
		var ret string
		return ret
	}
	return *o.DefaultAlgorithmId.Get()
}

// GetDefaultAlgorithmIdOk returns a tuple with the DefaultAlgorithmId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DataClass) GetDefaultAlgorithmIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.DefaultAlgorithmId.Get(), o.DefaultAlgorithmId.IsSet()
}

// HasDefaultAlgorithmId returns a boolean if a field has been set.
func (o *DataClass) HasDefaultAlgorithmId() bool {
	if o != nil && o.DefaultAlgorithmId.IsSet() {
		return true
	}

	return false
}

// SetDefaultAlgorithmId gets a reference to the given NullableString and assigns it to the DefaultAlgorithmId field.
func (o *DataClass) SetDefaultAlgorithmId(v string) {
	o.DefaultAlgorithmId.Set(&v)
}
// SetDefaultAlgorithmIdNil sets the value for DefaultAlgorithmId to be an explicit nil
func (o *DataClass) SetDefaultAlgorithmIdNil() {
	o.DefaultAlgorithmId.Set(nil)
}

// UnsetDefaultAlgorithmId ensures that no value is present for DefaultAlgorithmId, not even an explicit nil
func (o *DataClass) UnsetDefaultAlgorithmId() {
	o.DefaultAlgorithmId.Unset()
}

// GetDefaultAlgorithmName returns the DefaultAlgorithmName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DataClass) GetDefaultAlgorithmName() string {
	if o == nil || IsNil(o.DefaultAlgorithmName.Get()) {
		var ret string
		return ret
	}
	return *o.DefaultAlgorithmName.Get()
}

// GetDefaultAlgorithmNameOk returns a tuple with the DefaultAlgorithmName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DataClass) GetDefaultAlgorithmNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.DefaultAlgorithmName.Get(), o.DefaultAlgorithmName.IsSet()
}

// HasDefaultAlgorithmName returns a boolean if a field has been set.
func (o *DataClass) HasDefaultAlgorithmName() bool {
	if o != nil && o.DefaultAlgorithmName.IsSet() {
		return true
	}

	return false
}

// SetDefaultAlgorithmName gets a reference to the given NullableString and assigns it to the DefaultAlgorithmName field.
func (o *DataClass) SetDefaultAlgorithmName(v string) {
	o.DefaultAlgorithmName.Set(&v)
}
// SetDefaultAlgorithmNameNil sets the value for DefaultAlgorithmName to be an explicit nil
func (o *DataClass) SetDefaultAlgorithmNameNil() {
	o.DefaultAlgorithmName.Set(nil)
}

// UnsetDefaultAlgorithmName ensures that no value is present for DefaultAlgorithmName, not even an explicit nil
func (o *DataClass) UnsetDefaultAlgorithmName() {
	o.DefaultAlgorithmName.Unset()
}

// GetDefaultTokenAlgorithmId returns the DefaultTokenAlgorithmId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DataClass) GetDefaultTokenAlgorithmId() string {
	if o == nil || IsNil(o.DefaultTokenAlgorithmId.Get()) {
		var ret string
		return ret
	}
	return *o.DefaultTokenAlgorithmId.Get()
}

// GetDefaultTokenAlgorithmIdOk returns a tuple with the DefaultTokenAlgorithmId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DataClass) GetDefaultTokenAlgorithmIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.DefaultTokenAlgorithmId.Get(), o.DefaultTokenAlgorithmId.IsSet()
}

// HasDefaultTokenAlgorithmId returns a boolean if a field has been set.
func (o *DataClass) HasDefaultTokenAlgorithmId() bool {
	if o != nil && o.DefaultTokenAlgorithmId.IsSet() {
		return true
	}

	return false
}

// SetDefaultTokenAlgorithmId gets a reference to the given NullableString and assigns it to the DefaultTokenAlgorithmId field.
func (o *DataClass) SetDefaultTokenAlgorithmId(v string) {
	o.DefaultTokenAlgorithmId.Set(&v)
}
// SetDefaultTokenAlgorithmIdNil sets the value for DefaultTokenAlgorithmId to be an explicit nil
func (o *DataClass) SetDefaultTokenAlgorithmIdNil() {
	o.DefaultTokenAlgorithmId.Set(nil)
}

// UnsetDefaultTokenAlgorithmId ensures that no value is present for DefaultTokenAlgorithmId, not even an explicit nil
func (o *DataClass) UnsetDefaultTokenAlgorithmId() {
	o.DefaultTokenAlgorithmId.Unset()
}

// GetDefaultTokenAlgorithmName returns the DefaultTokenAlgorithmName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DataClass) GetDefaultTokenAlgorithmName() string {
	if o == nil || IsNil(o.DefaultTokenAlgorithmName.Get()) {
		var ret string
		return ret
	}
	return *o.DefaultTokenAlgorithmName.Get()
}

// GetDefaultTokenAlgorithmNameOk returns a tuple with the DefaultTokenAlgorithmName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DataClass) GetDefaultTokenAlgorithmNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.DefaultTokenAlgorithmName.Get(), o.DefaultTokenAlgorithmName.IsSet()
}

// HasDefaultTokenAlgorithmName returns a boolean if a field has been set.
func (o *DataClass) HasDefaultTokenAlgorithmName() bool {
	if o != nil && o.DefaultTokenAlgorithmName.IsSet() {
		return true
	}

	return false
}

// SetDefaultTokenAlgorithmName gets a reference to the given NullableString and assigns it to the DefaultTokenAlgorithmName field.
func (o *DataClass) SetDefaultTokenAlgorithmName(v string) {
	o.DefaultTokenAlgorithmName.Set(&v)
}
// SetDefaultTokenAlgorithmNameNil sets the value for DefaultTokenAlgorithmName to be an explicit nil
func (o *DataClass) SetDefaultTokenAlgorithmNameNil() {
	o.DefaultTokenAlgorithmName.Set(nil)
}

// UnsetDefaultTokenAlgorithmName ensures that no value is present for DefaultTokenAlgorithmName, not even an explicit nil
func (o *DataClass) UnsetDefaultTokenAlgorithmName() {
	o.DefaultTokenAlgorithmName.Unset()
}

// GetDescription returns the Description field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DataClass) GetDescription() string {
	if o == nil || IsNil(o.Description.Get()) {
		var ret string
		return ret
	}
	return *o.Description.Get()
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DataClass) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Description.Get(), o.Description.IsSet()
}

// HasDescription returns a boolean if a field has been set.
func (o *DataClass) HasDescription() bool {
	if o != nil && o.Description.IsSet() {
		return true
	}

	return false
}

// SetDescription gets a reference to the given NullableString and assigns it to the Description field.
func (o *DataClass) SetDescription(v string) {
	o.Description.Set(&v)
}
// SetDescriptionNil sets the value for Description to be an explicit nil
func (o *DataClass) SetDescriptionNil() {
	o.Description.Set(nil)
}

// UnsetDescription ensures that no value is present for Description, not even an explicit nil
func (o *DataClass) UnsetDescription() {
	o.Description.Unset()
}

// GetExample returns the Example field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DataClass) GetExample() string {
	if o == nil || IsNil(o.Example.Get()) {
		var ret string
		return ret
	}
	return *o.Example.Get()
}

// GetExampleOk returns a tuple with the Example field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DataClass) GetExampleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Example.Get(), o.Example.IsSet()
}

// HasExample returns a boolean if a field has been set.
func (o *DataClass) HasExample() bool {
	if o != nil && o.Example.IsSet() {
		return true
	}

	return false
}

// SetExample gets a reference to the given NullableString and assigns it to the Example field.
func (o *DataClass) SetExample(v string) {
	o.Example.Set(&v)
}
// SetExampleNil sets the value for Example to be an explicit nil
func (o *DataClass) SetExampleNil() {
	o.Example.Set(nil)
}

// UnsetExample ensures that no value is present for Example, not even an explicit nil
func (o *DataClass) UnsetExample() {
	o.Example.Unset()
}

// GetRevisionHash returns the RevisionHash field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DataClass) GetRevisionHash() string {
	if o == nil || IsNil(o.RevisionHash.Get()) {
		var ret string
		return ret
	}
	return *o.RevisionHash.Get()
}

// GetRevisionHashOk returns a tuple with the RevisionHash field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DataClass) GetRevisionHashOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.RevisionHash.Get(), o.RevisionHash.IsSet()
}

// HasRevisionHash returns a boolean if a field has been set.
func (o *DataClass) HasRevisionHash() bool {
	if o != nil && o.RevisionHash.IsSet() {
		return true
	}

	return false
}

// SetRevisionHash gets a reference to the given NullableString and assigns it to the RevisionHash field.
func (o *DataClass) SetRevisionHash(v string) {
	o.RevisionHash.Set(&v)
}
// SetRevisionHashNil sets the value for RevisionHash to be an explicit nil
func (o *DataClass) SetRevisionHashNil() {
	o.RevisionHash.Set(nil)
}

// UnsetRevisionHash ensures that no value is present for RevisionHash, not even an explicit nil
func (o *DataClass) UnsetRevisionHash() {
	o.RevisionHash.Unset()
}

// GetEngineId returns the EngineId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DataClass) GetEngineId() string {
	if o == nil || IsNil(o.EngineId.Get()) {
		var ret string
		return ret
	}
	return *o.EngineId.Get()
}

// GetEngineIdOk returns a tuple with the EngineId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DataClass) GetEngineIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.EngineId.Get(), o.EngineId.IsSet()
}

// HasEngineId returns a boolean if a field has been set.
func (o *DataClass) HasEngineId() bool {
	if o != nil && o.EngineId.IsSet() {
		return true
	}

	return false
}

// SetEngineId gets a reference to the given NullableString and assigns it to the EngineId field.
func (o *DataClass) SetEngineId(v string) {
	o.EngineId.Set(&v)
}
// SetEngineIdNil sets the value for EngineId to be an explicit nil
func (o *DataClass) SetEngineIdNil() {
	o.EngineId.Set(nil)
}

// UnsetEngineId ensures that no value is present for EngineId, not even an explicit nil
func (o *DataClass) UnsetEngineId() {
	o.EngineId.Unset()
}

// GetEngineName returns the EngineName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DataClass) GetEngineName() string {
	if o == nil || IsNil(o.EngineName.Get()) {
		var ret string
		return ret
	}
	return *o.EngineName.Get()
}

// GetEngineNameOk returns a tuple with the EngineName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DataClass) GetEngineNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.EngineName.Get(), o.EngineName.IsSet()
}

// HasEngineName returns a boolean if a field has been set.
func (o *DataClass) HasEngineName() bool {
	if o != nil && o.EngineName.IsSet() {
		return true
	}

	return false
}

// SetEngineName gets a reference to the given NullableString and assigns it to the EngineName field.
func (o *DataClass) SetEngineName(v string) {
	o.EngineName.Set(&v)
}
// SetEngineNameNil sets the value for EngineName to be an explicit nil
func (o *DataClass) SetEngineNameNil() {
	o.EngineName.Set(nil)
}

// UnsetEngineName ensures that no value is present for EngineName, not even an explicit nil
func (o *DataClass) UnsetEngineName() {
	o.EngineName.Unset()
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *DataClass) GetTags() []Tag {
	if o == nil || IsNil(o.Tags) {
		var ret []Tag
		return ret
	}
	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataClass) GetTagsOk() ([]Tag, bool) {
	if o == nil || IsNil(o.Tags) {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *DataClass) HasTags() bool {
	if o != nil && !IsNil(o.Tags) {
		return true
	}

	return false
}

// SetTags gets a reference to the given []Tag and assigns it to the Tags field.
func (o *DataClass) SetTags(v []Tag) {
	o.Tags = v
}

func (o DataClass) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DataClass) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if o.DefaultAlgorithmId.IsSet() {
		toSerialize["default_algorithm_id"] = o.DefaultAlgorithmId.Get()
	}
	if o.DefaultAlgorithmName.IsSet() {
		toSerialize["default_algorithm_name"] = o.DefaultAlgorithmName.Get()
	}
	if o.DefaultTokenAlgorithmId.IsSet() {
		toSerialize["default_token_algorithm_id"] = o.DefaultTokenAlgorithmId.Get()
	}
	if o.DefaultTokenAlgorithmName.IsSet() {
		toSerialize["default_token_algorithm_name"] = o.DefaultTokenAlgorithmName.Get()
	}
	if o.Description.IsSet() {
		toSerialize["description"] = o.Description.Get()
	}
	if o.Example.IsSet() {
		toSerialize["example"] = o.Example.Get()
	}
	if o.RevisionHash.IsSet() {
		toSerialize["revision_hash"] = o.RevisionHash.Get()
	}
	if o.EngineId.IsSet() {
		toSerialize["engine_id"] = o.EngineId.Get()
	}
	if o.EngineName.IsSet() {
		toSerialize["engine_name"] = o.EngineName.Get()
	}
	if !IsNil(o.Tags) {
		toSerialize["tags"] = o.Tags
	}
	return toSerialize, nil
}

type NullableDataClass struct {
	value *DataClass
	isSet bool
}

func (v NullableDataClass) Get() *DataClass {
	return v.value
}

func (v *NullableDataClass) Set(val *DataClass) {
	v.value = val
	v.isSet = true
}

func (v NullableDataClass) IsSet() bool {
	return v.isSet
}

func (v *NullableDataClass) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDataClass(val *DataClass) *NullableDataClass {
	return &NullableDataClass{value: val, isSet: true}
}

func (v NullableDataClass) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDataClass) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


