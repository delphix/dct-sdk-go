/*
Delphix DCT API

Delphix DCT API

API version: 3.18.0
Contact: support@delphix.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package delphix_dct_api

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the VDBGroupRefreshByTimestamp type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VDBGroupRefreshByTimestamp{}

// VDBGroupRefreshByTimestamp Parameters to refresh a VDB Group by timestamp.
type VDBGroupRefreshByTimestamp struct {
	// ID of the VDB present in the VDB Group.
	VdbId string `json:"vdb_id"`
	// The point in time from which to execute the operation. Mutually exclusive with timestamp_in_database_timezone. If the timestamp is not set, selects the latest point.
	Timestamp *time.Time `json:"timestamp,omitempty"`
	// The point in time from which to execute the operation, expressed as a date-time in the timezone of the source database. Mutually exclusive with timestamp.
	TimestampInDatabaseTimezone *string `json:"timestamp_in_database_timezone,omitempty" validate:"regexp=[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}(.[0-9]{0,3})?"`
	// The Timeflow ID.
	TimeflowId *string `json:"timeflow_id,omitempty"`
}

type _VDBGroupRefreshByTimestamp VDBGroupRefreshByTimestamp

// NewVDBGroupRefreshByTimestamp instantiates a new VDBGroupRefreshByTimestamp object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVDBGroupRefreshByTimestamp(vdbId string) *VDBGroupRefreshByTimestamp {
	this := VDBGroupRefreshByTimestamp{}
	this.VdbId = vdbId
	return &this
}

// NewVDBGroupRefreshByTimestampWithDefaults instantiates a new VDBGroupRefreshByTimestamp object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVDBGroupRefreshByTimestampWithDefaults() *VDBGroupRefreshByTimestamp {
	this := VDBGroupRefreshByTimestamp{}
	return &this
}

// GetVdbId returns the VdbId field value
func (o *VDBGroupRefreshByTimestamp) GetVdbId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.VdbId
}

// GetVdbIdOk returns a tuple with the VdbId field value
// and a boolean to check if the value has been set.
func (o *VDBGroupRefreshByTimestamp) GetVdbIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.VdbId, true
}

// SetVdbId sets field value
func (o *VDBGroupRefreshByTimestamp) SetVdbId(v string) {
	o.VdbId = v
}

// GetTimestamp returns the Timestamp field value if set, zero value otherwise.
func (o *VDBGroupRefreshByTimestamp) GetTimestamp() time.Time {
	if o == nil || IsNil(o.Timestamp) {
		var ret time.Time
		return ret
	}
	return *o.Timestamp
}

// GetTimestampOk returns a tuple with the Timestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VDBGroupRefreshByTimestamp) GetTimestampOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Timestamp) {
		return nil, false
	}
	return o.Timestamp, true
}

// HasTimestamp returns a boolean if a field has been set.
func (o *VDBGroupRefreshByTimestamp) HasTimestamp() bool {
	if o != nil && !IsNil(o.Timestamp) {
		return true
	}

	return false
}

// SetTimestamp gets a reference to the given time.Time and assigns it to the Timestamp field.
func (o *VDBGroupRefreshByTimestamp) SetTimestamp(v time.Time) {
	o.Timestamp = &v
}

// GetTimestampInDatabaseTimezone returns the TimestampInDatabaseTimezone field value if set, zero value otherwise.
func (o *VDBGroupRefreshByTimestamp) GetTimestampInDatabaseTimezone() string {
	if o == nil || IsNil(o.TimestampInDatabaseTimezone) {
		var ret string
		return ret
	}
	return *o.TimestampInDatabaseTimezone
}

// GetTimestampInDatabaseTimezoneOk returns a tuple with the TimestampInDatabaseTimezone field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VDBGroupRefreshByTimestamp) GetTimestampInDatabaseTimezoneOk() (*string, bool) {
	if o == nil || IsNil(o.TimestampInDatabaseTimezone) {
		return nil, false
	}
	return o.TimestampInDatabaseTimezone, true
}

// HasTimestampInDatabaseTimezone returns a boolean if a field has been set.
func (o *VDBGroupRefreshByTimestamp) HasTimestampInDatabaseTimezone() bool {
	if o != nil && !IsNil(o.TimestampInDatabaseTimezone) {
		return true
	}

	return false
}

// SetTimestampInDatabaseTimezone gets a reference to the given string and assigns it to the TimestampInDatabaseTimezone field.
func (o *VDBGroupRefreshByTimestamp) SetTimestampInDatabaseTimezone(v string) {
	o.TimestampInDatabaseTimezone = &v
}

// GetTimeflowId returns the TimeflowId field value if set, zero value otherwise.
func (o *VDBGroupRefreshByTimestamp) GetTimeflowId() string {
	if o == nil || IsNil(o.TimeflowId) {
		var ret string
		return ret
	}
	return *o.TimeflowId
}

// GetTimeflowIdOk returns a tuple with the TimeflowId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VDBGroupRefreshByTimestamp) GetTimeflowIdOk() (*string, bool) {
	if o == nil || IsNil(o.TimeflowId) {
		return nil, false
	}
	return o.TimeflowId, true
}

// HasTimeflowId returns a boolean if a field has been set.
func (o *VDBGroupRefreshByTimestamp) HasTimeflowId() bool {
	if o != nil && !IsNil(o.TimeflowId) {
		return true
	}

	return false
}

// SetTimeflowId gets a reference to the given string and assigns it to the TimeflowId field.
func (o *VDBGroupRefreshByTimestamp) SetTimeflowId(v string) {
	o.TimeflowId = &v
}

func (o VDBGroupRefreshByTimestamp) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VDBGroupRefreshByTimestamp) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["vdb_id"] = o.VdbId
	if !IsNil(o.Timestamp) {
		toSerialize["timestamp"] = o.Timestamp
	}
	if !IsNil(o.TimestampInDatabaseTimezone) {
		toSerialize["timestamp_in_database_timezone"] = o.TimestampInDatabaseTimezone
	}
	if !IsNil(o.TimeflowId) {
		toSerialize["timeflow_id"] = o.TimeflowId
	}
	return toSerialize, nil
}

func (o *VDBGroupRefreshByTimestamp) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"vdb_id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varVDBGroupRefreshByTimestamp := _VDBGroupRefreshByTimestamp{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varVDBGroupRefreshByTimestamp)

	if err != nil {
		return err
	}

	*o = VDBGroupRefreshByTimestamp(varVDBGroupRefreshByTimestamp)

	return err
}

type NullableVDBGroupRefreshByTimestamp struct {
	value *VDBGroupRefreshByTimestamp
	isSet bool
}

func (v NullableVDBGroupRefreshByTimestamp) Get() *VDBGroupRefreshByTimestamp {
	return v.value
}

func (v *NullableVDBGroupRefreshByTimestamp) Set(val *VDBGroupRefreshByTimestamp) {
	v.value = val
	v.isSet = true
}

func (v NullableVDBGroupRefreshByTimestamp) IsSet() bool {
	return v.isSet
}

func (v *NullableVDBGroupRefreshByTimestamp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVDBGroupRefreshByTimestamp(val *VDBGroupRefreshByTimestamp) *NullableVDBGroupRefreshByTimestamp {
	return &NullableVDBGroupRefreshByTimestamp{value: val, isSet: true}
}

func (v NullableVDBGroupRefreshByTimestamp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVDBGroupRefreshByTimestamp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


