/*
Delphix DCT API

Delphix DCT API

API version: 3.18.0
Contact: support@delphix.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package delphix_dct_api

import (
	"encoding/json"
)

// checks if the UpdateSnapshotParameters type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateSnapshotParameters{}

// UpdateSnapshotParameters Parameters to update the expiration of a Snapshot.
type UpdateSnapshotParameters struct {
	// The expiration for this snapshot. Mutually exclusive with retain_forever.
	Expiration *string `json:"expiration,omitempty"`
	// Indicates that the snapshot should be retained forever.
	RetainForever *bool `json:"retain_forever,omitempty"`
}

// NewUpdateSnapshotParameters instantiates a new UpdateSnapshotParameters object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateSnapshotParameters() *UpdateSnapshotParameters {
	this := UpdateSnapshotParameters{}
	return &this
}

// NewUpdateSnapshotParametersWithDefaults instantiates a new UpdateSnapshotParameters object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateSnapshotParametersWithDefaults() *UpdateSnapshotParameters {
	this := UpdateSnapshotParameters{}
	return &this
}

// GetExpiration returns the Expiration field value if set, zero value otherwise.
func (o *UpdateSnapshotParameters) GetExpiration() string {
	if o == nil || IsNil(o.Expiration) {
		var ret string
		return ret
	}
	return *o.Expiration
}

// GetExpirationOk returns a tuple with the Expiration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateSnapshotParameters) GetExpirationOk() (*string, bool) {
	if o == nil || IsNil(o.Expiration) {
		return nil, false
	}
	return o.Expiration, true
}

// HasExpiration returns a boolean if a field has been set.
func (o *UpdateSnapshotParameters) HasExpiration() bool {
	if o != nil && !IsNil(o.Expiration) {
		return true
	}

	return false
}

// SetExpiration gets a reference to the given string and assigns it to the Expiration field.
func (o *UpdateSnapshotParameters) SetExpiration(v string) {
	o.Expiration = &v
}

// GetRetainForever returns the RetainForever field value if set, zero value otherwise.
func (o *UpdateSnapshotParameters) GetRetainForever() bool {
	if o == nil || IsNil(o.RetainForever) {
		var ret bool
		return ret
	}
	return *o.RetainForever
}

// GetRetainForeverOk returns a tuple with the RetainForever field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateSnapshotParameters) GetRetainForeverOk() (*bool, bool) {
	if o == nil || IsNil(o.RetainForever) {
		return nil, false
	}
	return o.RetainForever, true
}

// HasRetainForever returns a boolean if a field has been set.
func (o *UpdateSnapshotParameters) HasRetainForever() bool {
	if o != nil && !IsNil(o.RetainForever) {
		return true
	}

	return false
}

// SetRetainForever gets a reference to the given bool and assigns it to the RetainForever field.
func (o *UpdateSnapshotParameters) SetRetainForever(v bool) {
	o.RetainForever = &v
}

func (o UpdateSnapshotParameters) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateSnapshotParameters) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Expiration) {
		toSerialize["expiration"] = o.Expiration
	}
	if !IsNil(o.RetainForever) {
		toSerialize["retain_forever"] = o.RetainForever
	}
	return toSerialize, nil
}

type NullableUpdateSnapshotParameters struct {
	value *UpdateSnapshotParameters
	isSet bool
}

func (v NullableUpdateSnapshotParameters) Get() *UpdateSnapshotParameters {
	return v.value
}

func (v *NullableUpdateSnapshotParameters) Set(val *UpdateSnapshotParameters) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateSnapshotParameters) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateSnapshotParameters) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateSnapshotParameters(val *UpdateSnapshotParameters) *NullableUpdateSnapshotParameters {
	return &NullableUpdateSnapshotParameters{value: val, isSet: true}
}

func (v NullableUpdateSnapshotParameters) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateSnapshotParameters) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


