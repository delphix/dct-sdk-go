/*
Delphix DCT API

Delphix DCT API

API version: 3.18.0
Contact: support@delphix.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package delphix_dct_api

import (
	"encoding/json"
	"time"
)

// checks if the Execution type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Execution{}

// Execution The execution of a masking or discovery job.
type Execution struct {
	// The Execution entity ID.
	Id *string `json:"id,omitempty"`
	// The ID of the engine where this execution ran.
	EngineId *string `json:"engine_id,omitempty"`
	HyperscaleInstanceId *string `json:"hyperscale_instance_id,omitempty"`
	// The name of the engine where this execution ran.
	EngineName *string `json:"engine_name,omitempty"`
	// The ID of the masking job that is being executed.
	MaskingJobId *string `json:"masking_job_id,omitempty"`
	// The name of the masking job that is being executed.
	MaskingJobName *string `json:"masking_job_name,omitempty"`
	// The ID of the source connector. This field is only used for multi-tenant jobs that are also on-the-fly.
	SourceConnectorId *string `json:"source_connector_id,omitempty"`
	// The ID of the target connector. This field is only used for multi-tenant jobs.
	TargetConnectorId *string `json:"target_connector_id,omitempty"`
	Status *ExecutionStatus `json:"status,omitempty"`
	// The number of rows masked or profiled so far by this execution. This is not applicable for JSON file type.
	RowsMasked *int64 `json:"rows_masked,omitempty"`
	// The total number of rows that this execution should mask. This value is set to -1 while the total row count is being calculated. This is not applicable for JSON file type.
	RowsTotal *int64 `json:"rows_total,omitempty"`
	// The number of bytes masked so far by this execution. This is only applicable for JSON file type.
	BytesProcessed *int64 `json:"bytes_processed,omitempty"`
	// The total number of bytes that this execution should mask. This value is set to -1 while the total byte count is being calculated. This is only applicable for JSON file type.
	BytesTotal *int64 `json:"bytes_total,omitempty"`
	// The date and time that this execution was started.
	StartTime *time.Time `json:"start_time,omitempty"`
	// The date and time that this execution was submitted.
	SubmitTime *time.Time `json:"submit_time,omitempty"`
	// The date and time that this execution completed.
	EndTime *time.Time `json:"end_time,omitempty"`
	// The time this execution spent running, in milliseconds.
	RunDuration *int64 `json:"run_duration,omitempty"`
	// The time this execution spent in the queue, in milliseconds.
	QueueDuration *int64 `json:"queue_duration,omitempty"`
	// The total time this execution took, in milliseconds.
	TotalDuration *int64 `json:"total_duration,omitempty"`
	// The account id of the DCT user who started this execution.
	AccountId *int64 `json:"account_id,omitempty"`
	// The account name of the DCT user who started this execution.
	AccountName *string `json:"account_name,omitempty"`
	// The progression of steps or events performed by this execution. Only available for executions on masking engines that are version 6.0.14.0 and higher.
	TaskEvents []TaskEvent `json:"task_events,omitempty"`
	HyperscaleTaskEvents []HyperscaleTaskEvent `json:"hyperscale_task_events,omitempty"`
	// Progress of the task (value between 0 and 1, Hyperscale executions only)
	Progress *float32 `json:"progress,omitempty"`
	// The total number of execution components in this execution.
	ExecutionComponentsTotal *int32 `json:"execution_components_total,omitempty"`
	// The number of execution components processed so far in this execution.
	ExecutionComponentsProcessed *int32 `json:"execution_components_processed,omitempty"`
}

// NewExecution instantiates a new Execution object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExecution() *Execution {
	this := Execution{}
	return &this
}

// NewExecutionWithDefaults instantiates a new Execution object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExecutionWithDefaults() *Execution {
	this := Execution{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Execution) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Execution) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Execution) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *Execution) SetId(v string) {
	o.Id = &v
}

// GetEngineId returns the EngineId field value if set, zero value otherwise.
func (o *Execution) GetEngineId() string {
	if o == nil || IsNil(o.EngineId) {
		var ret string
		return ret
	}
	return *o.EngineId
}

// GetEngineIdOk returns a tuple with the EngineId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Execution) GetEngineIdOk() (*string, bool) {
	if o == nil || IsNil(o.EngineId) {
		return nil, false
	}
	return o.EngineId, true
}

// HasEngineId returns a boolean if a field has been set.
func (o *Execution) HasEngineId() bool {
	if o != nil && !IsNil(o.EngineId) {
		return true
	}

	return false
}

// SetEngineId gets a reference to the given string and assigns it to the EngineId field.
func (o *Execution) SetEngineId(v string) {
	o.EngineId = &v
}

// GetHyperscaleInstanceId returns the HyperscaleInstanceId field value if set, zero value otherwise.
func (o *Execution) GetHyperscaleInstanceId() string {
	if o == nil || IsNil(o.HyperscaleInstanceId) {
		var ret string
		return ret
	}
	return *o.HyperscaleInstanceId
}

// GetHyperscaleInstanceIdOk returns a tuple with the HyperscaleInstanceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Execution) GetHyperscaleInstanceIdOk() (*string, bool) {
	if o == nil || IsNil(o.HyperscaleInstanceId) {
		return nil, false
	}
	return o.HyperscaleInstanceId, true
}

// HasHyperscaleInstanceId returns a boolean if a field has been set.
func (o *Execution) HasHyperscaleInstanceId() bool {
	if o != nil && !IsNil(o.HyperscaleInstanceId) {
		return true
	}

	return false
}

// SetHyperscaleInstanceId gets a reference to the given string and assigns it to the HyperscaleInstanceId field.
func (o *Execution) SetHyperscaleInstanceId(v string) {
	o.HyperscaleInstanceId = &v
}

// GetEngineName returns the EngineName field value if set, zero value otherwise.
func (o *Execution) GetEngineName() string {
	if o == nil || IsNil(o.EngineName) {
		var ret string
		return ret
	}
	return *o.EngineName
}

// GetEngineNameOk returns a tuple with the EngineName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Execution) GetEngineNameOk() (*string, bool) {
	if o == nil || IsNil(o.EngineName) {
		return nil, false
	}
	return o.EngineName, true
}

// HasEngineName returns a boolean if a field has been set.
func (o *Execution) HasEngineName() bool {
	if o != nil && !IsNil(o.EngineName) {
		return true
	}

	return false
}

// SetEngineName gets a reference to the given string and assigns it to the EngineName field.
func (o *Execution) SetEngineName(v string) {
	o.EngineName = &v
}

// GetMaskingJobId returns the MaskingJobId field value if set, zero value otherwise.
func (o *Execution) GetMaskingJobId() string {
	if o == nil || IsNil(o.MaskingJobId) {
		var ret string
		return ret
	}
	return *o.MaskingJobId
}

// GetMaskingJobIdOk returns a tuple with the MaskingJobId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Execution) GetMaskingJobIdOk() (*string, bool) {
	if o == nil || IsNil(o.MaskingJobId) {
		return nil, false
	}
	return o.MaskingJobId, true
}

// HasMaskingJobId returns a boolean if a field has been set.
func (o *Execution) HasMaskingJobId() bool {
	if o != nil && !IsNil(o.MaskingJobId) {
		return true
	}

	return false
}

// SetMaskingJobId gets a reference to the given string and assigns it to the MaskingJobId field.
func (o *Execution) SetMaskingJobId(v string) {
	o.MaskingJobId = &v
}

// GetMaskingJobName returns the MaskingJobName field value if set, zero value otherwise.
func (o *Execution) GetMaskingJobName() string {
	if o == nil || IsNil(o.MaskingJobName) {
		var ret string
		return ret
	}
	return *o.MaskingJobName
}

// GetMaskingJobNameOk returns a tuple with the MaskingJobName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Execution) GetMaskingJobNameOk() (*string, bool) {
	if o == nil || IsNil(o.MaskingJobName) {
		return nil, false
	}
	return o.MaskingJobName, true
}

// HasMaskingJobName returns a boolean if a field has been set.
func (o *Execution) HasMaskingJobName() bool {
	if o != nil && !IsNil(o.MaskingJobName) {
		return true
	}

	return false
}

// SetMaskingJobName gets a reference to the given string and assigns it to the MaskingJobName field.
func (o *Execution) SetMaskingJobName(v string) {
	o.MaskingJobName = &v
}

// GetSourceConnectorId returns the SourceConnectorId field value if set, zero value otherwise.
func (o *Execution) GetSourceConnectorId() string {
	if o == nil || IsNil(o.SourceConnectorId) {
		var ret string
		return ret
	}
	return *o.SourceConnectorId
}

// GetSourceConnectorIdOk returns a tuple with the SourceConnectorId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Execution) GetSourceConnectorIdOk() (*string, bool) {
	if o == nil || IsNil(o.SourceConnectorId) {
		return nil, false
	}
	return o.SourceConnectorId, true
}

// HasSourceConnectorId returns a boolean if a field has been set.
func (o *Execution) HasSourceConnectorId() bool {
	if o != nil && !IsNil(o.SourceConnectorId) {
		return true
	}

	return false
}

// SetSourceConnectorId gets a reference to the given string and assigns it to the SourceConnectorId field.
func (o *Execution) SetSourceConnectorId(v string) {
	o.SourceConnectorId = &v
}

// GetTargetConnectorId returns the TargetConnectorId field value if set, zero value otherwise.
func (o *Execution) GetTargetConnectorId() string {
	if o == nil || IsNil(o.TargetConnectorId) {
		var ret string
		return ret
	}
	return *o.TargetConnectorId
}

// GetTargetConnectorIdOk returns a tuple with the TargetConnectorId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Execution) GetTargetConnectorIdOk() (*string, bool) {
	if o == nil || IsNil(o.TargetConnectorId) {
		return nil, false
	}
	return o.TargetConnectorId, true
}

// HasTargetConnectorId returns a boolean if a field has been set.
func (o *Execution) HasTargetConnectorId() bool {
	if o != nil && !IsNil(o.TargetConnectorId) {
		return true
	}

	return false
}

// SetTargetConnectorId gets a reference to the given string and assigns it to the TargetConnectorId field.
func (o *Execution) SetTargetConnectorId(v string) {
	o.TargetConnectorId = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *Execution) GetStatus() ExecutionStatus {
	if o == nil || IsNil(o.Status) {
		var ret ExecutionStatus
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Execution) GetStatusOk() (*ExecutionStatus, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *Execution) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given ExecutionStatus and assigns it to the Status field.
func (o *Execution) SetStatus(v ExecutionStatus) {
	o.Status = &v
}

// GetRowsMasked returns the RowsMasked field value if set, zero value otherwise.
func (o *Execution) GetRowsMasked() int64 {
	if o == nil || IsNil(o.RowsMasked) {
		var ret int64
		return ret
	}
	return *o.RowsMasked
}

// GetRowsMaskedOk returns a tuple with the RowsMasked field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Execution) GetRowsMaskedOk() (*int64, bool) {
	if o == nil || IsNil(o.RowsMasked) {
		return nil, false
	}
	return o.RowsMasked, true
}

// HasRowsMasked returns a boolean if a field has been set.
func (o *Execution) HasRowsMasked() bool {
	if o != nil && !IsNil(o.RowsMasked) {
		return true
	}

	return false
}

// SetRowsMasked gets a reference to the given int64 and assigns it to the RowsMasked field.
func (o *Execution) SetRowsMasked(v int64) {
	o.RowsMasked = &v
}

// GetRowsTotal returns the RowsTotal field value if set, zero value otherwise.
func (o *Execution) GetRowsTotal() int64 {
	if o == nil || IsNil(o.RowsTotal) {
		var ret int64
		return ret
	}
	return *o.RowsTotal
}

// GetRowsTotalOk returns a tuple with the RowsTotal field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Execution) GetRowsTotalOk() (*int64, bool) {
	if o == nil || IsNil(o.RowsTotal) {
		return nil, false
	}
	return o.RowsTotal, true
}

// HasRowsTotal returns a boolean if a field has been set.
func (o *Execution) HasRowsTotal() bool {
	if o != nil && !IsNil(o.RowsTotal) {
		return true
	}

	return false
}

// SetRowsTotal gets a reference to the given int64 and assigns it to the RowsTotal field.
func (o *Execution) SetRowsTotal(v int64) {
	o.RowsTotal = &v
}

// GetBytesProcessed returns the BytesProcessed field value if set, zero value otherwise.
func (o *Execution) GetBytesProcessed() int64 {
	if o == nil || IsNil(o.BytesProcessed) {
		var ret int64
		return ret
	}
	return *o.BytesProcessed
}

// GetBytesProcessedOk returns a tuple with the BytesProcessed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Execution) GetBytesProcessedOk() (*int64, bool) {
	if o == nil || IsNil(o.BytesProcessed) {
		return nil, false
	}
	return o.BytesProcessed, true
}

// HasBytesProcessed returns a boolean if a field has been set.
func (o *Execution) HasBytesProcessed() bool {
	if o != nil && !IsNil(o.BytesProcessed) {
		return true
	}

	return false
}

// SetBytesProcessed gets a reference to the given int64 and assigns it to the BytesProcessed field.
func (o *Execution) SetBytesProcessed(v int64) {
	o.BytesProcessed = &v
}

// GetBytesTotal returns the BytesTotal field value if set, zero value otherwise.
func (o *Execution) GetBytesTotal() int64 {
	if o == nil || IsNil(o.BytesTotal) {
		var ret int64
		return ret
	}
	return *o.BytesTotal
}

// GetBytesTotalOk returns a tuple with the BytesTotal field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Execution) GetBytesTotalOk() (*int64, bool) {
	if o == nil || IsNil(o.BytesTotal) {
		return nil, false
	}
	return o.BytesTotal, true
}

// HasBytesTotal returns a boolean if a field has been set.
func (o *Execution) HasBytesTotal() bool {
	if o != nil && !IsNil(o.BytesTotal) {
		return true
	}

	return false
}

// SetBytesTotal gets a reference to the given int64 and assigns it to the BytesTotal field.
func (o *Execution) SetBytesTotal(v int64) {
	o.BytesTotal = &v
}

// GetStartTime returns the StartTime field value if set, zero value otherwise.
func (o *Execution) GetStartTime() time.Time {
	if o == nil || IsNil(o.StartTime) {
		var ret time.Time
		return ret
	}
	return *o.StartTime
}

// GetStartTimeOk returns a tuple with the StartTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Execution) GetStartTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.StartTime) {
		return nil, false
	}
	return o.StartTime, true
}

// HasStartTime returns a boolean if a field has been set.
func (o *Execution) HasStartTime() bool {
	if o != nil && !IsNil(o.StartTime) {
		return true
	}

	return false
}

// SetStartTime gets a reference to the given time.Time and assigns it to the StartTime field.
func (o *Execution) SetStartTime(v time.Time) {
	o.StartTime = &v
}

// GetSubmitTime returns the SubmitTime field value if set, zero value otherwise.
func (o *Execution) GetSubmitTime() time.Time {
	if o == nil || IsNil(o.SubmitTime) {
		var ret time.Time
		return ret
	}
	return *o.SubmitTime
}

// GetSubmitTimeOk returns a tuple with the SubmitTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Execution) GetSubmitTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.SubmitTime) {
		return nil, false
	}
	return o.SubmitTime, true
}

// HasSubmitTime returns a boolean if a field has been set.
func (o *Execution) HasSubmitTime() bool {
	if o != nil && !IsNil(o.SubmitTime) {
		return true
	}

	return false
}

// SetSubmitTime gets a reference to the given time.Time and assigns it to the SubmitTime field.
func (o *Execution) SetSubmitTime(v time.Time) {
	o.SubmitTime = &v
}

// GetEndTime returns the EndTime field value if set, zero value otherwise.
func (o *Execution) GetEndTime() time.Time {
	if o == nil || IsNil(o.EndTime) {
		var ret time.Time
		return ret
	}
	return *o.EndTime
}

// GetEndTimeOk returns a tuple with the EndTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Execution) GetEndTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.EndTime) {
		return nil, false
	}
	return o.EndTime, true
}

// HasEndTime returns a boolean if a field has been set.
func (o *Execution) HasEndTime() bool {
	if o != nil && !IsNil(o.EndTime) {
		return true
	}

	return false
}

// SetEndTime gets a reference to the given time.Time and assigns it to the EndTime field.
func (o *Execution) SetEndTime(v time.Time) {
	o.EndTime = &v
}

// GetRunDuration returns the RunDuration field value if set, zero value otherwise.
func (o *Execution) GetRunDuration() int64 {
	if o == nil || IsNil(o.RunDuration) {
		var ret int64
		return ret
	}
	return *o.RunDuration
}

// GetRunDurationOk returns a tuple with the RunDuration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Execution) GetRunDurationOk() (*int64, bool) {
	if o == nil || IsNil(o.RunDuration) {
		return nil, false
	}
	return o.RunDuration, true
}

// HasRunDuration returns a boolean if a field has been set.
func (o *Execution) HasRunDuration() bool {
	if o != nil && !IsNil(o.RunDuration) {
		return true
	}

	return false
}

// SetRunDuration gets a reference to the given int64 and assigns it to the RunDuration field.
func (o *Execution) SetRunDuration(v int64) {
	o.RunDuration = &v
}

// GetQueueDuration returns the QueueDuration field value if set, zero value otherwise.
func (o *Execution) GetQueueDuration() int64 {
	if o == nil || IsNil(o.QueueDuration) {
		var ret int64
		return ret
	}
	return *o.QueueDuration
}

// GetQueueDurationOk returns a tuple with the QueueDuration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Execution) GetQueueDurationOk() (*int64, bool) {
	if o == nil || IsNil(o.QueueDuration) {
		return nil, false
	}
	return o.QueueDuration, true
}

// HasQueueDuration returns a boolean if a field has been set.
func (o *Execution) HasQueueDuration() bool {
	if o != nil && !IsNil(o.QueueDuration) {
		return true
	}

	return false
}

// SetQueueDuration gets a reference to the given int64 and assigns it to the QueueDuration field.
func (o *Execution) SetQueueDuration(v int64) {
	o.QueueDuration = &v
}

// GetTotalDuration returns the TotalDuration field value if set, zero value otherwise.
func (o *Execution) GetTotalDuration() int64 {
	if o == nil || IsNil(o.TotalDuration) {
		var ret int64
		return ret
	}
	return *o.TotalDuration
}

// GetTotalDurationOk returns a tuple with the TotalDuration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Execution) GetTotalDurationOk() (*int64, bool) {
	if o == nil || IsNil(o.TotalDuration) {
		return nil, false
	}
	return o.TotalDuration, true
}

// HasTotalDuration returns a boolean if a field has been set.
func (o *Execution) HasTotalDuration() bool {
	if o != nil && !IsNil(o.TotalDuration) {
		return true
	}

	return false
}

// SetTotalDuration gets a reference to the given int64 and assigns it to the TotalDuration field.
func (o *Execution) SetTotalDuration(v int64) {
	o.TotalDuration = &v
}

// GetAccountId returns the AccountId field value if set, zero value otherwise.
func (o *Execution) GetAccountId() int64 {
	if o == nil || IsNil(o.AccountId) {
		var ret int64
		return ret
	}
	return *o.AccountId
}

// GetAccountIdOk returns a tuple with the AccountId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Execution) GetAccountIdOk() (*int64, bool) {
	if o == nil || IsNil(o.AccountId) {
		return nil, false
	}
	return o.AccountId, true
}

// HasAccountId returns a boolean if a field has been set.
func (o *Execution) HasAccountId() bool {
	if o != nil && !IsNil(o.AccountId) {
		return true
	}

	return false
}

// SetAccountId gets a reference to the given int64 and assigns it to the AccountId field.
func (o *Execution) SetAccountId(v int64) {
	o.AccountId = &v
}

// GetAccountName returns the AccountName field value if set, zero value otherwise.
func (o *Execution) GetAccountName() string {
	if o == nil || IsNil(o.AccountName) {
		var ret string
		return ret
	}
	return *o.AccountName
}

// GetAccountNameOk returns a tuple with the AccountName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Execution) GetAccountNameOk() (*string, bool) {
	if o == nil || IsNil(o.AccountName) {
		return nil, false
	}
	return o.AccountName, true
}

// HasAccountName returns a boolean if a field has been set.
func (o *Execution) HasAccountName() bool {
	if o != nil && !IsNil(o.AccountName) {
		return true
	}

	return false
}

// SetAccountName gets a reference to the given string and assigns it to the AccountName field.
func (o *Execution) SetAccountName(v string) {
	o.AccountName = &v
}

// GetTaskEvents returns the TaskEvents field value if set, zero value otherwise.
func (o *Execution) GetTaskEvents() []TaskEvent {
	if o == nil || IsNil(o.TaskEvents) {
		var ret []TaskEvent
		return ret
	}
	return o.TaskEvents
}

// GetTaskEventsOk returns a tuple with the TaskEvents field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Execution) GetTaskEventsOk() ([]TaskEvent, bool) {
	if o == nil || IsNil(o.TaskEvents) {
		return nil, false
	}
	return o.TaskEvents, true
}

// HasTaskEvents returns a boolean if a field has been set.
func (o *Execution) HasTaskEvents() bool {
	if o != nil && !IsNil(o.TaskEvents) {
		return true
	}

	return false
}

// SetTaskEvents gets a reference to the given []TaskEvent and assigns it to the TaskEvents field.
func (o *Execution) SetTaskEvents(v []TaskEvent) {
	o.TaskEvents = v
}

// GetHyperscaleTaskEvents returns the HyperscaleTaskEvents field value if set, zero value otherwise.
func (o *Execution) GetHyperscaleTaskEvents() []HyperscaleTaskEvent {
	if o == nil || IsNil(o.HyperscaleTaskEvents) {
		var ret []HyperscaleTaskEvent
		return ret
	}
	return o.HyperscaleTaskEvents
}

// GetHyperscaleTaskEventsOk returns a tuple with the HyperscaleTaskEvents field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Execution) GetHyperscaleTaskEventsOk() ([]HyperscaleTaskEvent, bool) {
	if o == nil || IsNil(o.HyperscaleTaskEvents) {
		return nil, false
	}
	return o.HyperscaleTaskEvents, true
}

// HasHyperscaleTaskEvents returns a boolean if a field has been set.
func (o *Execution) HasHyperscaleTaskEvents() bool {
	if o != nil && !IsNil(o.HyperscaleTaskEvents) {
		return true
	}

	return false
}

// SetHyperscaleTaskEvents gets a reference to the given []HyperscaleTaskEvent and assigns it to the HyperscaleTaskEvents field.
func (o *Execution) SetHyperscaleTaskEvents(v []HyperscaleTaskEvent) {
	o.HyperscaleTaskEvents = v
}

// GetProgress returns the Progress field value if set, zero value otherwise.
func (o *Execution) GetProgress() float32 {
	if o == nil || IsNil(o.Progress) {
		var ret float32
		return ret
	}
	return *o.Progress
}

// GetProgressOk returns a tuple with the Progress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Execution) GetProgressOk() (*float32, bool) {
	if o == nil || IsNil(o.Progress) {
		return nil, false
	}
	return o.Progress, true
}

// HasProgress returns a boolean if a field has been set.
func (o *Execution) HasProgress() bool {
	if o != nil && !IsNil(o.Progress) {
		return true
	}

	return false
}

// SetProgress gets a reference to the given float32 and assigns it to the Progress field.
func (o *Execution) SetProgress(v float32) {
	o.Progress = &v
}

// GetExecutionComponentsTotal returns the ExecutionComponentsTotal field value if set, zero value otherwise.
func (o *Execution) GetExecutionComponentsTotal() int32 {
	if o == nil || IsNil(o.ExecutionComponentsTotal) {
		var ret int32
		return ret
	}
	return *o.ExecutionComponentsTotal
}

// GetExecutionComponentsTotalOk returns a tuple with the ExecutionComponentsTotal field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Execution) GetExecutionComponentsTotalOk() (*int32, bool) {
	if o == nil || IsNil(o.ExecutionComponentsTotal) {
		return nil, false
	}
	return o.ExecutionComponentsTotal, true
}

// HasExecutionComponentsTotal returns a boolean if a field has been set.
func (o *Execution) HasExecutionComponentsTotal() bool {
	if o != nil && !IsNil(o.ExecutionComponentsTotal) {
		return true
	}

	return false
}

// SetExecutionComponentsTotal gets a reference to the given int32 and assigns it to the ExecutionComponentsTotal field.
func (o *Execution) SetExecutionComponentsTotal(v int32) {
	o.ExecutionComponentsTotal = &v
}

// GetExecutionComponentsProcessed returns the ExecutionComponentsProcessed field value if set, zero value otherwise.
func (o *Execution) GetExecutionComponentsProcessed() int32 {
	if o == nil || IsNil(o.ExecutionComponentsProcessed) {
		var ret int32
		return ret
	}
	return *o.ExecutionComponentsProcessed
}

// GetExecutionComponentsProcessedOk returns a tuple with the ExecutionComponentsProcessed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Execution) GetExecutionComponentsProcessedOk() (*int32, bool) {
	if o == nil || IsNil(o.ExecutionComponentsProcessed) {
		return nil, false
	}
	return o.ExecutionComponentsProcessed, true
}

// HasExecutionComponentsProcessed returns a boolean if a field has been set.
func (o *Execution) HasExecutionComponentsProcessed() bool {
	if o != nil && !IsNil(o.ExecutionComponentsProcessed) {
		return true
	}

	return false
}

// SetExecutionComponentsProcessed gets a reference to the given int32 and assigns it to the ExecutionComponentsProcessed field.
func (o *Execution) SetExecutionComponentsProcessed(v int32) {
	o.ExecutionComponentsProcessed = &v
}

func (o Execution) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Execution) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.EngineId) {
		toSerialize["engine_id"] = o.EngineId
	}
	if !IsNil(o.HyperscaleInstanceId) {
		toSerialize["hyperscale_instance_id"] = o.HyperscaleInstanceId
	}
	if !IsNil(o.EngineName) {
		toSerialize["engine_name"] = o.EngineName
	}
	if !IsNil(o.MaskingJobId) {
		toSerialize["masking_job_id"] = o.MaskingJobId
	}
	if !IsNil(o.MaskingJobName) {
		toSerialize["masking_job_name"] = o.MaskingJobName
	}
	if !IsNil(o.SourceConnectorId) {
		toSerialize["source_connector_id"] = o.SourceConnectorId
	}
	if !IsNil(o.TargetConnectorId) {
		toSerialize["target_connector_id"] = o.TargetConnectorId
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.RowsMasked) {
		toSerialize["rows_masked"] = o.RowsMasked
	}
	if !IsNil(o.RowsTotal) {
		toSerialize["rows_total"] = o.RowsTotal
	}
	if !IsNil(o.BytesProcessed) {
		toSerialize["bytes_processed"] = o.BytesProcessed
	}
	if !IsNil(o.BytesTotal) {
		toSerialize["bytes_total"] = o.BytesTotal
	}
	if !IsNil(o.StartTime) {
		toSerialize["start_time"] = o.StartTime
	}
	if !IsNil(o.SubmitTime) {
		toSerialize["submit_time"] = o.SubmitTime
	}
	if !IsNil(o.EndTime) {
		toSerialize["end_time"] = o.EndTime
	}
	if !IsNil(o.RunDuration) {
		toSerialize["run_duration"] = o.RunDuration
	}
	if !IsNil(o.QueueDuration) {
		toSerialize["queue_duration"] = o.QueueDuration
	}
	if !IsNil(o.TotalDuration) {
		toSerialize["total_duration"] = o.TotalDuration
	}
	if !IsNil(o.AccountId) {
		toSerialize["account_id"] = o.AccountId
	}
	if !IsNil(o.AccountName) {
		toSerialize["account_name"] = o.AccountName
	}
	if !IsNil(o.TaskEvents) {
		toSerialize["task_events"] = o.TaskEvents
	}
	if !IsNil(o.HyperscaleTaskEvents) {
		toSerialize["hyperscale_task_events"] = o.HyperscaleTaskEvents
	}
	if !IsNil(o.Progress) {
		toSerialize["progress"] = o.Progress
	}
	if !IsNil(o.ExecutionComponentsTotal) {
		toSerialize["execution_components_total"] = o.ExecutionComponentsTotal
	}
	if !IsNil(o.ExecutionComponentsProcessed) {
		toSerialize["execution_components_processed"] = o.ExecutionComponentsProcessed
	}
	return toSerialize, nil
}

type NullableExecution struct {
	value *Execution
	isSet bool
}

func (v NullableExecution) Get() *Execution {
	return v.value
}

func (v *NullableExecution) Set(val *Execution) {
	v.value = val
	v.isSet = true
}

func (v NullableExecution) IsSet() bool {
	return v.isSet
}

func (v *NullableExecution) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExecution(val *Execution) *NullableExecution {
	return &NullableExecution{value: val, isSet: true}
}

func (v NullableExecution) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExecution) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


