/*
Delphix DCT API

Delphix DCT API

API version: 3.18.0
Contact: support@delphix.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package delphix_dct_api

import (
	"encoding/json"
)

// checks if the DataClassUpdateParams type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DataClassUpdateParams{}

// DataClassUpdateParams Parameters used to update a Data Class.
type DataClassUpdateParams struct {
	// A description of this data class.
	Description NullableString `json:"description,omitempty"`
	// An example data value for this data class.
	Example NullableString `json:"example,omitempty"`
}

// NewDataClassUpdateParams instantiates a new DataClassUpdateParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDataClassUpdateParams() *DataClassUpdateParams {
	this := DataClassUpdateParams{}
	return &this
}

// NewDataClassUpdateParamsWithDefaults instantiates a new DataClassUpdateParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDataClassUpdateParamsWithDefaults() *DataClassUpdateParams {
	this := DataClassUpdateParams{}
	return &this
}

// GetDescription returns the Description field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DataClassUpdateParams) GetDescription() string {
	if o == nil || IsNil(o.Description.Get()) {
		var ret string
		return ret
	}
	return *o.Description.Get()
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DataClassUpdateParams) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Description.Get(), o.Description.IsSet()
}

// HasDescription returns a boolean if a field has been set.
func (o *DataClassUpdateParams) HasDescription() bool {
	if o != nil && o.Description.IsSet() {
		return true
	}

	return false
}

// SetDescription gets a reference to the given NullableString and assigns it to the Description field.
func (o *DataClassUpdateParams) SetDescription(v string) {
	o.Description.Set(&v)
}
// SetDescriptionNil sets the value for Description to be an explicit nil
func (o *DataClassUpdateParams) SetDescriptionNil() {
	o.Description.Set(nil)
}

// UnsetDescription ensures that no value is present for Description, not even an explicit nil
func (o *DataClassUpdateParams) UnsetDescription() {
	o.Description.Unset()
}

// GetExample returns the Example field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DataClassUpdateParams) GetExample() string {
	if o == nil || IsNil(o.Example.Get()) {
		var ret string
		return ret
	}
	return *o.Example.Get()
}

// GetExampleOk returns a tuple with the Example field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DataClassUpdateParams) GetExampleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Example.Get(), o.Example.IsSet()
}

// HasExample returns a boolean if a field has been set.
func (o *DataClassUpdateParams) HasExample() bool {
	if o != nil && o.Example.IsSet() {
		return true
	}

	return false
}

// SetExample gets a reference to the given NullableString and assigns it to the Example field.
func (o *DataClassUpdateParams) SetExample(v string) {
	o.Example.Set(&v)
}
// SetExampleNil sets the value for Example to be an explicit nil
func (o *DataClassUpdateParams) SetExampleNil() {
	o.Example.Set(nil)
}

// UnsetExample ensures that no value is present for Example, not even an explicit nil
func (o *DataClassUpdateParams) UnsetExample() {
	o.Example.Unset()
}

func (o DataClassUpdateParams) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DataClassUpdateParams) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Description.IsSet() {
		toSerialize["description"] = o.Description.Get()
	}
	if o.Example.IsSet() {
		toSerialize["example"] = o.Example.Get()
	}
	return toSerialize, nil
}

type NullableDataClassUpdateParams struct {
	value *DataClassUpdateParams
	isSet bool
}

func (v NullableDataClassUpdateParams) Get() *DataClassUpdateParams {
	return v.value
}

func (v *NullableDataClassUpdateParams) Set(val *DataClassUpdateParams) {
	v.value = val
	v.isSet = true
}

func (v NullableDataClassUpdateParams) IsSet() bool {
	return v.isSet
}

func (v *NullableDataClassUpdateParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDataClassUpdateParams(val *DataClassUpdateParams) *NullableDataClassUpdateParams {
	return &NullableDataClassUpdateParams{value: val, isSet: true}
}

func (v NullableDataClassUpdateParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDataClassUpdateParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


