/*
Delphix DCT API

Delphix DCT API

API version: 3.17.0
Contact: support@delphix.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package delphix_dct_api

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ApiUsageData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ApiUsageData{}

// ApiUsageData struct for ApiUsageData
type ApiUsageData struct {
	// API called.
	ApiEndpoint *string `json:"api_endpoint,omitempty"`
	// HTTP method for API called.
	ApiMethod *string `json:"api_method,omitempty"`
	// Count of API calls over the requested timeframe.
	ApiCount int64 `json:"api_count"`
	// Whether the API calls are of kind automation or governance
	Kind *string `json:"kind,omitempty"`
	// Name of the api client that called the API endpoint
	ClientName *string `json:"client_name,omitempty"`
	// Version of the api client that called the API endpoint
	UserAgent *string `json:"user_agent,omitempty"`
	// DCT version at the time of api call
	DctVersion *string `json:"dct_version,omitempty"`
}

type _ApiUsageData ApiUsageData

// NewApiUsageData instantiates a new ApiUsageData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApiUsageData(apiCount int64) *ApiUsageData {
	this := ApiUsageData{}
	this.ApiCount = apiCount
	return &this
}

// NewApiUsageDataWithDefaults instantiates a new ApiUsageData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApiUsageDataWithDefaults() *ApiUsageData {
	this := ApiUsageData{}
	return &this
}

// GetApiEndpoint returns the ApiEndpoint field value if set, zero value otherwise.
func (o *ApiUsageData) GetApiEndpoint() string {
	if o == nil || IsNil(o.ApiEndpoint) {
		var ret string
		return ret
	}
	return *o.ApiEndpoint
}

// GetApiEndpointOk returns a tuple with the ApiEndpoint field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiUsageData) GetApiEndpointOk() (*string, bool) {
	if o == nil || IsNil(o.ApiEndpoint) {
		return nil, false
	}
	return o.ApiEndpoint, true
}

// HasApiEndpoint returns a boolean if a field has been set.
func (o *ApiUsageData) HasApiEndpoint() bool {
	if o != nil && !IsNil(o.ApiEndpoint) {
		return true
	}

	return false
}

// SetApiEndpoint gets a reference to the given string and assigns it to the ApiEndpoint field.
func (o *ApiUsageData) SetApiEndpoint(v string) {
	o.ApiEndpoint = &v
}

// GetApiMethod returns the ApiMethod field value if set, zero value otherwise.
func (o *ApiUsageData) GetApiMethod() string {
	if o == nil || IsNil(o.ApiMethod) {
		var ret string
		return ret
	}
	return *o.ApiMethod
}

// GetApiMethodOk returns a tuple with the ApiMethod field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiUsageData) GetApiMethodOk() (*string, bool) {
	if o == nil || IsNil(o.ApiMethod) {
		return nil, false
	}
	return o.ApiMethod, true
}

// HasApiMethod returns a boolean if a field has been set.
func (o *ApiUsageData) HasApiMethod() bool {
	if o != nil && !IsNil(o.ApiMethod) {
		return true
	}

	return false
}

// SetApiMethod gets a reference to the given string and assigns it to the ApiMethod field.
func (o *ApiUsageData) SetApiMethod(v string) {
	o.ApiMethod = &v
}

// GetApiCount returns the ApiCount field value
func (o *ApiUsageData) GetApiCount() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.ApiCount
}

// GetApiCountOk returns a tuple with the ApiCount field value
// and a boolean to check if the value has been set.
func (o *ApiUsageData) GetApiCountOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ApiCount, true
}

// SetApiCount sets field value
func (o *ApiUsageData) SetApiCount(v int64) {
	o.ApiCount = v
}

// GetKind returns the Kind field value if set, zero value otherwise.
func (o *ApiUsageData) GetKind() string {
	if o == nil || IsNil(o.Kind) {
		var ret string
		return ret
	}
	return *o.Kind
}

// GetKindOk returns a tuple with the Kind field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiUsageData) GetKindOk() (*string, bool) {
	if o == nil || IsNil(o.Kind) {
		return nil, false
	}
	return o.Kind, true
}

// HasKind returns a boolean if a field has been set.
func (o *ApiUsageData) HasKind() bool {
	if o != nil && !IsNil(o.Kind) {
		return true
	}

	return false
}

// SetKind gets a reference to the given string and assigns it to the Kind field.
func (o *ApiUsageData) SetKind(v string) {
	o.Kind = &v
}

// GetClientName returns the ClientName field value if set, zero value otherwise.
func (o *ApiUsageData) GetClientName() string {
	if o == nil || IsNil(o.ClientName) {
		var ret string
		return ret
	}
	return *o.ClientName
}

// GetClientNameOk returns a tuple with the ClientName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiUsageData) GetClientNameOk() (*string, bool) {
	if o == nil || IsNil(o.ClientName) {
		return nil, false
	}
	return o.ClientName, true
}

// HasClientName returns a boolean if a field has been set.
func (o *ApiUsageData) HasClientName() bool {
	if o != nil && !IsNil(o.ClientName) {
		return true
	}

	return false
}

// SetClientName gets a reference to the given string and assigns it to the ClientName field.
func (o *ApiUsageData) SetClientName(v string) {
	o.ClientName = &v
}

// GetUserAgent returns the UserAgent field value if set, zero value otherwise.
func (o *ApiUsageData) GetUserAgent() string {
	if o == nil || IsNil(o.UserAgent) {
		var ret string
		return ret
	}
	return *o.UserAgent
}

// GetUserAgentOk returns a tuple with the UserAgent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiUsageData) GetUserAgentOk() (*string, bool) {
	if o == nil || IsNil(o.UserAgent) {
		return nil, false
	}
	return o.UserAgent, true
}

// HasUserAgent returns a boolean if a field has been set.
func (o *ApiUsageData) HasUserAgent() bool {
	if o != nil && !IsNil(o.UserAgent) {
		return true
	}

	return false
}

// SetUserAgent gets a reference to the given string and assigns it to the UserAgent field.
func (o *ApiUsageData) SetUserAgent(v string) {
	o.UserAgent = &v
}

// GetDctVersion returns the DctVersion field value if set, zero value otherwise.
func (o *ApiUsageData) GetDctVersion() string {
	if o == nil || IsNil(o.DctVersion) {
		var ret string
		return ret
	}
	return *o.DctVersion
}

// GetDctVersionOk returns a tuple with the DctVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiUsageData) GetDctVersionOk() (*string, bool) {
	if o == nil || IsNil(o.DctVersion) {
		return nil, false
	}
	return o.DctVersion, true
}

// HasDctVersion returns a boolean if a field has been set.
func (o *ApiUsageData) HasDctVersion() bool {
	if o != nil && !IsNil(o.DctVersion) {
		return true
	}

	return false
}

// SetDctVersion gets a reference to the given string and assigns it to the DctVersion field.
func (o *ApiUsageData) SetDctVersion(v string) {
	o.DctVersion = &v
}

func (o ApiUsageData) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ApiUsageData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ApiEndpoint) {
		toSerialize["api_endpoint"] = o.ApiEndpoint
	}
	if !IsNil(o.ApiMethod) {
		toSerialize["api_method"] = o.ApiMethod
	}
	toSerialize["api_count"] = o.ApiCount
	if !IsNil(o.Kind) {
		toSerialize["kind"] = o.Kind
	}
	if !IsNil(o.ClientName) {
		toSerialize["client_name"] = o.ClientName
	}
	if !IsNil(o.UserAgent) {
		toSerialize["user_agent"] = o.UserAgent
	}
	if !IsNil(o.DctVersion) {
		toSerialize["dct_version"] = o.DctVersion
	}
	return toSerialize, nil
}

func (o *ApiUsageData) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"api_count",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varApiUsageData := _ApiUsageData{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varApiUsageData)

	if err != nil {
		return err
	}

	*o = ApiUsageData(varApiUsageData)

	return err
}

type NullableApiUsageData struct {
	value *ApiUsageData
	isSet bool
}

func (v NullableApiUsageData) Get() *ApiUsageData {
	return v.value
}

func (v *NullableApiUsageData) Set(val *ApiUsageData) {
	v.value = val
	v.isSet = true
}

func (v NullableApiUsageData) IsSet() bool {
	return v.isSet
}

func (v *NullableApiUsageData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApiUsageData(val *ApiUsageData) *NullableApiUsageData {
	return &NullableApiUsageData{value: val, isSet: true}
}

func (v NullableApiUsageData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApiUsageData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


