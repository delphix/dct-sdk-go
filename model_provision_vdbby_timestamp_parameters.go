/*
Delphix DCT API

Delphix DCT API

API version: 3.17.0
Contact: support@delphix.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package delphix_dct_api

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the ProvisionVDBByTimestampParameters type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ProvisionVDBByTimestampParameters{}

// ProvisionVDBByTimestampParameters struct for ProvisionVDBByTimestampParameters
type ProvisionVDBByTimestampParameters struct {
	// The commands to execute on the target environment before refreshing the VDB.
	PreRefresh []Hook `json:"pre_refresh,omitempty"`
	// The commands to execute on the target environment after refreshing the VDB.
	PostRefresh []Hook `json:"post_refresh,omitempty"`
	// The commands to execute on the target environment before refreshing the VDB with data from itself.
	PreSelfRefresh []Hook `json:"pre_self_refresh,omitempty"`
	// The commands to execute on the target environment after refreshing the VDB with data from itself.
	PostSelfRefresh []Hook `json:"post_self_refresh,omitempty"`
	// The commands to execute on the target environment before rewinding the VDB.
	// Deprecated
	PreRollback []Hook `json:"pre_rollback,omitempty"`
	// The commands to execute on the target environment after rewinding the VDB.
	// Deprecated
	PostRollback []Hook `json:"post_rollback,omitempty"`
	// The commands to execute on the target environment when the VDB is created or refreshed.
	ConfigureClone []Hook `json:"configure_clone,omitempty"`
	// The commands to execute on the target environment before snapshotting a virtual source. These commands can quiesce any data prior to snapshotting.
	PreSnapshot []Hook `json:"pre_snapshot,omitempty"`
	// The commands to execute on the target environment after snapshotting a virtual source.
	PostSnapshot []Hook `json:"post_snapshot,omitempty"`
	// The commands to execute on the target environment before starting a virtual source.
	PreStart []Hook `json:"pre_start,omitempty"`
	// The commands to execute on the target environment after starting a virtual source.
	PostStart []Hook `json:"post_start,omitempty"`
	// The commands to execute on the target environment before stopping a virtual source.
	PreStop []Hook `json:"pre_stop,omitempty"`
	// The commands to execute on the target environment after stopping a virtual source.
	PostStop []Hook `json:"post_stop,omitempty"`
	// The ID of the group into which the VDB will be provisioned. If unset, a group is selected randomly on the Engine.
	TargetGroupId *string `json:"target_group_id,omitempty"`
	// The unique name of the provisioned VDB within a group. If unset, a name is randomly generated.
	Name *string `json:"name,omitempty"`
	// The name of the database on the target environment. Defaults to the value of the name property.
	DatabaseName *string `json:"database_name,omitempty"`
	// The ID of the container database (CDB) to provision an Oracle Multitenant database into. This corresponds to a CDB or VCDB API object. When this is not set, a new vCDB will be provisioned.
	CdbId *string `json:"cdb_id,omitempty"`
	// The cluster node ids, name or addresses for this provision operation (Oracle RAC Only).
	ClusterNodeIds []string `json:"cluster_node_ids,omitempty"`
	// The cluster node instances details for this provision operation(Oracle RAC Only).This property is mutually exclusive with cluster_node_ids.
	ClusterNodeInstances []ClusterNodeInstance `json:"cluster_node_instances,omitempty"`
	// Whether to truncate log on checkpoint (ASE only).
	TruncateLogOnCheckpoint *bool `json:"truncate_log_on_checkpoint,omitempty"`
	// The name of the privileged user to run the provision operation (Oracle Only).
	OsUsername *string `json:"os_username,omitempty"`
	// The password of the privileged user to run the provision operation (Oracle Only).
	OsPassword *string `json:"os_password,omitempty"`
	// The ID of the target environment where to provision the VDB. If repository_id unambigously identifies a repository, this is unnecessary and ignored. Otherwise, a compatible repository is randomly selected on the environment.
	EnvironmentId *string `json:"environment_id,omitempty"`
	// The environment user ID to use to connect to the target environment.
	EnvironmentUserId *string `json:"environment_user_id,omitempty"`
	// The ID of the target repository where to provision the VDB. A repository typically corresponds to a database installation (Oracle home, database instance, ...). Setting this attribute implicitly determines the environment where to provision the VDB.
	RepositoryId *string `json:"repository_id,omitempty"`
	// Option to automatically select a compatible environment and repository. Mutually exclusive with repository_id.
	AutoSelectRepository *bool `json:"auto_select_repository,omitempty"`
	// Indicates whether the Engine should automatically restart this virtual source when target host reboot is detected.
	VdbRestart *bool `json:"vdb_restart,omitempty"`
	// The ID of the target VDB Template (Oracle and MSSql Only).
	TemplateId *string `json:"template_id,omitempty"`
	// The ID of the configuration template to apply to the auxiliary container database. This is only relevant when provisioning a Multitenant pluggable database into an existing CDB, i.e when the cdb_id property is set.(Oracle Only)
	AuxiliaryTemplateId *string `json:"auxiliary_template_id,omitempty"`
	// Target VDB file mapping rules (Oracle Only). Rules must be line separated (\\n or \\r) and each line must have the format \"pattern:replacement\". Lines are applied in order.
	FileMappingRules *string `json:"file_mapping_rules,omitempty"`
	// Target VDB SID name (Oracle Only).
	OracleInstanceName *string `json:"oracle_instance_name,omitempty" validate:"regexp=^[a-zA-Z0-9_]+$"`
	// Target VDB db_unique_name (Oracle Only).
	UniqueName *string `json:"unique_name,omitempty" validate:"regexp=^[a-zA-Z0-9_\\\\$#]+$"`
	// When provisioning an Oracle Multitenant vCDB (when the cdb_id property is not set), the name of the provisioned vCDB (Oracle Multitenant Only).
	VcdbName *string `json:"vcdb_name,omitempty" validate:"regexp=^[a-zA-Z0-9_]+$"`
	// When provisioning an Oracle Multitenant vCDB (when the cdb_id property is not set), the database name of the provisioned vCDB. Defaults to the value of the vcdb_name property. (Oracle Multitenant Only).
	VcdbDatabaseName *string `json:"vcdb_database_name,omitempty"`
	// Mount point for the VDB (Oracle, ASE, AppData).
	MountPoint *string `json:"mount_point,omitempty"`
	// Whether to open the database after provision (Oracle Only).
	OpenResetLogs *bool `json:"open_reset_logs,omitempty"`
	// The ID of the snapshot policy for the VDB.
	SnapshotPolicyId *string `json:"snapshot_policy_id,omitempty"`
	// The ID of the retention policy for the VDB.
	RetentionPolicyId *string `json:"retention_policy_id,omitempty"`
	// Recovery model of the source database (MSSql Only).
	RecoveryModel *string `json:"recovery_model,omitempty"`
	// PowerShell script or executable to run prior to provisioning (MSSql Only).
	PreScript *string `json:"pre_script,omitempty"`
	// PowerShell script or executable to run after provisioning (MSSql Only).
	PostScript *string `json:"post_script,omitempty"`
	// Option to enable change data capture (CDC) on both the provisioned VDB and subsequent snapshot-related operations (e.g. refresh, rewind) (MSSql Only).
	CdcOnProvision *bool `json:"cdc_on_provision,omitempty"`
	// Online log size in MB (Oracle Only).
	OnlineLogSize *int32 `json:"online_log_size,omitempty"`
	// Number of online log groups (Oracle Only).
	OnlineLogGroups *int32 `json:"online_log_groups,omitempty"`
	// Option to create a VDB in archivelog mode (Oracle Only).
	ArchiveLog *bool `json:"archive_log,omitempty"`
	// Option to generate a new DB ID for the created VDB (Oracle Only).
	NewDbid *bool `json:"new_dbid,omitempty"`
	// Indicates whether to mark this VDB as a masked VDB.
	Masked *bool `json:"masked,omitempty"`
	// The listener IDs for this provision operation (Oracle Only).
	ListenerIds []string `json:"listener_ids,omitempty"`
	// Environment variable to be set when the engine creates a VDB. See the Engine documentation for the list of allowed/denied environment variables and rules about substitution.
	CustomEnvVars *map[string]string `json:"custom_env_vars,omitempty"`
	// Environment files to be sourced when the Engine creates a VDB. This path can be followed by parameters. Paths and parameters are separated by spaces.
	CustomEnvFiles []string `json:"custom_env_files,omitempty"`
	// Environment files to be sourced when the Engine creates an Oracle RAC VDB. This path can be followed by parameters. Paths and parameters are separated by spaces.
	OracleRacCustomEnvFiles []OracleRacCustomEnvFile `json:"oracle_rac_custom_env_files,omitempty"`
	// Environment variable to be set when the engine creates an Oracle RAC VDB. See the Engine documentation for the list of allowed/denied environment variables and rules about substitution.
	OracleRacCustomEnvVars []OracleRacCustomEnvVar `json:"oracle_rac_custom_env_vars,omitempty"`
	// Path to a copy of the parent's Oracle transparent data encryption keystore on the target host. Required to provision from snapshots containing encrypted database files. (Oracle Multitenant Only)
	ParentTdeKeystorePath *string `json:"parentTdeKeystorePath,omitempty"`
	// The password of the keystore specified in parentTdeKeystorePath. (Oracle Multitenant Only)
	ParentTdeKeystorePassword *string `json:"parent_tde_keystore_password,omitempty"`
	// Secret to be used while exporting and importing vPDB encryption keys if Transparent Data Encryption is enabled on the vPDB. (Oracle Multitenant Only)
	TdeExportedKeyFileSecret *string `json:"tde_exported_key_file_secret,omitempty"`
	// ID of the key created by Delphix. (Oracle Multitenant Only)
	TdeKeyIdentifier *string `json:"tde_key_identifier,omitempty"`
	// Path to the keystore of the target vCDB. (Oracle Multitenant Only)
	TargetVcdbTdeKeystorePath *string `json:"target_vcdb_tde_keystore_path,omitempty"`
	// The password for the Transparent Data Encryption keystore associated with the CDB. (Oracle Multitenant Only)
	CdbTdeKeystorePassword *string `json:"cdb_tde_keystore_password,omitempty"`
	// ID of the key created by Delphix. (Oracle Multitenant Only)
	VcdbTdeKeyIdentifier *string `json:"vcdb_tde_key_identifier,omitempty"`
	// The JSON payload conforming to the DraftV4 schema based on the type of application data being manipulated.
	AppdataSourceParams map[string]interface{} `json:"appdata_source_params,omitempty"`
	// Specifies additional locations on which to mount a subdirectory of an AppData container.
	AdditionalMountPoints []AdditionalMountPoint `json:"additional_mount_points,omitempty"`
	// The list of parameters specified by the source config schema in the toolkit
	AppdataConfigParams map[string]interface{} `json:"appdata_config_params,omitempty"`
	// Database configuration parameter overrides.
	ConfigParams map[string]interface{} `json:"config_params,omitempty"`
	// This privileged unix username will be used to create the VDB. Leave this field blank if you do not want to use privilege elevation. The unix privileged username should begin with a letter or an underscore, followed by letters, digits, underscores, or dashes. They can end with a dollar sign (postgres only).
	PrivilegedOsUser *string `json:"privileged_os_user,omitempty" validate:"regexp=^$|^[a-zA-Z_][a-zA-Z0-9_\\\\-]+[$]?$"`
	// Port number for Postgres target database (postgres only).
	PostgresPort *int32 `json:"postgres_port,omitempty"`
	// Custom Database-Level config settings (postgres only).
	ConfigSettingsStg []ConfigSettingsStg `json:"config_settings_stg,omitempty"`
	// Indicates whether the Engine should automatically restart this vCDB when target host reboot is detected. If vdb_restart property value is not explicitly set and vcdb_restart is set as false - the vdb_restart property is defaulted to false.
	VcdbRestart *bool `json:"vcdb_restart,omitempty"`
	// Base drive letter location for mount points. (MSSql Only).
	MssqlFailoverDriveLetter *string `json:"mssql_failover_drive_letter,omitempty"`
	// The tags to be created for VDB.
	Tags []Tag `json:"tags,omitempty"`
	// Whether to invoke datapatch during provisioning (Oracle Only).
	InvokeDatapatch *bool `json:"invoke_datapatch,omitempty"`
	// The point in time from which to execute the operation. Mutually exclusive with timestamp_in_database_timezone. If the timestamp is not set, selects the latest point.
	Timestamp *time.Time `json:"timestamp,omitempty"`
	// The point in time from which to execute the operation, expressed as a date-time in the timezone of the source database. Mutually exclusive with timestamp.
	TimestampInDatabaseTimezone *string `json:"timestamp_in_database_timezone,omitempty" validate:"regexp=[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}(.[0-9]{0,3})?"`
	// The Timeflow ID.
	TimeflowId *string `json:"timeflow_id,omitempty"`
	// The ID of the Engine onto which to provision. If the source ID unambiguously identifies a source object, this parameter is unnecessary and ignored.
	EngineId *string `json:"engine_id,omitempty"`
	// The ID of the source object (dSource or VDB) to provision from. All other objects referenced by the parameters must live on the same engine as the source.
	SourceDataId string `json:"source_data_id"`
	// Whether the account provisioning this VDB must be configured as owner of the VDB.
	MakeCurrentAccountOwner *bool `json:"make_current_account_owner,omitempty"`
}

type _ProvisionVDBByTimestampParameters ProvisionVDBByTimestampParameters

// NewProvisionVDBByTimestampParameters instantiates a new ProvisionVDBByTimestampParameters object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProvisionVDBByTimestampParameters(sourceDataId string) *ProvisionVDBByTimestampParameters {
	this := ProvisionVDBByTimestampParameters{}
	this.SourceDataId = sourceDataId
	var makeCurrentAccountOwner bool = true
	this.MakeCurrentAccountOwner = &makeCurrentAccountOwner
	return &this
}

// NewProvisionVDBByTimestampParametersWithDefaults instantiates a new ProvisionVDBByTimestampParameters object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProvisionVDBByTimestampParametersWithDefaults() *ProvisionVDBByTimestampParameters {
	this := ProvisionVDBByTimestampParameters{}
	var makeCurrentAccountOwner bool = true
	this.MakeCurrentAccountOwner = &makeCurrentAccountOwner
	return &this
}

// GetPreRefresh returns the PreRefresh field value if set, zero value otherwise.
func (o *ProvisionVDBByTimestampParameters) GetPreRefresh() []Hook {
	if o == nil || IsNil(o.PreRefresh) {
		var ret []Hook
		return ret
	}
	return o.PreRefresh
}

// GetPreRefreshOk returns a tuple with the PreRefresh field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProvisionVDBByTimestampParameters) GetPreRefreshOk() ([]Hook, bool) {
	if o == nil || IsNil(o.PreRefresh) {
		return nil, false
	}
	return o.PreRefresh, true
}

// HasPreRefresh returns a boolean if a field has been set.
func (o *ProvisionVDBByTimestampParameters) HasPreRefresh() bool {
	if o != nil && !IsNil(o.PreRefresh) {
		return true
	}

	return false
}

// SetPreRefresh gets a reference to the given []Hook and assigns it to the PreRefresh field.
func (o *ProvisionVDBByTimestampParameters) SetPreRefresh(v []Hook) {
	o.PreRefresh = v
}

// GetPostRefresh returns the PostRefresh field value if set, zero value otherwise.
func (o *ProvisionVDBByTimestampParameters) GetPostRefresh() []Hook {
	if o == nil || IsNil(o.PostRefresh) {
		var ret []Hook
		return ret
	}
	return o.PostRefresh
}

// GetPostRefreshOk returns a tuple with the PostRefresh field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProvisionVDBByTimestampParameters) GetPostRefreshOk() ([]Hook, bool) {
	if o == nil || IsNil(o.PostRefresh) {
		return nil, false
	}
	return o.PostRefresh, true
}

// HasPostRefresh returns a boolean if a field has been set.
func (o *ProvisionVDBByTimestampParameters) HasPostRefresh() bool {
	if o != nil && !IsNil(o.PostRefresh) {
		return true
	}

	return false
}

// SetPostRefresh gets a reference to the given []Hook and assigns it to the PostRefresh field.
func (o *ProvisionVDBByTimestampParameters) SetPostRefresh(v []Hook) {
	o.PostRefresh = v
}

// GetPreSelfRefresh returns the PreSelfRefresh field value if set, zero value otherwise.
func (o *ProvisionVDBByTimestampParameters) GetPreSelfRefresh() []Hook {
	if o == nil || IsNil(o.PreSelfRefresh) {
		var ret []Hook
		return ret
	}
	return o.PreSelfRefresh
}

// GetPreSelfRefreshOk returns a tuple with the PreSelfRefresh field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProvisionVDBByTimestampParameters) GetPreSelfRefreshOk() ([]Hook, bool) {
	if o == nil || IsNil(o.PreSelfRefresh) {
		return nil, false
	}
	return o.PreSelfRefresh, true
}

// HasPreSelfRefresh returns a boolean if a field has been set.
func (o *ProvisionVDBByTimestampParameters) HasPreSelfRefresh() bool {
	if o != nil && !IsNil(o.PreSelfRefresh) {
		return true
	}

	return false
}

// SetPreSelfRefresh gets a reference to the given []Hook and assigns it to the PreSelfRefresh field.
func (o *ProvisionVDBByTimestampParameters) SetPreSelfRefresh(v []Hook) {
	o.PreSelfRefresh = v
}

// GetPostSelfRefresh returns the PostSelfRefresh field value if set, zero value otherwise.
func (o *ProvisionVDBByTimestampParameters) GetPostSelfRefresh() []Hook {
	if o == nil || IsNil(o.PostSelfRefresh) {
		var ret []Hook
		return ret
	}
	return o.PostSelfRefresh
}

// GetPostSelfRefreshOk returns a tuple with the PostSelfRefresh field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProvisionVDBByTimestampParameters) GetPostSelfRefreshOk() ([]Hook, bool) {
	if o == nil || IsNil(o.PostSelfRefresh) {
		return nil, false
	}
	return o.PostSelfRefresh, true
}

// HasPostSelfRefresh returns a boolean if a field has been set.
func (o *ProvisionVDBByTimestampParameters) HasPostSelfRefresh() bool {
	if o != nil && !IsNil(o.PostSelfRefresh) {
		return true
	}

	return false
}

// SetPostSelfRefresh gets a reference to the given []Hook and assigns it to the PostSelfRefresh field.
func (o *ProvisionVDBByTimestampParameters) SetPostSelfRefresh(v []Hook) {
	o.PostSelfRefresh = v
}

// GetPreRollback returns the PreRollback field value if set, zero value otherwise.
// Deprecated
func (o *ProvisionVDBByTimestampParameters) GetPreRollback() []Hook {
	if o == nil || IsNil(o.PreRollback) {
		var ret []Hook
		return ret
	}
	return o.PreRollback
}

// GetPreRollbackOk returns a tuple with the PreRollback field value if set, nil otherwise
// and a boolean to check if the value has been set.
// Deprecated
func (o *ProvisionVDBByTimestampParameters) GetPreRollbackOk() ([]Hook, bool) {
	if o == nil || IsNil(o.PreRollback) {
		return nil, false
	}
	return o.PreRollback, true
}

// HasPreRollback returns a boolean if a field has been set.
func (o *ProvisionVDBByTimestampParameters) HasPreRollback() bool {
	if o != nil && !IsNil(o.PreRollback) {
		return true
	}

	return false
}

// SetPreRollback gets a reference to the given []Hook and assigns it to the PreRollback field.
// Deprecated
func (o *ProvisionVDBByTimestampParameters) SetPreRollback(v []Hook) {
	o.PreRollback = v
}

// GetPostRollback returns the PostRollback field value if set, zero value otherwise.
// Deprecated
func (o *ProvisionVDBByTimestampParameters) GetPostRollback() []Hook {
	if o == nil || IsNil(o.PostRollback) {
		var ret []Hook
		return ret
	}
	return o.PostRollback
}

// GetPostRollbackOk returns a tuple with the PostRollback field value if set, nil otherwise
// and a boolean to check if the value has been set.
// Deprecated
func (o *ProvisionVDBByTimestampParameters) GetPostRollbackOk() ([]Hook, bool) {
	if o == nil || IsNil(o.PostRollback) {
		return nil, false
	}
	return o.PostRollback, true
}

// HasPostRollback returns a boolean if a field has been set.
func (o *ProvisionVDBByTimestampParameters) HasPostRollback() bool {
	if o != nil && !IsNil(o.PostRollback) {
		return true
	}

	return false
}

// SetPostRollback gets a reference to the given []Hook and assigns it to the PostRollback field.
// Deprecated
func (o *ProvisionVDBByTimestampParameters) SetPostRollback(v []Hook) {
	o.PostRollback = v
}

// GetConfigureClone returns the ConfigureClone field value if set, zero value otherwise.
func (o *ProvisionVDBByTimestampParameters) GetConfigureClone() []Hook {
	if o == nil || IsNil(o.ConfigureClone) {
		var ret []Hook
		return ret
	}
	return o.ConfigureClone
}

// GetConfigureCloneOk returns a tuple with the ConfigureClone field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProvisionVDBByTimestampParameters) GetConfigureCloneOk() ([]Hook, bool) {
	if o == nil || IsNil(o.ConfigureClone) {
		return nil, false
	}
	return o.ConfigureClone, true
}

// HasConfigureClone returns a boolean if a field has been set.
func (o *ProvisionVDBByTimestampParameters) HasConfigureClone() bool {
	if o != nil && !IsNil(o.ConfigureClone) {
		return true
	}

	return false
}

// SetConfigureClone gets a reference to the given []Hook and assigns it to the ConfigureClone field.
func (o *ProvisionVDBByTimestampParameters) SetConfigureClone(v []Hook) {
	o.ConfigureClone = v
}

// GetPreSnapshot returns the PreSnapshot field value if set, zero value otherwise.
func (o *ProvisionVDBByTimestampParameters) GetPreSnapshot() []Hook {
	if o == nil || IsNil(o.PreSnapshot) {
		var ret []Hook
		return ret
	}
	return o.PreSnapshot
}

// GetPreSnapshotOk returns a tuple with the PreSnapshot field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProvisionVDBByTimestampParameters) GetPreSnapshotOk() ([]Hook, bool) {
	if o == nil || IsNil(o.PreSnapshot) {
		return nil, false
	}
	return o.PreSnapshot, true
}

// HasPreSnapshot returns a boolean if a field has been set.
func (o *ProvisionVDBByTimestampParameters) HasPreSnapshot() bool {
	if o != nil && !IsNil(o.PreSnapshot) {
		return true
	}

	return false
}

// SetPreSnapshot gets a reference to the given []Hook and assigns it to the PreSnapshot field.
func (o *ProvisionVDBByTimestampParameters) SetPreSnapshot(v []Hook) {
	o.PreSnapshot = v
}

// GetPostSnapshot returns the PostSnapshot field value if set, zero value otherwise.
func (o *ProvisionVDBByTimestampParameters) GetPostSnapshot() []Hook {
	if o == nil || IsNil(o.PostSnapshot) {
		var ret []Hook
		return ret
	}
	return o.PostSnapshot
}

// GetPostSnapshotOk returns a tuple with the PostSnapshot field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProvisionVDBByTimestampParameters) GetPostSnapshotOk() ([]Hook, bool) {
	if o == nil || IsNil(o.PostSnapshot) {
		return nil, false
	}
	return o.PostSnapshot, true
}

// HasPostSnapshot returns a boolean if a field has been set.
func (o *ProvisionVDBByTimestampParameters) HasPostSnapshot() bool {
	if o != nil && !IsNil(o.PostSnapshot) {
		return true
	}

	return false
}

// SetPostSnapshot gets a reference to the given []Hook and assigns it to the PostSnapshot field.
func (o *ProvisionVDBByTimestampParameters) SetPostSnapshot(v []Hook) {
	o.PostSnapshot = v
}

// GetPreStart returns the PreStart field value if set, zero value otherwise.
func (o *ProvisionVDBByTimestampParameters) GetPreStart() []Hook {
	if o == nil || IsNil(o.PreStart) {
		var ret []Hook
		return ret
	}
	return o.PreStart
}

// GetPreStartOk returns a tuple with the PreStart field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProvisionVDBByTimestampParameters) GetPreStartOk() ([]Hook, bool) {
	if o == nil || IsNil(o.PreStart) {
		return nil, false
	}
	return o.PreStart, true
}

// HasPreStart returns a boolean if a field has been set.
func (o *ProvisionVDBByTimestampParameters) HasPreStart() bool {
	if o != nil && !IsNil(o.PreStart) {
		return true
	}

	return false
}

// SetPreStart gets a reference to the given []Hook and assigns it to the PreStart field.
func (o *ProvisionVDBByTimestampParameters) SetPreStart(v []Hook) {
	o.PreStart = v
}

// GetPostStart returns the PostStart field value if set, zero value otherwise.
func (o *ProvisionVDBByTimestampParameters) GetPostStart() []Hook {
	if o == nil || IsNil(o.PostStart) {
		var ret []Hook
		return ret
	}
	return o.PostStart
}

// GetPostStartOk returns a tuple with the PostStart field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProvisionVDBByTimestampParameters) GetPostStartOk() ([]Hook, bool) {
	if o == nil || IsNil(o.PostStart) {
		return nil, false
	}
	return o.PostStart, true
}

// HasPostStart returns a boolean if a field has been set.
func (o *ProvisionVDBByTimestampParameters) HasPostStart() bool {
	if o != nil && !IsNil(o.PostStart) {
		return true
	}

	return false
}

// SetPostStart gets a reference to the given []Hook and assigns it to the PostStart field.
func (o *ProvisionVDBByTimestampParameters) SetPostStart(v []Hook) {
	o.PostStart = v
}

// GetPreStop returns the PreStop field value if set, zero value otherwise.
func (o *ProvisionVDBByTimestampParameters) GetPreStop() []Hook {
	if o == nil || IsNil(o.PreStop) {
		var ret []Hook
		return ret
	}
	return o.PreStop
}

// GetPreStopOk returns a tuple with the PreStop field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProvisionVDBByTimestampParameters) GetPreStopOk() ([]Hook, bool) {
	if o == nil || IsNil(o.PreStop) {
		return nil, false
	}
	return o.PreStop, true
}

// HasPreStop returns a boolean if a field has been set.
func (o *ProvisionVDBByTimestampParameters) HasPreStop() bool {
	if o != nil && !IsNil(o.PreStop) {
		return true
	}

	return false
}

// SetPreStop gets a reference to the given []Hook and assigns it to the PreStop field.
func (o *ProvisionVDBByTimestampParameters) SetPreStop(v []Hook) {
	o.PreStop = v
}

// GetPostStop returns the PostStop field value if set, zero value otherwise.
func (o *ProvisionVDBByTimestampParameters) GetPostStop() []Hook {
	if o == nil || IsNil(o.PostStop) {
		var ret []Hook
		return ret
	}
	return o.PostStop
}

// GetPostStopOk returns a tuple with the PostStop field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProvisionVDBByTimestampParameters) GetPostStopOk() ([]Hook, bool) {
	if o == nil || IsNil(o.PostStop) {
		return nil, false
	}
	return o.PostStop, true
}

// HasPostStop returns a boolean if a field has been set.
func (o *ProvisionVDBByTimestampParameters) HasPostStop() bool {
	if o != nil && !IsNil(o.PostStop) {
		return true
	}

	return false
}

// SetPostStop gets a reference to the given []Hook and assigns it to the PostStop field.
func (o *ProvisionVDBByTimestampParameters) SetPostStop(v []Hook) {
	o.PostStop = v
}

// GetTargetGroupId returns the TargetGroupId field value if set, zero value otherwise.
func (o *ProvisionVDBByTimestampParameters) GetTargetGroupId() string {
	if o == nil || IsNil(o.TargetGroupId) {
		var ret string
		return ret
	}
	return *o.TargetGroupId
}

// GetTargetGroupIdOk returns a tuple with the TargetGroupId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProvisionVDBByTimestampParameters) GetTargetGroupIdOk() (*string, bool) {
	if o == nil || IsNil(o.TargetGroupId) {
		return nil, false
	}
	return o.TargetGroupId, true
}

// HasTargetGroupId returns a boolean if a field has been set.
func (o *ProvisionVDBByTimestampParameters) HasTargetGroupId() bool {
	if o != nil && !IsNil(o.TargetGroupId) {
		return true
	}

	return false
}

// SetTargetGroupId gets a reference to the given string and assigns it to the TargetGroupId field.
func (o *ProvisionVDBByTimestampParameters) SetTargetGroupId(v string) {
	o.TargetGroupId = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ProvisionVDBByTimestampParameters) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProvisionVDBByTimestampParameters) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ProvisionVDBByTimestampParameters) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ProvisionVDBByTimestampParameters) SetName(v string) {
	o.Name = &v
}

// GetDatabaseName returns the DatabaseName field value if set, zero value otherwise.
func (o *ProvisionVDBByTimestampParameters) GetDatabaseName() string {
	if o == nil || IsNil(o.DatabaseName) {
		var ret string
		return ret
	}
	return *o.DatabaseName
}

// GetDatabaseNameOk returns a tuple with the DatabaseName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProvisionVDBByTimestampParameters) GetDatabaseNameOk() (*string, bool) {
	if o == nil || IsNil(o.DatabaseName) {
		return nil, false
	}
	return o.DatabaseName, true
}

// HasDatabaseName returns a boolean if a field has been set.
func (o *ProvisionVDBByTimestampParameters) HasDatabaseName() bool {
	if o != nil && !IsNil(o.DatabaseName) {
		return true
	}

	return false
}

// SetDatabaseName gets a reference to the given string and assigns it to the DatabaseName field.
func (o *ProvisionVDBByTimestampParameters) SetDatabaseName(v string) {
	o.DatabaseName = &v
}

// GetCdbId returns the CdbId field value if set, zero value otherwise.
func (o *ProvisionVDBByTimestampParameters) GetCdbId() string {
	if o == nil || IsNil(o.CdbId) {
		var ret string
		return ret
	}
	return *o.CdbId
}

// GetCdbIdOk returns a tuple with the CdbId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProvisionVDBByTimestampParameters) GetCdbIdOk() (*string, bool) {
	if o == nil || IsNil(o.CdbId) {
		return nil, false
	}
	return o.CdbId, true
}

// HasCdbId returns a boolean if a field has been set.
func (o *ProvisionVDBByTimestampParameters) HasCdbId() bool {
	if o != nil && !IsNil(o.CdbId) {
		return true
	}

	return false
}

// SetCdbId gets a reference to the given string and assigns it to the CdbId field.
func (o *ProvisionVDBByTimestampParameters) SetCdbId(v string) {
	o.CdbId = &v
}

// GetClusterNodeIds returns the ClusterNodeIds field value if set, zero value otherwise.
func (o *ProvisionVDBByTimestampParameters) GetClusterNodeIds() []string {
	if o == nil || IsNil(o.ClusterNodeIds) {
		var ret []string
		return ret
	}
	return o.ClusterNodeIds
}

// GetClusterNodeIdsOk returns a tuple with the ClusterNodeIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProvisionVDBByTimestampParameters) GetClusterNodeIdsOk() ([]string, bool) {
	if o == nil || IsNil(o.ClusterNodeIds) {
		return nil, false
	}
	return o.ClusterNodeIds, true
}

// HasClusterNodeIds returns a boolean if a field has been set.
func (o *ProvisionVDBByTimestampParameters) HasClusterNodeIds() bool {
	if o != nil && !IsNil(o.ClusterNodeIds) {
		return true
	}

	return false
}

// SetClusterNodeIds gets a reference to the given []string and assigns it to the ClusterNodeIds field.
func (o *ProvisionVDBByTimestampParameters) SetClusterNodeIds(v []string) {
	o.ClusterNodeIds = v
}

// GetClusterNodeInstances returns the ClusterNodeInstances field value if set, zero value otherwise.
func (o *ProvisionVDBByTimestampParameters) GetClusterNodeInstances() []ClusterNodeInstance {
	if o == nil || IsNil(o.ClusterNodeInstances) {
		var ret []ClusterNodeInstance
		return ret
	}
	return o.ClusterNodeInstances
}

// GetClusterNodeInstancesOk returns a tuple with the ClusterNodeInstances field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProvisionVDBByTimestampParameters) GetClusterNodeInstancesOk() ([]ClusterNodeInstance, bool) {
	if o == nil || IsNil(o.ClusterNodeInstances) {
		return nil, false
	}
	return o.ClusterNodeInstances, true
}

// HasClusterNodeInstances returns a boolean if a field has been set.
func (o *ProvisionVDBByTimestampParameters) HasClusterNodeInstances() bool {
	if o != nil && !IsNil(o.ClusterNodeInstances) {
		return true
	}

	return false
}

// SetClusterNodeInstances gets a reference to the given []ClusterNodeInstance and assigns it to the ClusterNodeInstances field.
func (o *ProvisionVDBByTimestampParameters) SetClusterNodeInstances(v []ClusterNodeInstance) {
	o.ClusterNodeInstances = v
}

// GetTruncateLogOnCheckpoint returns the TruncateLogOnCheckpoint field value if set, zero value otherwise.
func (o *ProvisionVDBByTimestampParameters) GetTruncateLogOnCheckpoint() bool {
	if o == nil || IsNil(o.TruncateLogOnCheckpoint) {
		var ret bool
		return ret
	}
	return *o.TruncateLogOnCheckpoint
}

// GetTruncateLogOnCheckpointOk returns a tuple with the TruncateLogOnCheckpoint field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProvisionVDBByTimestampParameters) GetTruncateLogOnCheckpointOk() (*bool, bool) {
	if o == nil || IsNil(o.TruncateLogOnCheckpoint) {
		return nil, false
	}
	return o.TruncateLogOnCheckpoint, true
}

// HasTruncateLogOnCheckpoint returns a boolean if a field has been set.
func (o *ProvisionVDBByTimestampParameters) HasTruncateLogOnCheckpoint() bool {
	if o != nil && !IsNil(o.TruncateLogOnCheckpoint) {
		return true
	}

	return false
}

// SetTruncateLogOnCheckpoint gets a reference to the given bool and assigns it to the TruncateLogOnCheckpoint field.
func (o *ProvisionVDBByTimestampParameters) SetTruncateLogOnCheckpoint(v bool) {
	o.TruncateLogOnCheckpoint = &v
}

// GetOsUsername returns the OsUsername field value if set, zero value otherwise.
func (o *ProvisionVDBByTimestampParameters) GetOsUsername() string {
	if o == nil || IsNil(o.OsUsername) {
		var ret string
		return ret
	}
	return *o.OsUsername
}

// GetOsUsernameOk returns a tuple with the OsUsername field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProvisionVDBByTimestampParameters) GetOsUsernameOk() (*string, bool) {
	if o == nil || IsNil(o.OsUsername) {
		return nil, false
	}
	return o.OsUsername, true
}

// HasOsUsername returns a boolean if a field has been set.
func (o *ProvisionVDBByTimestampParameters) HasOsUsername() bool {
	if o != nil && !IsNil(o.OsUsername) {
		return true
	}

	return false
}

// SetOsUsername gets a reference to the given string and assigns it to the OsUsername field.
func (o *ProvisionVDBByTimestampParameters) SetOsUsername(v string) {
	o.OsUsername = &v
}

// GetOsPassword returns the OsPassword field value if set, zero value otherwise.
func (o *ProvisionVDBByTimestampParameters) GetOsPassword() string {
	if o == nil || IsNil(o.OsPassword) {
		var ret string
		return ret
	}
	return *o.OsPassword
}

// GetOsPasswordOk returns a tuple with the OsPassword field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProvisionVDBByTimestampParameters) GetOsPasswordOk() (*string, bool) {
	if o == nil || IsNil(o.OsPassword) {
		return nil, false
	}
	return o.OsPassword, true
}

// HasOsPassword returns a boolean if a field has been set.
func (o *ProvisionVDBByTimestampParameters) HasOsPassword() bool {
	if o != nil && !IsNil(o.OsPassword) {
		return true
	}

	return false
}

// SetOsPassword gets a reference to the given string and assigns it to the OsPassword field.
func (o *ProvisionVDBByTimestampParameters) SetOsPassword(v string) {
	o.OsPassword = &v
}

// GetEnvironmentId returns the EnvironmentId field value if set, zero value otherwise.
func (o *ProvisionVDBByTimestampParameters) GetEnvironmentId() string {
	if o == nil || IsNil(o.EnvironmentId) {
		var ret string
		return ret
	}
	return *o.EnvironmentId
}

// GetEnvironmentIdOk returns a tuple with the EnvironmentId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProvisionVDBByTimestampParameters) GetEnvironmentIdOk() (*string, bool) {
	if o == nil || IsNil(o.EnvironmentId) {
		return nil, false
	}
	return o.EnvironmentId, true
}

// HasEnvironmentId returns a boolean if a field has been set.
func (o *ProvisionVDBByTimestampParameters) HasEnvironmentId() bool {
	if o != nil && !IsNil(o.EnvironmentId) {
		return true
	}

	return false
}

// SetEnvironmentId gets a reference to the given string and assigns it to the EnvironmentId field.
func (o *ProvisionVDBByTimestampParameters) SetEnvironmentId(v string) {
	o.EnvironmentId = &v
}

// GetEnvironmentUserId returns the EnvironmentUserId field value if set, zero value otherwise.
func (o *ProvisionVDBByTimestampParameters) GetEnvironmentUserId() string {
	if o == nil || IsNil(o.EnvironmentUserId) {
		var ret string
		return ret
	}
	return *o.EnvironmentUserId
}

// GetEnvironmentUserIdOk returns a tuple with the EnvironmentUserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProvisionVDBByTimestampParameters) GetEnvironmentUserIdOk() (*string, bool) {
	if o == nil || IsNil(o.EnvironmentUserId) {
		return nil, false
	}
	return o.EnvironmentUserId, true
}

// HasEnvironmentUserId returns a boolean if a field has been set.
func (o *ProvisionVDBByTimestampParameters) HasEnvironmentUserId() bool {
	if o != nil && !IsNil(o.EnvironmentUserId) {
		return true
	}

	return false
}

// SetEnvironmentUserId gets a reference to the given string and assigns it to the EnvironmentUserId field.
func (o *ProvisionVDBByTimestampParameters) SetEnvironmentUserId(v string) {
	o.EnvironmentUserId = &v
}

// GetRepositoryId returns the RepositoryId field value if set, zero value otherwise.
func (o *ProvisionVDBByTimestampParameters) GetRepositoryId() string {
	if o == nil || IsNil(o.RepositoryId) {
		var ret string
		return ret
	}
	return *o.RepositoryId
}

// GetRepositoryIdOk returns a tuple with the RepositoryId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProvisionVDBByTimestampParameters) GetRepositoryIdOk() (*string, bool) {
	if o == nil || IsNil(o.RepositoryId) {
		return nil, false
	}
	return o.RepositoryId, true
}

// HasRepositoryId returns a boolean if a field has been set.
func (o *ProvisionVDBByTimestampParameters) HasRepositoryId() bool {
	if o != nil && !IsNil(o.RepositoryId) {
		return true
	}

	return false
}

// SetRepositoryId gets a reference to the given string and assigns it to the RepositoryId field.
func (o *ProvisionVDBByTimestampParameters) SetRepositoryId(v string) {
	o.RepositoryId = &v
}

// GetAutoSelectRepository returns the AutoSelectRepository field value if set, zero value otherwise.
func (o *ProvisionVDBByTimestampParameters) GetAutoSelectRepository() bool {
	if o == nil || IsNil(o.AutoSelectRepository) {
		var ret bool
		return ret
	}
	return *o.AutoSelectRepository
}

// GetAutoSelectRepositoryOk returns a tuple with the AutoSelectRepository field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProvisionVDBByTimestampParameters) GetAutoSelectRepositoryOk() (*bool, bool) {
	if o == nil || IsNil(o.AutoSelectRepository) {
		return nil, false
	}
	return o.AutoSelectRepository, true
}

// HasAutoSelectRepository returns a boolean if a field has been set.
func (o *ProvisionVDBByTimestampParameters) HasAutoSelectRepository() bool {
	if o != nil && !IsNil(o.AutoSelectRepository) {
		return true
	}

	return false
}

// SetAutoSelectRepository gets a reference to the given bool and assigns it to the AutoSelectRepository field.
func (o *ProvisionVDBByTimestampParameters) SetAutoSelectRepository(v bool) {
	o.AutoSelectRepository = &v
}

// GetVdbRestart returns the VdbRestart field value if set, zero value otherwise.
func (o *ProvisionVDBByTimestampParameters) GetVdbRestart() bool {
	if o == nil || IsNil(o.VdbRestart) {
		var ret bool
		return ret
	}
	return *o.VdbRestart
}

// GetVdbRestartOk returns a tuple with the VdbRestart field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProvisionVDBByTimestampParameters) GetVdbRestartOk() (*bool, bool) {
	if o == nil || IsNil(o.VdbRestart) {
		return nil, false
	}
	return o.VdbRestart, true
}

// HasVdbRestart returns a boolean if a field has been set.
func (o *ProvisionVDBByTimestampParameters) HasVdbRestart() bool {
	if o != nil && !IsNil(o.VdbRestart) {
		return true
	}

	return false
}

// SetVdbRestart gets a reference to the given bool and assigns it to the VdbRestart field.
func (o *ProvisionVDBByTimestampParameters) SetVdbRestart(v bool) {
	o.VdbRestart = &v
}

// GetTemplateId returns the TemplateId field value if set, zero value otherwise.
func (o *ProvisionVDBByTimestampParameters) GetTemplateId() string {
	if o == nil || IsNil(o.TemplateId) {
		var ret string
		return ret
	}
	return *o.TemplateId
}

// GetTemplateIdOk returns a tuple with the TemplateId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProvisionVDBByTimestampParameters) GetTemplateIdOk() (*string, bool) {
	if o == nil || IsNil(o.TemplateId) {
		return nil, false
	}
	return o.TemplateId, true
}

// HasTemplateId returns a boolean if a field has been set.
func (o *ProvisionVDBByTimestampParameters) HasTemplateId() bool {
	if o != nil && !IsNil(o.TemplateId) {
		return true
	}

	return false
}

// SetTemplateId gets a reference to the given string and assigns it to the TemplateId field.
func (o *ProvisionVDBByTimestampParameters) SetTemplateId(v string) {
	o.TemplateId = &v
}

// GetAuxiliaryTemplateId returns the AuxiliaryTemplateId field value if set, zero value otherwise.
func (o *ProvisionVDBByTimestampParameters) GetAuxiliaryTemplateId() string {
	if o == nil || IsNil(o.AuxiliaryTemplateId) {
		var ret string
		return ret
	}
	return *o.AuxiliaryTemplateId
}

// GetAuxiliaryTemplateIdOk returns a tuple with the AuxiliaryTemplateId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProvisionVDBByTimestampParameters) GetAuxiliaryTemplateIdOk() (*string, bool) {
	if o == nil || IsNil(o.AuxiliaryTemplateId) {
		return nil, false
	}
	return o.AuxiliaryTemplateId, true
}

// HasAuxiliaryTemplateId returns a boolean if a field has been set.
func (o *ProvisionVDBByTimestampParameters) HasAuxiliaryTemplateId() bool {
	if o != nil && !IsNil(o.AuxiliaryTemplateId) {
		return true
	}

	return false
}

// SetAuxiliaryTemplateId gets a reference to the given string and assigns it to the AuxiliaryTemplateId field.
func (o *ProvisionVDBByTimestampParameters) SetAuxiliaryTemplateId(v string) {
	o.AuxiliaryTemplateId = &v
}

// GetFileMappingRules returns the FileMappingRules field value if set, zero value otherwise.
func (o *ProvisionVDBByTimestampParameters) GetFileMappingRules() string {
	if o == nil || IsNil(o.FileMappingRules) {
		var ret string
		return ret
	}
	return *o.FileMappingRules
}

// GetFileMappingRulesOk returns a tuple with the FileMappingRules field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProvisionVDBByTimestampParameters) GetFileMappingRulesOk() (*string, bool) {
	if o == nil || IsNil(o.FileMappingRules) {
		return nil, false
	}
	return o.FileMappingRules, true
}

// HasFileMappingRules returns a boolean if a field has been set.
func (o *ProvisionVDBByTimestampParameters) HasFileMappingRules() bool {
	if o != nil && !IsNil(o.FileMappingRules) {
		return true
	}

	return false
}

// SetFileMappingRules gets a reference to the given string and assigns it to the FileMappingRules field.
func (o *ProvisionVDBByTimestampParameters) SetFileMappingRules(v string) {
	o.FileMappingRules = &v
}

// GetOracleInstanceName returns the OracleInstanceName field value if set, zero value otherwise.
func (o *ProvisionVDBByTimestampParameters) GetOracleInstanceName() string {
	if o == nil || IsNil(o.OracleInstanceName) {
		var ret string
		return ret
	}
	return *o.OracleInstanceName
}

// GetOracleInstanceNameOk returns a tuple with the OracleInstanceName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProvisionVDBByTimestampParameters) GetOracleInstanceNameOk() (*string, bool) {
	if o == nil || IsNil(o.OracleInstanceName) {
		return nil, false
	}
	return o.OracleInstanceName, true
}

// HasOracleInstanceName returns a boolean if a field has been set.
func (o *ProvisionVDBByTimestampParameters) HasOracleInstanceName() bool {
	if o != nil && !IsNil(o.OracleInstanceName) {
		return true
	}

	return false
}

// SetOracleInstanceName gets a reference to the given string and assigns it to the OracleInstanceName field.
func (o *ProvisionVDBByTimestampParameters) SetOracleInstanceName(v string) {
	o.OracleInstanceName = &v
}

// GetUniqueName returns the UniqueName field value if set, zero value otherwise.
func (o *ProvisionVDBByTimestampParameters) GetUniqueName() string {
	if o == nil || IsNil(o.UniqueName) {
		var ret string
		return ret
	}
	return *o.UniqueName
}

// GetUniqueNameOk returns a tuple with the UniqueName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProvisionVDBByTimestampParameters) GetUniqueNameOk() (*string, bool) {
	if o == nil || IsNil(o.UniqueName) {
		return nil, false
	}
	return o.UniqueName, true
}

// HasUniqueName returns a boolean if a field has been set.
func (o *ProvisionVDBByTimestampParameters) HasUniqueName() bool {
	if o != nil && !IsNil(o.UniqueName) {
		return true
	}

	return false
}

// SetUniqueName gets a reference to the given string and assigns it to the UniqueName field.
func (o *ProvisionVDBByTimestampParameters) SetUniqueName(v string) {
	o.UniqueName = &v
}

// GetVcdbName returns the VcdbName field value if set, zero value otherwise.
func (o *ProvisionVDBByTimestampParameters) GetVcdbName() string {
	if o == nil || IsNil(o.VcdbName) {
		var ret string
		return ret
	}
	return *o.VcdbName
}

// GetVcdbNameOk returns a tuple with the VcdbName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProvisionVDBByTimestampParameters) GetVcdbNameOk() (*string, bool) {
	if o == nil || IsNil(o.VcdbName) {
		return nil, false
	}
	return o.VcdbName, true
}

// HasVcdbName returns a boolean if a field has been set.
func (o *ProvisionVDBByTimestampParameters) HasVcdbName() bool {
	if o != nil && !IsNil(o.VcdbName) {
		return true
	}

	return false
}

// SetVcdbName gets a reference to the given string and assigns it to the VcdbName field.
func (o *ProvisionVDBByTimestampParameters) SetVcdbName(v string) {
	o.VcdbName = &v
}

// GetVcdbDatabaseName returns the VcdbDatabaseName field value if set, zero value otherwise.
func (o *ProvisionVDBByTimestampParameters) GetVcdbDatabaseName() string {
	if o == nil || IsNil(o.VcdbDatabaseName) {
		var ret string
		return ret
	}
	return *o.VcdbDatabaseName
}

// GetVcdbDatabaseNameOk returns a tuple with the VcdbDatabaseName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProvisionVDBByTimestampParameters) GetVcdbDatabaseNameOk() (*string, bool) {
	if o == nil || IsNil(o.VcdbDatabaseName) {
		return nil, false
	}
	return o.VcdbDatabaseName, true
}

// HasVcdbDatabaseName returns a boolean if a field has been set.
func (o *ProvisionVDBByTimestampParameters) HasVcdbDatabaseName() bool {
	if o != nil && !IsNil(o.VcdbDatabaseName) {
		return true
	}

	return false
}

// SetVcdbDatabaseName gets a reference to the given string and assigns it to the VcdbDatabaseName field.
func (o *ProvisionVDBByTimestampParameters) SetVcdbDatabaseName(v string) {
	o.VcdbDatabaseName = &v
}

// GetMountPoint returns the MountPoint field value if set, zero value otherwise.
func (o *ProvisionVDBByTimestampParameters) GetMountPoint() string {
	if o == nil || IsNil(o.MountPoint) {
		var ret string
		return ret
	}
	return *o.MountPoint
}

// GetMountPointOk returns a tuple with the MountPoint field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProvisionVDBByTimestampParameters) GetMountPointOk() (*string, bool) {
	if o == nil || IsNil(o.MountPoint) {
		return nil, false
	}
	return o.MountPoint, true
}

// HasMountPoint returns a boolean if a field has been set.
func (o *ProvisionVDBByTimestampParameters) HasMountPoint() bool {
	if o != nil && !IsNil(o.MountPoint) {
		return true
	}

	return false
}

// SetMountPoint gets a reference to the given string and assigns it to the MountPoint field.
func (o *ProvisionVDBByTimestampParameters) SetMountPoint(v string) {
	o.MountPoint = &v
}

// GetOpenResetLogs returns the OpenResetLogs field value if set, zero value otherwise.
func (o *ProvisionVDBByTimestampParameters) GetOpenResetLogs() bool {
	if o == nil || IsNil(o.OpenResetLogs) {
		var ret bool
		return ret
	}
	return *o.OpenResetLogs
}

// GetOpenResetLogsOk returns a tuple with the OpenResetLogs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProvisionVDBByTimestampParameters) GetOpenResetLogsOk() (*bool, bool) {
	if o == nil || IsNil(o.OpenResetLogs) {
		return nil, false
	}
	return o.OpenResetLogs, true
}

// HasOpenResetLogs returns a boolean if a field has been set.
func (o *ProvisionVDBByTimestampParameters) HasOpenResetLogs() bool {
	if o != nil && !IsNil(o.OpenResetLogs) {
		return true
	}

	return false
}

// SetOpenResetLogs gets a reference to the given bool and assigns it to the OpenResetLogs field.
func (o *ProvisionVDBByTimestampParameters) SetOpenResetLogs(v bool) {
	o.OpenResetLogs = &v
}

// GetSnapshotPolicyId returns the SnapshotPolicyId field value if set, zero value otherwise.
func (o *ProvisionVDBByTimestampParameters) GetSnapshotPolicyId() string {
	if o == nil || IsNil(o.SnapshotPolicyId) {
		var ret string
		return ret
	}
	return *o.SnapshotPolicyId
}

// GetSnapshotPolicyIdOk returns a tuple with the SnapshotPolicyId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProvisionVDBByTimestampParameters) GetSnapshotPolicyIdOk() (*string, bool) {
	if o == nil || IsNil(o.SnapshotPolicyId) {
		return nil, false
	}
	return o.SnapshotPolicyId, true
}

// HasSnapshotPolicyId returns a boolean if a field has been set.
func (o *ProvisionVDBByTimestampParameters) HasSnapshotPolicyId() bool {
	if o != nil && !IsNil(o.SnapshotPolicyId) {
		return true
	}

	return false
}

// SetSnapshotPolicyId gets a reference to the given string and assigns it to the SnapshotPolicyId field.
func (o *ProvisionVDBByTimestampParameters) SetSnapshotPolicyId(v string) {
	o.SnapshotPolicyId = &v
}

// GetRetentionPolicyId returns the RetentionPolicyId field value if set, zero value otherwise.
func (o *ProvisionVDBByTimestampParameters) GetRetentionPolicyId() string {
	if o == nil || IsNil(o.RetentionPolicyId) {
		var ret string
		return ret
	}
	return *o.RetentionPolicyId
}

// GetRetentionPolicyIdOk returns a tuple with the RetentionPolicyId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProvisionVDBByTimestampParameters) GetRetentionPolicyIdOk() (*string, bool) {
	if o == nil || IsNil(o.RetentionPolicyId) {
		return nil, false
	}
	return o.RetentionPolicyId, true
}

// HasRetentionPolicyId returns a boolean if a field has been set.
func (o *ProvisionVDBByTimestampParameters) HasRetentionPolicyId() bool {
	if o != nil && !IsNil(o.RetentionPolicyId) {
		return true
	}

	return false
}

// SetRetentionPolicyId gets a reference to the given string and assigns it to the RetentionPolicyId field.
func (o *ProvisionVDBByTimestampParameters) SetRetentionPolicyId(v string) {
	o.RetentionPolicyId = &v
}

// GetRecoveryModel returns the RecoveryModel field value if set, zero value otherwise.
func (o *ProvisionVDBByTimestampParameters) GetRecoveryModel() string {
	if o == nil || IsNil(o.RecoveryModel) {
		var ret string
		return ret
	}
	return *o.RecoveryModel
}

// GetRecoveryModelOk returns a tuple with the RecoveryModel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProvisionVDBByTimestampParameters) GetRecoveryModelOk() (*string, bool) {
	if o == nil || IsNil(o.RecoveryModel) {
		return nil, false
	}
	return o.RecoveryModel, true
}

// HasRecoveryModel returns a boolean if a field has been set.
func (o *ProvisionVDBByTimestampParameters) HasRecoveryModel() bool {
	if o != nil && !IsNil(o.RecoveryModel) {
		return true
	}

	return false
}

// SetRecoveryModel gets a reference to the given string and assigns it to the RecoveryModel field.
func (o *ProvisionVDBByTimestampParameters) SetRecoveryModel(v string) {
	o.RecoveryModel = &v
}

// GetPreScript returns the PreScript field value if set, zero value otherwise.
func (o *ProvisionVDBByTimestampParameters) GetPreScript() string {
	if o == nil || IsNil(o.PreScript) {
		var ret string
		return ret
	}
	return *o.PreScript
}

// GetPreScriptOk returns a tuple with the PreScript field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProvisionVDBByTimestampParameters) GetPreScriptOk() (*string, bool) {
	if o == nil || IsNil(o.PreScript) {
		return nil, false
	}
	return o.PreScript, true
}

// HasPreScript returns a boolean if a field has been set.
func (o *ProvisionVDBByTimestampParameters) HasPreScript() bool {
	if o != nil && !IsNil(o.PreScript) {
		return true
	}

	return false
}

// SetPreScript gets a reference to the given string and assigns it to the PreScript field.
func (o *ProvisionVDBByTimestampParameters) SetPreScript(v string) {
	o.PreScript = &v
}

// GetPostScript returns the PostScript field value if set, zero value otherwise.
func (o *ProvisionVDBByTimestampParameters) GetPostScript() string {
	if o == nil || IsNil(o.PostScript) {
		var ret string
		return ret
	}
	return *o.PostScript
}

// GetPostScriptOk returns a tuple with the PostScript field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProvisionVDBByTimestampParameters) GetPostScriptOk() (*string, bool) {
	if o == nil || IsNil(o.PostScript) {
		return nil, false
	}
	return o.PostScript, true
}

// HasPostScript returns a boolean if a field has been set.
func (o *ProvisionVDBByTimestampParameters) HasPostScript() bool {
	if o != nil && !IsNil(o.PostScript) {
		return true
	}

	return false
}

// SetPostScript gets a reference to the given string and assigns it to the PostScript field.
func (o *ProvisionVDBByTimestampParameters) SetPostScript(v string) {
	o.PostScript = &v
}

// GetCdcOnProvision returns the CdcOnProvision field value if set, zero value otherwise.
func (o *ProvisionVDBByTimestampParameters) GetCdcOnProvision() bool {
	if o == nil || IsNil(o.CdcOnProvision) {
		var ret bool
		return ret
	}
	return *o.CdcOnProvision
}

// GetCdcOnProvisionOk returns a tuple with the CdcOnProvision field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProvisionVDBByTimestampParameters) GetCdcOnProvisionOk() (*bool, bool) {
	if o == nil || IsNil(o.CdcOnProvision) {
		return nil, false
	}
	return o.CdcOnProvision, true
}

// HasCdcOnProvision returns a boolean if a field has been set.
func (o *ProvisionVDBByTimestampParameters) HasCdcOnProvision() bool {
	if o != nil && !IsNil(o.CdcOnProvision) {
		return true
	}

	return false
}

// SetCdcOnProvision gets a reference to the given bool and assigns it to the CdcOnProvision field.
func (o *ProvisionVDBByTimestampParameters) SetCdcOnProvision(v bool) {
	o.CdcOnProvision = &v
}

// GetOnlineLogSize returns the OnlineLogSize field value if set, zero value otherwise.
func (o *ProvisionVDBByTimestampParameters) GetOnlineLogSize() int32 {
	if o == nil || IsNil(o.OnlineLogSize) {
		var ret int32
		return ret
	}
	return *o.OnlineLogSize
}

// GetOnlineLogSizeOk returns a tuple with the OnlineLogSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProvisionVDBByTimestampParameters) GetOnlineLogSizeOk() (*int32, bool) {
	if o == nil || IsNil(o.OnlineLogSize) {
		return nil, false
	}
	return o.OnlineLogSize, true
}

// HasOnlineLogSize returns a boolean if a field has been set.
func (o *ProvisionVDBByTimestampParameters) HasOnlineLogSize() bool {
	if o != nil && !IsNil(o.OnlineLogSize) {
		return true
	}

	return false
}

// SetOnlineLogSize gets a reference to the given int32 and assigns it to the OnlineLogSize field.
func (o *ProvisionVDBByTimestampParameters) SetOnlineLogSize(v int32) {
	o.OnlineLogSize = &v
}

// GetOnlineLogGroups returns the OnlineLogGroups field value if set, zero value otherwise.
func (o *ProvisionVDBByTimestampParameters) GetOnlineLogGroups() int32 {
	if o == nil || IsNil(o.OnlineLogGroups) {
		var ret int32
		return ret
	}
	return *o.OnlineLogGroups
}

// GetOnlineLogGroupsOk returns a tuple with the OnlineLogGroups field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProvisionVDBByTimestampParameters) GetOnlineLogGroupsOk() (*int32, bool) {
	if o == nil || IsNil(o.OnlineLogGroups) {
		return nil, false
	}
	return o.OnlineLogGroups, true
}

// HasOnlineLogGroups returns a boolean if a field has been set.
func (o *ProvisionVDBByTimestampParameters) HasOnlineLogGroups() bool {
	if o != nil && !IsNil(o.OnlineLogGroups) {
		return true
	}

	return false
}

// SetOnlineLogGroups gets a reference to the given int32 and assigns it to the OnlineLogGroups field.
func (o *ProvisionVDBByTimestampParameters) SetOnlineLogGroups(v int32) {
	o.OnlineLogGroups = &v
}

// GetArchiveLog returns the ArchiveLog field value if set, zero value otherwise.
func (o *ProvisionVDBByTimestampParameters) GetArchiveLog() bool {
	if o == nil || IsNil(o.ArchiveLog) {
		var ret bool
		return ret
	}
	return *o.ArchiveLog
}

// GetArchiveLogOk returns a tuple with the ArchiveLog field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProvisionVDBByTimestampParameters) GetArchiveLogOk() (*bool, bool) {
	if o == nil || IsNil(o.ArchiveLog) {
		return nil, false
	}
	return o.ArchiveLog, true
}

// HasArchiveLog returns a boolean if a field has been set.
func (o *ProvisionVDBByTimestampParameters) HasArchiveLog() bool {
	if o != nil && !IsNil(o.ArchiveLog) {
		return true
	}

	return false
}

// SetArchiveLog gets a reference to the given bool and assigns it to the ArchiveLog field.
func (o *ProvisionVDBByTimestampParameters) SetArchiveLog(v bool) {
	o.ArchiveLog = &v
}

// GetNewDbid returns the NewDbid field value if set, zero value otherwise.
func (o *ProvisionVDBByTimestampParameters) GetNewDbid() bool {
	if o == nil || IsNil(o.NewDbid) {
		var ret bool
		return ret
	}
	return *o.NewDbid
}

// GetNewDbidOk returns a tuple with the NewDbid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProvisionVDBByTimestampParameters) GetNewDbidOk() (*bool, bool) {
	if o == nil || IsNil(o.NewDbid) {
		return nil, false
	}
	return o.NewDbid, true
}

// HasNewDbid returns a boolean if a field has been set.
func (o *ProvisionVDBByTimestampParameters) HasNewDbid() bool {
	if o != nil && !IsNil(o.NewDbid) {
		return true
	}

	return false
}

// SetNewDbid gets a reference to the given bool and assigns it to the NewDbid field.
func (o *ProvisionVDBByTimestampParameters) SetNewDbid(v bool) {
	o.NewDbid = &v
}

// GetMasked returns the Masked field value if set, zero value otherwise.
func (o *ProvisionVDBByTimestampParameters) GetMasked() bool {
	if o == nil || IsNil(o.Masked) {
		var ret bool
		return ret
	}
	return *o.Masked
}

// GetMaskedOk returns a tuple with the Masked field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProvisionVDBByTimestampParameters) GetMaskedOk() (*bool, bool) {
	if o == nil || IsNil(o.Masked) {
		return nil, false
	}
	return o.Masked, true
}

// HasMasked returns a boolean if a field has been set.
func (o *ProvisionVDBByTimestampParameters) HasMasked() bool {
	if o != nil && !IsNil(o.Masked) {
		return true
	}

	return false
}

// SetMasked gets a reference to the given bool and assigns it to the Masked field.
func (o *ProvisionVDBByTimestampParameters) SetMasked(v bool) {
	o.Masked = &v
}

// GetListenerIds returns the ListenerIds field value if set, zero value otherwise.
func (o *ProvisionVDBByTimestampParameters) GetListenerIds() []string {
	if o == nil || IsNil(o.ListenerIds) {
		var ret []string
		return ret
	}
	return o.ListenerIds
}

// GetListenerIdsOk returns a tuple with the ListenerIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProvisionVDBByTimestampParameters) GetListenerIdsOk() ([]string, bool) {
	if o == nil || IsNil(o.ListenerIds) {
		return nil, false
	}
	return o.ListenerIds, true
}

// HasListenerIds returns a boolean if a field has been set.
func (o *ProvisionVDBByTimestampParameters) HasListenerIds() bool {
	if o != nil && !IsNil(o.ListenerIds) {
		return true
	}

	return false
}

// SetListenerIds gets a reference to the given []string and assigns it to the ListenerIds field.
func (o *ProvisionVDBByTimestampParameters) SetListenerIds(v []string) {
	o.ListenerIds = v
}

// GetCustomEnvVars returns the CustomEnvVars field value if set, zero value otherwise.
func (o *ProvisionVDBByTimestampParameters) GetCustomEnvVars() map[string]string {
	if o == nil || IsNil(o.CustomEnvVars) {
		var ret map[string]string
		return ret
	}
	return *o.CustomEnvVars
}

// GetCustomEnvVarsOk returns a tuple with the CustomEnvVars field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProvisionVDBByTimestampParameters) GetCustomEnvVarsOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.CustomEnvVars) {
		return nil, false
	}
	return o.CustomEnvVars, true
}

// HasCustomEnvVars returns a boolean if a field has been set.
func (o *ProvisionVDBByTimestampParameters) HasCustomEnvVars() bool {
	if o != nil && !IsNil(o.CustomEnvVars) {
		return true
	}

	return false
}

// SetCustomEnvVars gets a reference to the given map[string]string and assigns it to the CustomEnvVars field.
func (o *ProvisionVDBByTimestampParameters) SetCustomEnvVars(v map[string]string) {
	o.CustomEnvVars = &v
}

// GetCustomEnvFiles returns the CustomEnvFiles field value if set, zero value otherwise.
func (o *ProvisionVDBByTimestampParameters) GetCustomEnvFiles() []string {
	if o == nil || IsNil(o.CustomEnvFiles) {
		var ret []string
		return ret
	}
	return o.CustomEnvFiles
}

// GetCustomEnvFilesOk returns a tuple with the CustomEnvFiles field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProvisionVDBByTimestampParameters) GetCustomEnvFilesOk() ([]string, bool) {
	if o == nil || IsNil(o.CustomEnvFiles) {
		return nil, false
	}
	return o.CustomEnvFiles, true
}

// HasCustomEnvFiles returns a boolean if a field has been set.
func (o *ProvisionVDBByTimestampParameters) HasCustomEnvFiles() bool {
	if o != nil && !IsNil(o.CustomEnvFiles) {
		return true
	}

	return false
}

// SetCustomEnvFiles gets a reference to the given []string and assigns it to the CustomEnvFiles field.
func (o *ProvisionVDBByTimestampParameters) SetCustomEnvFiles(v []string) {
	o.CustomEnvFiles = v
}

// GetOracleRacCustomEnvFiles returns the OracleRacCustomEnvFiles field value if set, zero value otherwise.
func (o *ProvisionVDBByTimestampParameters) GetOracleRacCustomEnvFiles() []OracleRacCustomEnvFile {
	if o == nil || IsNil(o.OracleRacCustomEnvFiles) {
		var ret []OracleRacCustomEnvFile
		return ret
	}
	return o.OracleRacCustomEnvFiles
}

// GetOracleRacCustomEnvFilesOk returns a tuple with the OracleRacCustomEnvFiles field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProvisionVDBByTimestampParameters) GetOracleRacCustomEnvFilesOk() ([]OracleRacCustomEnvFile, bool) {
	if o == nil || IsNil(o.OracleRacCustomEnvFiles) {
		return nil, false
	}
	return o.OracleRacCustomEnvFiles, true
}

// HasOracleRacCustomEnvFiles returns a boolean if a field has been set.
func (o *ProvisionVDBByTimestampParameters) HasOracleRacCustomEnvFiles() bool {
	if o != nil && !IsNil(o.OracleRacCustomEnvFiles) {
		return true
	}

	return false
}

// SetOracleRacCustomEnvFiles gets a reference to the given []OracleRacCustomEnvFile and assigns it to the OracleRacCustomEnvFiles field.
func (o *ProvisionVDBByTimestampParameters) SetOracleRacCustomEnvFiles(v []OracleRacCustomEnvFile) {
	o.OracleRacCustomEnvFiles = v
}

// GetOracleRacCustomEnvVars returns the OracleRacCustomEnvVars field value if set, zero value otherwise.
func (o *ProvisionVDBByTimestampParameters) GetOracleRacCustomEnvVars() []OracleRacCustomEnvVar {
	if o == nil || IsNil(o.OracleRacCustomEnvVars) {
		var ret []OracleRacCustomEnvVar
		return ret
	}
	return o.OracleRacCustomEnvVars
}

// GetOracleRacCustomEnvVarsOk returns a tuple with the OracleRacCustomEnvVars field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProvisionVDBByTimestampParameters) GetOracleRacCustomEnvVarsOk() ([]OracleRacCustomEnvVar, bool) {
	if o == nil || IsNil(o.OracleRacCustomEnvVars) {
		return nil, false
	}
	return o.OracleRacCustomEnvVars, true
}

// HasOracleRacCustomEnvVars returns a boolean if a field has been set.
func (o *ProvisionVDBByTimestampParameters) HasOracleRacCustomEnvVars() bool {
	if o != nil && !IsNil(o.OracleRacCustomEnvVars) {
		return true
	}

	return false
}

// SetOracleRacCustomEnvVars gets a reference to the given []OracleRacCustomEnvVar and assigns it to the OracleRacCustomEnvVars field.
func (o *ProvisionVDBByTimestampParameters) SetOracleRacCustomEnvVars(v []OracleRacCustomEnvVar) {
	o.OracleRacCustomEnvVars = v
}

// GetParentTdeKeystorePath returns the ParentTdeKeystorePath field value if set, zero value otherwise.
func (o *ProvisionVDBByTimestampParameters) GetParentTdeKeystorePath() string {
	if o == nil || IsNil(o.ParentTdeKeystorePath) {
		var ret string
		return ret
	}
	return *o.ParentTdeKeystorePath
}

// GetParentTdeKeystorePathOk returns a tuple with the ParentTdeKeystorePath field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProvisionVDBByTimestampParameters) GetParentTdeKeystorePathOk() (*string, bool) {
	if o == nil || IsNil(o.ParentTdeKeystorePath) {
		return nil, false
	}
	return o.ParentTdeKeystorePath, true
}

// HasParentTdeKeystorePath returns a boolean if a field has been set.
func (o *ProvisionVDBByTimestampParameters) HasParentTdeKeystorePath() bool {
	if o != nil && !IsNil(o.ParentTdeKeystorePath) {
		return true
	}

	return false
}

// SetParentTdeKeystorePath gets a reference to the given string and assigns it to the ParentTdeKeystorePath field.
func (o *ProvisionVDBByTimestampParameters) SetParentTdeKeystorePath(v string) {
	o.ParentTdeKeystorePath = &v
}

// GetParentTdeKeystorePassword returns the ParentTdeKeystorePassword field value if set, zero value otherwise.
func (o *ProvisionVDBByTimestampParameters) GetParentTdeKeystorePassword() string {
	if o == nil || IsNil(o.ParentTdeKeystorePassword) {
		var ret string
		return ret
	}
	return *o.ParentTdeKeystorePassword
}

// GetParentTdeKeystorePasswordOk returns a tuple with the ParentTdeKeystorePassword field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProvisionVDBByTimestampParameters) GetParentTdeKeystorePasswordOk() (*string, bool) {
	if o == nil || IsNil(o.ParentTdeKeystorePassword) {
		return nil, false
	}
	return o.ParentTdeKeystorePassword, true
}

// HasParentTdeKeystorePassword returns a boolean if a field has been set.
func (o *ProvisionVDBByTimestampParameters) HasParentTdeKeystorePassword() bool {
	if o != nil && !IsNil(o.ParentTdeKeystorePassword) {
		return true
	}

	return false
}

// SetParentTdeKeystorePassword gets a reference to the given string and assigns it to the ParentTdeKeystorePassword field.
func (o *ProvisionVDBByTimestampParameters) SetParentTdeKeystorePassword(v string) {
	o.ParentTdeKeystorePassword = &v
}

// GetTdeExportedKeyFileSecret returns the TdeExportedKeyFileSecret field value if set, zero value otherwise.
func (o *ProvisionVDBByTimestampParameters) GetTdeExportedKeyFileSecret() string {
	if o == nil || IsNil(o.TdeExportedKeyFileSecret) {
		var ret string
		return ret
	}
	return *o.TdeExportedKeyFileSecret
}

// GetTdeExportedKeyFileSecretOk returns a tuple with the TdeExportedKeyFileSecret field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProvisionVDBByTimestampParameters) GetTdeExportedKeyFileSecretOk() (*string, bool) {
	if o == nil || IsNil(o.TdeExportedKeyFileSecret) {
		return nil, false
	}
	return o.TdeExportedKeyFileSecret, true
}

// HasTdeExportedKeyFileSecret returns a boolean if a field has been set.
func (o *ProvisionVDBByTimestampParameters) HasTdeExportedKeyFileSecret() bool {
	if o != nil && !IsNil(o.TdeExportedKeyFileSecret) {
		return true
	}

	return false
}

// SetTdeExportedKeyFileSecret gets a reference to the given string and assigns it to the TdeExportedKeyFileSecret field.
func (o *ProvisionVDBByTimestampParameters) SetTdeExportedKeyFileSecret(v string) {
	o.TdeExportedKeyFileSecret = &v
}

// GetTdeKeyIdentifier returns the TdeKeyIdentifier field value if set, zero value otherwise.
func (o *ProvisionVDBByTimestampParameters) GetTdeKeyIdentifier() string {
	if o == nil || IsNil(o.TdeKeyIdentifier) {
		var ret string
		return ret
	}
	return *o.TdeKeyIdentifier
}

// GetTdeKeyIdentifierOk returns a tuple with the TdeKeyIdentifier field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProvisionVDBByTimestampParameters) GetTdeKeyIdentifierOk() (*string, bool) {
	if o == nil || IsNil(o.TdeKeyIdentifier) {
		return nil, false
	}
	return o.TdeKeyIdentifier, true
}

// HasTdeKeyIdentifier returns a boolean if a field has been set.
func (o *ProvisionVDBByTimestampParameters) HasTdeKeyIdentifier() bool {
	if o != nil && !IsNil(o.TdeKeyIdentifier) {
		return true
	}

	return false
}

// SetTdeKeyIdentifier gets a reference to the given string and assigns it to the TdeKeyIdentifier field.
func (o *ProvisionVDBByTimestampParameters) SetTdeKeyIdentifier(v string) {
	o.TdeKeyIdentifier = &v
}

// GetTargetVcdbTdeKeystorePath returns the TargetVcdbTdeKeystorePath field value if set, zero value otherwise.
func (o *ProvisionVDBByTimestampParameters) GetTargetVcdbTdeKeystorePath() string {
	if o == nil || IsNil(o.TargetVcdbTdeKeystorePath) {
		var ret string
		return ret
	}
	return *o.TargetVcdbTdeKeystorePath
}

// GetTargetVcdbTdeKeystorePathOk returns a tuple with the TargetVcdbTdeKeystorePath field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProvisionVDBByTimestampParameters) GetTargetVcdbTdeKeystorePathOk() (*string, bool) {
	if o == nil || IsNil(o.TargetVcdbTdeKeystorePath) {
		return nil, false
	}
	return o.TargetVcdbTdeKeystorePath, true
}

// HasTargetVcdbTdeKeystorePath returns a boolean if a field has been set.
func (o *ProvisionVDBByTimestampParameters) HasTargetVcdbTdeKeystorePath() bool {
	if o != nil && !IsNil(o.TargetVcdbTdeKeystorePath) {
		return true
	}

	return false
}

// SetTargetVcdbTdeKeystorePath gets a reference to the given string and assigns it to the TargetVcdbTdeKeystorePath field.
func (o *ProvisionVDBByTimestampParameters) SetTargetVcdbTdeKeystorePath(v string) {
	o.TargetVcdbTdeKeystorePath = &v
}

// GetCdbTdeKeystorePassword returns the CdbTdeKeystorePassword field value if set, zero value otherwise.
func (o *ProvisionVDBByTimestampParameters) GetCdbTdeKeystorePassword() string {
	if o == nil || IsNil(o.CdbTdeKeystorePassword) {
		var ret string
		return ret
	}
	return *o.CdbTdeKeystorePassword
}

// GetCdbTdeKeystorePasswordOk returns a tuple with the CdbTdeKeystorePassword field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProvisionVDBByTimestampParameters) GetCdbTdeKeystorePasswordOk() (*string, bool) {
	if o == nil || IsNil(o.CdbTdeKeystorePassword) {
		return nil, false
	}
	return o.CdbTdeKeystorePassword, true
}

// HasCdbTdeKeystorePassword returns a boolean if a field has been set.
func (o *ProvisionVDBByTimestampParameters) HasCdbTdeKeystorePassword() bool {
	if o != nil && !IsNil(o.CdbTdeKeystorePassword) {
		return true
	}

	return false
}

// SetCdbTdeKeystorePassword gets a reference to the given string and assigns it to the CdbTdeKeystorePassword field.
func (o *ProvisionVDBByTimestampParameters) SetCdbTdeKeystorePassword(v string) {
	o.CdbTdeKeystorePassword = &v
}

// GetVcdbTdeKeyIdentifier returns the VcdbTdeKeyIdentifier field value if set, zero value otherwise.
func (o *ProvisionVDBByTimestampParameters) GetVcdbTdeKeyIdentifier() string {
	if o == nil || IsNil(o.VcdbTdeKeyIdentifier) {
		var ret string
		return ret
	}
	return *o.VcdbTdeKeyIdentifier
}

// GetVcdbTdeKeyIdentifierOk returns a tuple with the VcdbTdeKeyIdentifier field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProvisionVDBByTimestampParameters) GetVcdbTdeKeyIdentifierOk() (*string, bool) {
	if o == nil || IsNil(o.VcdbTdeKeyIdentifier) {
		return nil, false
	}
	return o.VcdbTdeKeyIdentifier, true
}

// HasVcdbTdeKeyIdentifier returns a boolean if a field has been set.
func (o *ProvisionVDBByTimestampParameters) HasVcdbTdeKeyIdentifier() bool {
	if o != nil && !IsNil(o.VcdbTdeKeyIdentifier) {
		return true
	}

	return false
}

// SetVcdbTdeKeyIdentifier gets a reference to the given string and assigns it to the VcdbTdeKeyIdentifier field.
func (o *ProvisionVDBByTimestampParameters) SetVcdbTdeKeyIdentifier(v string) {
	o.VcdbTdeKeyIdentifier = &v
}

// GetAppdataSourceParams returns the AppdataSourceParams field value if set, zero value otherwise.
func (o *ProvisionVDBByTimestampParameters) GetAppdataSourceParams() map[string]interface{} {
	if o == nil || IsNil(o.AppdataSourceParams) {
		var ret map[string]interface{}
		return ret
	}
	return o.AppdataSourceParams
}

// GetAppdataSourceParamsOk returns a tuple with the AppdataSourceParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProvisionVDBByTimestampParameters) GetAppdataSourceParamsOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.AppdataSourceParams) {
		return map[string]interface{}{}, false
	}
	return o.AppdataSourceParams, true
}

// HasAppdataSourceParams returns a boolean if a field has been set.
func (o *ProvisionVDBByTimestampParameters) HasAppdataSourceParams() bool {
	if o != nil && !IsNil(o.AppdataSourceParams) {
		return true
	}

	return false
}

// SetAppdataSourceParams gets a reference to the given map[string]interface{} and assigns it to the AppdataSourceParams field.
func (o *ProvisionVDBByTimestampParameters) SetAppdataSourceParams(v map[string]interface{}) {
	o.AppdataSourceParams = v
}

// GetAdditionalMountPoints returns the AdditionalMountPoints field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProvisionVDBByTimestampParameters) GetAdditionalMountPoints() []AdditionalMountPoint {
	if o == nil {
		var ret []AdditionalMountPoint
		return ret
	}
	return o.AdditionalMountPoints
}

// GetAdditionalMountPointsOk returns a tuple with the AdditionalMountPoints field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProvisionVDBByTimestampParameters) GetAdditionalMountPointsOk() ([]AdditionalMountPoint, bool) {
	if o == nil || IsNil(o.AdditionalMountPoints) {
		return nil, false
	}
	return o.AdditionalMountPoints, true
}

// HasAdditionalMountPoints returns a boolean if a field has been set.
func (o *ProvisionVDBByTimestampParameters) HasAdditionalMountPoints() bool {
	if o != nil && !IsNil(o.AdditionalMountPoints) {
		return true
	}

	return false
}

// SetAdditionalMountPoints gets a reference to the given []AdditionalMountPoint and assigns it to the AdditionalMountPoints field.
func (o *ProvisionVDBByTimestampParameters) SetAdditionalMountPoints(v []AdditionalMountPoint) {
	o.AdditionalMountPoints = v
}

// GetAppdataConfigParams returns the AppdataConfigParams field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProvisionVDBByTimestampParameters) GetAppdataConfigParams() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}
	return o.AppdataConfigParams
}

// GetAppdataConfigParamsOk returns a tuple with the AppdataConfigParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProvisionVDBByTimestampParameters) GetAppdataConfigParamsOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.AppdataConfigParams) {
		return map[string]interface{}{}, false
	}
	return o.AppdataConfigParams, true
}

// HasAppdataConfigParams returns a boolean if a field has been set.
func (o *ProvisionVDBByTimestampParameters) HasAppdataConfigParams() bool {
	if o != nil && !IsNil(o.AppdataConfigParams) {
		return true
	}

	return false
}

// SetAppdataConfigParams gets a reference to the given map[string]interface{} and assigns it to the AppdataConfigParams field.
func (o *ProvisionVDBByTimestampParameters) SetAppdataConfigParams(v map[string]interface{}) {
	o.AppdataConfigParams = v
}

// GetConfigParams returns the ConfigParams field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProvisionVDBByTimestampParameters) GetConfigParams() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}
	return o.ConfigParams
}

// GetConfigParamsOk returns a tuple with the ConfigParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProvisionVDBByTimestampParameters) GetConfigParamsOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.ConfigParams) {
		return map[string]interface{}{}, false
	}
	return o.ConfigParams, true
}

// HasConfigParams returns a boolean if a field has been set.
func (o *ProvisionVDBByTimestampParameters) HasConfigParams() bool {
	if o != nil && !IsNil(o.ConfigParams) {
		return true
	}

	return false
}

// SetConfigParams gets a reference to the given map[string]interface{} and assigns it to the ConfigParams field.
func (o *ProvisionVDBByTimestampParameters) SetConfigParams(v map[string]interface{}) {
	o.ConfigParams = v
}

// GetPrivilegedOsUser returns the PrivilegedOsUser field value if set, zero value otherwise.
func (o *ProvisionVDBByTimestampParameters) GetPrivilegedOsUser() string {
	if o == nil || IsNil(o.PrivilegedOsUser) {
		var ret string
		return ret
	}
	return *o.PrivilegedOsUser
}

// GetPrivilegedOsUserOk returns a tuple with the PrivilegedOsUser field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProvisionVDBByTimestampParameters) GetPrivilegedOsUserOk() (*string, bool) {
	if o == nil || IsNil(o.PrivilegedOsUser) {
		return nil, false
	}
	return o.PrivilegedOsUser, true
}

// HasPrivilegedOsUser returns a boolean if a field has been set.
func (o *ProvisionVDBByTimestampParameters) HasPrivilegedOsUser() bool {
	if o != nil && !IsNil(o.PrivilegedOsUser) {
		return true
	}

	return false
}

// SetPrivilegedOsUser gets a reference to the given string and assigns it to the PrivilegedOsUser field.
func (o *ProvisionVDBByTimestampParameters) SetPrivilegedOsUser(v string) {
	o.PrivilegedOsUser = &v
}

// GetPostgresPort returns the PostgresPort field value if set, zero value otherwise.
func (o *ProvisionVDBByTimestampParameters) GetPostgresPort() int32 {
	if o == nil || IsNil(o.PostgresPort) {
		var ret int32
		return ret
	}
	return *o.PostgresPort
}

// GetPostgresPortOk returns a tuple with the PostgresPort field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProvisionVDBByTimestampParameters) GetPostgresPortOk() (*int32, bool) {
	if o == nil || IsNil(o.PostgresPort) {
		return nil, false
	}
	return o.PostgresPort, true
}

// HasPostgresPort returns a boolean if a field has been set.
func (o *ProvisionVDBByTimestampParameters) HasPostgresPort() bool {
	if o != nil && !IsNil(o.PostgresPort) {
		return true
	}

	return false
}

// SetPostgresPort gets a reference to the given int32 and assigns it to the PostgresPort field.
func (o *ProvisionVDBByTimestampParameters) SetPostgresPort(v int32) {
	o.PostgresPort = &v
}

// GetConfigSettingsStg returns the ConfigSettingsStg field value if set, zero value otherwise.
func (o *ProvisionVDBByTimestampParameters) GetConfigSettingsStg() []ConfigSettingsStg {
	if o == nil || IsNil(o.ConfigSettingsStg) {
		var ret []ConfigSettingsStg
		return ret
	}
	return o.ConfigSettingsStg
}

// GetConfigSettingsStgOk returns a tuple with the ConfigSettingsStg field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProvisionVDBByTimestampParameters) GetConfigSettingsStgOk() ([]ConfigSettingsStg, bool) {
	if o == nil || IsNil(o.ConfigSettingsStg) {
		return nil, false
	}
	return o.ConfigSettingsStg, true
}

// HasConfigSettingsStg returns a boolean if a field has been set.
func (o *ProvisionVDBByTimestampParameters) HasConfigSettingsStg() bool {
	if o != nil && !IsNil(o.ConfigSettingsStg) {
		return true
	}

	return false
}

// SetConfigSettingsStg gets a reference to the given []ConfigSettingsStg and assigns it to the ConfigSettingsStg field.
func (o *ProvisionVDBByTimestampParameters) SetConfigSettingsStg(v []ConfigSettingsStg) {
	o.ConfigSettingsStg = v
}

// GetVcdbRestart returns the VcdbRestart field value if set, zero value otherwise.
func (o *ProvisionVDBByTimestampParameters) GetVcdbRestart() bool {
	if o == nil || IsNil(o.VcdbRestart) {
		var ret bool
		return ret
	}
	return *o.VcdbRestart
}

// GetVcdbRestartOk returns a tuple with the VcdbRestart field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProvisionVDBByTimestampParameters) GetVcdbRestartOk() (*bool, bool) {
	if o == nil || IsNil(o.VcdbRestart) {
		return nil, false
	}
	return o.VcdbRestart, true
}

// HasVcdbRestart returns a boolean if a field has been set.
func (o *ProvisionVDBByTimestampParameters) HasVcdbRestart() bool {
	if o != nil && !IsNil(o.VcdbRestart) {
		return true
	}

	return false
}

// SetVcdbRestart gets a reference to the given bool and assigns it to the VcdbRestart field.
func (o *ProvisionVDBByTimestampParameters) SetVcdbRestart(v bool) {
	o.VcdbRestart = &v
}

// GetMssqlFailoverDriveLetter returns the MssqlFailoverDriveLetter field value if set, zero value otherwise.
func (o *ProvisionVDBByTimestampParameters) GetMssqlFailoverDriveLetter() string {
	if o == nil || IsNil(o.MssqlFailoverDriveLetter) {
		var ret string
		return ret
	}
	return *o.MssqlFailoverDriveLetter
}

// GetMssqlFailoverDriveLetterOk returns a tuple with the MssqlFailoverDriveLetter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProvisionVDBByTimestampParameters) GetMssqlFailoverDriveLetterOk() (*string, bool) {
	if o == nil || IsNil(o.MssqlFailoverDriveLetter) {
		return nil, false
	}
	return o.MssqlFailoverDriveLetter, true
}

// HasMssqlFailoverDriveLetter returns a boolean if a field has been set.
func (o *ProvisionVDBByTimestampParameters) HasMssqlFailoverDriveLetter() bool {
	if o != nil && !IsNil(o.MssqlFailoverDriveLetter) {
		return true
	}

	return false
}

// SetMssqlFailoverDriveLetter gets a reference to the given string and assigns it to the MssqlFailoverDriveLetter field.
func (o *ProvisionVDBByTimestampParameters) SetMssqlFailoverDriveLetter(v string) {
	o.MssqlFailoverDriveLetter = &v
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *ProvisionVDBByTimestampParameters) GetTags() []Tag {
	if o == nil || IsNil(o.Tags) {
		var ret []Tag
		return ret
	}
	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProvisionVDBByTimestampParameters) GetTagsOk() ([]Tag, bool) {
	if o == nil || IsNil(o.Tags) {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *ProvisionVDBByTimestampParameters) HasTags() bool {
	if o != nil && !IsNil(o.Tags) {
		return true
	}

	return false
}

// SetTags gets a reference to the given []Tag and assigns it to the Tags field.
func (o *ProvisionVDBByTimestampParameters) SetTags(v []Tag) {
	o.Tags = v
}

// GetInvokeDatapatch returns the InvokeDatapatch field value if set, zero value otherwise.
func (o *ProvisionVDBByTimestampParameters) GetInvokeDatapatch() bool {
	if o == nil || IsNil(o.InvokeDatapatch) {
		var ret bool
		return ret
	}
	return *o.InvokeDatapatch
}

// GetInvokeDatapatchOk returns a tuple with the InvokeDatapatch field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProvisionVDBByTimestampParameters) GetInvokeDatapatchOk() (*bool, bool) {
	if o == nil || IsNil(o.InvokeDatapatch) {
		return nil, false
	}
	return o.InvokeDatapatch, true
}

// HasInvokeDatapatch returns a boolean if a field has been set.
func (o *ProvisionVDBByTimestampParameters) HasInvokeDatapatch() bool {
	if o != nil && !IsNil(o.InvokeDatapatch) {
		return true
	}

	return false
}

// SetInvokeDatapatch gets a reference to the given bool and assigns it to the InvokeDatapatch field.
func (o *ProvisionVDBByTimestampParameters) SetInvokeDatapatch(v bool) {
	o.InvokeDatapatch = &v
}

// GetTimestamp returns the Timestamp field value if set, zero value otherwise.
func (o *ProvisionVDBByTimestampParameters) GetTimestamp() time.Time {
	if o == nil || IsNil(o.Timestamp) {
		var ret time.Time
		return ret
	}
	return *o.Timestamp
}

// GetTimestampOk returns a tuple with the Timestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProvisionVDBByTimestampParameters) GetTimestampOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Timestamp) {
		return nil, false
	}
	return o.Timestamp, true
}

// HasTimestamp returns a boolean if a field has been set.
func (o *ProvisionVDBByTimestampParameters) HasTimestamp() bool {
	if o != nil && !IsNil(o.Timestamp) {
		return true
	}

	return false
}

// SetTimestamp gets a reference to the given time.Time and assigns it to the Timestamp field.
func (o *ProvisionVDBByTimestampParameters) SetTimestamp(v time.Time) {
	o.Timestamp = &v
}

// GetTimestampInDatabaseTimezone returns the TimestampInDatabaseTimezone field value if set, zero value otherwise.
func (o *ProvisionVDBByTimestampParameters) GetTimestampInDatabaseTimezone() string {
	if o == nil || IsNil(o.TimestampInDatabaseTimezone) {
		var ret string
		return ret
	}
	return *o.TimestampInDatabaseTimezone
}

// GetTimestampInDatabaseTimezoneOk returns a tuple with the TimestampInDatabaseTimezone field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProvisionVDBByTimestampParameters) GetTimestampInDatabaseTimezoneOk() (*string, bool) {
	if o == nil || IsNil(o.TimestampInDatabaseTimezone) {
		return nil, false
	}
	return o.TimestampInDatabaseTimezone, true
}

// HasTimestampInDatabaseTimezone returns a boolean if a field has been set.
func (o *ProvisionVDBByTimestampParameters) HasTimestampInDatabaseTimezone() bool {
	if o != nil && !IsNil(o.TimestampInDatabaseTimezone) {
		return true
	}

	return false
}

// SetTimestampInDatabaseTimezone gets a reference to the given string and assigns it to the TimestampInDatabaseTimezone field.
func (o *ProvisionVDBByTimestampParameters) SetTimestampInDatabaseTimezone(v string) {
	o.TimestampInDatabaseTimezone = &v
}

// GetTimeflowId returns the TimeflowId field value if set, zero value otherwise.
func (o *ProvisionVDBByTimestampParameters) GetTimeflowId() string {
	if o == nil || IsNil(o.TimeflowId) {
		var ret string
		return ret
	}
	return *o.TimeflowId
}

// GetTimeflowIdOk returns a tuple with the TimeflowId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProvisionVDBByTimestampParameters) GetTimeflowIdOk() (*string, bool) {
	if o == nil || IsNil(o.TimeflowId) {
		return nil, false
	}
	return o.TimeflowId, true
}

// HasTimeflowId returns a boolean if a field has been set.
func (o *ProvisionVDBByTimestampParameters) HasTimeflowId() bool {
	if o != nil && !IsNil(o.TimeflowId) {
		return true
	}

	return false
}

// SetTimeflowId gets a reference to the given string and assigns it to the TimeflowId field.
func (o *ProvisionVDBByTimestampParameters) SetTimeflowId(v string) {
	o.TimeflowId = &v
}

// GetEngineId returns the EngineId field value if set, zero value otherwise.
func (o *ProvisionVDBByTimestampParameters) GetEngineId() string {
	if o == nil || IsNil(o.EngineId) {
		var ret string
		return ret
	}
	return *o.EngineId
}

// GetEngineIdOk returns a tuple with the EngineId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProvisionVDBByTimestampParameters) GetEngineIdOk() (*string, bool) {
	if o == nil || IsNil(o.EngineId) {
		return nil, false
	}
	return o.EngineId, true
}

// HasEngineId returns a boolean if a field has been set.
func (o *ProvisionVDBByTimestampParameters) HasEngineId() bool {
	if o != nil && !IsNil(o.EngineId) {
		return true
	}

	return false
}

// SetEngineId gets a reference to the given string and assigns it to the EngineId field.
func (o *ProvisionVDBByTimestampParameters) SetEngineId(v string) {
	o.EngineId = &v
}

// GetSourceDataId returns the SourceDataId field value
func (o *ProvisionVDBByTimestampParameters) GetSourceDataId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SourceDataId
}

// GetSourceDataIdOk returns a tuple with the SourceDataId field value
// and a boolean to check if the value has been set.
func (o *ProvisionVDBByTimestampParameters) GetSourceDataIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SourceDataId, true
}

// SetSourceDataId sets field value
func (o *ProvisionVDBByTimestampParameters) SetSourceDataId(v string) {
	o.SourceDataId = v
}

// GetMakeCurrentAccountOwner returns the MakeCurrentAccountOwner field value if set, zero value otherwise.
func (o *ProvisionVDBByTimestampParameters) GetMakeCurrentAccountOwner() bool {
	if o == nil || IsNil(o.MakeCurrentAccountOwner) {
		var ret bool
		return ret
	}
	return *o.MakeCurrentAccountOwner
}

// GetMakeCurrentAccountOwnerOk returns a tuple with the MakeCurrentAccountOwner field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProvisionVDBByTimestampParameters) GetMakeCurrentAccountOwnerOk() (*bool, bool) {
	if o == nil || IsNil(o.MakeCurrentAccountOwner) {
		return nil, false
	}
	return o.MakeCurrentAccountOwner, true
}

// HasMakeCurrentAccountOwner returns a boolean if a field has been set.
func (o *ProvisionVDBByTimestampParameters) HasMakeCurrentAccountOwner() bool {
	if o != nil && !IsNil(o.MakeCurrentAccountOwner) {
		return true
	}

	return false
}

// SetMakeCurrentAccountOwner gets a reference to the given bool and assigns it to the MakeCurrentAccountOwner field.
func (o *ProvisionVDBByTimestampParameters) SetMakeCurrentAccountOwner(v bool) {
	o.MakeCurrentAccountOwner = &v
}

func (o ProvisionVDBByTimestampParameters) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ProvisionVDBByTimestampParameters) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.PreRefresh) {
		toSerialize["pre_refresh"] = o.PreRefresh
	}
	if !IsNil(o.PostRefresh) {
		toSerialize["post_refresh"] = o.PostRefresh
	}
	if !IsNil(o.PreSelfRefresh) {
		toSerialize["pre_self_refresh"] = o.PreSelfRefresh
	}
	if !IsNil(o.PostSelfRefresh) {
		toSerialize["post_self_refresh"] = o.PostSelfRefresh
	}
	if !IsNil(o.PreRollback) {
		toSerialize["pre_rollback"] = o.PreRollback
	}
	if !IsNil(o.PostRollback) {
		toSerialize["post_rollback"] = o.PostRollback
	}
	if !IsNil(o.ConfigureClone) {
		toSerialize["configure_clone"] = o.ConfigureClone
	}
	if !IsNil(o.PreSnapshot) {
		toSerialize["pre_snapshot"] = o.PreSnapshot
	}
	if !IsNil(o.PostSnapshot) {
		toSerialize["post_snapshot"] = o.PostSnapshot
	}
	if !IsNil(o.PreStart) {
		toSerialize["pre_start"] = o.PreStart
	}
	if !IsNil(o.PostStart) {
		toSerialize["post_start"] = o.PostStart
	}
	if !IsNil(o.PreStop) {
		toSerialize["pre_stop"] = o.PreStop
	}
	if !IsNil(o.PostStop) {
		toSerialize["post_stop"] = o.PostStop
	}
	if !IsNil(o.TargetGroupId) {
		toSerialize["target_group_id"] = o.TargetGroupId
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.DatabaseName) {
		toSerialize["database_name"] = o.DatabaseName
	}
	if !IsNil(o.CdbId) {
		toSerialize["cdb_id"] = o.CdbId
	}
	if !IsNil(o.ClusterNodeIds) {
		toSerialize["cluster_node_ids"] = o.ClusterNodeIds
	}
	if !IsNil(o.ClusterNodeInstances) {
		toSerialize["cluster_node_instances"] = o.ClusterNodeInstances
	}
	if !IsNil(o.TruncateLogOnCheckpoint) {
		toSerialize["truncate_log_on_checkpoint"] = o.TruncateLogOnCheckpoint
	}
	if !IsNil(o.OsUsername) {
		toSerialize["os_username"] = o.OsUsername
	}
	if !IsNil(o.OsPassword) {
		toSerialize["os_password"] = o.OsPassword
	}
	if !IsNil(o.EnvironmentId) {
		toSerialize["environment_id"] = o.EnvironmentId
	}
	if !IsNil(o.EnvironmentUserId) {
		toSerialize["environment_user_id"] = o.EnvironmentUserId
	}
	if !IsNil(o.RepositoryId) {
		toSerialize["repository_id"] = o.RepositoryId
	}
	if !IsNil(o.AutoSelectRepository) {
		toSerialize["auto_select_repository"] = o.AutoSelectRepository
	}
	if !IsNil(o.VdbRestart) {
		toSerialize["vdb_restart"] = o.VdbRestart
	}
	if !IsNil(o.TemplateId) {
		toSerialize["template_id"] = o.TemplateId
	}
	if !IsNil(o.AuxiliaryTemplateId) {
		toSerialize["auxiliary_template_id"] = o.AuxiliaryTemplateId
	}
	if !IsNil(o.FileMappingRules) {
		toSerialize["file_mapping_rules"] = o.FileMappingRules
	}
	if !IsNil(o.OracleInstanceName) {
		toSerialize["oracle_instance_name"] = o.OracleInstanceName
	}
	if !IsNil(o.UniqueName) {
		toSerialize["unique_name"] = o.UniqueName
	}
	if !IsNil(o.VcdbName) {
		toSerialize["vcdb_name"] = o.VcdbName
	}
	if !IsNil(o.VcdbDatabaseName) {
		toSerialize["vcdb_database_name"] = o.VcdbDatabaseName
	}
	if !IsNil(o.MountPoint) {
		toSerialize["mount_point"] = o.MountPoint
	}
	if !IsNil(o.OpenResetLogs) {
		toSerialize["open_reset_logs"] = o.OpenResetLogs
	}
	if !IsNil(o.SnapshotPolicyId) {
		toSerialize["snapshot_policy_id"] = o.SnapshotPolicyId
	}
	if !IsNil(o.RetentionPolicyId) {
		toSerialize["retention_policy_id"] = o.RetentionPolicyId
	}
	if !IsNil(o.RecoveryModel) {
		toSerialize["recovery_model"] = o.RecoveryModel
	}
	if !IsNil(o.PreScript) {
		toSerialize["pre_script"] = o.PreScript
	}
	if !IsNil(o.PostScript) {
		toSerialize["post_script"] = o.PostScript
	}
	if !IsNil(o.CdcOnProvision) {
		toSerialize["cdc_on_provision"] = o.CdcOnProvision
	}
	if !IsNil(o.OnlineLogSize) {
		toSerialize["online_log_size"] = o.OnlineLogSize
	}
	if !IsNil(o.OnlineLogGroups) {
		toSerialize["online_log_groups"] = o.OnlineLogGroups
	}
	if !IsNil(o.ArchiveLog) {
		toSerialize["archive_log"] = o.ArchiveLog
	}
	if !IsNil(o.NewDbid) {
		toSerialize["new_dbid"] = o.NewDbid
	}
	if !IsNil(o.Masked) {
		toSerialize["masked"] = o.Masked
	}
	if !IsNil(o.ListenerIds) {
		toSerialize["listener_ids"] = o.ListenerIds
	}
	if !IsNil(o.CustomEnvVars) {
		toSerialize["custom_env_vars"] = o.CustomEnvVars
	}
	if !IsNil(o.CustomEnvFiles) {
		toSerialize["custom_env_files"] = o.CustomEnvFiles
	}
	if !IsNil(o.OracleRacCustomEnvFiles) {
		toSerialize["oracle_rac_custom_env_files"] = o.OracleRacCustomEnvFiles
	}
	if !IsNil(o.OracleRacCustomEnvVars) {
		toSerialize["oracle_rac_custom_env_vars"] = o.OracleRacCustomEnvVars
	}
	if !IsNil(o.ParentTdeKeystorePath) {
		toSerialize["parentTdeKeystorePath"] = o.ParentTdeKeystorePath
	}
	if !IsNil(o.ParentTdeKeystorePassword) {
		toSerialize["parent_tde_keystore_password"] = o.ParentTdeKeystorePassword
	}
	if !IsNil(o.TdeExportedKeyFileSecret) {
		toSerialize["tde_exported_key_file_secret"] = o.TdeExportedKeyFileSecret
	}
	if !IsNil(o.TdeKeyIdentifier) {
		toSerialize["tde_key_identifier"] = o.TdeKeyIdentifier
	}
	if !IsNil(o.TargetVcdbTdeKeystorePath) {
		toSerialize["target_vcdb_tde_keystore_path"] = o.TargetVcdbTdeKeystorePath
	}
	if !IsNil(o.CdbTdeKeystorePassword) {
		toSerialize["cdb_tde_keystore_password"] = o.CdbTdeKeystorePassword
	}
	if !IsNil(o.VcdbTdeKeyIdentifier) {
		toSerialize["vcdb_tde_key_identifier"] = o.VcdbTdeKeyIdentifier
	}
	if !IsNil(o.AppdataSourceParams) {
		toSerialize["appdata_source_params"] = o.AppdataSourceParams
	}
	if o.AdditionalMountPoints != nil {
		toSerialize["additional_mount_points"] = o.AdditionalMountPoints
	}
	if o.AppdataConfigParams != nil {
		toSerialize["appdata_config_params"] = o.AppdataConfigParams
	}
	if o.ConfigParams != nil {
		toSerialize["config_params"] = o.ConfigParams
	}
	if !IsNil(o.PrivilegedOsUser) {
		toSerialize["privileged_os_user"] = o.PrivilegedOsUser
	}
	if !IsNil(o.PostgresPort) {
		toSerialize["postgres_port"] = o.PostgresPort
	}
	if !IsNil(o.ConfigSettingsStg) {
		toSerialize["config_settings_stg"] = o.ConfigSettingsStg
	}
	if !IsNil(o.VcdbRestart) {
		toSerialize["vcdb_restart"] = o.VcdbRestart
	}
	if !IsNil(o.MssqlFailoverDriveLetter) {
		toSerialize["mssql_failover_drive_letter"] = o.MssqlFailoverDriveLetter
	}
	if !IsNil(o.Tags) {
		toSerialize["tags"] = o.Tags
	}
	if !IsNil(o.InvokeDatapatch) {
		toSerialize["invoke_datapatch"] = o.InvokeDatapatch
	}
	if !IsNil(o.Timestamp) {
		toSerialize["timestamp"] = o.Timestamp
	}
	if !IsNil(o.TimestampInDatabaseTimezone) {
		toSerialize["timestamp_in_database_timezone"] = o.TimestampInDatabaseTimezone
	}
	if !IsNil(o.TimeflowId) {
		toSerialize["timeflow_id"] = o.TimeflowId
	}
	if !IsNil(o.EngineId) {
		toSerialize["engine_id"] = o.EngineId
	}
	toSerialize["source_data_id"] = o.SourceDataId
	if !IsNil(o.MakeCurrentAccountOwner) {
		toSerialize["make_current_account_owner"] = o.MakeCurrentAccountOwner
	}
	return toSerialize, nil
}

func (o *ProvisionVDBByTimestampParameters) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"source_data_id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varProvisionVDBByTimestampParameters := _ProvisionVDBByTimestampParameters{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varProvisionVDBByTimestampParameters)

	if err != nil {
		return err
	}

	*o = ProvisionVDBByTimestampParameters(varProvisionVDBByTimestampParameters)

	return err
}

type NullableProvisionVDBByTimestampParameters struct {
	value *ProvisionVDBByTimestampParameters
	isSet bool
}

func (v NullableProvisionVDBByTimestampParameters) Get() *ProvisionVDBByTimestampParameters {
	return v.value
}

func (v *NullableProvisionVDBByTimestampParameters) Set(val *ProvisionVDBByTimestampParameters) {
	v.value = val
	v.isSet = true
}

func (v NullableProvisionVDBByTimestampParameters) IsSet() bool {
	return v.isSet
}

func (v *NullableProvisionVDBByTimestampParameters) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProvisionVDBByTimestampParameters(val *ProvisionVDBByTimestampParameters) *NullableProvisionVDBByTimestampParameters {
	return &NullableProvisionVDBByTimestampParameters{value: val, isSet: true}
}

func (v NullableProvisionVDBByTimestampParameters) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProvisionVDBByTimestampParameters) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


