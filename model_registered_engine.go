/*
Delphix DCT API

Delphix DCT API

API version: 3.18.0
Contact: support@delphix.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package delphix_dct_api

import (
	"encoding/json"
)

// checks if the RegisteredEngine type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RegisteredEngine{}

// RegisteredEngine A registered engine's connection and authentication settings.
type RegisteredEngine struct {
	// The Engine object entity ID.
	Id *string `json:"id,omitempty"`
	// The unique identifier generated by this engine.
	Uuid NullableString `json:"uuid,omitempty"`
	// The type of this engine.
	Type NullableString `json:"type,omitempty"`
	// The engine version.
	Version NullableString `json:"version,omitempty"`
	// The name of this engine.
	Name *string `json:"name,omitempty"`
	// The ssh public key of this engine.
	SshPublicKey *string `json:"ssh_public_key,omitempty"`
	// The hostname of this engine.
	Hostname *string `json:"hostname,omitempty"`
	// The total number of CPU cores on this engine.
	CpuCoreCount NullableInt32 `json:"cpu_core_count,omitempty"`
	// The total amount of memory on this engine, in bytes.
	MemorySize NullableInt64 `json:"memory_size,omitempty"`
	// The total amount of storage allocated for engine objects and system metadata, in bytes.
	DataStorageCapacity NullableInt64 `json:"data_storage_capacity,omitempty"`
	// The amount of storage used by engine objects and system metadata, in bytes.
	DataStorageUsed NullableInt64 `json:"data_storage_used,omitempty"`
	// Allow connections to the engine over HTTPs without validating the TLS certificate. Even though the connection to the engine might be performed over HTTPs, setting this property eliminates the protection against a man-in-the-middle attach for connections to this engine. Instead, consider creating a truststore with a Certificate Authority to validate the engine's certificate, and set the truststore_filename property. 
	InsecureSsl *bool `json:"insecure_ssl,omitempty"`
	// Ignore validation of the name associated to the TLS certificate when connecting to the engine over HTTPs. Setting this value must only be done if the TLS certificate of the engine does not match the hostname, and the TLS configuration of the engine cannot be fixed. Setting this property reduces the protection against a man-in-the-middle attack for connections to this engine. This is ignored if insecure_ssl is set. 
	UnsafeSslHostnameCheck *bool `json:"unsafe_ssl_hostname_check,omitempty"`
	// File name of a truststore which can be used to validate the TLS certificate of the engine. The truststore must be available at /etc/config/certs/<truststore_filename> 
	TruststoreFilename NullableString `json:"truststore_filename,omitempty" validate:"regexp=^[a-zA-Z0-9_\\\\.]+$"`
	// Password to read the truststore. 
	TruststorePassword NullableString `json:"truststore_password,omitempty"`
	// the status of the engine 
	Status NullableString `json:"status,omitempty"`
	// The status of the connection to the engine. Deprecated; use \"engine_connection_status\" instead.
	// Deprecated
	ConnectionStatus NullableString `json:"connection_status,omitempty"`
	// The state of the connection to the engine.
	EngineConnectionStatus *string `json:"engine_connection_status,omitempty"`
	// If set, details about the status of the connection to the engine. Deprecated; use \"engine_connection_status_details\" instead.
	// Deprecated
	ConnectionStatusDetails NullableString `json:"connection_status_details,omitempty"`
	// If set, details about the state of the connection to the engine.
	EngineConnectionStatusDetails *string `json:"engine_connection_status_details,omitempty"`
	// The virtualization domain admin username.
	Username NullableString `json:"username,omitempty"`
	// The virtualization domain admin password.
	Password NullableString `json:"password,omitempty"`
	// The masking admin username.
	MaskingUsername NullableString `json:"masking_username,omitempty"`
	// The masking admin password.
	MaskingPassword NullableString `json:"masking_password,omitempty"`
	// Arguments to pass to the Vault CLI tool to retrieve the virtualization username for the engine.
	HashicorpVaultUsernameCommandArgs []string `json:"hashicorp_vault_username_command_args,omitempty"`
	// Arguments to pass to the Vault CLI tool to retrieve the masking username for the engine.
	HashicorpVaultMaskingUsernameCommandArgs []string `json:"hashicorp_vault_masking_username_command_args,omitempty"`
	// Arguments to pass to the Vault CLI tool to retrieve the virtualization password for the engine.
	HashicorpVaultPasswordCommandArgs []string `json:"hashicorp_vault_password_command_args,omitempty"`
	// Arguments to pass to the Vault CLI tool to retrieve the masking password for the engine.
	HashicorpVaultMaskingPasswordCommandArgs []string `json:"hashicorp_vault_masking_password_command_args,omitempty"`
	// Reference to the Hashicorp vault to use to retrieve masking engine credentials.
	MaskingHashicorpVaultId NullableInt64 `json:"masking_hashicorp_vault_id,omitempty"`
	// Reference to the Hashicorp vault to use to retrieve virtualization engine credentials.
	HashicorpVaultId NullableInt64 `json:"hashicorp_vault_id,omitempty"`
	// The tags to be created for this engine.
	Tags []Tag `json:"tags,omitempty"`
	// The current amount of memory used by running masking jobs in bytes.
	MaskingMemoryUsed NullableInt64 `json:"masking_memory_used,omitempty"`
	// The maximum amount of memory available for running masking jobs in bytes.
	MaskingAllocatedMemory NullableInt64 `json:"masking_allocated_memory,omitempty"`
	// The number of masking jobs currently running.
	MaskingJobsRunning NullableInt32 `json:"masking_jobs_running,omitempty"`
	// The maximum number of masking jobs that can be running at the same time.
	MaskingMaxConcurrentJobs NullableInt32 `json:"masking_max_concurrent_jobs,omitempty"`
	// The number of CPU cores available to the masking engine.
	MaskingAvailableCores NullableInt32 `json:"masking_available_cores,omitempty"`
	// List of Hyperscale Instances that this engine is connected to.
	HyperscaleInstanceIds []string `json:"hyperscale_instance_ids,omitempty"`
	// File name of a truststore which can be used to validate the TLS certificate of the engine as expected by associated hyperscale instances. 
	HyperscaleTruststoreFilename NullableString `json:"hyperscale_truststore_filename,omitempty" validate:"regexp=^[a-zA-Z0-9_\\\\.]+$"`
	// Password to read the truststore as expected by associated hyperscale instances. 
	HyperscaleTruststorePassword NullableString `json:"hyperscale_truststore_password,omitempty"`
}

// NewRegisteredEngine instantiates a new RegisteredEngine object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRegisteredEngine() *RegisteredEngine {
	this := RegisteredEngine{}
	return &this
}

// NewRegisteredEngineWithDefaults instantiates a new RegisteredEngine object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRegisteredEngineWithDefaults() *RegisteredEngine {
	this := RegisteredEngine{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *RegisteredEngine) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisteredEngine) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *RegisteredEngine) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *RegisteredEngine) SetId(v string) {
	o.Id = &v
}

// GetUuid returns the Uuid field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RegisteredEngine) GetUuid() string {
	if o == nil || IsNil(o.Uuid.Get()) {
		var ret string
		return ret
	}
	return *o.Uuid.Get()
}

// GetUuidOk returns a tuple with the Uuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RegisteredEngine) GetUuidOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Uuid.Get(), o.Uuid.IsSet()
}

// HasUuid returns a boolean if a field has been set.
func (o *RegisteredEngine) HasUuid() bool {
	if o != nil && o.Uuid.IsSet() {
		return true
	}

	return false
}

// SetUuid gets a reference to the given NullableString and assigns it to the Uuid field.
func (o *RegisteredEngine) SetUuid(v string) {
	o.Uuid.Set(&v)
}
// SetUuidNil sets the value for Uuid to be an explicit nil
func (o *RegisteredEngine) SetUuidNil() {
	o.Uuid.Set(nil)
}

// UnsetUuid ensures that no value is present for Uuid, not even an explicit nil
func (o *RegisteredEngine) UnsetUuid() {
	o.Uuid.Unset()
}

// GetType returns the Type field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RegisteredEngine) GetType() string {
	if o == nil || IsNil(o.Type.Get()) {
		var ret string
		return ret
	}
	return *o.Type.Get()
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RegisteredEngine) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Type.Get(), o.Type.IsSet()
}

// HasType returns a boolean if a field has been set.
func (o *RegisteredEngine) HasType() bool {
	if o != nil && o.Type.IsSet() {
		return true
	}

	return false
}

// SetType gets a reference to the given NullableString and assigns it to the Type field.
func (o *RegisteredEngine) SetType(v string) {
	o.Type.Set(&v)
}
// SetTypeNil sets the value for Type to be an explicit nil
func (o *RegisteredEngine) SetTypeNil() {
	o.Type.Set(nil)
}

// UnsetType ensures that no value is present for Type, not even an explicit nil
func (o *RegisteredEngine) UnsetType() {
	o.Type.Unset()
}

// GetVersion returns the Version field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RegisteredEngine) GetVersion() string {
	if o == nil || IsNil(o.Version.Get()) {
		var ret string
		return ret
	}
	return *o.Version.Get()
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RegisteredEngine) GetVersionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Version.Get(), o.Version.IsSet()
}

// HasVersion returns a boolean if a field has been set.
func (o *RegisteredEngine) HasVersion() bool {
	if o != nil && o.Version.IsSet() {
		return true
	}

	return false
}

// SetVersion gets a reference to the given NullableString and assigns it to the Version field.
func (o *RegisteredEngine) SetVersion(v string) {
	o.Version.Set(&v)
}
// SetVersionNil sets the value for Version to be an explicit nil
func (o *RegisteredEngine) SetVersionNil() {
	o.Version.Set(nil)
}

// UnsetVersion ensures that no value is present for Version, not even an explicit nil
func (o *RegisteredEngine) UnsetVersion() {
	o.Version.Unset()
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *RegisteredEngine) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisteredEngine) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *RegisteredEngine) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *RegisteredEngine) SetName(v string) {
	o.Name = &v
}

// GetSshPublicKey returns the SshPublicKey field value if set, zero value otherwise.
func (o *RegisteredEngine) GetSshPublicKey() string {
	if o == nil || IsNil(o.SshPublicKey) {
		var ret string
		return ret
	}
	return *o.SshPublicKey
}

// GetSshPublicKeyOk returns a tuple with the SshPublicKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisteredEngine) GetSshPublicKeyOk() (*string, bool) {
	if o == nil || IsNil(o.SshPublicKey) {
		return nil, false
	}
	return o.SshPublicKey, true
}

// HasSshPublicKey returns a boolean if a field has been set.
func (o *RegisteredEngine) HasSshPublicKey() bool {
	if o != nil && !IsNil(o.SshPublicKey) {
		return true
	}

	return false
}

// SetSshPublicKey gets a reference to the given string and assigns it to the SshPublicKey field.
func (o *RegisteredEngine) SetSshPublicKey(v string) {
	o.SshPublicKey = &v
}

// GetHostname returns the Hostname field value if set, zero value otherwise.
func (o *RegisteredEngine) GetHostname() string {
	if o == nil || IsNil(o.Hostname) {
		var ret string
		return ret
	}
	return *o.Hostname
}

// GetHostnameOk returns a tuple with the Hostname field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisteredEngine) GetHostnameOk() (*string, bool) {
	if o == nil || IsNil(o.Hostname) {
		return nil, false
	}
	return o.Hostname, true
}

// HasHostname returns a boolean if a field has been set.
func (o *RegisteredEngine) HasHostname() bool {
	if o != nil && !IsNil(o.Hostname) {
		return true
	}

	return false
}

// SetHostname gets a reference to the given string and assigns it to the Hostname field.
func (o *RegisteredEngine) SetHostname(v string) {
	o.Hostname = &v
}

// GetCpuCoreCount returns the CpuCoreCount field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RegisteredEngine) GetCpuCoreCount() int32 {
	if o == nil || IsNil(o.CpuCoreCount.Get()) {
		var ret int32
		return ret
	}
	return *o.CpuCoreCount.Get()
}

// GetCpuCoreCountOk returns a tuple with the CpuCoreCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RegisteredEngine) GetCpuCoreCountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.CpuCoreCount.Get(), o.CpuCoreCount.IsSet()
}

// HasCpuCoreCount returns a boolean if a field has been set.
func (o *RegisteredEngine) HasCpuCoreCount() bool {
	if o != nil && o.CpuCoreCount.IsSet() {
		return true
	}

	return false
}

// SetCpuCoreCount gets a reference to the given NullableInt32 and assigns it to the CpuCoreCount field.
func (o *RegisteredEngine) SetCpuCoreCount(v int32) {
	o.CpuCoreCount.Set(&v)
}
// SetCpuCoreCountNil sets the value for CpuCoreCount to be an explicit nil
func (o *RegisteredEngine) SetCpuCoreCountNil() {
	o.CpuCoreCount.Set(nil)
}

// UnsetCpuCoreCount ensures that no value is present for CpuCoreCount, not even an explicit nil
func (o *RegisteredEngine) UnsetCpuCoreCount() {
	o.CpuCoreCount.Unset()
}

// GetMemorySize returns the MemorySize field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RegisteredEngine) GetMemorySize() int64 {
	if o == nil || IsNil(o.MemorySize.Get()) {
		var ret int64
		return ret
	}
	return *o.MemorySize.Get()
}

// GetMemorySizeOk returns a tuple with the MemorySize field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RegisteredEngine) GetMemorySizeOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.MemorySize.Get(), o.MemorySize.IsSet()
}

// HasMemorySize returns a boolean if a field has been set.
func (o *RegisteredEngine) HasMemorySize() bool {
	if o != nil && o.MemorySize.IsSet() {
		return true
	}

	return false
}

// SetMemorySize gets a reference to the given NullableInt64 and assigns it to the MemorySize field.
func (o *RegisteredEngine) SetMemorySize(v int64) {
	o.MemorySize.Set(&v)
}
// SetMemorySizeNil sets the value for MemorySize to be an explicit nil
func (o *RegisteredEngine) SetMemorySizeNil() {
	o.MemorySize.Set(nil)
}

// UnsetMemorySize ensures that no value is present for MemorySize, not even an explicit nil
func (o *RegisteredEngine) UnsetMemorySize() {
	o.MemorySize.Unset()
}

// GetDataStorageCapacity returns the DataStorageCapacity field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RegisteredEngine) GetDataStorageCapacity() int64 {
	if o == nil || IsNil(o.DataStorageCapacity.Get()) {
		var ret int64
		return ret
	}
	return *o.DataStorageCapacity.Get()
}

// GetDataStorageCapacityOk returns a tuple with the DataStorageCapacity field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RegisteredEngine) GetDataStorageCapacityOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.DataStorageCapacity.Get(), o.DataStorageCapacity.IsSet()
}

// HasDataStorageCapacity returns a boolean if a field has been set.
func (o *RegisteredEngine) HasDataStorageCapacity() bool {
	if o != nil && o.DataStorageCapacity.IsSet() {
		return true
	}

	return false
}

// SetDataStorageCapacity gets a reference to the given NullableInt64 and assigns it to the DataStorageCapacity field.
func (o *RegisteredEngine) SetDataStorageCapacity(v int64) {
	o.DataStorageCapacity.Set(&v)
}
// SetDataStorageCapacityNil sets the value for DataStorageCapacity to be an explicit nil
func (o *RegisteredEngine) SetDataStorageCapacityNil() {
	o.DataStorageCapacity.Set(nil)
}

// UnsetDataStorageCapacity ensures that no value is present for DataStorageCapacity, not even an explicit nil
func (o *RegisteredEngine) UnsetDataStorageCapacity() {
	o.DataStorageCapacity.Unset()
}

// GetDataStorageUsed returns the DataStorageUsed field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RegisteredEngine) GetDataStorageUsed() int64 {
	if o == nil || IsNil(o.DataStorageUsed.Get()) {
		var ret int64
		return ret
	}
	return *o.DataStorageUsed.Get()
}

// GetDataStorageUsedOk returns a tuple with the DataStorageUsed field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RegisteredEngine) GetDataStorageUsedOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.DataStorageUsed.Get(), o.DataStorageUsed.IsSet()
}

// HasDataStorageUsed returns a boolean if a field has been set.
func (o *RegisteredEngine) HasDataStorageUsed() bool {
	if o != nil && o.DataStorageUsed.IsSet() {
		return true
	}

	return false
}

// SetDataStorageUsed gets a reference to the given NullableInt64 and assigns it to the DataStorageUsed field.
func (o *RegisteredEngine) SetDataStorageUsed(v int64) {
	o.DataStorageUsed.Set(&v)
}
// SetDataStorageUsedNil sets the value for DataStorageUsed to be an explicit nil
func (o *RegisteredEngine) SetDataStorageUsedNil() {
	o.DataStorageUsed.Set(nil)
}

// UnsetDataStorageUsed ensures that no value is present for DataStorageUsed, not even an explicit nil
func (o *RegisteredEngine) UnsetDataStorageUsed() {
	o.DataStorageUsed.Unset()
}

// GetInsecureSsl returns the InsecureSsl field value if set, zero value otherwise.
func (o *RegisteredEngine) GetInsecureSsl() bool {
	if o == nil || IsNil(o.InsecureSsl) {
		var ret bool
		return ret
	}
	return *o.InsecureSsl
}

// GetInsecureSslOk returns a tuple with the InsecureSsl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisteredEngine) GetInsecureSslOk() (*bool, bool) {
	if o == nil || IsNil(o.InsecureSsl) {
		return nil, false
	}
	return o.InsecureSsl, true
}

// HasInsecureSsl returns a boolean if a field has been set.
func (o *RegisteredEngine) HasInsecureSsl() bool {
	if o != nil && !IsNil(o.InsecureSsl) {
		return true
	}

	return false
}

// SetInsecureSsl gets a reference to the given bool and assigns it to the InsecureSsl field.
func (o *RegisteredEngine) SetInsecureSsl(v bool) {
	o.InsecureSsl = &v
}

// GetUnsafeSslHostnameCheck returns the UnsafeSslHostnameCheck field value if set, zero value otherwise.
func (o *RegisteredEngine) GetUnsafeSslHostnameCheck() bool {
	if o == nil || IsNil(o.UnsafeSslHostnameCheck) {
		var ret bool
		return ret
	}
	return *o.UnsafeSslHostnameCheck
}

// GetUnsafeSslHostnameCheckOk returns a tuple with the UnsafeSslHostnameCheck field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisteredEngine) GetUnsafeSslHostnameCheckOk() (*bool, bool) {
	if o == nil || IsNil(o.UnsafeSslHostnameCheck) {
		return nil, false
	}
	return o.UnsafeSslHostnameCheck, true
}

// HasUnsafeSslHostnameCheck returns a boolean if a field has been set.
func (o *RegisteredEngine) HasUnsafeSslHostnameCheck() bool {
	if o != nil && !IsNil(o.UnsafeSslHostnameCheck) {
		return true
	}

	return false
}

// SetUnsafeSslHostnameCheck gets a reference to the given bool and assigns it to the UnsafeSslHostnameCheck field.
func (o *RegisteredEngine) SetUnsafeSslHostnameCheck(v bool) {
	o.UnsafeSslHostnameCheck = &v
}

// GetTruststoreFilename returns the TruststoreFilename field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RegisteredEngine) GetTruststoreFilename() string {
	if o == nil || IsNil(o.TruststoreFilename.Get()) {
		var ret string
		return ret
	}
	return *o.TruststoreFilename.Get()
}

// GetTruststoreFilenameOk returns a tuple with the TruststoreFilename field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RegisteredEngine) GetTruststoreFilenameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.TruststoreFilename.Get(), o.TruststoreFilename.IsSet()
}

// HasTruststoreFilename returns a boolean if a field has been set.
func (o *RegisteredEngine) HasTruststoreFilename() bool {
	if o != nil && o.TruststoreFilename.IsSet() {
		return true
	}

	return false
}

// SetTruststoreFilename gets a reference to the given NullableString and assigns it to the TruststoreFilename field.
func (o *RegisteredEngine) SetTruststoreFilename(v string) {
	o.TruststoreFilename.Set(&v)
}
// SetTruststoreFilenameNil sets the value for TruststoreFilename to be an explicit nil
func (o *RegisteredEngine) SetTruststoreFilenameNil() {
	o.TruststoreFilename.Set(nil)
}

// UnsetTruststoreFilename ensures that no value is present for TruststoreFilename, not even an explicit nil
func (o *RegisteredEngine) UnsetTruststoreFilename() {
	o.TruststoreFilename.Unset()
}

// GetTruststorePassword returns the TruststorePassword field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RegisteredEngine) GetTruststorePassword() string {
	if o == nil || IsNil(o.TruststorePassword.Get()) {
		var ret string
		return ret
	}
	return *o.TruststorePassword.Get()
}

// GetTruststorePasswordOk returns a tuple with the TruststorePassword field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RegisteredEngine) GetTruststorePasswordOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.TruststorePassword.Get(), o.TruststorePassword.IsSet()
}

// HasTruststorePassword returns a boolean if a field has been set.
func (o *RegisteredEngine) HasTruststorePassword() bool {
	if o != nil && o.TruststorePassword.IsSet() {
		return true
	}

	return false
}

// SetTruststorePassword gets a reference to the given NullableString and assigns it to the TruststorePassword field.
func (o *RegisteredEngine) SetTruststorePassword(v string) {
	o.TruststorePassword.Set(&v)
}
// SetTruststorePasswordNil sets the value for TruststorePassword to be an explicit nil
func (o *RegisteredEngine) SetTruststorePasswordNil() {
	o.TruststorePassword.Set(nil)
}

// UnsetTruststorePassword ensures that no value is present for TruststorePassword, not even an explicit nil
func (o *RegisteredEngine) UnsetTruststorePassword() {
	o.TruststorePassword.Unset()
}

// GetStatus returns the Status field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RegisteredEngine) GetStatus() string {
	if o == nil || IsNil(o.Status.Get()) {
		var ret string
		return ret
	}
	return *o.Status.Get()
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RegisteredEngine) GetStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Status.Get(), o.Status.IsSet()
}

// HasStatus returns a boolean if a field has been set.
func (o *RegisteredEngine) HasStatus() bool {
	if o != nil && o.Status.IsSet() {
		return true
	}

	return false
}

// SetStatus gets a reference to the given NullableString and assigns it to the Status field.
func (o *RegisteredEngine) SetStatus(v string) {
	o.Status.Set(&v)
}
// SetStatusNil sets the value for Status to be an explicit nil
func (o *RegisteredEngine) SetStatusNil() {
	o.Status.Set(nil)
}

// UnsetStatus ensures that no value is present for Status, not even an explicit nil
func (o *RegisteredEngine) UnsetStatus() {
	o.Status.Unset()
}

// GetConnectionStatus returns the ConnectionStatus field value if set, zero value otherwise (both if not set or set to explicit null).
// Deprecated
func (o *RegisteredEngine) GetConnectionStatus() string {
	if o == nil || IsNil(o.ConnectionStatus.Get()) {
		var ret string
		return ret
	}
	return *o.ConnectionStatus.Get()
}

// GetConnectionStatusOk returns a tuple with the ConnectionStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
// Deprecated
func (o *RegisteredEngine) GetConnectionStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ConnectionStatus.Get(), o.ConnectionStatus.IsSet()
}

// HasConnectionStatus returns a boolean if a field has been set.
func (o *RegisteredEngine) HasConnectionStatus() bool {
	if o != nil && o.ConnectionStatus.IsSet() {
		return true
	}

	return false
}

// SetConnectionStatus gets a reference to the given NullableString and assigns it to the ConnectionStatus field.
// Deprecated
func (o *RegisteredEngine) SetConnectionStatus(v string) {
	o.ConnectionStatus.Set(&v)
}
// SetConnectionStatusNil sets the value for ConnectionStatus to be an explicit nil
func (o *RegisteredEngine) SetConnectionStatusNil() {
	o.ConnectionStatus.Set(nil)
}

// UnsetConnectionStatus ensures that no value is present for ConnectionStatus, not even an explicit nil
func (o *RegisteredEngine) UnsetConnectionStatus() {
	o.ConnectionStatus.Unset()
}

// GetEngineConnectionStatus returns the EngineConnectionStatus field value if set, zero value otherwise.
func (o *RegisteredEngine) GetEngineConnectionStatus() string {
	if o == nil || IsNil(o.EngineConnectionStatus) {
		var ret string
		return ret
	}
	return *o.EngineConnectionStatus
}

// GetEngineConnectionStatusOk returns a tuple with the EngineConnectionStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisteredEngine) GetEngineConnectionStatusOk() (*string, bool) {
	if o == nil || IsNil(o.EngineConnectionStatus) {
		return nil, false
	}
	return o.EngineConnectionStatus, true
}

// HasEngineConnectionStatus returns a boolean if a field has been set.
func (o *RegisteredEngine) HasEngineConnectionStatus() bool {
	if o != nil && !IsNil(o.EngineConnectionStatus) {
		return true
	}

	return false
}

// SetEngineConnectionStatus gets a reference to the given string and assigns it to the EngineConnectionStatus field.
func (o *RegisteredEngine) SetEngineConnectionStatus(v string) {
	o.EngineConnectionStatus = &v
}

// GetConnectionStatusDetails returns the ConnectionStatusDetails field value if set, zero value otherwise (both if not set or set to explicit null).
// Deprecated
func (o *RegisteredEngine) GetConnectionStatusDetails() string {
	if o == nil || IsNil(o.ConnectionStatusDetails.Get()) {
		var ret string
		return ret
	}
	return *o.ConnectionStatusDetails.Get()
}

// GetConnectionStatusDetailsOk returns a tuple with the ConnectionStatusDetails field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
// Deprecated
func (o *RegisteredEngine) GetConnectionStatusDetailsOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ConnectionStatusDetails.Get(), o.ConnectionStatusDetails.IsSet()
}

// HasConnectionStatusDetails returns a boolean if a field has been set.
func (o *RegisteredEngine) HasConnectionStatusDetails() bool {
	if o != nil && o.ConnectionStatusDetails.IsSet() {
		return true
	}

	return false
}

// SetConnectionStatusDetails gets a reference to the given NullableString and assigns it to the ConnectionStatusDetails field.
// Deprecated
func (o *RegisteredEngine) SetConnectionStatusDetails(v string) {
	o.ConnectionStatusDetails.Set(&v)
}
// SetConnectionStatusDetailsNil sets the value for ConnectionStatusDetails to be an explicit nil
func (o *RegisteredEngine) SetConnectionStatusDetailsNil() {
	o.ConnectionStatusDetails.Set(nil)
}

// UnsetConnectionStatusDetails ensures that no value is present for ConnectionStatusDetails, not even an explicit nil
func (o *RegisteredEngine) UnsetConnectionStatusDetails() {
	o.ConnectionStatusDetails.Unset()
}

// GetEngineConnectionStatusDetails returns the EngineConnectionStatusDetails field value if set, zero value otherwise.
func (o *RegisteredEngine) GetEngineConnectionStatusDetails() string {
	if o == nil || IsNil(o.EngineConnectionStatusDetails) {
		var ret string
		return ret
	}
	return *o.EngineConnectionStatusDetails
}

// GetEngineConnectionStatusDetailsOk returns a tuple with the EngineConnectionStatusDetails field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisteredEngine) GetEngineConnectionStatusDetailsOk() (*string, bool) {
	if o == nil || IsNil(o.EngineConnectionStatusDetails) {
		return nil, false
	}
	return o.EngineConnectionStatusDetails, true
}

// HasEngineConnectionStatusDetails returns a boolean if a field has been set.
func (o *RegisteredEngine) HasEngineConnectionStatusDetails() bool {
	if o != nil && !IsNil(o.EngineConnectionStatusDetails) {
		return true
	}

	return false
}

// SetEngineConnectionStatusDetails gets a reference to the given string and assigns it to the EngineConnectionStatusDetails field.
func (o *RegisteredEngine) SetEngineConnectionStatusDetails(v string) {
	o.EngineConnectionStatusDetails = &v
}

// GetUsername returns the Username field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RegisteredEngine) GetUsername() string {
	if o == nil || IsNil(o.Username.Get()) {
		var ret string
		return ret
	}
	return *o.Username.Get()
}

// GetUsernameOk returns a tuple with the Username field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RegisteredEngine) GetUsernameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Username.Get(), o.Username.IsSet()
}

// HasUsername returns a boolean if a field has been set.
func (o *RegisteredEngine) HasUsername() bool {
	if o != nil && o.Username.IsSet() {
		return true
	}

	return false
}

// SetUsername gets a reference to the given NullableString and assigns it to the Username field.
func (o *RegisteredEngine) SetUsername(v string) {
	o.Username.Set(&v)
}
// SetUsernameNil sets the value for Username to be an explicit nil
func (o *RegisteredEngine) SetUsernameNil() {
	o.Username.Set(nil)
}

// UnsetUsername ensures that no value is present for Username, not even an explicit nil
func (o *RegisteredEngine) UnsetUsername() {
	o.Username.Unset()
}

// GetPassword returns the Password field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RegisteredEngine) GetPassword() string {
	if o == nil || IsNil(o.Password.Get()) {
		var ret string
		return ret
	}
	return *o.Password.Get()
}

// GetPasswordOk returns a tuple with the Password field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RegisteredEngine) GetPasswordOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Password.Get(), o.Password.IsSet()
}

// HasPassword returns a boolean if a field has been set.
func (o *RegisteredEngine) HasPassword() bool {
	if o != nil && o.Password.IsSet() {
		return true
	}

	return false
}

// SetPassword gets a reference to the given NullableString and assigns it to the Password field.
func (o *RegisteredEngine) SetPassword(v string) {
	o.Password.Set(&v)
}
// SetPasswordNil sets the value for Password to be an explicit nil
func (o *RegisteredEngine) SetPasswordNil() {
	o.Password.Set(nil)
}

// UnsetPassword ensures that no value is present for Password, not even an explicit nil
func (o *RegisteredEngine) UnsetPassword() {
	o.Password.Unset()
}

// GetMaskingUsername returns the MaskingUsername field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RegisteredEngine) GetMaskingUsername() string {
	if o == nil || IsNil(o.MaskingUsername.Get()) {
		var ret string
		return ret
	}
	return *o.MaskingUsername.Get()
}

// GetMaskingUsernameOk returns a tuple with the MaskingUsername field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RegisteredEngine) GetMaskingUsernameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.MaskingUsername.Get(), o.MaskingUsername.IsSet()
}

// HasMaskingUsername returns a boolean if a field has been set.
func (o *RegisteredEngine) HasMaskingUsername() bool {
	if o != nil && o.MaskingUsername.IsSet() {
		return true
	}

	return false
}

// SetMaskingUsername gets a reference to the given NullableString and assigns it to the MaskingUsername field.
func (o *RegisteredEngine) SetMaskingUsername(v string) {
	o.MaskingUsername.Set(&v)
}
// SetMaskingUsernameNil sets the value for MaskingUsername to be an explicit nil
func (o *RegisteredEngine) SetMaskingUsernameNil() {
	o.MaskingUsername.Set(nil)
}

// UnsetMaskingUsername ensures that no value is present for MaskingUsername, not even an explicit nil
func (o *RegisteredEngine) UnsetMaskingUsername() {
	o.MaskingUsername.Unset()
}

// GetMaskingPassword returns the MaskingPassword field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RegisteredEngine) GetMaskingPassword() string {
	if o == nil || IsNil(o.MaskingPassword.Get()) {
		var ret string
		return ret
	}
	return *o.MaskingPassword.Get()
}

// GetMaskingPasswordOk returns a tuple with the MaskingPassword field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RegisteredEngine) GetMaskingPasswordOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.MaskingPassword.Get(), o.MaskingPassword.IsSet()
}

// HasMaskingPassword returns a boolean if a field has been set.
func (o *RegisteredEngine) HasMaskingPassword() bool {
	if o != nil && o.MaskingPassword.IsSet() {
		return true
	}

	return false
}

// SetMaskingPassword gets a reference to the given NullableString and assigns it to the MaskingPassword field.
func (o *RegisteredEngine) SetMaskingPassword(v string) {
	o.MaskingPassword.Set(&v)
}
// SetMaskingPasswordNil sets the value for MaskingPassword to be an explicit nil
func (o *RegisteredEngine) SetMaskingPasswordNil() {
	o.MaskingPassword.Set(nil)
}

// UnsetMaskingPassword ensures that no value is present for MaskingPassword, not even an explicit nil
func (o *RegisteredEngine) UnsetMaskingPassword() {
	o.MaskingPassword.Unset()
}

// GetHashicorpVaultUsernameCommandArgs returns the HashicorpVaultUsernameCommandArgs field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RegisteredEngine) GetHashicorpVaultUsernameCommandArgs() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.HashicorpVaultUsernameCommandArgs
}

// GetHashicorpVaultUsernameCommandArgsOk returns a tuple with the HashicorpVaultUsernameCommandArgs field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RegisteredEngine) GetHashicorpVaultUsernameCommandArgsOk() ([]string, bool) {
	if o == nil || IsNil(o.HashicorpVaultUsernameCommandArgs) {
		return nil, false
	}
	return o.HashicorpVaultUsernameCommandArgs, true
}

// HasHashicorpVaultUsernameCommandArgs returns a boolean if a field has been set.
func (o *RegisteredEngine) HasHashicorpVaultUsernameCommandArgs() bool {
	if o != nil && !IsNil(o.HashicorpVaultUsernameCommandArgs) {
		return true
	}

	return false
}

// SetHashicorpVaultUsernameCommandArgs gets a reference to the given []string and assigns it to the HashicorpVaultUsernameCommandArgs field.
func (o *RegisteredEngine) SetHashicorpVaultUsernameCommandArgs(v []string) {
	o.HashicorpVaultUsernameCommandArgs = v
}

// GetHashicorpVaultMaskingUsernameCommandArgs returns the HashicorpVaultMaskingUsernameCommandArgs field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RegisteredEngine) GetHashicorpVaultMaskingUsernameCommandArgs() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.HashicorpVaultMaskingUsernameCommandArgs
}

// GetHashicorpVaultMaskingUsernameCommandArgsOk returns a tuple with the HashicorpVaultMaskingUsernameCommandArgs field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RegisteredEngine) GetHashicorpVaultMaskingUsernameCommandArgsOk() ([]string, bool) {
	if o == nil || IsNil(o.HashicorpVaultMaskingUsernameCommandArgs) {
		return nil, false
	}
	return o.HashicorpVaultMaskingUsernameCommandArgs, true
}

// HasHashicorpVaultMaskingUsernameCommandArgs returns a boolean if a field has been set.
func (o *RegisteredEngine) HasHashicorpVaultMaskingUsernameCommandArgs() bool {
	if o != nil && !IsNil(o.HashicorpVaultMaskingUsernameCommandArgs) {
		return true
	}

	return false
}

// SetHashicorpVaultMaskingUsernameCommandArgs gets a reference to the given []string and assigns it to the HashicorpVaultMaskingUsernameCommandArgs field.
func (o *RegisteredEngine) SetHashicorpVaultMaskingUsernameCommandArgs(v []string) {
	o.HashicorpVaultMaskingUsernameCommandArgs = v
}

// GetHashicorpVaultPasswordCommandArgs returns the HashicorpVaultPasswordCommandArgs field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RegisteredEngine) GetHashicorpVaultPasswordCommandArgs() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.HashicorpVaultPasswordCommandArgs
}

// GetHashicorpVaultPasswordCommandArgsOk returns a tuple with the HashicorpVaultPasswordCommandArgs field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RegisteredEngine) GetHashicorpVaultPasswordCommandArgsOk() ([]string, bool) {
	if o == nil || IsNil(o.HashicorpVaultPasswordCommandArgs) {
		return nil, false
	}
	return o.HashicorpVaultPasswordCommandArgs, true
}

// HasHashicorpVaultPasswordCommandArgs returns a boolean if a field has been set.
func (o *RegisteredEngine) HasHashicorpVaultPasswordCommandArgs() bool {
	if o != nil && !IsNil(o.HashicorpVaultPasswordCommandArgs) {
		return true
	}

	return false
}

// SetHashicorpVaultPasswordCommandArgs gets a reference to the given []string and assigns it to the HashicorpVaultPasswordCommandArgs field.
func (o *RegisteredEngine) SetHashicorpVaultPasswordCommandArgs(v []string) {
	o.HashicorpVaultPasswordCommandArgs = v
}

// GetHashicorpVaultMaskingPasswordCommandArgs returns the HashicorpVaultMaskingPasswordCommandArgs field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RegisteredEngine) GetHashicorpVaultMaskingPasswordCommandArgs() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.HashicorpVaultMaskingPasswordCommandArgs
}

// GetHashicorpVaultMaskingPasswordCommandArgsOk returns a tuple with the HashicorpVaultMaskingPasswordCommandArgs field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RegisteredEngine) GetHashicorpVaultMaskingPasswordCommandArgsOk() ([]string, bool) {
	if o == nil || IsNil(o.HashicorpVaultMaskingPasswordCommandArgs) {
		return nil, false
	}
	return o.HashicorpVaultMaskingPasswordCommandArgs, true
}

// HasHashicorpVaultMaskingPasswordCommandArgs returns a boolean if a field has been set.
func (o *RegisteredEngine) HasHashicorpVaultMaskingPasswordCommandArgs() bool {
	if o != nil && !IsNil(o.HashicorpVaultMaskingPasswordCommandArgs) {
		return true
	}

	return false
}

// SetHashicorpVaultMaskingPasswordCommandArgs gets a reference to the given []string and assigns it to the HashicorpVaultMaskingPasswordCommandArgs field.
func (o *RegisteredEngine) SetHashicorpVaultMaskingPasswordCommandArgs(v []string) {
	o.HashicorpVaultMaskingPasswordCommandArgs = v
}

// GetMaskingHashicorpVaultId returns the MaskingHashicorpVaultId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RegisteredEngine) GetMaskingHashicorpVaultId() int64 {
	if o == nil || IsNil(o.MaskingHashicorpVaultId.Get()) {
		var ret int64
		return ret
	}
	return *o.MaskingHashicorpVaultId.Get()
}

// GetMaskingHashicorpVaultIdOk returns a tuple with the MaskingHashicorpVaultId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RegisteredEngine) GetMaskingHashicorpVaultIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.MaskingHashicorpVaultId.Get(), o.MaskingHashicorpVaultId.IsSet()
}

// HasMaskingHashicorpVaultId returns a boolean if a field has been set.
func (o *RegisteredEngine) HasMaskingHashicorpVaultId() bool {
	if o != nil && o.MaskingHashicorpVaultId.IsSet() {
		return true
	}

	return false
}

// SetMaskingHashicorpVaultId gets a reference to the given NullableInt64 and assigns it to the MaskingHashicorpVaultId field.
func (o *RegisteredEngine) SetMaskingHashicorpVaultId(v int64) {
	o.MaskingHashicorpVaultId.Set(&v)
}
// SetMaskingHashicorpVaultIdNil sets the value for MaskingHashicorpVaultId to be an explicit nil
func (o *RegisteredEngine) SetMaskingHashicorpVaultIdNil() {
	o.MaskingHashicorpVaultId.Set(nil)
}

// UnsetMaskingHashicorpVaultId ensures that no value is present for MaskingHashicorpVaultId, not even an explicit nil
func (o *RegisteredEngine) UnsetMaskingHashicorpVaultId() {
	o.MaskingHashicorpVaultId.Unset()
}

// GetHashicorpVaultId returns the HashicorpVaultId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RegisteredEngine) GetHashicorpVaultId() int64 {
	if o == nil || IsNil(o.HashicorpVaultId.Get()) {
		var ret int64
		return ret
	}
	return *o.HashicorpVaultId.Get()
}

// GetHashicorpVaultIdOk returns a tuple with the HashicorpVaultId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RegisteredEngine) GetHashicorpVaultIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.HashicorpVaultId.Get(), o.HashicorpVaultId.IsSet()
}

// HasHashicorpVaultId returns a boolean if a field has been set.
func (o *RegisteredEngine) HasHashicorpVaultId() bool {
	if o != nil && o.HashicorpVaultId.IsSet() {
		return true
	}

	return false
}

// SetHashicorpVaultId gets a reference to the given NullableInt64 and assigns it to the HashicorpVaultId field.
func (o *RegisteredEngine) SetHashicorpVaultId(v int64) {
	o.HashicorpVaultId.Set(&v)
}
// SetHashicorpVaultIdNil sets the value for HashicorpVaultId to be an explicit nil
func (o *RegisteredEngine) SetHashicorpVaultIdNil() {
	o.HashicorpVaultId.Set(nil)
}

// UnsetHashicorpVaultId ensures that no value is present for HashicorpVaultId, not even an explicit nil
func (o *RegisteredEngine) UnsetHashicorpVaultId() {
	o.HashicorpVaultId.Unset()
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *RegisteredEngine) GetTags() []Tag {
	if o == nil || IsNil(o.Tags) {
		var ret []Tag
		return ret
	}
	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisteredEngine) GetTagsOk() ([]Tag, bool) {
	if o == nil || IsNil(o.Tags) {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *RegisteredEngine) HasTags() bool {
	if o != nil && !IsNil(o.Tags) {
		return true
	}

	return false
}

// SetTags gets a reference to the given []Tag and assigns it to the Tags field.
func (o *RegisteredEngine) SetTags(v []Tag) {
	o.Tags = v
}

// GetMaskingMemoryUsed returns the MaskingMemoryUsed field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RegisteredEngine) GetMaskingMemoryUsed() int64 {
	if o == nil || IsNil(o.MaskingMemoryUsed.Get()) {
		var ret int64
		return ret
	}
	return *o.MaskingMemoryUsed.Get()
}

// GetMaskingMemoryUsedOk returns a tuple with the MaskingMemoryUsed field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RegisteredEngine) GetMaskingMemoryUsedOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.MaskingMemoryUsed.Get(), o.MaskingMemoryUsed.IsSet()
}

// HasMaskingMemoryUsed returns a boolean if a field has been set.
func (o *RegisteredEngine) HasMaskingMemoryUsed() bool {
	if o != nil && o.MaskingMemoryUsed.IsSet() {
		return true
	}

	return false
}

// SetMaskingMemoryUsed gets a reference to the given NullableInt64 and assigns it to the MaskingMemoryUsed field.
func (o *RegisteredEngine) SetMaskingMemoryUsed(v int64) {
	o.MaskingMemoryUsed.Set(&v)
}
// SetMaskingMemoryUsedNil sets the value for MaskingMemoryUsed to be an explicit nil
func (o *RegisteredEngine) SetMaskingMemoryUsedNil() {
	o.MaskingMemoryUsed.Set(nil)
}

// UnsetMaskingMemoryUsed ensures that no value is present for MaskingMemoryUsed, not even an explicit nil
func (o *RegisteredEngine) UnsetMaskingMemoryUsed() {
	o.MaskingMemoryUsed.Unset()
}

// GetMaskingAllocatedMemory returns the MaskingAllocatedMemory field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RegisteredEngine) GetMaskingAllocatedMemory() int64 {
	if o == nil || IsNil(o.MaskingAllocatedMemory.Get()) {
		var ret int64
		return ret
	}
	return *o.MaskingAllocatedMemory.Get()
}

// GetMaskingAllocatedMemoryOk returns a tuple with the MaskingAllocatedMemory field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RegisteredEngine) GetMaskingAllocatedMemoryOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.MaskingAllocatedMemory.Get(), o.MaskingAllocatedMemory.IsSet()
}

// HasMaskingAllocatedMemory returns a boolean if a field has been set.
func (o *RegisteredEngine) HasMaskingAllocatedMemory() bool {
	if o != nil && o.MaskingAllocatedMemory.IsSet() {
		return true
	}

	return false
}

// SetMaskingAllocatedMemory gets a reference to the given NullableInt64 and assigns it to the MaskingAllocatedMemory field.
func (o *RegisteredEngine) SetMaskingAllocatedMemory(v int64) {
	o.MaskingAllocatedMemory.Set(&v)
}
// SetMaskingAllocatedMemoryNil sets the value for MaskingAllocatedMemory to be an explicit nil
func (o *RegisteredEngine) SetMaskingAllocatedMemoryNil() {
	o.MaskingAllocatedMemory.Set(nil)
}

// UnsetMaskingAllocatedMemory ensures that no value is present for MaskingAllocatedMemory, not even an explicit nil
func (o *RegisteredEngine) UnsetMaskingAllocatedMemory() {
	o.MaskingAllocatedMemory.Unset()
}

// GetMaskingJobsRunning returns the MaskingJobsRunning field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RegisteredEngine) GetMaskingJobsRunning() int32 {
	if o == nil || IsNil(o.MaskingJobsRunning.Get()) {
		var ret int32
		return ret
	}
	return *o.MaskingJobsRunning.Get()
}

// GetMaskingJobsRunningOk returns a tuple with the MaskingJobsRunning field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RegisteredEngine) GetMaskingJobsRunningOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.MaskingJobsRunning.Get(), o.MaskingJobsRunning.IsSet()
}

// HasMaskingJobsRunning returns a boolean if a field has been set.
func (o *RegisteredEngine) HasMaskingJobsRunning() bool {
	if o != nil && o.MaskingJobsRunning.IsSet() {
		return true
	}

	return false
}

// SetMaskingJobsRunning gets a reference to the given NullableInt32 and assigns it to the MaskingJobsRunning field.
func (o *RegisteredEngine) SetMaskingJobsRunning(v int32) {
	o.MaskingJobsRunning.Set(&v)
}
// SetMaskingJobsRunningNil sets the value for MaskingJobsRunning to be an explicit nil
func (o *RegisteredEngine) SetMaskingJobsRunningNil() {
	o.MaskingJobsRunning.Set(nil)
}

// UnsetMaskingJobsRunning ensures that no value is present for MaskingJobsRunning, not even an explicit nil
func (o *RegisteredEngine) UnsetMaskingJobsRunning() {
	o.MaskingJobsRunning.Unset()
}

// GetMaskingMaxConcurrentJobs returns the MaskingMaxConcurrentJobs field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RegisteredEngine) GetMaskingMaxConcurrentJobs() int32 {
	if o == nil || IsNil(o.MaskingMaxConcurrentJobs.Get()) {
		var ret int32
		return ret
	}
	return *o.MaskingMaxConcurrentJobs.Get()
}

// GetMaskingMaxConcurrentJobsOk returns a tuple with the MaskingMaxConcurrentJobs field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RegisteredEngine) GetMaskingMaxConcurrentJobsOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.MaskingMaxConcurrentJobs.Get(), o.MaskingMaxConcurrentJobs.IsSet()
}

// HasMaskingMaxConcurrentJobs returns a boolean if a field has been set.
func (o *RegisteredEngine) HasMaskingMaxConcurrentJobs() bool {
	if o != nil && o.MaskingMaxConcurrentJobs.IsSet() {
		return true
	}

	return false
}

// SetMaskingMaxConcurrentJobs gets a reference to the given NullableInt32 and assigns it to the MaskingMaxConcurrentJobs field.
func (o *RegisteredEngine) SetMaskingMaxConcurrentJobs(v int32) {
	o.MaskingMaxConcurrentJobs.Set(&v)
}
// SetMaskingMaxConcurrentJobsNil sets the value for MaskingMaxConcurrentJobs to be an explicit nil
func (o *RegisteredEngine) SetMaskingMaxConcurrentJobsNil() {
	o.MaskingMaxConcurrentJobs.Set(nil)
}

// UnsetMaskingMaxConcurrentJobs ensures that no value is present for MaskingMaxConcurrentJobs, not even an explicit nil
func (o *RegisteredEngine) UnsetMaskingMaxConcurrentJobs() {
	o.MaskingMaxConcurrentJobs.Unset()
}

// GetMaskingAvailableCores returns the MaskingAvailableCores field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RegisteredEngine) GetMaskingAvailableCores() int32 {
	if o == nil || IsNil(o.MaskingAvailableCores.Get()) {
		var ret int32
		return ret
	}
	return *o.MaskingAvailableCores.Get()
}

// GetMaskingAvailableCoresOk returns a tuple with the MaskingAvailableCores field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RegisteredEngine) GetMaskingAvailableCoresOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.MaskingAvailableCores.Get(), o.MaskingAvailableCores.IsSet()
}

// HasMaskingAvailableCores returns a boolean if a field has been set.
func (o *RegisteredEngine) HasMaskingAvailableCores() bool {
	if o != nil && o.MaskingAvailableCores.IsSet() {
		return true
	}

	return false
}

// SetMaskingAvailableCores gets a reference to the given NullableInt32 and assigns it to the MaskingAvailableCores field.
func (o *RegisteredEngine) SetMaskingAvailableCores(v int32) {
	o.MaskingAvailableCores.Set(&v)
}
// SetMaskingAvailableCoresNil sets the value for MaskingAvailableCores to be an explicit nil
func (o *RegisteredEngine) SetMaskingAvailableCoresNil() {
	o.MaskingAvailableCores.Set(nil)
}

// UnsetMaskingAvailableCores ensures that no value is present for MaskingAvailableCores, not even an explicit nil
func (o *RegisteredEngine) UnsetMaskingAvailableCores() {
	o.MaskingAvailableCores.Unset()
}

// GetHyperscaleInstanceIds returns the HyperscaleInstanceIds field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RegisteredEngine) GetHyperscaleInstanceIds() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.HyperscaleInstanceIds
}

// GetHyperscaleInstanceIdsOk returns a tuple with the HyperscaleInstanceIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RegisteredEngine) GetHyperscaleInstanceIdsOk() ([]string, bool) {
	if o == nil || IsNil(o.HyperscaleInstanceIds) {
		return nil, false
	}
	return o.HyperscaleInstanceIds, true
}

// HasHyperscaleInstanceIds returns a boolean if a field has been set.
func (o *RegisteredEngine) HasHyperscaleInstanceIds() bool {
	if o != nil && !IsNil(o.HyperscaleInstanceIds) {
		return true
	}

	return false
}

// SetHyperscaleInstanceIds gets a reference to the given []string and assigns it to the HyperscaleInstanceIds field.
func (o *RegisteredEngine) SetHyperscaleInstanceIds(v []string) {
	o.HyperscaleInstanceIds = v
}

// GetHyperscaleTruststoreFilename returns the HyperscaleTruststoreFilename field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RegisteredEngine) GetHyperscaleTruststoreFilename() string {
	if o == nil || IsNil(o.HyperscaleTruststoreFilename.Get()) {
		var ret string
		return ret
	}
	return *o.HyperscaleTruststoreFilename.Get()
}

// GetHyperscaleTruststoreFilenameOk returns a tuple with the HyperscaleTruststoreFilename field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RegisteredEngine) GetHyperscaleTruststoreFilenameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.HyperscaleTruststoreFilename.Get(), o.HyperscaleTruststoreFilename.IsSet()
}

// HasHyperscaleTruststoreFilename returns a boolean if a field has been set.
func (o *RegisteredEngine) HasHyperscaleTruststoreFilename() bool {
	if o != nil && o.HyperscaleTruststoreFilename.IsSet() {
		return true
	}

	return false
}

// SetHyperscaleTruststoreFilename gets a reference to the given NullableString and assigns it to the HyperscaleTruststoreFilename field.
func (o *RegisteredEngine) SetHyperscaleTruststoreFilename(v string) {
	o.HyperscaleTruststoreFilename.Set(&v)
}
// SetHyperscaleTruststoreFilenameNil sets the value for HyperscaleTruststoreFilename to be an explicit nil
func (o *RegisteredEngine) SetHyperscaleTruststoreFilenameNil() {
	o.HyperscaleTruststoreFilename.Set(nil)
}

// UnsetHyperscaleTruststoreFilename ensures that no value is present for HyperscaleTruststoreFilename, not even an explicit nil
func (o *RegisteredEngine) UnsetHyperscaleTruststoreFilename() {
	o.HyperscaleTruststoreFilename.Unset()
}

// GetHyperscaleTruststorePassword returns the HyperscaleTruststorePassword field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RegisteredEngine) GetHyperscaleTruststorePassword() string {
	if o == nil || IsNil(o.HyperscaleTruststorePassword.Get()) {
		var ret string
		return ret
	}
	return *o.HyperscaleTruststorePassword.Get()
}

// GetHyperscaleTruststorePasswordOk returns a tuple with the HyperscaleTruststorePassword field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RegisteredEngine) GetHyperscaleTruststorePasswordOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.HyperscaleTruststorePassword.Get(), o.HyperscaleTruststorePassword.IsSet()
}

// HasHyperscaleTruststorePassword returns a boolean if a field has been set.
func (o *RegisteredEngine) HasHyperscaleTruststorePassword() bool {
	if o != nil && o.HyperscaleTruststorePassword.IsSet() {
		return true
	}

	return false
}

// SetHyperscaleTruststorePassword gets a reference to the given NullableString and assigns it to the HyperscaleTruststorePassword field.
func (o *RegisteredEngine) SetHyperscaleTruststorePassword(v string) {
	o.HyperscaleTruststorePassword.Set(&v)
}
// SetHyperscaleTruststorePasswordNil sets the value for HyperscaleTruststorePassword to be an explicit nil
func (o *RegisteredEngine) SetHyperscaleTruststorePasswordNil() {
	o.HyperscaleTruststorePassword.Set(nil)
}

// UnsetHyperscaleTruststorePassword ensures that no value is present for HyperscaleTruststorePassword, not even an explicit nil
func (o *RegisteredEngine) UnsetHyperscaleTruststorePassword() {
	o.HyperscaleTruststorePassword.Unset()
}

func (o RegisteredEngine) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RegisteredEngine) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if o.Uuid.IsSet() {
		toSerialize["uuid"] = o.Uuid.Get()
	}
	if o.Type.IsSet() {
		toSerialize["type"] = o.Type.Get()
	}
	if o.Version.IsSet() {
		toSerialize["version"] = o.Version.Get()
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.SshPublicKey) {
		toSerialize["ssh_public_key"] = o.SshPublicKey
	}
	if !IsNil(o.Hostname) {
		toSerialize["hostname"] = o.Hostname
	}
	if o.CpuCoreCount.IsSet() {
		toSerialize["cpu_core_count"] = o.CpuCoreCount.Get()
	}
	if o.MemorySize.IsSet() {
		toSerialize["memory_size"] = o.MemorySize.Get()
	}
	if o.DataStorageCapacity.IsSet() {
		toSerialize["data_storage_capacity"] = o.DataStorageCapacity.Get()
	}
	if o.DataStorageUsed.IsSet() {
		toSerialize["data_storage_used"] = o.DataStorageUsed.Get()
	}
	if !IsNil(o.InsecureSsl) {
		toSerialize["insecure_ssl"] = o.InsecureSsl
	}
	if !IsNil(o.UnsafeSslHostnameCheck) {
		toSerialize["unsafe_ssl_hostname_check"] = o.UnsafeSslHostnameCheck
	}
	if o.TruststoreFilename.IsSet() {
		toSerialize["truststore_filename"] = o.TruststoreFilename.Get()
	}
	if o.TruststorePassword.IsSet() {
		toSerialize["truststore_password"] = o.TruststorePassword.Get()
	}
	if o.Status.IsSet() {
		toSerialize["status"] = o.Status.Get()
	}
	if o.ConnectionStatus.IsSet() {
		toSerialize["connection_status"] = o.ConnectionStatus.Get()
	}
	if !IsNil(o.EngineConnectionStatus) {
		toSerialize["engine_connection_status"] = o.EngineConnectionStatus
	}
	if o.ConnectionStatusDetails.IsSet() {
		toSerialize["connection_status_details"] = o.ConnectionStatusDetails.Get()
	}
	if !IsNil(o.EngineConnectionStatusDetails) {
		toSerialize["engine_connection_status_details"] = o.EngineConnectionStatusDetails
	}
	if o.Username.IsSet() {
		toSerialize["username"] = o.Username.Get()
	}
	if o.Password.IsSet() {
		toSerialize["password"] = o.Password.Get()
	}
	if o.MaskingUsername.IsSet() {
		toSerialize["masking_username"] = o.MaskingUsername.Get()
	}
	if o.MaskingPassword.IsSet() {
		toSerialize["masking_password"] = o.MaskingPassword.Get()
	}
	if o.HashicorpVaultUsernameCommandArgs != nil {
		toSerialize["hashicorp_vault_username_command_args"] = o.HashicorpVaultUsernameCommandArgs
	}
	if o.HashicorpVaultMaskingUsernameCommandArgs != nil {
		toSerialize["hashicorp_vault_masking_username_command_args"] = o.HashicorpVaultMaskingUsernameCommandArgs
	}
	if o.HashicorpVaultPasswordCommandArgs != nil {
		toSerialize["hashicorp_vault_password_command_args"] = o.HashicorpVaultPasswordCommandArgs
	}
	if o.HashicorpVaultMaskingPasswordCommandArgs != nil {
		toSerialize["hashicorp_vault_masking_password_command_args"] = o.HashicorpVaultMaskingPasswordCommandArgs
	}
	if o.MaskingHashicorpVaultId.IsSet() {
		toSerialize["masking_hashicorp_vault_id"] = o.MaskingHashicorpVaultId.Get()
	}
	if o.HashicorpVaultId.IsSet() {
		toSerialize["hashicorp_vault_id"] = o.HashicorpVaultId.Get()
	}
	if !IsNil(o.Tags) {
		toSerialize["tags"] = o.Tags
	}
	if o.MaskingMemoryUsed.IsSet() {
		toSerialize["masking_memory_used"] = o.MaskingMemoryUsed.Get()
	}
	if o.MaskingAllocatedMemory.IsSet() {
		toSerialize["masking_allocated_memory"] = o.MaskingAllocatedMemory.Get()
	}
	if o.MaskingJobsRunning.IsSet() {
		toSerialize["masking_jobs_running"] = o.MaskingJobsRunning.Get()
	}
	if o.MaskingMaxConcurrentJobs.IsSet() {
		toSerialize["masking_max_concurrent_jobs"] = o.MaskingMaxConcurrentJobs.Get()
	}
	if o.MaskingAvailableCores.IsSet() {
		toSerialize["masking_available_cores"] = o.MaskingAvailableCores.Get()
	}
	if o.HyperscaleInstanceIds != nil {
		toSerialize["hyperscale_instance_ids"] = o.HyperscaleInstanceIds
	}
	if o.HyperscaleTruststoreFilename.IsSet() {
		toSerialize["hyperscale_truststore_filename"] = o.HyperscaleTruststoreFilename.Get()
	}
	if o.HyperscaleTruststorePassword.IsSet() {
		toSerialize["hyperscale_truststore_password"] = o.HyperscaleTruststorePassword.Get()
	}
	return toSerialize, nil
}

type NullableRegisteredEngine struct {
	value *RegisteredEngine
	isSet bool
}

func (v NullableRegisteredEngine) Get() *RegisteredEngine {
	return v.value
}

func (v *NullableRegisteredEngine) Set(val *RegisteredEngine) {
	v.value = val
	v.isSet = true
}

func (v NullableRegisteredEngine) IsSet() bool {
	return v.isSet
}

func (v *NullableRegisteredEngine) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRegisteredEngine(val *RegisteredEngine) *NullableRegisteredEngine {
	return &NullableRegisteredEngine{value: val, isSet: true}
}

func (v NullableRegisteredEngine) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRegisteredEngine) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


