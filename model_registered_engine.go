/*
Delphix API Gateway

Delphix API Gateway API

API version: 1.0
Contact: support@delphix.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// RegisteredEngine A registered engine's connection and authentication settings.
type RegisteredEngine struct {
	// The Engine object entity ID.
	Id *int64 `json:"id,omitempty"`
	// The unique identifier generated by this engine.
	Uuid NullableString `json:"uuid,omitempty"`
	// The type of this engine.
	Type NullableString `json:"type,omitempty"`
	// The engine version.
	Version NullableString `json:"version,omitempty"`
	// The name of this engine.
	Name string `json:"name"`
	// The hostname of this engine.
	Hostname string `json:"hostname"`
	// The total number of CPU cores on this engine.
	CpuCoreCount NullableInt32 `json:"cpu_core_count,omitempty"`
	// The total amount of memory on this engine, in bytes.
	MemorySize NullableInt64 `json:"memory_size,omitempty"`
	// The total amount of storage allocated for engine objects and system metadata, in bytes.
	DataStorageCapacity NullableInt64 `json:"data_storage_capacity,omitempty"`
	// The amount of storage used by engine objects and system metadata, in bytes.
	DataStorageUsed NullableInt64 `json:"data_storage_used,omitempty"`
	// Allow connections to the engine over HTTPs without validating the TLS certificate. Even though the connection to the engine might be performed over HTTPs, setting this property eliminates the protection against a man-in-the-middle attach for connections to this engine. Instead, consider creating a truststore with a Certificate Authority to validate the engine's certificate, and set the truststore_path propery. 
	InsecureSsl *bool `json:"insecure_ssl,omitempty"`
	// Ignore validation of the name associated to the TLS certificate when connecting to the engine over HTTPs. Setting this value must only be done if the TLS certificate of the engine does not match the hostname, and the TLS configuration of the engine cannot be fixed. Setting this property reduces the protection against a man-in-the-middle attack for connections to this engine. This is ignored if insecure_ssl is set. 
	UnsafeSslHostnameCheck *bool `json:"unsafe_ssl_hostname_check,omitempty"`
	// File name of a truststore which can be used to validate the TLS certificate of the engine. The truststore must be available at /etc/config/certs/<truststore_filename> 
	TruststoreFilename NullableString `json:"truststore_filename,omitempty"`
	// Password to read the truststore. 
	TruststorePassword NullableString `json:"truststore_password,omitempty"`
	// the status of the engine 
	Status NullableString `json:"status,omitempty"`
	Username NullableString `json:"username,omitempty"`
	Password NullableString `json:"password,omitempty"`
	// Arguments to pass to the Vault CLI tool to retrieve the username for the engine.
	HashicorpVaultUsernameCommandArgs []string `json:"hashicorp_vault_username_command_args,omitempty"`
	// Arguments to pass to the Vault CLI tool to retrieve the password for the engine.
	HashicorpVaultPasswordCommandArgs []string `json:"hashicorp_vault_password_command_args,omitempty"`
	// Reference to the Hashicorp vault to use to retrieve engine credentials.
	HashicorpVaultId NullableInt64 `json:"hashicorp_vault_id,omitempty"`
}

// NewRegisteredEngine instantiates a new RegisteredEngine object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRegisteredEngine(name string, hostname string) *RegisteredEngine {
	this := RegisteredEngine{}
	this.Name = name
	this.Hostname = hostname
	var insecureSsl bool = false
	this.InsecureSsl = &insecureSsl
	var unsafeSslHostnameCheck bool = false
	this.UnsafeSslHostnameCheck = &unsafeSslHostnameCheck
	return &this
}

// NewRegisteredEngineWithDefaults instantiates a new RegisteredEngine object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRegisteredEngineWithDefaults() *RegisteredEngine {
	this := RegisteredEngine{}
	var insecureSsl bool = false
	this.InsecureSsl = &insecureSsl
	var unsafeSslHostnameCheck bool = false
	this.UnsafeSslHostnameCheck = &unsafeSslHostnameCheck
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *RegisteredEngine) GetId() int64 {
	if o == nil || o.Id == nil {
		var ret int64
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisteredEngine) GetIdOk() (*int64, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *RegisteredEngine) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given int64 and assigns it to the Id field.
func (o *RegisteredEngine) SetId(v int64) {
	o.Id = &v
}

// GetUuid returns the Uuid field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RegisteredEngine) GetUuid() string {
	if o == nil || o.Uuid.Get() == nil {
		var ret string
		return ret
	}
	return *o.Uuid.Get()
}

// GetUuidOk returns a tuple with the Uuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RegisteredEngine) GetUuidOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Uuid.Get(), o.Uuid.IsSet()
}

// HasUuid returns a boolean if a field has been set.
func (o *RegisteredEngine) HasUuid() bool {
	if o != nil && o.Uuid.IsSet() {
		return true
	}

	return false
}

// SetUuid gets a reference to the given NullableString and assigns it to the Uuid field.
func (o *RegisteredEngine) SetUuid(v string) {
	o.Uuid.Set(&v)
}
// SetUuidNil sets the value for Uuid to be an explicit nil
func (o *RegisteredEngine) SetUuidNil() {
	o.Uuid.Set(nil)
}

// UnsetUuid ensures that no value is present for Uuid, not even an explicit nil
func (o *RegisteredEngine) UnsetUuid() {
	o.Uuid.Unset()
}

// GetType returns the Type field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RegisteredEngine) GetType() string {
	if o == nil || o.Type.Get() == nil {
		var ret string
		return ret
	}
	return *o.Type.Get()
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RegisteredEngine) GetTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Type.Get(), o.Type.IsSet()
}

// HasType returns a boolean if a field has been set.
func (o *RegisteredEngine) HasType() bool {
	if o != nil && o.Type.IsSet() {
		return true
	}

	return false
}

// SetType gets a reference to the given NullableString and assigns it to the Type field.
func (o *RegisteredEngine) SetType(v string) {
	o.Type.Set(&v)
}
// SetTypeNil sets the value for Type to be an explicit nil
func (o *RegisteredEngine) SetTypeNil() {
	o.Type.Set(nil)
}

// UnsetType ensures that no value is present for Type, not even an explicit nil
func (o *RegisteredEngine) UnsetType() {
	o.Type.Unset()
}

// GetVersion returns the Version field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RegisteredEngine) GetVersion() string {
	if o == nil || o.Version.Get() == nil {
		var ret string
		return ret
	}
	return *o.Version.Get()
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RegisteredEngine) GetVersionOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Version.Get(), o.Version.IsSet()
}

// HasVersion returns a boolean if a field has been set.
func (o *RegisteredEngine) HasVersion() bool {
	if o != nil && o.Version.IsSet() {
		return true
	}

	return false
}

// SetVersion gets a reference to the given NullableString and assigns it to the Version field.
func (o *RegisteredEngine) SetVersion(v string) {
	o.Version.Set(&v)
}
// SetVersionNil sets the value for Version to be an explicit nil
func (o *RegisteredEngine) SetVersionNil() {
	o.Version.Set(nil)
}

// UnsetVersion ensures that no value is present for Version, not even an explicit nil
func (o *RegisteredEngine) UnsetVersion() {
	o.Version.Unset()
}

// GetName returns the Name field value
func (o *RegisteredEngine) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *RegisteredEngine) GetNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *RegisteredEngine) SetName(v string) {
	o.Name = v
}

// GetHostname returns the Hostname field value
func (o *RegisteredEngine) GetHostname() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Hostname
}

// GetHostnameOk returns a tuple with the Hostname field value
// and a boolean to check if the value has been set.
func (o *RegisteredEngine) GetHostnameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Hostname, true
}

// SetHostname sets field value
func (o *RegisteredEngine) SetHostname(v string) {
	o.Hostname = v
}

// GetCpuCoreCount returns the CpuCoreCount field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RegisteredEngine) GetCpuCoreCount() int32 {
	if o == nil || o.CpuCoreCount.Get() == nil {
		var ret int32
		return ret
	}
	return *o.CpuCoreCount.Get()
}

// GetCpuCoreCountOk returns a tuple with the CpuCoreCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RegisteredEngine) GetCpuCoreCountOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.CpuCoreCount.Get(), o.CpuCoreCount.IsSet()
}

// HasCpuCoreCount returns a boolean if a field has been set.
func (o *RegisteredEngine) HasCpuCoreCount() bool {
	if o != nil && o.CpuCoreCount.IsSet() {
		return true
	}

	return false
}

// SetCpuCoreCount gets a reference to the given NullableInt32 and assigns it to the CpuCoreCount field.
func (o *RegisteredEngine) SetCpuCoreCount(v int32) {
	o.CpuCoreCount.Set(&v)
}
// SetCpuCoreCountNil sets the value for CpuCoreCount to be an explicit nil
func (o *RegisteredEngine) SetCpuCoreCountNil() {
	o.CpuCoreCount.Set(nil)
}

// UnsetCpuCoreCount ensures that no value is present for CpuCoreCount, not even an explicit nil
func (o *RegisteredEngine) UnsetCpuCoreCount() {
	o.CpuCoreCount.Unset()
}

// GetMemorySize returns the MemorySize field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RegisteredEngine) GetMemorySize() int64 {
	if o == nil || o.MemorySize.Get() == nil {
		var ret int64
		return ret
	}
	return *o.MemorySize.Get()
}

// GetMemorySizeOk returns a tuple with the MemorySize field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RegisteredEngine) GetMemorySizeOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.MemorySize.Get(), o.MemorySize.IsSet()
}

// HasMemorySize returns a boolean if a field has been set.
func (o *RegisteredEngine) HasMemorySize() bool {
	if o != nil && o.MemorySize.IsSet() {
		return true
	}

	return false
}

// SetMemorySize gets a reference to the given NullableInt64 and assigns it to the MemorySize field.
func (o *RegisteredEngine) SetMemorySize(v int64) {
	o.MemorySize.Set(&v)
}
// SetMemorySizeNil sets the value for MemorySize to be an explicit nil
func (o *RegisteredEngine) SetMemorySizeNil() {
	o.MemorySize.Set(nil)
}

// UnsetMemorySize ensures that no value is present for MemorySize, not even an explicit nil
func (o *RegisteredEngine) UnsetMemorySize() {
	o.MemorySize.Unset()
}

// GetDataStorageCapacity returns the DataStorageCapacity field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RegisteredEngine) GetDataStorageCapacity() int64 {
	if o == nil || o.DataStorageCapacity.Get() == nil {
		var ret int64
		return ret
	}
	return *o.DataStorageCapacity.Get()
}

// GetDataStorageCapacityOk returns a tuple with the DataStorageCapacity field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RegisteredEngine) GetDataStorageCapacityOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.DataStorageCapacity.Get(), o.DataStorageCapacity.IsSet()
}

// HasDataStorageCapacity returns a boolean if a field has been set.
func (o *RegisteredEngine) HasDataStorageCapacity() bool {
	if o != nil && o.DataStorageCapacity.IsSet() {
		return true
	}

	return false
}

// SetDataStorageCapacity gets a reference to the given NullableInt64 and assigns it to the DataStorageCapacity field.
func (o *RegisteredEngine) SetDataStorageCapacity(v int64) {
	o.DataStorageCapacity.Set(&v)
}
// SetDataStorageCapacityNil sets the value for DataStorageCapacity to be an explicit nil
func (o *RegisteredEngine) SetDataStorageCapacityNil() {
	o.DataStorageCapacity.Set(nil)
}

// UnsetDataStorageCapacity ensures that no value is present for DataStorageCapacity, not even an explicit nil
func (o *RegisteredEngine) UnsetDataStorageCapacity() {
	o.DataStorageCapacity.Unset()
}

// GetDataStorageUsed returns the DataStorageUsed field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RegisteredEngine) GetDataStorageUsed() int64 {
	if o == nil || o.DataStorageUsed.Get() == nil {
		var ret int64
		return ret
	}
	return *o.DataStorageUsed.Get()
}

// GetDataStorageUsedOk returns a tuple with the DataStorageUsed field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RegisteredEngine) GetDataStorageUsedOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.DataStorageUsed.Get(), o.DataStorageUsed.IsSet()
}

// HasDataStorageUsed returns a boolean if a field has been set.
func (o *RegisteredEngine) HasDataStorageUsed() bool {
	if o != nil && o.DataStorageUsed.IsSet() {
		return true
	}

	return false
}

// SetDataStorageUsed gets a reference to the given NullableInt64 and assigns it to the DataStorageUsed field.
func (o *RegisteredEngine) SetDataStorageUsed(v int64) {
	o.DataStorageUsed.Set(&v)
}
// SetDataStorageUsedNil sets the value for DataStorageUsed to be an explicit nil
func (o *RegisteredEngine) SetDataStorageUsedNil() {
	o.DataStorageUsed.Set(nil)
}

// UnsetDataStorageUsed ensures that no value is present for DataStorageUsed, not even an explicit nil
func (o *RegisteredEngine) UnsetDataStorageUsed() {
	o.DataStorageUsed.Unset()
}

// GetInsecureSsl returns the InsecureSsl field value if set, zero value otherwise.
func (o *RegisteredEngine) GetInsecureSsl() bool {
	if o == nil || o.InsecureSsl == nil {
		var ret bool
		return ret
	}
	return *o.InsecureSsl
}

// GetInsecureSslOk returns a tuple with the InsecureSsl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisteredEngine) GetInsecureSslOk() (*bool, bool) {
	if o == nil || o.InsecureSsl == nil {
		return nil, false
	}
	return o.InsecureSsl, true
}

// HasInsecureSsl returns a boolean if a field has been set.
func (o *RegisteredEngine) HasInsecureSsl() bool {
	if o != nil && o.InsecureSsl != nil {
		return true
	}

	return false
}

// SetInsecureSsl gets a reference to the given bool and assigns it to the InsecureSsl field.
func (o *RegisteredEngine) SetInsecureSsl(v bool) {
	o.InsecureSsl = &v
}

// GetUnsafeSslHostnameCheck returns the UnsafeSslHostnameCheck field value if set, zero value otherwise.
func (o *RegisteredEngine) GetUnsafeSslHostnameCheck() bool {
	if o == nil || o.UnsafeSslHostnameCheck == nil {
		var ret bool
		return ret
	}
	return *o.UnsafeSslHostnameCheck
}

// GetUnsafeSslHostnameCheckOk returns a tuple with the UnsafeSslHostnameCheck field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisteredEngine) GetUnsafeSslHostnameCheckOk() (*bool, bool) {
	if o == nil || o.UnsafeSslHostnameCheck == nil {
		return nil, false
	}
	return o.UnsafeSslHostnameCheck, true
}

// HasUnsafeSslHostnameCheck returns a boolean if a field has been set.
func (o *RegisteredEngine) HasUnsafeSslHostnameCheck() bool {
	if o != nil && o.UnsafeSslHostnameCheck != nil {
		return true
	}

	return false
}

// SetUnsafeSslHostnameCheck gets a reference to the given bool and assigns it to the UnsafeSslHostnameCheck field.
func (o *RegisteredEngine) SetUnsafeSslHostnameCheck(v bool) {
	o.UnsafeSslHostnameCheck = &v
}

// GetTruststoreFilename returns the TruststoreFilename field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RegisteredEngine) GetTruststoreFilename() string {
	if o == nil || o.TruststoreFilename.Get() == nil {
		var ret string
		return ret
	}
	return *o.TruststoreFilename.Get()
}

// GetTruststoreFilenameOk returns a tuple with the TruststoreFilename field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RegisteredEngine) GetTruststoreFilenameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.TruststoreFilename.Get(), o.TruststoreFilename.IsSet()
}

// HasTruststoreFilename returns a boolean if a field has been set.
func (o *RegisteredEngine) HasTruststoreFilename() bool {
	if o != nil && o.TruststoreFilename.IsSet() {
		return true
	}

	return false
}

// SetTruststoreFilename gets a reference to the given NullableString and assigns it to the TruststoreFilename field.
func (o *RegisteredEngine) SetTruststoreFilename(v string) {
	o.TruststoreFilename.Set(&v)
}
// SetTruststoreFilenameNil sets the value for TruststoreFilename to be an explicit nil
func (o *RegisteredEngine) SetTruststoreFilenameNil() {
	o.TruststoreFilename.Set(nil)
}

// UnsetTruststoreFilename ensures that no value is present for TruststoreFilename, not even an explicit nil
func (o *RegisteredEngine) UnsetTruststoreFilename() {
	o.TruststoreFilename.Unset()
}

// GetTruststorePassword returns the TruststorePassword field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RegisteredEngine) GetTruststorePassword() string {
	if o == nil || o.TruststorePassword.Get() == nil {
		var ret string
		return ret
	}
	return *o.TruststorePassword.Get()
}

// GetTruststorePasswordOk returns a tuple with the TruststorePassword field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RegisteredEngine) GetTruststorePasswordOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.TruststorePassword.Get(), o.TruststorePassword.IsSet()
}

// HasTruststorePassword returns a boolean if a field has been set.
func (o *RegisteredEngine) HasTruststorePassword() bool {
	if o != nil && o.TruststorePassword.IsSet() {
		return true
	}

	return false
}

// SetTruststorePassword gets a reference to the given NullableString and assigns it to the TruststorePassword field.
func (o *RegisteredEngine) SetTruststorePassword(v string) {
	o.TruststorePassword.Set(&v)
}
// SetTruststorePasswordNil sets the value for TruststorePassword to be an explicit nil
func (o *RegisteredEngine) SetTruststorePasswordNil() {
	o.TruststorePassword.Set(nil)
}

// UnsetTruststorePassword ensures that no value is present for TruststorePassword, not even an explicit nil
func (o *RegisteredEngine) UnsetTruststorePassword() {
	o.TruststorePassword.Unset()
}

// GetStatus returns the Status field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RegisteredEngine) GetStatus() string {
	if o == nil || o.Status.Get() == nil {
		var ret string
		return ret
	}
	return *o.Status.Get()
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RegisteredEngine) GetStatusOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Status.Get(), o.Status.IsSet()
}

// HasStatus returns a boolean if a field has been set.
func (o *RegisteredEngine) HasStatus() bool {
	if o != nil && o.Status.IsSet() {
		return true
	}

	return false
}

// SetStatus gets a reference to the given NullableString and assigns it to the Status field.
func (o *RegisteredEngine) SetStatus(v string) {
	o.Status.Set(&v)
}
// SetStatusNil sets the value for Status to be an explicit nil
func (o *RegisteredEngine) SetStatusNil() {
	o.Status.Set(nil)
}

// UnsetStatus ensures that no value is present for Status, not even an explicit nil
func (o *RegisteredEngine) UnsetStatus() {
	o.Status.Unset()
}

// GetUsername returns the Username field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RegisteredEngine) GetUsername() string {
	if o == nil || o.Username.Get() == nil {
		var ret string
		return ret
	}
	return *o.Username.Get()
}

// GetUsernameOk returns a tuple with the Username field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RegisteredEngine) GetUsernameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Username.Get(), o.Username.IsSet()
}

// HasUsername returns a boolean if a field has been set.
func (o *RegisteredEngine) HasUsername() bool {
	if o != nil && o.Username.IsSet() {
		return true
	}

	return false
}

// SetUsername gets a reference to the given NullableString and assigns it to the Username field.
func (o *RegisteredEngine) SetUsername(v string) {
	o.Username.Set(&v)
}
// SetUsernameNil sets the value for Username to be an explicit nil
func (o *RegisteredEngine) SetUsernameNil() {
	o.Username.Set(nil)
}

// UnsetUsername ensures that no value is present for Username, not even an explicit nil
func (o *RegisteredEngine) UnsetUsername() {
	o.Username.Unset()
}

// GetPassword returns the Password field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RegisteredEngine) GetPassword() string {
	if o == nil || o.Password.Get() == nil {
		var ret string
		return ret
	}
	return *o.Password.Get()
}

// GetPasswordOk returns a tuple with the Password field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RegisteredEngine) GetPasswordOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Password.Get(), o.Password.IsSet()
}

// HasPassword returns a boolean if a field has been set.
func (o *RegisteredEngine) HasPassword() bool {
	if o != nil && o.Password.IsSet() {
		return true
	}

	return false
}

// SetPassword gets a reference to the given NullableString and assigns it to the Password field.
func (o *RegisteredEngine) SetPassword(v string) {
	o.Password.Set(&v)
}
// SetPasswordNil sets the value for Password to be an explicit nil
func (o *RegisteredEngine) SetPasswordNil() {
	o.Password.Set(nil)
}

// UnsetPassword ensures that no value is present for Password, not even an explicit nil
func (o *RegisteredEngine) UnsetPassword() {
	o.Password.Unset()
}

// GetHashicorpVaultUsernameCommandArgs returns the HashicorpVaultUsernameCommandArgs field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RegisteredEngine) GetHashicorpVaultUsernameCommandArgs() []string {
	if o == nil  {
		var ret []string
		return ret
	}
	return o.HashicorpVaultUsernameCommandArgs
}

// GetHashicorpVaultUsernameCommandArgsOk returns a tuple with the HashicorpVaultUsernameCommandArgs field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RegisteredEngine) GetHashicorpVaultUsernameCommandArgsOk() ([]string, bool) {
	if o == nil || o.HashicorpVaultUsernameCommandArgs == nil {
		return nil, false
	}
	return o.HashicorpVaultUsernameCommandArgs, true
}

// HasHashicorpVaultUsernameCommandArgs returns a boolean if a field has been set.
func (o *RegisteredEngine) HasHashicorpVaultUsernameCommandArgs() bool {
	if o != nil && o.HashicorpVaultUsernameCommandArgs != nil {
		return true
	}

	return false
}

// SetHashicorpVaultUsernameCommandArgs gets a reference to the given []string and assigns it to the HashicorpVaultUsernameCommandArgs field.
func (o *RegisteredEngine) SetHashicorpVaultUsernameCommandArgs(v []string) {
	o.HashicorpVaultUsernameCommandArgs = v
}

// GetHashicorpVaultPasswordCommandArgs returns the HashicorpVaultPasswordCommandArgs field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RegisteredEngine) GetHashicorpVaultPasswordCommandArgs() []string {
	if o == nil  {
		var ret []string
		return ret
	}
	return o.HashicorpVaultPasswordCommandArgs
}

// GetHashicorpVaultPasswordCommandArgsOk returns a tuple with the HashicorpVaultPasswordCommandArgs field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RegisteredEngine) GetHashicorpVaultPasswordCommandArgsOk() ([]string, bool) {
	if o == nil || o.HashicorpVaultPasswordCommandArgs == nil {
		return nil, false
	}
	return o.HashicorpVaultPasswordCommandArgs, true
}

// HasHashicorpVaultPasswordCommandArgs returns a boolean if a field has been set.
func (o *RegisteredEngine) HasHashicorpVaultPasswordCommandArgs() bool {
	if o != nil && o.HashicorpVaultPasswordCommandArgs != nil {
		return true
	}

	return false
}

// SetHashicorpVaultPasswordCommandArgs gets a reference to the given []string and assigns it to the HashicorpVaultPasswordCommandArgs field.
func (o *RegisteredEngine) SetHashicorpVaultPasswordCommandArgs(v []string) {
	o.HashicorpVaultPasswordCommandArgs = v
}

// GetHashicorpVaultId returns the HashicorpVaultId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RegisteredEngine) GetHashicorpVaultId() int64 {
	if o == nil || o.HashicorpVaultId.Get() == nil {
		var ret int64
		return ret
	}
	return *o.HashicorpVaultId.Get()
}

// GetHashicorpVaultIdOk returns a tuple with the HashicorpVaultId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RegisteredEngine) GetHashicorpVaultIdOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.HashicorpVaultId.Get(), o.HashicorpVaultId.IsSet()
}

// HasHashicorpVaultId returns a boolean if a field has been set.
func (o *RegisteredEngine) HasHashicorpVaultId() bool {
	if o != nil && o.HashicorpVaultId.IsSet() {
		return true
	}

	return false
}

// SetHashicorpVaultId gets a reference to the given NullableInt64 and assigns it to the HashicorpVaultId field.
func (o *RegisteredEngine) SetHashicorpVaultId(v int64) {
	o.HashicorpVaultId.Set(&v)
}
// SetHashicorpVaultIdNil sets the value for HashicorpVaultId to be an explicit nil
func (o *RegisteredEngine) SetHashicorpVaultIdNil() {
	o.HashicorpVaultId.Set(nil)
}

// UnsetHashicorpVaultId ensures that no value is present for HashicorpVaultId, not even an explicit nil
func (o *RegisteredEngine) UnsetHashicorpVaultId() {
	o.HashicorpVaultId.Unset()
}

func (o RegisteredEngine) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Uuid.IsSet() {
		toSerialize["uuid"] = o.Uuid.Get()
	}
	if o.Type.IsSet() {
		toSerialize["type"] = o.Type.Get()
	}
	if o.Version.IsSet() {
		toSerialize["version"] = o.Version.Get()
	}
	if true {
		toSerialize["name"] = o.Name
	}
	if true {
		toSerialize["hostname"] = o.Hostname
	}
	if o.CpuCoreCount.IsSet() {
		toSerialize["cpu_core_count"] = o.CpuCoreCount.Get()
	}
	if o.MemorySize.IsSet() {
		toSerialize["memory_size"] = o.MemorySize.Get()
	}
	if o.DataStorageCapacity.IsSet() {
		toSerialize["data_storage_capacity"] = o.DataStorageCapacity.Get()
	}
	if o.DataStorageUsed.IsSet() {
		toSerialize["data_storage_used"] = o.DataStorageUsed.Get()
	}
	if o.InsecureSsl != nil {
		toSerialize["insecure_ssl"] = o.InsecureSsl
	}
	if o.UnsafeSslHostnameCheck != nil {
		toSerialize["unsafe_ssl_hostname_check"] = o.UnsafeSslHostnameCheck
	}
	if o.TruststoreFilename.IsSet() {
		toSerialize["truststore_filename"] = o.TruststoreFilename.Get()
	}
	if o.TruststorePassword.IsSet() {
		toSerialize["truststore_password"] = o.TruststorePassword.Get()
	}
	if o.Status.IsSet() {
		toSerialize["status"] = o.Status.Get()
	}
	if o.Username.IsSet() {
		toSerialize["username"] = o.Username.Get()
	}
	if o.Password.IsSet() {
		toSerialize["password"] = o.Password.Get()
	}
	if o.HashicorpVaultUsernameCommandArgs != nil {
		toSerialize["hashicorp_vault_username_command_args"] = o.HashicorpVaultUsernameCommandArgs
	}
	if o.HashicorpVaultPasswordCommandArgs != nil {
		toSerialize["hashicorp_vault_password_command_args"] = o.HashicorpVaultPasswordCommandArgs
	}
	if o.HashicorpVaultId.IsSet() {
		toSerialize["hashicorp_vault_id"] = o.HashicorpVaultId.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableRegisteredEngine struct {
	value *RegisteredEngine
	isSet bool
}

func (v NullableRegisteredEngine) Get() *RegisteredEngine {
	return v.value
}

func (v *NullableRegisteredEngine) Set(val *RegisteredEngine) {
	v.value = val
	v.isSet = true
}

func (v NullableRegisteredEngine) IsSet() bool {
	return v.isSet
}

func (v *NullableRegisteredEngine) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRegisteredEngine(val *RegisteredEngine) *NullableRegisteredEngine {
	return &NullableRegisteredEngine{value: val, isSet: true}
}

func (v NullableRegisteredEngine) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRegisteredEngine) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


