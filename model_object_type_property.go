/*
Delphix DCT API

Delphix DCT API

API version: 3.17.0
Contact: support@delphix.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package delphix_dct_api

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ObjectTypeProperty type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ObjectTypeProperty{}

// ObjectTypeProperty A DCT object type.
type ObjectTypeProperty struct {
	// Object type.
	ObjectType string `json:"object_type"`
}

type _ObjectTypeProperty ObjectTypeProperty

// NewObjectTypeProperty instantiates a new ObjectTypeProperty object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewObjectTypeProperty(objectType string) *ObjectTypeProperty {
	this := ObjectTypeProperty{}
	this.ObjectType = objectType
	return &this
}

// NewObjectTypePropertyWithDefaults instantiates a new ObjectTypeProperty object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewObjectTypePropertyWithDefaults() *ObjectTypeProperty {
	this := ObjectTypeProperty{}
	return &this
}

// GetObjectType returns the ObjectType field value
func (o *ObjectTypeProperty) GetObjectType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ObjectType
}

// GetObjectTypeOk returns a tuple with the ObjectType field value
// and a boolean to check if the value has been set.
func (o *ObjectTypeProperty) GetObjectTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ObjectType, true
}

// SetObjectType sets field value
func (o *ObjectTypeProperty) SetObjectType(v string) {
	o.ObjectType = v
}

func (o ObjectTypeProperty) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ObjectTypeProperty) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["object_type"] = o.ObjectType
	return toSerialize, nil
}

func (o *ObjectTypeProperty) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"object_type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varObjectTypeProperty := _ObjectTypeProperty{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varObjectTypeProperty)

	if err != nil {
		return err
	}

	*o = ObjectTypeProperty(varObjectTypeProperty)

	return err
}

type NullableObjectTypeProperty struct {
	value *ObjectTypeProperty
	isSet bool
}

func (v NullableObjectTypeProperty) Get() *ObjectTypeProperty {
	return v.value
}

func (v *NullableObjectTypeProperty) Set(val *ObjectTypeProperty) {
	v.value = val
	v.isSet = true
}

func (v NullableObjectTypeProperty) IsSet() bool {
	return v.isSet
}

func (v *NullableObjectTypeProperty) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableObjectTypeProperty(val *ObjectTypeProperty) *NullableObjectTypeProperty {
	return &NullableObjectTypeProperty{value: val, isSet: true}
}

func (v NullableObjectTypeProperty) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableObjectTypeProperty) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


