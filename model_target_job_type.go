/*
Delphix DCT API

Delphix DCT API

API version: 3.18.0
Contact: support@delphix.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package delphix_dct_api

import (
	"encoding/json"
	"fmt"
)

// TargetJobType A DCT specific job type
type TargetJobType string

// List of TargetJobType
const (
	TARGETJOBTYPE_REPLICATION_PROFILE_EXECUTE TargetJobType = "REPLICATION_PROFILE_EXECUTE"
)

// All allowed values of TargetJobType enum
var AllowedTargetJobTypeEnumValues = []TargetJobType{
	"REPLICATION_PROFILE_EXECUTE",
}

func (v *TargetJobType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := TargetJobType(value)
	for _, existing := range AllowedTargetJobTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid TargetJobType", value)
}

// NewTargetJobTypeFromValue returns a pointer to a valid TargetJobType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewTargetJobTypeFromValue(v string) (*TargetJobType, error) {
	ev := TargetJobType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for TargetJobType: valid values are %v", v, AllowedTargetJobTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v TargetJobType) IsValid() bool {
	for _, existing := range AllowedTargetJobTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to TargetJobType value
func (v TargetJobType) Ptr() *TargetJobType {
	return &v
}

type NullableTargetJobType struct {
	value *TargetJobType
	isSet bool
}

func (v NullableTargetJobType) Get() *TargetJobType {
	return v.value
}

func (v *NullableTargetJobType) Set(val *TargetJobType) {
	v.value = val
	v.isSet = true
}

func (v NullableTargetJobType) IsSet() bool {
	return v.isSet
}

func (v *NullableTargetJobType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTargetJobType(val *TargetJobType) *NullableTargetJobType {
	return &NullableTargetJobType{value: val, isSet: true}
}

func (v NullableTargetJobType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTargetJobType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

