/*
Delphix DCT API

Delphix DCT API

API version: 3.18.0
Contact: support@delphix.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package delphix_dct_api

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the UpgradeOracleDatabaseParameters type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpgradeOracleDatabaseParameters{}

// UpgradeOracleDatabaseParameters Parameters to upgrade a dSource/VDB.
type UpgradeOracleDatabaseParameters struct {
	// The id of the dSource/VDB repository to upgrade to.
	RepositoryId string `json:"repository_id"`
	// Reference of the environment user to use for dSource/VDB upgrade.
	EnvironmentUserId string `json:"environment_user_id"`
}

type _UpgradeOracleDatabaseParameters UpgradeOracleDatabaseParameters

// NewUpgradeOracleDatabaseParameters instantiates a new UpgradeOracleDatabaseParameters object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpgradeOracleDatabaseParameters(repositoryId string, environmentUserId string) *UpgradeOracleDatabaseParameters {
	this := UpgradeOracleDatabaseParameters{}
	this.RepositoryId = repositoryId
	this.EnvironmentUserId = environmentUserId
	return &this
}

// NewUpgradeOracleDatabaseParametersWithDefaults instantiates a new UpgradeOracleDatabaseParameters object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpgradeOracleDatabaseParametersWithDefaults() *UpgradeOracleDatabaseParameters {
	this := UpgradeOracleDatabaseParameters{}
	return &this
}

// GetRepositoryId returns the RepositoryId field value
func (o *UpgradeOracleDatabaseParameters) GetRepositoryId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RepositoryId
}

// GetRepositoryIdOk returns a tuple with the RepositoryId field value
// and a boolean to check if the value has been set.
func (o *UpgradeOracleDatabaseParameters) GetRepositoryIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RepositoryId, true
}

// SetRepositoryId sets field value
func (o *UpgradeOracleDatabaseParameters) SetRepositoryId(v string) {
	o.RepositoryId = v
}

// GetEnvironmentUserId returns the EnvironmentUserId field value
func (o *UpgradeOracleDatabaseParameters) GetEnvironmentUserId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EnvironmentUserId
}

// GetEnvironmentUserIdOk returns a tuple with the EnvironmentUserId field value
// and a boolean to check if the value has been set.
func (o *UpgradeOracleDatabaseParameters) GetEnvironmentUserIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EnvironmentUserId, true
}

// SetEnvironmentUserId sets field value
func (o *UpgradeOracleDatabaseParameters) SetEnvironmentUserId(v string) {
	o.EnvironmentUserId = v
}

func (o UpgradeOracleDatabaseParameters) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpgradeOracleDatabaseParameters) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["repository_id"] = o.RepositoryId
	toSerialize["environment_user_id"] = o.EnvironmentUserId
	return toSerialize, nil
}

func (o *UpgradeOracleDatabaseParameters) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"repository_id",
		"environment_user_id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUpgradeOracleDatabaseParameters := _UpgradeOracleDatabaseParameters{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varUpgradeOracleDatabaseParameters)

	if err != nil {
		return err
	}

	*o = UpgradeOracleDatabaseParameters(varUpgradeOracleDatabaseParameters)

	return err
}

type NullableUpgradeOracleDatabaseParameters struct {
	value *UpgradeOracleDatabaseParameters
	isSet bool
}

func (v NullableUpgradeOracleDatabaseParameters) Get() *UpgradeOracleDatabaseParameters {
	return v.value
}

func (v *NullableUpgradeOracleDatabaseParameters) Set(val *UpgradeOracleDatabaseParameters) {
	v.value = val
	v.isSet = true
}

func (v NullableUpgradeOracleDatabaseParameters) IsSet() bool {
	return v.isSet
}

func (v *NullableUpgradeOracleDatabaseParameters) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpgradeOracleDatabaseParameters(val *UpgradeOracleDatabaseParameters) *NullableUpgradeOracleDatabaseParameters {
	return &NullableUpgradeOracleDatabaseParameters{value: val, isSet: true}
}

func (v NullableUpgradeOracleDatabaseParameters) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpgradeOracleDatabaseParameters) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


