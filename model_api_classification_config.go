/*
Delphix DCT API

Delphix DCT API

API version: 3.18.0
Contact: support@delphix.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package delphix_dct_api

import (
	"encoding/json"
)

// checks if the APIClassificationConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &APIClassificationConfig{}

// APIClassificationConfig Api Classification Config.
type APIClassificationConfig struct {
	// Api Classification Config Version.
	Version *string `json:"version,omitempty"`
	// The classification of each APIs, either it is automation or not.
	ApiClassification []ApiClassificationObject `json:"api_classification,omitempty"`
}

// NewAPIClassificationConfig instantiates a new APIClassificationConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAPIClassificationConfig() *APIClassificationConfig {
	this := APIClassificationConfig{}
	return &this
}

// NewAPIClassificationConfigWithDefaults instantiates a new APIClassificationConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAPIClassificationConfigWithDefaults() *APIClassificationConfig {
	this := APIClassificationConfig{}
	return &this
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *APIClassificationConfig) GetVersion() string {
	if o == nil || IsNil(o.Version) {
		var ret string
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *APIClassificationConfig) GetVersionOk() (*string, bool) {
	if o == nil || IsNil(o.Version) {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *APIClassificationConfig) HasVersion() bool {
	if o != nil && !IsNil(o.Version) {
		return true
	}

	return false
}

// SetVersion gets a reference to the given string and assigns it to the Version field.
func (o *APIClassificationConfig) SetVersion(v string) {
	o.Version = &v
}

// GetApiClassification returns the ApiClassification field value if set, zero value otherwise.
func (o *APIClassificationConfig) GetApiClassification() []ApiClassificationObject {
	if o == nil || IsNil(o.ApiClassification) {
		var ret []ApiClassificationObject
		return ret
	}
	return o.ApiClassification
}

// GetApiClassificationOk returns a tuple with the ApiClassification field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *APIClassificationConfig) GetApiClassificationOk() ([]ApiClassificationObject, bool) {
	if o == nil || IsNil(o.ApiClassification) {
		return nil, false
	}
	return o.ApiClassification, true
}

// HasApiClassification returns a boolean if a field has been set.
func (o *APIClassificationConfig) HasApiClassification() bool {
	if o != nil && !IsNil(o.ApiClassification) {
		return true
	}

	return false
}

// SetApiClassification gets a reference to the given []ApiClassificationObject and assigns it to the ApiClassification field.
func (o *APIClassificationConfig) SetApiClassification(v []ApiClassificationObject) {
	o.ApiClassification = v
}

func (o APIClassificationConfig) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o APIClassificationConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Version) {
		toSerialize["version"] = o.Version
	}
	if !IsNil(o.ApiClassification) {
		toSerialize["api_classification"] = o.ApiClassification
	}
	return toSerialize, nil
}

type NullableAPIClassificationConfig struct {
	value *APIClassificationConfig
	isSet bool
}

func (v NullableAPIClassificationConfig) Get() *APIClassificationConfig {
	return v.value
}

func (v *NullableAPIClassificationConfig) Set(val *APIClassificationConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableAPIClassificationConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableAPIClassificationConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAPIClassificationConfig(val *APIClassificationConfig) *NullableAPIClassificationConfig {
	return &NullableAPIClassificationConfig{value: val, isSet: true}
}

func (v NullableAPIClassificationConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAPIClassificationConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


