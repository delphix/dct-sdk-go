/*
Delphix DCT API

Delphix DCT API

API version: 3.17.0
Contact: support@delphix.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package delphix_dct_api

import (
	"encoding/json"
)

// checks if the UpdateMSSQLDsourceParameters type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateMSSQLDsourceParameters{}

// UpdateMSSQLDsourceParameters Parameters to update a MSSql dSource.
type UpdateMSSQLDsourceParameters struct {
	// Enabled LogSync for this dSource.
	LogsyncEnabled *bool `json:"logsync_enabled,omitempty"`
	// The encryption key to use when restoring encrypted backups.
	EncryptionKey *string `json:"encryption_key,omitempty"`
	// Reference of the SQL instance on the PPT environment that we want to use for pre-provisioning.
	PptRepository *string `json:"ppt_repository,omitempty"`
	// Reference of the host OS user on the PPT host to use for linking.
	PptHostUser *string `json:"ppt_host_user,omitempty"`
	// MSSQL specific parameters for source based sync strategy.: * `external` - MSSQL specific parameters for externally managed source based sync strategy. * `delphix` - MSSQL specific parameters for delphix managed source based sync strategy. * `staging_push` - MSSQL specific parameters for staging push based sync strategy. 
	SyncStrategyManagedType *string `json:"sync_strategy_managed_type,omitempty"`
	// ID or user reference of the host OS user to use for linking.
	SourceHostUser *string `json:"source_host_user,omitempty"`
	// Reference to the source environment user to use for linking.
	MssqlUserEnvironmentReference *string `json:"mssql_user_environment_reference,omitempty"`
	// The username for the source DB user.
	MssqlUserDomainUsername *string `json:"mssql_user_domain_username,omitempty"`
	// Password for the database user.
	MssqlUserDomainPassword *string `json:"mssql_user_domain_password,omitempty"`
	// Delphix display name for the vault user.
	MssqlUserDomainVaultUsername *string `json:"mssql_user_domain_vault_username,omitempty"`
	// The name or reference of the vault from which to read the database credentials.
	MssqlUserDomainVault *string `json:"mssql_user_domain_vault,omitempty"`
	// Vault engine name where the credential is stored.
	MssqlUserDomainHashicorpVaultEngine *string `json:"mssql_user_domain_hashicorp_vault_engine,omitempty"`
	// Path in the vault engine where the credential is stored.
	MssqlUserDomainHashicorpVaultSecretPath *string `json:"mssql_user_domain_hashicorp_vault_secret_path,omitempty"`
	// Hashicorp vault key for the username in the key-value store.
	MssqlUserDomainHashicorpVaultUsernameKey *string `json:"mssql_user_domain_hashicorp_vault_username_key,omitempty"`
	// Hashicorp vault key for the password in the key-value store.
	MssqlUserDomainHashicorpVaultSecretKey *string `json:"mssql_user_domain_hashicorp_vault_secret_key,omitempty"`
	// Azure key vault name.
	MssqlUserDomainAzureVaultName *string `json:"mssql_user_domain_azure_vault_name,omitempty"`
	// Azure vault key for the username in the key-value store.
	MssqlUserDomainAzureVaultUsernameKey *string `json:"mssql_user_domain_azure_vault_username_key,omitempty"`
	// Azure vault key for the password in the key-value store.
	MssqlUserDomainAzureVaultSecretKey *string `json:"mssql_user_domain_azure_vault_secret_key,omitempty"`
	// Query to find a credential in the CyberArk vault.
	MssqlUserDomainCyberarkVaultQueryString *string `json:"mssql_user_domain_cyberark_vault_query_string,omitempty"`
	// The username for the source DB user.
	MssqlDatabaseUsername *string `json:"mssql_database_username,omitempty"`
	// Password for the database user.
	MssqlDatabasePassword *string `json:"mssql_database_password,omitempty"`
	// Specify whether the backups taken should be compressed or uncompressed when Delphix managed option is selected.
	DelphixManagedBackupCompressionEnabled *bool `json:"delphix_managed_backup_compression_enabled,omitempty"`
	// Specify which node of an availability group to run the copy-only full backup on: * `primary` - Backups only go to the primary node. * `secondary_only` - Backups only go to secondary nodes. If secondary nodes are down, backups will fail. * `prefer_secondary` - Backups go to secondary nodes, but if secondary nodes are down, backups will go to the primary node. 
	DelphixManagedBackupPolicy *string `json:"delphix_managed_backup_policy,omitempty"`
	// Specifies the backup types ValidatedSync will use to synchronize the dSource with the source database
	ExternalManagedValidateSyncMode *string `json:"external_managed_validate_sync_mode,omitempty"`
	// Shared source database backup locations.
	ExternalManagedSharedBackupLocations []string `json:"external_managed_shared_backup_locations,omitempty"`
	// Disable NetBackup configuration.
	DisableNetbackupConfig *bool `json:"disable_netbackup_config,omitempty"`
	// The master server name of this NetBackup configuration.
	ExternalNetbackupConfigMasterName *string `json:"external_netbackup_config_master_name,omitempty"`
	// The source's client server name of this NetBackup configuration.
	ExternalNetbackupConfigSourceClientName *string `json:"external_netbackup_config_source_client_name,omitempty"`
	// NetBackup configuration parameter overrides.
	ExternalNetbackupConfigParams map[string]interface{} `json:"external_netbackup_config_params,omitempty"`
	// Optional config template selection for NetBackup configurations. If set, external_netbackup_config_params will be ignored.
	ExternalNetbackupConfigTemplates *string `json:"external_netbackup_config_templates,omitempty"`
	// Disable Commvault configuration.
	DisableCommvaultConfig *bool `json:"disable_commvault_config,omitempty"`
	// The commserve host name of this Commvault configuration.
	ExternalCommserveHostName *string `json:"external_commserve_host_name,omitempty"`
	// The source client name of this Commvault configuration.
	ExternalCommvaultConfigSourceClientName *string `json:"external_commvault_config_source_client_name,omitempty"`
	// The staging client name of this Commvault configuration.
	ExternalCommvaultConfigStagingClientName *string `json:"external_commvault_config_staging_client_name,omitempty"`
	// Commvault configuration parameter overrides.
	ExternalCommvaultConfigParams map[string]interface{} `json:"external_commvault_config_params,omitempty"`
	// Optional config template selection for Commvault configurations. If set, configParams will be ignored.
	ExternalCommvaultConfigTemplates *string `json:"external_commvault_config_templates,omitempty"`
	Hooks *DSourceHooks `json:"hooks,omitempty"`
	// The ID of the SnapSync policy for the dSource.
	SyncPolicyId *string `json:"sync_policy_id,omitempty"`
	// The ID of the Retention policy for the dSource.
	RetentionPolicyId *string `json:"retention_policy_id,omitempty"`
}

// NewUpdateMSSQLDsourceParameters instantiates a new UpdateMSSQLDsourceParameters object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateMSSQLDsourceParameters() *UpdateMSSQLDsourceParameters {
	this := UpdateMSSQLDsourceParameters{}
	return &this
}

// NewUpdateMSSQLDsourceParametersWithDefaults instantiates a new UpdateMSSQLDsourceParameters object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateMSSQLDsourceParametersWithDefaults() *UpdateMSSQLDsourceParameters {
	this := UpdateMSSQLDsourceParameters{}
	return &this
}

// GetLogsyncEnabled returns the LogsyncEnabled field value if set, zero value otherwise.
func (o *UpdateMSSQLDsourceParameters) GetLogsyncEnabled() bool {
	if o == nil || IsNil(o.LogsyncEnabled) {
		var ret bool
		return ret
	}
	return *o.LogsyncEnabled
}

// GetLogsyncEnabledOk returns a tuple with the LogsyncEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateMSSQLDsourceParameters) GetLogsyncEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.LogsyncEnabled) {
		return nil, false
	}
	return o.LogsyncEnabled, true
}

// HasLogsyncEnabled returns a boolean if a field has been set.
func (o *UpdateMSSQLDsourceParameters) HasLogsyncEnabled() bool {
	if o != nil && !IsNil(o.LogsyncEnabled) {
		return true
	}

	return false
}

// SetLogsyncEnabled gets a reference to the given bool and assigns it to the LogsyncEnabled field.
func (o *UpdateMSSQLDsourceParameters) SetLogsyncEnabled(v bool) {
	o.LogsyncEnabled = &v
}

// GetEncryptionKey returns the EncryptionKey field value if set, zero value otherwise.
func (o *UpdateMSSQLDsourceParameters) GetEncryptionKey() string {
	if o == nil || IsNil(o.EncryptionKey) {
		var ret string
		return ret
	}
	return *o.EncryptionKey
}

// GetEncryptionKeyOk returns a tuple with the EncryptionKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateMSSQLDsourceParameters) GetEncryptionKeyOk() (*string, bool) {
	if o == nil || IsNil(o.EncryptionKey) {
		return nil, false
	}
	return o.EncryptionKey, true
}

// HasEncryptionKey returns a boolean if a field has been set.
func (o *UpdateMSSQLDsourceParameters) HasEncryptionKey() bool {
	if o != nil && !IsNil(o.EncryptionKey) {
		return true
	}

	return false
}

// SetEncryptionKey gets a reference to the given string and assigns it to the EncryptionKey field.
func (o *UpdateMSSQLDsourceParameters) SetEncryptionKey(v string) {
	o.EncryptionKey = &v
}

// GetPptRepository returns the PptRepository field value if set, zero value otherwise.
func (o *UpdateMSSQLDsourceParameters) GetPptRepository() string {
	if o == nil || IsNil(o.PptRepository) {
		var ret string
		return ret
	}
	return *o.PptRepository
}

// GetPptRepositoryOk returns a tuple with the PptRepository field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateMSSQLDsourceParameters) GetPptRepositoryOk() (*string, bool) {
	if o == nil || IsNil(o.PptRepository) {
		return nil, false
	}
	return o.PptRepository, true
}

// HasPptRepository returns a boolean if a field has been set.
func (o *UpdateMSSQLDsourceParameters) HasPptRepository() bool {
	if o != nil && !IsNil(o.PptRepository) {
		return true
	}

	return false
}

// SetPptRepository gets a reference to the given string and assigns it to the PptRepository field.
func (o *UpdateMSSQLDsourceParameters) SetPptRepository(v string) {
	o.PptRepository = &v
}

// GetPptHostUser returns the PptHostUser field value if set, zero value otherwise.
func (o *UpdateMSSQLDsourceParameters) GetPptHostUser() string {
	if o == nil || IsNil(o.PptHostUser) {
		var ret string
		return ret
	}
	return *o.PptHostUser
}

// GetPptHostUserOk returns a tuple with the PptHostUser field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateMSSQLDsourceParameters) GetPptHostUserOk() (*string, bool) {
	if o == nil || IsNil(o.PptHostUser) {
		return nil, false
	}
	return o.PptHostUser, true
}

// HasPptHostUser returns a boolean if a field has been set.
func (o *UpdateMSSQLDsourceParameters) HasPptHostUser() bool {
	if o != nil && !IsNil(o.PptHostUser) {
		return true
	}

	return false
}

// SetPptHostUser gets a reference to the given string and assigns it to the PptHostUser field.
func (o *UpdateMSSQLDsourceParameters) SetPptHostUser(v string) {
	o.PptHostUser = &v
}

// GetSyncStrategyManagedType returns the SyncStrategyManagedType field value if set, zero value otherwise.
func (o *UpdateMSSQLDsourceParameters) GetSyncStrategyManagedType() string {
	if o == nil || IsNil(o.SyncStrategyManagedType) {
		var ret string
		return ret
	}
	return *o.SyncStrategyManagedType
}

// GetSyncStrategyManagedTypeOk returns a tuple with the SyncStrategyManagedType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateMSSQLDsourceParameters) GetSyncStrategyManagedTypeOk() (*string, bool) {
	if o == nil || IsNil(o.SyncStrategyManagedType) {
		return nil, false
	}
	return o.SyncStrategyManagedType, true
}

// HasSyncStrategyManagedType returns a boolean if a field has been set.
func (o *UpdateMSSQLDsourceParameters) HasSyncStrategyManagedType() bool {
	if o != nil && !IsNil(o.SyncStrategyManagedType) {
		return true
	}

	return false
}

// SetSyncStrategyManagedType gets a reference to the given string and assigns it to the SyncStrategyManagedType field.
func (o *UpdateMSSQLDsourceParameters) SetSyncStrategyManagedType(v string) {
	o.SyncStrategyManagedType = &v
}

// GetSourceHostUser returns the SourceHostUser field value if set, zero value otherwise.
func (o *UpdateMSSQLDsourceParameters) GetSourceHostUser() string {
	if o == nil || IsNil(o.SourceHostUser) {
		var ret string
		return ret
	}
	return *o.SourceHostUser
}

// GetSourceHostUserOk returns a tuple with the SourceHostUser field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateMSSQLDsourceParameters) GetSourceHostUserOk() (*string, bool) {
	if o == nil || IsNil(o.SourceHostUser) {
		return nil, false
	}
	return o.SourceHostUser, true
}

// HasSourceHostUser returns a boolean if a field has been set.
func (o *UpdateMSSQLDsourceParameters) HasSourceHostUser() bool {
	if o != nil && !IsNil(o.SourceHostUser) {
		return true
	}

	return false
}

// SetSourceHostUser gets a reference to the given string and assigns it to the SourceHostUser field.
func (o *UpdateMSSQLDsourceParameters) SetSourceHostUser(v string) {
	o.SourceHostUser = &v
}

// GetMssqlUserEnvironmentReference returns the MssqlUserEnvironmentReference field value if set, zero value otherwise.
func (o *UpdateMSSQLDsourceParameters) GetMssqlUserEnvironmentReference() string {
	if o == nil || IsNil(o.MssqlUserEnvironmentReference) {
		var ret string
		return ret
	}
	return *o.MssqlUserEnvironmentReference
}

// GetMssqlUserEnvironmentReferenceOk returns a tuple with the MssqlUserEnvironmentReference field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateMSSQLDsourceParameters) GetMssqlUserEnvironmentReferenceOk() (*string, bool) {
	if o == nil || IsNil(o.MssqlUserEnvironmentReference) {
		return nil, false
	}
	return o.MssqlUserEnvironmentReference, true
}

// HasMssqlUserEnvironmentReference returns a boolean if a field has been set.
func (o *UpdateMSSQLDsourceParameters) HasMssqlUserEnvironmentReference() bool {
	if o != nil && !IsNil(o.MssqlUserEnvironmentReference) {
		return true
	}

	return false
}

// SetMssqlUserEnvironmentReference gets a reference to the given string and assigns it to the MssqlUserEnvironmentReference field.
func (o *UpdateMSSQLDsourceParameters) SetMssqlUserEnvironmentReference(v string) {
	o.MssqlUserEnvironmentReference = &v
}

// GetMssqlUserDomainUsername returns the MssqlUserDomainUsername field value if set, zero value otherwise.
func (o *UpdateMSSQLDsourceParameters) GetMssqlUserDomainUsername() string {
	if o == nil || IsNil(o.MssqlUserDomainUsername) {
		var ret string
		return ret
	}
	return *o.MssqlUserDomainUsername
}

// GetMssqlUserDomainUsernameOk returns a tuple with the MssqlUserDomainUsername field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateMSSQLDsourceParameters) GetMssqlUserDomainUsernameOk() (*string, bool) {
	if o == nil || IsNil(o.MssqlUserDomainUsername) {
		return nil, false
	}
	return o.MssqlUserDomainUsername, true
}

// HasMssqlUserDomainUsername returns a boolean if a field has been set.
func (o *UpdateMSSQLDsourceParameters) HasMssqlUserDomainUsername() bool {
	if o != nil && !IsNil(o.MssqlUserDomainUsername) {
		return true
	}

	return false
}

// SetMssqlUserDomainUsername gets a reference to the given string and assigns it to the MssqlUserDomainUsername field.
func (o *UpdateMSSQLDsourceParameters) SetMssqlUserDomainUsername(v string) {
	o.MssqlUserDomainUsername = &v
}

// GetMssqlUserDomainPassword returns the MssqlUserDomainPassword field value if set, zero value otherwise.
func (o *UpdateMSSQLDsourceParameters) GetMssqlUserDomainPassword() string {
	if o == nil || IsNil(o.MssqlUserDomainPassword) {
		var ret string
		return ret
	}
	return *o.MssqlUserDomainPassword
}

// GetMssqlUserDomainPasswordOk returns a tuple with the MssqlUserDomainPassword field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateMSSQLDsourceParameters) GetMssqlUserDomainPasswordOk() (*string, bool) {
	if o == nil || IsNil(o.MssqlUserDomainPassword) {
		return nil, false
	}
	return o.MssqlUserDomainPassword, true
}

// HasMssqlUserDomainPassword returns a boolean if a field has been set.
func (o *UpdateMSSQLDsourceParameters) HasMssqlUserDomainPassword() bool {
	if o != nil && !IsNil(o.MssqlUserDomainPassword) {
		return true
	}

	return false
}

// SetMssqlUserDomainPassword gets a reference to the given string and assigns it to the MssqlUserDomainPassword field.
func (o *UpdateMSSQLDsourceParameters) SetMssqlUserDomainPassword(v string) {
	o.MssqlUserDomainPassword = &v
}

// GetMssqlUserDomainVaultUsername returns the MssqlUserDomainVaultUsername field value if set, zero value otherwise.
func (o *UpdateMSSQLDsourceParameters) GetMssqlUserDomainVaultUsername() string {
	if o == nil || IsNil(o.MssqlUserDomainVaultUsername) {
		var ret string
		return ret
	}
	return *o.MssqlUserDomainVaultUsername
}

// GetMssqlUserDomainVaultUsernameOk returns a tuple with the MssqlUserDomainVaultUsername field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateMSSQLDsourceParameters) GetMssqlUserDomainVaultUsernameOk() (*string, bool) {
	if o == nil || IsNil(o.MssqlUserDomainVaultUsername) {
		return nil, false
	}
	return o.MssqlUserDomainVaultUsername, true
}

// HasMssqlUserDomainVaultUsername returns a boolean if a field has been set.
func (o *UpdateMSSQLDsourceParameters) HasMssqlUserDomainVaultUsername() bool {
	if o != nil && !IsNil(o.MssqlUserDomainVaultUsername) {
		return true
	}

	return false
}

// SetMssqlUserDomainVaultUsername gets a reference to the given string and assigns it to the MssqlUserDomainVaultUsername field.
func (o *UpdateMSSQLDsourceParameters) SetMssqlUserDomainVaultUsername(v string) {
	o.MssqlUserDomainVaultUsername = &v
}

// GetMssqlUserDomainVault returns the MssqlUserDomainVault field value if set, zero value otherwise.
func (o *UpdateMSSQLDsourceParameters) GetMssqlUserDomainVault() string {
	if o == nil || IsNil(o.MssqlUserDomainVault) {
		var ret string
		return ret
	}
	return *o.MssqlUserDomainVault
}

// GetMssqlUserDomainVaultOk returns a tuple with the MssqlUserDomainVault field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateMSSQLDsourceParameters) GetMssqlUserDomainVaultOk() (*string, bool) {
	if o == nil || IsNil(o.MssqlUserDomainVault) {
		return nil, false
	}
	return o.MssqlUserDomainVault, true
}

// HasMssqlUserDomainVault returns a boolean if a field has been set.
func (o *UpdateMSSQLDsourceParameters) HasMssqlUserDomainVault() bool {
	if o != nil && !IsNil(o.MssqlUserDomainVault) {
		return true
	}

	return false
}

// SetMssqlUserDomainVault gets a reference to the given string and assigns it to the MssqlUserDomainVault field.
func (o *UpdateMSSQLDsourceParameters) SetMssqlUserDomainVault(v string) {
	o.MssqlUserDomainVault = &v
}

// GetMssqlUserDomainHashicorpVaultEngine returns the MssqlUserDomainHashicorpVaultEngine field value if set, zero value otherwise.
func (o *UpdateMSSQLDsourceParameters) GetMssqlUserDomainHashicorpVaultEngine() string {
	if o == nil || IsNil(o.MssqlUserDomainHashicorpVaultEngine) {
		var ret string
		return ret
	}
	return *o.MssqlUserDomainHashicorpVaultEngine
}

// GetMssqlUserDomainHashicorpVaultEngineOk returns a tuple with the MssqlUserDomainHashicorpVaultEngine field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateMSSQLDsourceParameters) GetMssqlUserDomainHashicorpVaultEngineOk() (*string, bool) {
	if o == nil || IsNil(o.MssqlUserDomainHashicorpVaultEngine) {
		return nil, false
	}
	return o.MssqlUserDomainHashicorpVaultEngine, true
}

// HasMssqlUserDomainHashicorpVaultEngine returns a boolean if a field has been set.
func (o *UpdateMSSQLDsourceParameters) HasMssqlUserDomainHashicorpVaultEngine() bool {
	if o != nil && !IsNil(o.MssqlUserDomainHashicorpVaultEngine) {
		return true
	}

	return false
}

// SetMssqlUserDomainHashicorpVaultEngine gets a reference to the given string and assigns it to the MssqlUserDomainHashicorpVaultEngine field.
func (o *UpdateMSSQLDsourceParameters) SetMssqlUserDomainHashicorpVaultEngine(v string) {
	o.MssqlUserDomainHashicorpVaultEngine = &v
}

// GetMssqlUserDomainHashicorpVaultSecretPath returns the MssqlUserDomainHashicorpVaultSecretPath field value if set, zero value otherwise.
func (o *UpdateMSSQLDsourceParameters) GetMssqlUserDomainHashicorpVaultSecretPath() string {
	if o == nil || IsNil(o.MssqlUserDomainHashicorpVaultSecretPath) {
		var ret string
		return ret
	}
	return *o.MssqlUserDomainHashicorpVaultSecretPath
}

// GetMssqlUserDomainHashicorpVaultSecretPathOk returns a tuple with the MssqlUserDomainHashicorpVaultSecretPath field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateMSSQLDsourceParameters) GetMssqlUserDomainHashicorpVaultSecretPathOk() (*string, bool) {
	if o == nil || IsNil(o.MssqlUserDomainHashicorpVaultSecretPath) {
		return nil, false
	}
	return o.MssqlUserDomainHashicorpVaultSecretPath, true
}

// HasMssqlUserDomainHashicorpVaultSecretPath returns a boolean if a field has been set.
func (o *UpdateMSSQLDsourceParameters) HasMssqlUserDomainHashicorpVaultSecretPath() bool {
	if o != nil && !IsNil(o.MssqlUserDomainHashicorpVaultSecretPath) {
		return true
	}

	return false
}

// SetMssqlUserDomainHashicorpVaultSecretPath gets a reference to the given string and assigns it to the MssqlUserDomainHashicorpVaultSecretPath field.
func (o *UpdateMSSQLDsourceParameters) SetMssqlUserDomainHashicorpVaultSecretPath(v string) {
	o.MssqlUserDomainHashicorpVaultSecretPath = &v
}

// GetMssqlUserDomainHashicorpVaultUsernameKey returns the MssqlUserDomainHashicorpVaultUsernameKey field value if set, zero value otherwise.
func (o *UpdateMSSQLDsourceParameters) GetMssqlUserDomainHashicorpVaultUsernameKey() string {
	if o == nil || IsNil(o.MssqlUserDomainHashicorpVaultUsernameKey) {
		var ret string
		return ret
	}
	return *o.MssqlUserDomainHashicorpVaultUsernameKey
}

// GetMssqlUserDomainHashicorpVaultUsernameKeyOk returns a tuple with the MssqlUserDomainHashicorpVaultUsernameKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateMSSQLDsourceParameters) GetMssqlUserDomainHashicorpVaultUsernameKeyOk() (*string, bool) {
	if o == nil || IsNil(o.MssqlUserDomainHashicorpVaultUsernameKey) {
		return nil, false
	}
	return o.MssqlUserDomainHashicorpVaultUsernameKey, true
}

// HasMssqlUserDomainHashicorpVaultUsernameKey returns a boolean if a field has been set.
func (o *UpdateMSSQLDsourceParameters) HasMssqlUserDomainHashicorpVaultUsernameKey() bool {
	if o != nil && !IsNil(o.MssqlUserDomainHashicorpVaultUsernameKey) {
		return true
	}

	return false
}

// SetMssqlUserDomainHashicorpVaultUsernameKey gets a reference to the given string and assigns it to the MssqlUserDomainHashicorpVaultUsernameKey field.
func (o *UpdateMSSQLDsourceParameters) SetMssqlUserDomainHashicorpVaultUsernameKey(v string) {
	o.MssqlUserDomainHashicorpVaultUsernameKey = &v
}

// GetMssqlUserDomainHashicorpVaultSecretKey returns the MssqlUserDomainHashicorpVaultSecretKey field value if set, zero value otherwise.
func (o *UpdateMSSQLDsourceParameters) GetMssqlUserDomainHashicorpVaultSecretKey() string {
	if o == nil || IsNil(o.MssqlUserDomainHashicorpVaultSecretKey) {
		var ret string
		return ret
	}
	return *o.MssqlUserDomainHashicorpVaultSecretKey
}

// GetMssqlUserDomainHashicorpVaultSecretKeyOk returns a tuple with the MssqlUserDomainHashicorpVaultSecretKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateMSSQLDsourceParameters) GetMssqlUserDomainHashicorpVaultSecretKeyOk() (*string, bool) {
	if o == nil || IsNil(o.MssqlUserDomainHashicorpVaultSecretKey) {
		return nil, false
	}
	return o.MssqlUserDomainHashicorpVaultSecretKey, true
}

// HasMssqlUserDomainHashicorpVaultSecretKey returns a boolean if a field has been set.
func (o *UpdateMSSQLDsourceParameters) HasMssqlUserDomainHashicorpVaultSecretKey() bool {
	if o != nil && !IsNil(o.MssqlUserDomainHashicorpVaultSecretKey) {
		return true
	}

	return false
}

// SetMssqlUserDomainHashicorpVaultSecretKey gets a reference to the given string and assigns it to the MssqlUserDomainHashicorpVaultSecretKey field.
func (o *UpdateMSSQLDsourceParameters) SetMssqlUserDomainHashicorpVaultSecretKey(v string) {
	o.MssqlUserDomainHashicorpVaultSecretKey = &v
}

// GetMssqlUserDomainAzureVaultName returns the MssqlUserDomainAzureVaultName field value if set, zero value otherwise.
func (o *UpdateMSSQLDsourceParameters) GetMssqlUserDomainAzureVaultName() string {
	if o == nil || IsNil(o.MssqlUserDomainAzureVaultName) {
		var ret string
		return ret
	}
	return *o.MssqlUserDomainAzureVaultName
}

// GetMssqlUserDomainAzureVaultNameOk returns a tuple with the MssqlUserDomainAzureVaultName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateMSSQLDsourceParameters) GetMssqlUserDomainAzureVaultNameOk() (*string, bool) {
	if o == nil || IsNil(o.MssqlUserDomainAzureVaultName) {
		return nil, false
	}
	return o.MssqlUserDomainAzureVaultName, true
}

// HasMssqlUserDomainAzureVaultName returns a boolean if a field has been set.
func (o *UpdateMSSQLDsourceParameters) HasMssqlUserDomainAzureVaultName() bool {
	if o != nil && !IsNil(o.MssqlUserDomainAzureVaultName) {
		return true
	}

	return false
}

// SetMssqlUserDomainAzureVaultName gets a reference to the given string and assigns it to the MssqlUserDomainAzureVaultName field.
func (o *UpdateMSSQLDsourceParameters) SetMssqlUserDomainAzureVaultName(v string) {
	o.MssqlUserDomainAzureVaultName = &v
}

// GetMssqlUserDomainAzureVaultUsernameKey returns the MssqlUserDomainAzureVaultUsernameKey field value if set, zero value otherwise.
func (o *UpdateMSSQLDsourceParameters) GetMssqlUserDomainAzureVaultUsernameKey() string {
	if o == nil || IsNil(o.MssqlUserDomainAzureVaultUsernameKey) {
		var ret string
		return ret
	}
	return *o.MssqlUserDomainAzureVaultUsernameKey
}

// GetMssqlUserDomainAzureVaultUsernameKeyOk returns a tuple with the MssqlUserDomainAzureVaultUsernameKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateMSSQLDsourceParameters) GetMssqlUserDomainAzureVaultUsernameKeyOk() (*string, bool) {
	if o == nil || IsNil(o.MssqlUserDomainAzureVaultUsernameKey) {
		return nil, false
	}
	return o.MssqlUserDomainAzureVaultUsernameKey, true
}

// HasMssqlUserDomainAzureVaultUsernameKey returns a boolean if a field has been set.
func (o *UpdateMSSQLDsourceParameters) HasMssqlUserDomainAzureVaultUsernameKey() bool {
	if o != nil && !IsNil(o.MssqlUserDomainAzureVaultUsernameKey) {
		return true
	}

	return false
}

// SetMssqlUserDomainAzureVaultUsernameKey gets a reference to the given string and assigns it to the MssqlUserDomainAzureVaultUsernameKey field.
func (o *UpdateMSSQLDsourceParameters) SetMssqlUserDomainAzureVaultUsernameKey(v string) {
	o.MssqlUserDomainAzureVaultUsernameKey = &v
}

// GetMssqlUserDomainAzureVaultSecretKey returns the MssqlUserDomainAzureVaultSecretKey field value if set, zero value otherwise.
func (o *UpdateMSSQLDsourceParameters) GetMssqlUserDomainAzureVaultSecretKey() string {
	if o == nil || IsNil(o.MssqlUserDomainAzureVaultSecretKey) {
		var ret string
		return ret
	}
	return *o.MssqlUserDomainAzureVaultSecretKey
}

// GetMssqlUserDomainAzureVaultSecretKeyOk returns a tuple with the MssqlUserDomainAzureVaultSecretKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateMSSQLDsourceParameters) GetMssqlUserDomainAzureVaultSecretKeyOk() (*string, bool) {
	if o == nil || IsNil(o.MssqlUserDomainAzureVaultSecretKey) {
		return nil, false
	}
	return o.MssqlUserDomainAzureVaultSecretKey, true
}

// HasMssqlUserDomainAzureVaultSecretKey returns a boolean if a field has been set.
func (o *UpdateMSSQLDsourceParameters) HasMssqlUserDomainAzureVaultSecretKey() bool {
	if o != nil && !IsNil(o.MssqlUserDomainAzureVaultSecretKey) {
		return true
	}

	return false
}

// SetMssqlUserDomainAzureVaultSecretKey gets a reference to the given string and assigns it to the MssqlUserDomainAzureVaultSecretKey field.
func (o *UpdateMSSQLDsourceParameters) SetMssqlUserDomainAzureVaultSecretKey(v string) {
	o.MssqlUserDomainAzureVaultSecretKey = &v
}

// GetMssqlUserDomainCyberarkVaultQueryString returns the MssqlUserDomainCyberarkVaultQueryString field value if set, zero value otherwise.
func (o *UpdateMSSQLDsourceParameters) GetMssqlUserDomainCyberarkVaultQueryString() string {
	if o == nil || IsNil(o.MssqlUserDomainCyberarkVaultQueryString) {
		var ret string
		return ret
	}
	return *o.MssqlUserDomainCyberarkVaultQueryString
}

// GetMssqlUserDomainCyberarkVaultQueryStringOk returns a tuple with the MssqlUserDomainCyberarkVaultQueryString field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateMSSQLDsourceParameters) GetMssqlUserDomainCyberarkVaultQueryStringOk() (*string, bool) {
	if o == nil || IsNil(o.MssqlUserDomainCyberarkVaultQueryString) {
		return nil, false
	}
	return o.MssqlUserDomainCyberarkVaultQueryString, true
}

// HasMssqlUserDomainCyberarkVaultQueryString returns a boolean if a field has been set.
func (o *UpdateMSSQLDsourceParameters) HasMssqlUserDomainCyberarkVaultQueryString() bool {
	if o != nil && !IsNil(o.MssqlUserDomainCyberarkVaultQueryString) {
		return true
	}

	return false
}

// SetMssqlUserDomainCyberarkVaultQueryString gets a reference to the given string and assigns it to the MssqlUserDomainCyberarkVaultQueryString field.
func (o *UpdateMSSQLDsourceParameters) SetMssqlUserDomainCyberarkVaultQueryString(v string) {
	o.MssqlUserDomainCyberarkVaultQueryString = &v
}

// GetMssqlDatabaseUsername returns the MssqlDatabaseUsername field value if set, zero value otherwise.
func (o *UpdateMSSQLDsourceParameters) GetMssqlDatabaseUsername() string {
	if o == nil || IsNil(o.MssqlDatabaseUsername) {
		var ret string
		return ret
	}
	return *o.MssqlDatabaseUsername
}

// GetMssqlDatabaseUsernameOk returns a tuple with the MssqlDatabaseUsername field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateMSSQLDsourceParameters) GetMssqlDatabaseUsernameOk() (*string, bool) {
	if o == nil || IsNil(o.MssqlDatabaseUsername) {
		return nil, false
	}
	return o.MssqlDatabaseUsername, true
}

// HasMssqlDatabaseUsername returns a boolean if a field has been set.
func (o *UpdateMSSQLDsourceParameters) HasMssqlDatabaseUsername() bool {
	if o != nil && !IsNil(o.MssqlDatabaseUsername) {
		return true
	}

	return false
}

// SetMssqlDatabaseUsername gets a reference to the given string and assigns it to the MssqlDatabaseUsername field.
func (o *UpdateMSSQLDsourceParameters) SetMssqlDatabaseUsername(v string) {
	o.MssqlDatabaseUsername = &v
}

// GetMssqlDatabasePassword returns the MssqlDatabasePassword field value if set, zero value otherwise.
func (o *UpdateMSSQLDsourceParameters) GetMssqlDatabasePassword() string {
	if o == nil || IsNil(o.MssqlDatabasePassword) {
		var ret string
		return ret
	}
	return *o.MssqlDatabasePassword
}

// GetMssqlDatabasePasswordOk returns a tuple with the MssqlDatabasePassword field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateMSSQLDsourceParameters) GetMssqlDatabasePasswordOk() (*string, bool) {
	if o == nil || IsNil(o.MssqlDatabasePassword) {
		return nil, false
	}
	return o.MssqlDatabasePassword, true
}

// HasMssqlDatabasePassword returns a boolean if a field has been set.
func (o *UpdateMSSQLDsourceParameters) HasMssqlDatabasePassword() bool {
	if o != nil && !IsNil(o.MssqlDatabasePassword) {
		return true
	}

	return false
}

// SetMssqlDatabasePassword gets a reference to the given string and assigns it to the MssqlDatabasePassword field.
func (o *UpdateMSSQLDsourceParameters) SetMssqlDatabasePassword(v string) {
	o.MssqlDatabasePassword = &v
}

// GetDelphixManagedBackupCompressionEnabled returns the DelphixManagedBackupCompressionEnabled field value if set, zero value otherwise.
func (o *UpdateMSSQLDsourceParameters) GetDelphixManagedBackupCompressionEnabled() bool {
	if o == nil || IsNil(o.DelphixManagedBackupCompressionEnabled) {
		var ret bool
		return ret
	}
	return *o.DelphixManagedBackupCompressionEnabled
}

// GetDelphixManagedBackupCompressionEnabledOk returns a tuple with the DelphixManagedBackupCompressionEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateMSSQLDsourceParameters) GetDelphixManagedBackupCompressionEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.DelphixManagedBackupCompressionEnabled) {
		return nil, false
	}
	return o.DelphixManagedBackupCompressionEnabled, true
}

// HasDelphixManagedBackupCompressionEnabled returns a boolean if a field has been set.
func (o *UpdateMSSQLDsourceParameters) HasDelphixManagedBackupCompressionEnabled() bool {
	if o != nil && !IsNil(o.DelphixManagedBackupCompressionEnabled) {
		return true
	}

	return false
}

// SetDelphixManagedBackupCompressionEnabled gets a reference to the given bool and assigns it to the DelphixManagedBackupCompressionEnabled field.
func (o *UpdateMSSQLDsourceParameters) SetDelphixManagedBackupCompressionEnabled(v bool) {
	o.DelphixManagedBackupCompressionEnabled = &v
}

// GetDelphixManagedBackupPolicy returns the DelphixManagedBackupPolicy field value if set, zero value otherwise.
func (o *UpdateMSSQLDsourceParameters) GetDelphixManagedBackupPolicy() string {
	if o == nil || IsNil(o.DelphixManagedBackupPolicy) {
		var ret string
		return ret
	}
	return *o.DelphixManagedBackupPolicy
}

// GetDelphixManagedBackupPolicyOk returns a tuple with the DelphixManagedBackupPolicy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateMSSQLDsourceParameters) GetDelphixManagedBackupPolicyOk() (*string, bool) {
	if o == nil || IsNil(o.DelphixManagedBackupPolicy) {
		return nil, false
	}
	return o.DelphixManagedBackupPolicy, true
}

// HasDelphixManagedBackupPolicy returns a boolean if a field has been set.
func (o *UpdateMSSQLDsourceParameters) HasDelphixManagedBackupPolicy() bool {
	if o != nil && !IsNil(o.DelphixManagedBackupPolicy) {
		return true
	}

	return false
}

// SetDelphixManagedBackupPolicy gets a reference to the given string and assigns it to the DelphixManagedBackupPolicy field.
func (o *UpdateMSSQLDsourceParameters) SetDelphixManagedBackupPolicy(v string) {
	o.DelphixManagedBackupPolicy = &v
}

// GetExternalManagedValidateSyncMode returns the ExternalManagedValidateSyncMode field value if set, zero value otherwise.
func (o *UpdateMSSQLDsourceParameters) GetExternalManagedValidateSyncMode() string {
	if o == nil || IsNil(o.ExternalManagedValidateSyncMode) {
		var ret string
		return ret
	}
	return *o.ExternalManagedValidateSyncMode
}

// GetExternalManagedValidateSyncModeOk returns a tuple with the ExternalManagedValidateSyncMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateMSSQLDsourceParameters) GetExternalManagedValidateSyncModeOk() (*string, bool) {
	if o == nil || IsNil(o.ExternalManagedValidateSyncMode) {
		return nil, false
	}
	return o.ExternalManagedValidateSyncMode, true
}

// HasExternalManagedValidateSyncMode returns a boolean if a field has been set.
func (o *UpdateMSSQLDsourceParameters) HasExternalManagedValidateSyncMode() bool {
	if o != nil && !IsNil(o.ExternalManagedValidateSyncMode) {
		return true
	}

	return false
}

// SetExternalManagedValidateSyncMode gets a reference to the given string and assigns it to the ExternalManagedValidateSyncMode field.
func (o *UpdateMSSQLDsourceParameters) SetExternalManagedValidateSyncMode(v string) {
	o.ExternalManagedValidateSyncMode = &v
}

// GetExternalManagedSharedBackupLocations returns the ExternalManagedSharedBackupLocations field value if set, zero value otherwise.
func (o *UpdateMSSQLDsourceParameters) GetExternalManagedSharedBackupLocations() []string {
	if o == nil || IsNil(o.ExternalManagedSharedBackupLocations) {
		var ret []string
		return ret
	}
	return o.ExternalManagedSharedBackupLocations
}

// GetExternalManagedSharedBackupLocationsOk returns a tuple with the ExternalManagedSharedBackupLocations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateMSSQLDsourceParameters) GetExternalManagedSharedBackupLocationsOk() ([]string, bool) {
	if o == nil || IsNil(o.ExternalManagedSharedBackupLocations) {
		return nil, false
	}
	return o.ExternalManagedSharedBackupLocations, true
}

// HasExternalManagedSharedBackupLocations returns a boolean if a field has been set.
func (o *UpdateMSSQLDsourceParameters) HasExternalManagedSharedBackupLocations() bool {
	if o != nil && !IsNil(o.ExternalManagedSharedBackupLocations) {
		return true
	}

	return false
}

// SetExternalManagedSharedBackupLocations gets a reference to the given []string and assigns it to the ExternalManagedSharedBackupLocations field.
func (o *UpdateMSSQLDsourceParameters) SetExternalManagedSharedBackupLocations(v []string) {
	o.ExternalManagedSharedBackupLocations = v
}

// GetDisableNetbackupConfig returns the DisableNetbackupConfig field value if set, zero value otherwise.
func (o *UpdateMSSQLDsourceParameters) GetDisableNetbackupConfig() bool {
	if o == nil || IsNil(o.DisableNetbackupConfig) {
		var ret bool
		return ret
	}
	return *o.DisableNetbackupConfig
}

// GetDisableNetbackupConfigOk returns a tuple with the DisableNetbackupConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateMSSQLDsourceParameters) GetDisableNetbackupConfigOk() (*bool, bool) {
	if o == nil || IsNil(o.DisableNetbackupConfig) {
		return nil, false
	}
	return o.DisableNetbackupConfig, true
}

// HasDisableNetbackupConfig returns a boolean if a field has been set.
func (o *UpdateMSSQLDsourceParameters) HasDisableNetbackupConfig() bool {
	if o != nil && !IsNil(o.DisableNetbackupConfig) {
		return true
	}

	return false
}

// SetDisableNetbackupConfig gets a reference to the given bool and assigns it to the DisableNetbackupConfig field.
func (o *UpdateMSSQLDsourceParameters) SetDisableNetbackupConfig(v bool) {
	o.DisableNetbackupConfig = &v
}

// GetExternalNetbackupConfigMasterName returns the ExternalNetbackupConfigMasterName field value if set, zero value otherwise.
func (o *UpdateMSSQLDsourceParameters) GetExternalNetbackupConfigMasterName() string {
	if o == nil || IsNil(o.ExternalNetbackupConfigMasterName) {
		var ret string
		return ret
	}
	return *o.ExternalNetbackupConfigMasterName
}

// GetExternalNetbackupConfigMasterNameOk returns a tuple with the ExternalNetbackupConfigMasterName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateMSSQLDsourceParameters) GetExternalNetbackupConfigMasterNameOk() (*string, bool) {
	if o == nil || IsNil(o.ExternalNetbackupConfigMasterName) {
		return nil, false
	}
	return o.ExternalNetbackupConfigMasterName, true
}

// HasExternalNetbackupConfigMasterName returns a boolean if a field has been set.
func (o *UpdateMSSQLDsourceParameters) HasExternalNetbackupConfigMasterName() bool {
	if o != nil && !IsNil(o.ExternalNetbackupConfigMasterName) {
		return true
	}

	return false
}

// SetExternalNetbackupConfigMasterName gets a reference to the given string and assigns it to the ExternalNetbackupConfigMasterName field.
func (o *UpdateMSSQLDsourceParameters) SetExternalNetbackupConfigMasterName(v string) {
	o.ExternalNetbackupConfigMasterName = &v
}

// GetExternalNetbackupConfigSourceClientName returns the ExternalNetbackupConfigSourceClientName field value if set, zero value otherwise.
func (o *UpdateMSSQLDsourceParameters) GetExternalNetbackupConfigSourceClientName() string {
	if o == nil || IsNil(o.ExternalNetbackupConfigSourceClientName) {
		var ret string
		return ret
	}
	return *o.ExternalNetbackupConfigSourceClientName
}

// GetExternalNetbackupConfigSourceClientNameOk returns a tuple with the ExternalNetbackupConfigSourceClientName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateMSSQLDsourceParameters) GetExternalNetbackupConfigSourceClientNameOk() (*string, bool) {
	if o == nil || IsNil(o.ExternalNetbackupConfigSourceClientName) {
		return nil, false
	}
	return o.ExternalNetbackupConfigSourceClientName, true
}

// HasExternalNetbackupConfigSourceClientName returns a boolean if a field has been set.
func (o *UpdateMSSQLDsourceParameters) HasExternalNetbackupConfigSourceClientName() bool {
	if o != nil && !IsNil(o.ExternalNetbackupConfigSourceClientName) {
		return true
	}

	return false
}

// SetExternalNetbackupConfigSourceClientName gets a reference to the given string and assigns it to the ExternalNetbackupConfigSourceClientName field.
func (o *UpdateMSSQLDsourceParameters) SetExternalNetbackupConfigSourceClientName(v string) {
	o.ExternalNetbackupConfigSourceClientName = &v
}

// GetExternalNetbackupConfigParams returns the ExternalNetbackupConfigParams field value if set, zero value otherwise.
func (o *UpdateMSSQLDsourceParameters) GetExternalNetbackupConfigParams() map[string]interface{} {
	if o == nil || IsNil(o.ExternalNetbackupConfigParams) {
		var ret map[string]interface{}
		return ret
	}
	return o.ExternalNetbackupConfigParams
}

// GetExternalNetbackupConfigParamsOk returns a tuple with the ExternalNetbackupConfigParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateMSSQLDsourceParameters) GetExternalNetbackupConfigParamsOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.ExternalNetbackupConfigParams) {
		return map[string]interface{}{}, false
	}
	return o.ExternalNetbackupConfigParams, true
}

// HasExternalNetbackupConfigParams returns a boolean if a field has been set.
func (o *UpdateMSSQLDsourceParameters) HasExternalNetbackupConfigParams() bool {
	if o != nil && !IsNil(o.ExternalNetbackupConfigParams) {
		return true
	}

	return false
}

// SetExternalNetbackupConfigParams gets a reference to the given map[string]interface{} and assigns it to the ExternalNetbackupConfigParams field.
func (o *UpdateMSSQLDsourceParameters) SetExternalNetbackupConfigParams(v map[string]interface{}) {
	o.ExternalNetbackupConfigParams = v
}

// GetExternalNetbackupConfigTemplates returns the ExternalNetbackupConfigTemplates field value if set, zero value otherwise.
func (o *UpdateMSSQLDsourceParameters) GetExternalNetbackupConfigTemplates() string {
	if o == nil || IsNil(o.ExternalNetbackupConfigTemplates) {
		var ret string
		return ret
	}
	return *o.ExternalNetbackupConfigTemplates
}

// GetExternalNetbackupConfigTemplatesOk returns a tuple with the ExternalNetbackupConfigTemplates field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateMSSQLDsourceParameters) GetExternalNetbackupConfigTemplatesOk() (*string, bool) {
	if o == nil || IsNil(o.ExternalNetbackupConfigTemplates) {
		return nil, false
	}
	return o.ExternalNetbackupConfigTemplates, true
}

// HasExternalNetbackupConfigTemplates returns a boolean if a field has been set.
func (o *UpdateMSSQLDsourceParameters) HasExternalNetbackupConfigTemplates() bool {
	if o != nil && !IsNil(o.ExternalNetbackupConfigTemplates) {
		return true
	}

	return false
}

// SetExternalNetbackupConfigTemplates gets a reference to the given string and assigns it to the ExternalNetbackupConfigTemplates field.
func (o *UpdateMSSQLDsourceParameters) SetExternalNetbackupConfigTemplates(v string) {
	o.ExternalNetbackupConfigTemplates = &v
}

// GetDisableCommvaultConfig returns the DisableCommvaultConfig field value if set, zero value otherwise.
func (o *UpdateMSSQLDsourceParameters) GetDisableCommvaultConfig() bool {
	if o == nil || IsNil(o.DisableCommvaultConfig) {
		var ret bool
		return ret
	}
	return *o.DisableCommvaultConfig
}

// GetDisableCommvaultConfigOk returns a tuple with the DisableCommvaultConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateMSSQLDsourceParameters) GetDisableCommvaultConfigOk() (*bool, bool) {
	if o == nil || IsNil(o.DisableCommvaultConfig) {
		return nil, false
	}
	return o.DisableCommvaultConfig, true
}

// HasDisableCommvaultConfig returns a boolean if a field has been set.
func (o *UpdateMSSQLDsourceParameters) HasDisableCommvaultConfig() bool {
	if o != nil && !IsNil(o.DisableCommvaultConfig) {
		return true
	}

	return false
}

// SetDisableCommvaultConfig gets a reference to the given bool and assigns it to the DisableCommvaultConfig field.
func (o *UpdateMSSQLDsourceParameters) SetDisableCommvaultConfig(v bool) {
	o.DisableCommvaultConfig = &v
}

// GetExternalCommserveHostName returns the ExternalCommserveHostName field value if set, zero value otherwise.
func (o *UpdateMSSQLDsourceParameters) GetExternalCommserveHostName() string {
	if o == nil || IsNil(o.ExternalCommserveHostName) {
		var ret string
		return ret
	}
	return *o.ExternalCommserveHostName
}

// GetExternalCommserveHostNameOk returns a tuple with the ExternalCommserveHostName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateMSSQLDsourceParameters) GetExternalCommserveHostNameOk() (*string, bool) {
	if o == nil || IsNil(o.ExternalCommserveHostName) {
		return nil, false
	}
	return o.ExternalCommserveHostName, true
}

// HasExternalCommserveHostName returns a boolean if a field has been set.
func (o *UpdateMSSQLDsourceParameters) HasExternalCommserveHostName() bool {
	if o != nil && !IsNil(o.ExternalCommserveHostName) {
		return true
	}

	return false
}

// SetExternalCommserveHostName gets a reference to the given string and assigns it to the ExternalCommserveHostName field.
func (o *UpdateMSSQLDsourceParameters) SetExternalCommserveHostName(v string) {
	o.ExternalCommserveHostName = &v
}

// GetExternalCommvaultConfigSourceClientName returns the ExternalCommvaultConfigSourceClientName field value if set, zero value otherwise.
func (o *UpdateMSSQLDsourceParameters) GetExternalCommvaultConfigSourceClientName() string {
	if o == nil || IsNil(o.ExternalCommvaultConfigSourceClientName) {
		var ret string
		return ret
	}
	return *o.ExternalCommvaultConfigSourceClientName
}

// GetExternalCommvaultConfigSourceClientNameOk returns a tuple with the ExternalCommvaultConfigSourceClientName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateMSSQLDsourceParameters) GetExternalCommvaultConfigSourceClientNameOk() (*string, bool) {
	if o == nil || IsNil(o.ExternalCommvaultConfigSourceClientName) {
		return nil, false
	}
	return o.ExternalCommvaultConfigSourceClientName, true
}

// HasExternalCommvaultConfigSourceClientName returns a boolean if a field has been set.
func (o *UpdateMSSQLDsourceParameters) HasExternalCommvaultConfigSourceClientName() bool {
	if o != nil && !IsNil(o.ExternalCommvaultConfigSourceClientName) {
		return true
	}

	return false
}

// SetExternalCommvaultConfigSourceClientName gets a reference to the given string and assigns it to the ExternalCommvaultConfigSourceClientName field.
func (o *UpdateMSSQLDsourceParameters) SetExternalCommvaultConfigSourceClientName(v string) {
	o.ExternalCommvaultConfigSourceClientName = &v
}

// GetExternalCommvaultConfigStagingClientName returns the ExternalCommvaultConfigStagingClientName field value if set, zero value otherwise.
func (o *UpdateMSSQLDsourceParameters) GetExternalCommvaultConfigStagingClientName() string {
	if o == nil || IsNil(o.ExternalCommvaultConfigStagingClientName) {
		var ret string
		return ret
	}
	return *o.ExternalCommvaultConfigStagingClientName
}

// GetExternalCommvaultConfigStagingClientNameOk returns a tuple with the ExternalCommvaultConfigStagingClientName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateMSSQLDsourceParameters) GetExternalCommvaultConfigStagingClientNameOk() (*string, bool) {
	if o == nil || IsNil(o.ExternalCommvaultConfigStagingClientName) {
		return nil, false
	}
	return o.ExternalCommvaultConfigStagingClientName, true
}

// HasExternalCommvaultConfigStagingClientName returns a boolean if a field has been set.
func (o *UpdateMSSQLDsourceParameters) HasExternalCommvaultConfigStagingClientName() bool {
	if o != nil && !IsNil(o.ExternalCommvaultConfigStagingClientName) {
		return true
	}

	return false
}

// SetExternalCommvaultConfigStagingClientName gets a reference to the given string and assigns it to the ExternalCommvaultConfigStagingClientName field.
func (o *UpdateMSSQLDsourceParameters) SetExternalCommvaultConfigStagingClientName(v string) {
	o.ExternalCommvaultConfigStagingClientName = &v
}

// GetExternalCommvaultConfigParams returns the ExternalCommvaultConfigParams field value if set, zero value otherwise.
func (o *UpdateMSSQLDsourceParameters) GetExternalCommvaultConfigParams() map[string]interface{} {
	if o == nil || IsNil(o.ExternalCommvaultConfigParams) {
		var ret map[string]interface{}
		return ret
	}
	return o.ExternalCommvaultConfigParams
}

// GetExternalCommvaultConfigParamsOk returns a tuple with the ExternalCommvaultConfigParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateMSSQLDsourceParameters) GetExternalCommvaultConfigParamsOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.ExternalCommvaultConfigParams) {
		return map[string]interface{}{}, false
	}
	return o.ExternalCommvaultConfigParams, true
}

// HasExternalCommvaultConfigParams returns a boolean if a field has been set.
func (o *UpdateMSSQLDsourceParameters) HasExternalCommvaultConfigParams() bool {
	if o != nil && !IsNil(o.ExternalCommvaultConfigParams) {
		return true
	}

	return false
}

// SetExternalCommvaultConfigParams gets a reference to the given map[string]interface{} and assigns it to the ExternalCommvaultConfigParams field.
func (o *UpdateMSSQLDsourceParameters) SetExternalCommvaultConfigParams(v map[string]interface{}) {
	o.ExternalCommvaultConfigParams = v
}

// GetExternalCommvaultConfigTemplates returns the ExternalCommvaultConfigTemplates field value if set, zero value otherwise.
func (o *UpdateMSSQLDsourceParameters) GetExternalCommvaultConfigTemplates() string {
	if o == nil || IsNil(o.ExternalCommvaultConfigTemplates) {
		var ret string
		return ret
	}
	return *o.ExternalCommvaultConfigTemplates
}

// GetExternalCommvaultConfigTemplatesOk returns a tuple with the ExternalCommvaultConfigTemplates field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateMSSQLDsourceParameters) GetExternalCommvaultConfigTemplatesOk() (*string, bool) {
	if o == nil || IsNil(o.ExternalCommvaultConfigTemplates) {
		return nil, false
	}
	return o.ExternalCommvaultConfigTemplates, true
}

// HasExternalCommvaultConfigTemplates returns a boolean if a field has been set.
func (o *UpdateMSSQLDsourceParameters) HasExternalCommvaultConfigTemplates() bool {
	if o != nil && !IsNil(o.ExternalCommvaultConfigTemplates) {
		return true
	}

	return false
}

// SetExternalCommvaultConfigTemplates gets a reference to the given string and assigns it to the ExternalCommvaultConfigTemplates field.
func (o *UpdateMSSQLDsourceParameters) SetExternalCommvaultConfigTemplates(v string) {
	o.ExternalCommvaultConfigTemplates = &v
}

// GetHooks returns the Hooks field value if set, zero value otherwise.
func (o *UpdateMSSQLDsourceParameters) GetHooks() DSourceHooks {
	if o == nil || IsNil(o.Hooks) {
		var ret DSourceHooks
		return ret
	}
	return *o.Hooks
}

// GetHooksOk returns a tuple with the Hooks field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateMSSQLDsourceParameters) GetHooksOk() (*DSourceHooks, bool) {
	if o == nil || IsNil(o.Hooks) {
		return nil, false
	}
	return o.Hooks, true
}

// HasHooks returns a boolean if a field has been set.
func (o *UpdateMSSQLDsourceParameters) HasHooks() bool {
	if o != nil && !IsNil(o.Hooks) {
		return true
	}

	return false
}

// SetHooks gets a reference to the given DSourceHooks and assigns it to the Hooks field.
func (o *UpdateMSSQLDsourceParameters) SetHooks(v DSourceHooks) {
	o.Hooks = &v
}

// GetSyncPolicyId returns the SyncPolicyId field value if set, zero value otherwise.
func (o *UpdateMSSQLDsourceParameters) GetSyncPolicyId() string {
	if o == nil || IsNil(o.SyncPolicyId) {
		var ret string
		return ret
	}
	return *o.SyncPolicyId
}

// GetSyncPolicyIdOk returns a tuple with the SyncPolicyId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateMSSQLDsourceParameters) GetSyncPolicyIdOk() (*string, bool) {
	if o == nil || IsNil(o.SyncPolicyId) {
		return nil, false
	}
	return o.SyncPolicyId, true
}

// HasSyncPolicyId returns a boolean if a field has been set.
func (o *UpdateMSSQLDsourceParameters) HasSyncPolicyId() bool {
	if o != nil && !IsNil(o.SyncPolicyId) {
		return true
	}

	return false
}

// SetSyncPolicyId gets a reference to the given string and assigns it to the SyncPolicyId field.
func (o *UpdateMSSQLDsourceParameters) SetSyncPolicyId(v string) {
	o.SyncPolicyId = &v
}

// GetRetentionPolicyId returns the RetentionPolicyId field value if set, zero value otherwise.
func (o *UpdateMSSQLDsourceParameters) GetRetentionPolicyId() string {
	if o == nil || IsNil(o.RetentionPolicyId) {
		var ret string
		return ret
	}
	return *o.RetentionPolicyId
}

// GetRetentionPolicyIdOk returns a tuple with the RetentionPolicyId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateMSSQLDsourceParameters) GetRetentionPolicyIdOk() (*string, bool) {
	if o == nil || IsNil(o.RetentionPolicyId) {
		return nil, false
	}
	return o.RetentionPolicyId, true
}

// HasRetentionPolicyId returns a boolean if a field has been set.
func (o *UpdateMSSQLDsourceParameters) HasRetentionPolicyId() bool {
	if o != nil && !IsNil(o.RetentionPolicyId) {
		return true
	}

	return false
}

// SetRetentionPolicyId gets a reference to the given string and assigns it to the RetentionPolicyId field.
func (o *UpdateMSSQLDsourceParameters) SetRetentionPolicyId(v string) {
	o.RetentionPolicyId = &v
}

func (o UpdateMSSQLDsourceParameters) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateMSSQLDsourceParameters) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.LogsyncEnabled) {
		toSerialize["logsync_enabled"] = o.LogsyncEnabled
	}
	if !IsNil(o.EncryptionKey) {
		toSerialize["encryption_key"] = o.EncryptionKey
	}
	if !IsNil(o.PptRepository) {
		toSerialize["ppt_repository"] = o.PptRepository
	}
	if !IsNil(o.PptHostUser) {
		toSerialize["ppt_host_user"] = o.PptHostUser
	}
	if !IsNil(o.SyncStrategyManagedType) {
		toSerialize["sync_strategy_managed_type"] = o.SyncStrategyManagedType
	}
	if !IsNil(o.SourceHostUser) {
		toSerialize["source_host_user"] = o.SourceHostUser
	}
	if !IsNil(o.MssqlUserEnvironmentReference) {
		toSerialize["mssql_user_environment_reference"] = o.MssqlUserEnvironmentReference
	}
	if !IsNil(o.MssqlUserDomainUsername) {
		toSerialize["mssql_user_domain_username"] = o.MssqlUserDomainUsername
	}
	if !IsNil(o.MssqlUserDomainPassword) {
		toSerialize["mssql_user_domain_password"] = o.MssqlUserDomainPassword
	}
	if !IsNil(o.MssqlUserDomainVaultUsername) {
		toSerialize["mssql_user_domain_vault_username"] = o.MssqlUserDomainVaultUsername
	}
	if !IsNil(o.MssqlUserDomainVault) {
		toSerialize["mssql_user_domain_vault"] = o.MssqlUserDomainVault
	}
	if !IsNil(o.MssqlUserDomainHashicorpVaultEngine) {
		toSerialize["mssql_user_domain_hashicorp_vault_engine"] = o.MssqlUserDomainHashicorpVaultEngine
	}
	if !IsNil(o.MssqlUserDomainHashicorpVaultSecretPath) {
		toSerialize["mssql_user_domain_hashicorp_vault_secret_path"] = o.MssqlUserDomainHashicorpVaultSecretPath
	}
	if !IsNil(o.MssqlUserDomainHashicorpVaultUsernameKey) {
		toSerialize["mssql_user_domain_hashicorp_vault_username_key"] = o.MssqlUserDomainHashicorpVaultUsernameKey
	}
	if !IsNil(o.MssqlUserDomainHashicorpVaultSecretKey) {
		toSerialize["mssql_user_domain_hashicorp_vault_secret_key"] = o.MssqlUserDomainHashicorpVaultSecretKey
	}
	if !IsNil(o.MssqlUserDomainAzureVaultName) {
		toSerialize["mssql_user_domain_azure_vault_name"] = o.MssqlUserDomainAzureVaultName
	}
	if !IsNil(o.MssqlUserDomainAzureVaultUsernameKey) {
		toSerialize["mssql_user_domain_azure_vault_username_key"] = o.MssqlUserDomainAzureVaultUsernameKey
	}
	if !IsNil(o.MssqlUserDomainAzureVaultSecretKey) {
		toSerialize["mssql_user_domain_azure_vault_secret_key"] = o.MssqlUserDomainAzureVaultSecretKey
	}
	if !IsNil(o.MssqlUserDomainCyberarkVaultQueryString) {
		toSerialize["mssql_user_domain_cyberark_vault_query_string"] = o.MssqlUserDomainCyberarkVaultQueryString
	}
	if !IsNil(o.MssqlDatabaseUsername) {
		toSerialize["mssql_database_username"] = o.MssqlDatabaseUsername
	}
	if !IsNil(o.MssqlDatabasePassword) {
		toSerialize["mssql_database_password"] = o.MssqlDatabasePassword
	}
	if !IsNil(o.DelphixManagedBackupCompressionEnabled) {
		toSerialize["delphix_managed_backup_compression_enabled"] = o.DelphixManagedBackupCompressionEnabled
	}
	if !IsNil(o.DelphixManagedBackupPolicy) {
		toSerialize["delphix_managed_backup_policy"] = o.DelphixManagedBackupPolicy
	}
	if !IsNil(o.ExternalManagedValidateSyncMode) {
		toSerialize["external_managed_validate_sync_mode"] = o.ExternalManagedValidateSyncMode
	}
	if !IsNil(o.ExternalManagedSharedBackupLocations) {
		toSerialize["external_managed_shared_backup_locations"] = o.ExternalManagedSharedBackupLocations
	}
	if !IsNil(o.DisableNetbackupConfig) {
		toSerialize["disable_netbackup_config"] = o.DisableNetbackupConfig
	}
	if !IsNil(o.ExternalNetbackupConfigMasterName) {
		toSerialize["external_netbackup_config_master_name"] = o.ExternalNetbackupConfigMasterName
	}
	if !IsNil(o.ExternalNetbackupConfigSourceClientName) {
		toSerialize["external_netbackup_config_source_client_name"] = o.ExternalNetbackupConfigSourceClientName
	}
	if !IsNil(o.ExternalNetbackupConfigParams) {
		toSerialize["external_netbackup_config_params"] = o.ExternalNetbackupConfigParams
	}
	if !IsNil(o.ExternalNetbackupConfigTemplates) {
		toSerialize["external_netbackup_config_templates"] = o.ExternalNetbackupConfigTemplates
	}
	if !IsNil(o.DisableCommvaultConfig) {
		toSerialize["disable_commvault_config"] = o.DisableCommvaultConfig
	}
	if !IsNil(o.ExternalCommserveHostName) {
		toSerialize["external_commserve_host_name"] = o.ExternalCommserveHostName
	}
	if !IsNil(o.ExternalCommvaultConfigSourceClientName) {
		toSerialize["external_commvault_config_source_client_name"] = o.ExternalCommvaultConfigSourceClientName
	}
	if !IsNil(o.ExternalCommvaultConfigStagingClientName) {
		toSerialize["external_commvault_config_staging_client_name"] = o.ExternalCommvaultConfigStagingClientName
	}
	if !IsNil(o.ExternalCommvaultConfigParams) {
		toSerialize["external_commvault_config_params"] = o.ExternalCommvaultConfigParams
	}
	if !IsNil(o.ExternalCommvaultConfigTemplates) {
		toSerialize["external_commvault_config_templates"] = o.ExternalCommvaultConfigTemplates
	}
	if !IsNil(o.Hooks) {
		toSerialize["hooks"] = o.Hooks
	}
	if !IsNil(o.SyncPolicyId) {
		toSerialize["sync_policy_id"] = o.SyncPolicyId
	}
	if !IsNil(o.RetentionPolicyId) {
		toSerialize["retention_policy_id"] = o.RetentionPolicyId
	}
	return toSerialize, nil
}

type NullableUpdateMSSQLDsourceParameters struct {
	value *UpdateMSSQLDsourceParameters
	isSet bool
}

func (v NullableUpdateMSSQLDsourceParameters) Get() *UpdateMSSQLDsourceParameters {
	return v.value
}

func (v *NullableUpdateMSSQLDsourceParameters) Set(val *UpdateMSSQLDsourceParameters) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateMSSQLDsourceParameters) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateMSSQLDsourceParameters) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateMSSQLDsourceParameters(val *UpdateMSSQLDsourceParameters) *NullableUpdateMSSQLDsourceParameters {
	return &NullableUpdateMSSQLDsourceParameters{value: val, isSet: true}
}

func (v NullableUpdateMSSQLDsourceParameters) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateMSSQLDsourceParameters) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


