/*
Delphix DCT API

Delphix DCT API

API version: 3.18.0
Contact: support@delphix.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package delphix_dct_api

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the VDBGroupRefreshBySnapshot type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VDBGroupRefreshBySnapshot{}

// VDBGroupRefreshBySnapshot Parameters to refresh a VDB Group by snapshot.
type VDBGroupRefreshBySnapshot struct {
	// ID of the VDB present in the VDB Group.
	VdbId string `json:"vdb_id"`
	// ID of the snapshot to refresh from.
	SnapshotId string `json:"snapshot_id"`
}

type _VDBGroupRefreshBySnapshot VDBGroupRefreshBySnapshot

// NewVDBGroupRefreshBySnapshot instantiates a new VDBGroupRefreshBySnapshot object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVDBGroupRefreshBySnapshot(vdbId string, snapshotId string) *VDBGroupRefreshBySnapshot {
	this := VDBGroupRefreshBySnapshot{}
	this.VdbId = vdbId
	this.SnapshotId = snapshotId
	return &this
}

// NewVDBGroupRefreshBySnapshotWithDefaults instantiates a new VDBGroupRefreshBySnapshot object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVDBGroupRefreshBySnapshotWithDefaults() *VDBGroupRefreshBySnapshot {
	this := VDBGroupRefreshBySnapshot{}
	return &this
}

// GetVdbId returns the VdbId field value
func (o *VDBGroupRefreshBySnapshot) GetVdbId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.VdbId
}

// GetVdbIdOk returns a tuple with the VdbId field value
// and a boolean to check if the value has been set.
func (o *VDBGroupRefreshBySnapshot) GetVdbIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.VdbId, true
}

// SetVdbId sets field value
func (o *VDBGroupRefreshBySnapshot) SetVdbId(v string) {
	o.VdbId = v
}

// GetSnapshotId returns the SnapshotId field value
func (o *VDBGroupRefreshBySnapshot) GetSnapshotId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SnapshotId
}

// GetSnapshotIdOk returns a tuple with the SnapshotId field value
// and a boolean to check if the value has been set.
func (o *VDBGroupRefreshBySnapshot) GetSnapshotIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SnapshotId, true
}

// SetSnapshotId sets field value
func (o *VDBGroupRefreshBySnapshot) SetSnapshotId(v string) {
	o.SnapshotId = v
}

func (o VDBGroupRefreshBySnapshot) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VDBGroupRefreshBySnapshot) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["vdb_id"] = o.VdbId
	toSerialize["snapshot_id"] = o.SnapshotId
	return toSerialize, nil
}

func (o *VDBGroupRefreshBySnapshot) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"vdb_id",
		"snapshot_id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varVDBGroupRefreshBySnapshot := _VDBGroupRefreshBySnapshot{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varVDBGroupRefreshBySnapshot)

	if err != nil {
		return err
	}

	*o = VDBGroupRefreshBySnapshot(varVDBGroupRefreshBySnapshot)

	return err
}

type NullableVDBGroupRefreshBySnapshot struct {
	value *VDBGroupRefreshBySnapshot
	isSet bool
}

func (v NullableVDBGroupRefreshBySnapshot) Get() *VDBGroupRefreshBySnapshot {
	return v.value
}

func (v *NullableVDBGroupRefreshBySnapshot) Set(val *VDBGroupRefreshBySnapshot) {
	v.value = val
	v.isSet = true
}

func (v NullableVDBGroupRefreshBySnapshot) IsSet() bool {
	return v.isSet
}

func (v *NullableVDBGroupRefreshBySnapshot) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVDBGroupRefreshBySnapshot(val *VDBGroupRefreshBySnapshot) *NullableVDBGroupRefreshBySnapshot {
	return &NullableVDBGroupRefreshBySnapshot{value: val, isSet: true}
}

func (v NullableVDBGroupRefreshBySnapshot) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVDBGroupRefreshBySnapshot) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


