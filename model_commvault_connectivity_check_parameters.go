/*
Delphix DCT API

Delphix DCT API

API version: 3.18.0
Contact: support@delphix.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package delphix_dct_api

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CommvaultConnectivityCheckParameters type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CommvaultConnectivityCheckParameters{}

// CommvaultConnectivityCheckParameters Parameters to Tests CommServe host and staging client connectivity on an environment.
type CommvaultConnectivityCheckParameters struct {
	// Id of the target environment to test Commvault connectivity from.
	EnvironmentId string `json:"environment_id"`
	// Id of the environment user.
	EnvironmentUserId string `json:"environment_user_id"`
	// The hostname of the CommServe server to connect to.
	CommserveHostName string `json:"commserve_host_name"`
	// The name of the Source Client in CommServe.
	SourceClientName string `json:"source_client_name"`
	// The name of the Staging Client in CommServe.
	StagingClientName string `json:"staging_client_name"`
}

type _CommvaultConnectivityCheckParameters CommvaultConnectivityCheckParameters

// NewCommvaultConnectivityCheckParameters instantiates a new CommvaultConnectivityCheckParameters object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCommvaultConnectivityCheckParameters(environmentId string, environmentUserId string, commserveHostName string, sourceClientName string, stagingClientName string) *CommvaultConnectivityCheckParameters {
	this := CommvaultConnectivityCheckParameters{}
	this.EnvironmentId = environmentId
	this.EnvironmentUserId = environmentUserId
	this.CommserveHostName = commserveHostName
	this.SourceClientName = sourceClientName
	this.StagingClientName = stagingClientName
	return &this
}

// NewCommvaultConnectivityCheckParametersWithDefaults instantiates a new CommvaultConnectivityCheckParameters object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCommvaultConnectivityCheckParametersWithDefaults() *CommvaultConnectivityCheckParameters {
	this := CommvaultConnectivityCheckParameters{}
	return &this
}

// GetEnvironmentId returns the EnvironmentId field value
func (o *CommvaultConnectivityCheckParameters) GetEnvironmentId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EnvironmentId
}

// GetEnvironmentIdOk returns a tuple with the EnvironmentId field value
// and a boolean to check if the value has been set.
func (o *CommvaultConnectivityCheckParameters) GetEnvironmentIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EnvironmentId, true
}

// SetEnvironmentId sets field value
func (o *CommvaultConnectivityCheckParameters) SetEnvironmentId(v string) {
	o.EnvironmentId = v
}

// GetEnvironmentUserId returns the EnvironmentUserId field value
func (o *CommvaultConnectivityCheckParameters) GetEnvironmentUserId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EnvironmentUserId
}

// GetEnvironmentUserIdOk returns a tuple with the EnvironmentUserId field value
// and a boolean to check if the value has been set.
func (o *CommvaultConnectivityCheckParameters) GetEnvironmentUserIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EnvironmentUserId, true
}

// SetEnvironmentUserId sets field value
func (o *CommvaultConnectivityCheckParameters) SetEnvironmentUserId(v string) {
	o.EnvironmentUserId = v
}

// GetCommserveHostName returns the CommserveHostName field value
func (o *CommvaultConnectivityCheckParameters) GetCommserveHostName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CommserveHostName
}

// GetCommserveHostNameOk returns a tuple with the CommserveHostName field value
// and a boolean to check if the value has been set.
func (o *CommvaultConnectivityCheckParameters) GetCommserveHostNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CommserveHostName, true
}

// SetCommserveHostName sets field value
func (o *CommvaultConnectivityCheckParameters) SetCommserveHostName(v string) {
	o.CommserveHostName = v
}

// GetSourceClientName returns the SourceClientName field value
func (o *CommvaultConnectivityCheckParameters) GetSourceClientName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SourceClientName
}

// GetSourceClientNameOk returns a tuple with the SourceClientName field value
// and a boolean to check if the value has been set.
func (o *CommvaultConnectivityCheckParameters) GetSourceClientNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SourceClientName, true
}

// SetSourceClientName sets field value
func (o *CommvaultConnectivityCheckParameters) SetSourceClientName(v string) {
	o.SourceClientName = v
}

// GetStagingClientName returns the StagingClientName field value
func (o *CommvaultConnectivityCheckParameters) GetStagingClientName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.StagingClientName
}

// GetStagingClientNameOk returns a tuple with the StagingClientName field value
// and a boolean to check if the value has been set.
func (o *CommvaultConnectivityCheckParameters) GetStagingClientNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.StagingClientName, true
}

// SetStagingClientName sets field value
func (o *CommvaultConnectivityCheckParameters) SetStagingClientName(v string) {
	o.StagingClientName = v
}

func (o CommvaultConnectivityCheckParameters) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CommvaultConnectivityCheckParameters) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["environment_id"] = o.EnvironmentId
	toSerialize["environment_user_id"] = o.EnvironmentUserId
	toSerialize["commserve_host_name"] = o.CommserveHostName
	toSerialize["source_client_name"] = o.SourceClientName
	toSerialize["staging_client_name"] = o.StagingClientName
	return toSerialize, nil
}

func (o *CommvaultConnectivityCheckParameters) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"environment_id",
		"environment_user_id",
		"commserve_host_name",
		"source_client_name",
		"staging_client_name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCommvaultConnectivityCheckParameters := _CommvaultConnectivityCheckParameters{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCommvaultConnectivityCheckParameters)

	if err != nil {
		return err
	}

	*o = CommvaultConnectivityCheckParameters(varCommvaultConnectivityCheckParameters)

	return err
}

type NullableCommvaultConnectivityCheckParameters struct {
	value *CommvaultConnectivityCheckParameters
	isSet bool
}

func (v NullableCommvaultConnectivityCheckParameters) Get() *CommvaultConnectivityCheckParameters {
	return v.value
}

func (v *NullableCommvaultConnectivityCheckParameters) Set(val *CommvaultConnectivityCheckParameters) {
	v.value = val
	v.isSet = true
}

func (v NullableCommvaultConnectivityCheckParameters) IsSet() bool {
	return v.isSet
}

func (v *NullableCommvaultConnectivityCheckParameters) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCommvaultConnectivityCheckParameters(val *CommvaultConnectivityCheckParameters) *NullableCommvaultConnectivityCheckParameters {
	return &NullableCommvaultConnectivityCheckParameters{value: val, isSet: true}
}

func (v NullableCommvaultConnectivityCheckParameters) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCommvaultConnectivityCheckParameters) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


