/*
Delphix DCT API

Delphix DCT API

API version: 3.17.0
Contact: support@delphix.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package delphix_dct_api

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the VDBDisableParametersMapping type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VDBDisableParametersMapping{}

// VDBDisableParametersMapping Parameters to disable a VDB.
type VDBDisableParametersMapping struct {
	// Whether to attempt a cleanup of the VDB before the disable.
	AttemptCleanup *bool `json:"attempt_cleanup,omitempty"`
	// ID of the VDB to disable.
	VdbId string `json:"vdb_id"`
}

type _VDBDisableParametersMapping VDBDisableParametersMapping

// NewVDBDisableParametersMapping instantiates a new VDBDisableParametersMapping object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVDBDisableParametersMapping(vdbId string) *VDBDisableParametersMapping {
	this := VDBDisableParametersMapping{}
	var attemptCleanup bool = true
	this.AttemptCleanup = &attemptCleanup
	this.VdbId = vdbId
	return &this
}

// NewVDBDisableParametersMappingWithDefaults instantiates a new VDBDisableParametersMapping object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVDBDisableParametersMappingWithDefaults() *VDBDisableParametersMapping {
	this := VDBDisableParametersMapping{}
	var attemptCleanup bool = true
	this.AttemptCleanup = &attemptCleanup
	return &this
}

// GetAttemptCleanup returns the AttemptCleanup field value if set, zero value otherwise.
func (o *VDBDisableParametersMapping) GetAttemptCleanup() bool {
	if o == nil || IsNil(o.AttemptCleanup) {
		var ret bool
		return ret
	}
	return *o.AttemptCleanup
}

// GetAttemptCleanupOk returns a tuple with the AttemptCleanup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VDBDisableParametersMapping) GetAttemptCleanupOk() (*bool, bool) {
	if o == nil || IsNil(o.AttemptCleanup) {
		return nil, false
	}
	return o.AttemptCleanup, true
}

// HasAttemptCleanup returns a boolean if a field has been set.
func (o *VDBDisableParametersMapping) HasAttemptCleanup() bool {
	if o != nil && !IsNil(o.AttemptCleanup) {
		return true
	}

	return false
}

// SetAttemptCleanup gets a reference to the given bool and assigns it to the AttemptCleanup field.
func (o *VDBDisableParametersMapping) SetAttemptCleanup(v bool) {
	o.AttemptCleanup = &v
}

// GetVdbId returns the VdbId field value
func (o *VDBDisableParametersMapping) GetVdbId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.VdbId
}

// GetVdbIdOk returns a tuple with the VdbId field value
// and a boolean to check if the value has been set.
func (o *VDBDisableParametersMapping) GetVdbIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.VdbId, true
}

// SetVdbId sets field value
func (o *VDBDisableParametersMapping) SetVdbId(v string) {
	o.VdbId = v
}

func (o VDBDisableParametersMapping) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VDBDisableParametersMapping) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AttemptCleanup) {
		toSerialize["attempt_cleanup"] = o.AttemptCleanup
	}
	toSerialize["vdb_id"] = o.VdbId
	return toSerialize, nil
}

func (o *VDBDisableParametersMapping) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"vdb_id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varVDBDisableParametersMapping := _VDBDisableParametersMapping{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varVDBDisableParametersMapping)

	if err != nil {
		return err
	}

	*o = VDBDisableParametersMapping(varVDBDisableParametersMapping)

	return err
}

type NullableVDBDisableParametersMapping struct {
	value *VDBDisableParametersMapping
	isSet bool
}

func (v NullableVDBDisableParametersMapping) Get() *VDBDisableParametersMapping {
	return v.value
}

func (v *NullableVDBDisableParametersMapping) Set(val *VDBDisableParametersMapping) {
	v.value = val
	v.isSet = true
}

func (v NullableVDBDisableParametersMapping) IsSet() bool {
	return v.isSet
}

func (v *NullableVDBDisableParametersMapping) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVDBDisableParametersMapping(val *VDBDisableParametersMapping) *NullableVDBDisableParametersMapping {
	return &NullableVDBDisableParametersMapping{value: val, isSet: true}
}

func (v NullableVDBDisableParametersMapping) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVDBDisableParametersMapping) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


